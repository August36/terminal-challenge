[{"id":253412,"date":"2017-04-07T07:33:30","date_gmt":"2017-04-07T14:33:30","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253412"},"modified":"2017-04-07T07:33:30","modified_gmt":"2017-04-07T14:33:30","slug":"pong-svg-js","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/pong-svg-js\/","title":{"rendered":"Pong with SVG.js"},"content":{"rendered":"<p>Everybody loves the vintage game Pong, right? We sure do.  What's more fun? Building it yourself!<\/p>\n<p>That's why we decided to create one with <a href=\"http:\/\/svgdotjs.github.io\/\">SVG.js<\/a> - to highlight some aspects of our library. It might seem like a complex idea for a small tutorial, but as you'll see, it's simpler than it sounds. Let's dive into it!<\/p>\n<p><!--more--><\/p>\n<p>Here's the finished product:<\/p>\n<p data-height=\"394\" data-theme-id=\"1\" data-slug-hash=\"WpzNVE\" data-default-tab=\"result\" data-user=\"wout\" data-embed-version=\"2\" data-pen-title=\"Fully functional Pong game with effects\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/wout\/pen\/WpzNVE\/\">Fully functional Pong game with effects<\/a> by Wout Fierens (<a href=\"http:\/\/codepen.io\/wout\">@wout<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3>Getting started<\/h3>\n<p>SVG.js is available through <a href=\"https:\/\/github.com\/svgdotjs\/svg.js\">Github<\/a>, <a href=\"https:\/\/www.npmjs.com\/package\/svgjs\">npm<\/a>, <a href=\"https:\/\/bower.io\/search\/?q=svg.js\">bower<\/a> or <a href=\"https:\/\/cdnjs.com\/libraries\/svg.js\">CDN.js<\/a>. There are plenty of options for getting your hands on SVG.js, so use whatever you are most comfortable with.<\/p>\n<p>Start out by creating a new HTML document and include the library. Create an empty <code>&lt;div&gt;<\/code> to serve as a wrapper for the SVG document, and give it an <code>id<\/code> attribute. Something like <code>pong<\/code> should be suitable for this project:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;div id=\"pong\"&gt;&lt;\/div&gt;<\/code><\/pre>\n<p>Next, initialize the SVG.js instance by referencing the wrapper. At this point, it's also a good idea to define a <code>width<\/code> and <code>height<\/code> for the game which makes it easier to modify them later on.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">\/\/ define width and height\r\nvar width = 450, height = 300\r\n\r\n\/\/ create SVG document and set its size\r\nvar draw = SVG('pong').size(width, height)<\/code><\/pre>\n<p>Now you're ready to start building the game.<\/p>\n<h3>Drawing Game Elements<\/h3>\n<h4>The Background<\/h4>\n<p>The background should cover the whole document, so we're using a <code>&lt;rect&gt;<\/code> and give it a neutral grayish color. First, we'll draw the left player in green. Then, we'll draw the right one by cloning the left one and coloring it pink.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">\/\/ draw background\r\nvar background = draw.rect(width, height).fill('#E3E8E6')<\/code><\/pre>\n<p>We'll also need a vertical, dashed line in the middle to distinguish the player fields.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">\/\/ draw line\r\nvar line = draw.line(width\/2, 0, width\/2, height)\r\nline.stroke({ width: 5, color: '#fff', dasharray: '5,5' })<\/code><\/pre>\n<p data-height=\"380\" data-theme-id=\"1\" data-slug-hash=\"YZOray\" data-default-tab=\"result\" data-user=\"wout\" data-embed-version=\"2\" data-pen-title=\"Pong Background\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/wout\/pen\/YZOray\/\">Pong Background<\/a> by Wout Fierens (<a href=\"http:\/\/codepen.io\/wout\">@wout<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h4>Paddles and the Ball<\/h4>\n<p>Pong wouldn't be Pong without paddles and a ball. First, we'll draw the left player in green. Then, we'll draw the right one by cloning the left one and coloring it pink.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var paddleWidth = 20, paddleHeight = 100\r\n\r\n\/\/ create and position left paddle\r\nvar paddleLeft = draw.rect(paddleWidth)\r\npaddleLeft.x(0).cy(height\/2).fill('#00ff99')\r\n\r\n\/\/ create and position right paddle\r\nvar paddleRight = paddleLeft.clone()\r\npaddleRight.x(width-paddleWidth).fill('#ff0066')<\/code><\/pre>\n<p>For the ball we're going to use a circle with a diameter of <code>20<\/code> and place it in the center of the court:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">\/\/ define ball size\r\nvar ballSize = 20\r\n\r\n\/\/ create ball\r\nvar ball = draw.circle(ballSize)\r\nball.center(width\/2, height\/2).fill('#7f7f7f')<\/code><\/pre>\n<p data-height=\"380\" data-theme-id=\"1\" data-slug-hash=\"bqxovr\" data-default-tab=\"result\" data-user=\"wout\" data-embed-version=\"2\" data-pen-title=\"Pong Paddels and Ball\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/wout\/pen\/bqxovr\/\">Pong Paddels and Ball<\/a> by Wout Fierens (<a href=\"http:\/\/codepen.io\/wout\">@wout<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h4>Score board<\/h4>\n<p>Finally, we will need a scoreboard which we will add at the top of the court.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">\/\/ define initial player score\r\nvar playerLeft = playerRight = 0\r\n\r\n\/\/ create text for the score, set font properties\r\nvar scoreLeft = draw.text(playerLeft+'').font({\r\n  size: 32,\r\n  family: 'Menlo, sans-serif',\r\n  anchor: 'end',\r\n  fill: '#fff'\r\n}).move(width\/2-10, 10)\r\n\r\n\/\/ cloning rocks!\r\nvar scoreRight = scoreLeft.clone()\r\n  .text(playerRight+'')\r\n  .font('anchor', 'start')\r\n  .x(width\/2+10)<\/code><\/pre>\n<p>That's all! Now we have all game elements, let's move on to game logic. <\/p>\n<p data-height=\"380\" data-theme-id=\"1\" data-slug-hash=\"oZPGMg\" data-default-tab=\"result\" data-user=\"wout\" data-embed-version=\"2\" data-pen-title=\"Pong Scoreboard\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/wout\/pen\/oZPGMg\/\">Pong Scoreboard<\/a> by Wout Fierens (<a href=\"http:\/\/codepen.io\/wout\">@wout<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3>Game logic<\/h3>\n<p>We'll start out by writing an update function which will update the state of our game and game elements.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">\/\/ random velocity for the ball at start\r\nvar vx = Math.random() * 500 - 250\r\n  , vy = Math.random() * 500 - 250\r\n\r\n\/\/ update is called on every animation step\r\nfunction update(dt) {\r\n  \/\/ move the ball by its velocity\r\n  ball.dmove(vx*dt, vy*dt)\r\n\r\n  \/\/ get position of ball\r\n  var cx = ball.cx()\r\n    , cy = ball.cy()\r\n\r\n  \/\/ check if we hit top\/bottom borders\r\n  if ((vy &lt; 0 &amp;&amp; cy &lt;= 0) || (vy &gt; 0 &amp;&amp; cy &gt;= height)) {\r\n    vy = -vy\r\n  }\r\n\r\n  \/\/ check if we hit left\/right borders\r\n  if ((vx &lt; 0 &amp;&amp; cx &lt;= 0) || (vx &gt; 0 &amp;&amp; cx &gt;= width)) {\r\n    vx = -vx\r\n  }\r\n}<\/code><\/pre>\n<p>When we run this, nothing will happen, because we didn't call the <code>update<\/code> function yet. This will be done using JavaScript's native <code>requestAnimationFrame<\/code> feature, which will allow us to do smooth animations. To make this work, a handler is registered to periodically call our <code>update<\/code> function:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var lastTime, animFrame;\r\n\r\nfunction callback(ms) {\r\n  \/\/ we get passed a timestamp in milliseconds\r\n  \/\/ we use it to determine how much time has passed since the last call\r\n\r\n  if (lastTime) {\r\n    update((ms-lastTime)\/1000) \/\/ call update and pass delta time in seconds\r\n  }\r\n\r\n  lastTime = ms\r\n  animFrame = requestAnimationFrame(callback)\r\n}\r\n\r\ncallback()<\/code><\/pre>\n<p>Yay! The ball is jumping around! But, our paddles are still pretty useless at the moment. So, let's do something about that and insert paddle collision detection. We'll only need it on the x-axis:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var paddleLeftY = paddleLeft.y()\r\n  , paddleRightY = paddleRight.y()\r\n\r\n\/\/ check if we hit the paddle\r\nif ((vx &lt; 0 &amp;&amp; cx &lt;= paddleWidth &amp;&amp; cy &gt; paddleLeftY &amp;&amp; cy &lt; paddleLeftY + paddleHeight) ||\r\n   (vx &gt; 0 &amp;&amp; cx &gt;= width - paddleWidth &amp;&amp; cy &gt; paddleRightY &amp;&amp; cy &lt; paddleRightY + paddleHeight)) {\r\n  \/\/ depending on where the ball hit we adjust y velocity\r\n  \/\/ for more realistic control we would need a bit more math here\r\n  \/\/ just keep it simple\r\n  vy = (cy - ((vx &lt; 0 ? paddleLeftY : paddleRightY) + paddleHeight\/2)) * 7 \/\/ magic factor\r\n\r\n  \/\/ make the ball faster on hit\r\n  vx = -vx * 1.05\r\n} else ...<\/code><\/pre>\n<p>Better, now the ball is aware of the paddles. But a few other things are still missing:<\/p>\n<ul>\n<li>the score is not updating when the border is hit<\/li>\n<li>paddles are not moving<\/li>\n<li>the ball should reset when a point was scored<\/li>\n<\/ul>\n<p>Let's work through this list from top to bottom.<\/p>\n<p data-height=\"380\" data-theme-id=\"1\" data-slug-hash=\"ZeMaqG\" data-default-tab=\"result\" data-user=\"wout\" data-embed-version=\"2\" data-pen-title=\"Pong jumping ball\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/wout\/pen\/ZeMaqG\/\">Pong jumping ball<\/a> by Wout Fierens (<a href=\"http:\/\/codepen.io\/wout\">@wout<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h4>Update the score<\/h4>\n<p>To update our score, we need to hook into collision detection to the left or right wall:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">\/\/ check if we hit left\/right borders\r\nif ((vx &lt; 0 &amp;&amp; cx &lt;= 0) || (vx &gt; 0 &amp;&amp; cx &gt;= width)) {\r\n  \/\/ when x-velocity is negative, its a point for player 2, else player 1\r\n  if (vx &lt; 0) { ++playerRight }\r\n  else { ++playerLeft }\r\n\r\n  vx = -vx\r\n\r\n  scoreLeft.text(playerLeft + '')\r\n  scoreRight.text(playerRight + '')\r\n}<\/code><\/pre>\n<p data-height=\"380\" data-theme-id=\"1\" data-slug-hash=\"dvqJYm\" data-default-tab=\"result\" data-user=\"wout\" data-embed-version=\"2\" data-pen-title=\"Pong jumping ball\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/wout\/pen\/dvqJYm\/\">Pong jumping ball<\/a> by Wout Fierens (<a href=\"http:\/\/codepen.io\/wout\">@wout<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h4>Moving the user-controlled paddle<\/h4>\n<p>The right paddle will be controlled by the keyboard, and that's a piece of cake with SVG.js:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">\/\/ define paddle direction and speed\r\nvar paddleDirection = 0  \/\/ -1 is up, 1 is down, 0 is still\r\n  , paddleSpeed = 5      \/\/ pixels per frame refresh\r\n\r\n\/\/ detect if up and down arrows are prssed to change direction\r\nSVG.on(document, 'keydown', function(e) {\r\n  paddleDirection = e.keyCode == 40 ? 1 : e.keyCode == 38 ? -1 : 0\r\n});\r\n\r\n\/\/ make sure the direction is reset when the key is released\r\nSVG.on(document, 'keyup', function(e) {\r\n  paddleDirection = 0\r\n})<\/code><\/pre>\n<p>So what are we doing here? First, we call <code>SVG.on<\/code>, which lets us bind an event listener to any node (not only SVG.js objects). We'll listen to the <code>keydown<\/code> event to detect if either the <code>up<\/code> (38) or the <code>down<\/code> (40) key is pressed. If that's the case, the <code>paddleDirection<\/code> will be set to <code>-1<\/code> or <code>1<\/code> respectively. If another key is pressed, the <code>paddleDirection<\/code> will be <code>0<\/code>. Lastly, when any key is released, the <code>paddleDirection<\/code> will be reset to <code>0<\/code>.<\/p>\n<p>The <code>update<\/code> function will do the actual work of moving the paddle, based on the user input. So we'll add the following code to the <code>update<\/code> function:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">\/\/ move player paddle\r\nvar playerPaddleY = paddleRight.y();\r\n\r\nif (playerPaddleY &lt;= 0 &amp;&amp; paddleDirection == -1) {\r\n  paddleRight.cy(paddleHeight \/ 2)\r\n} else if (playerPaddleY &gt;= height-paddleHeight &amp;&amp; paddleDirection == 1) {\r\n  paddleRight.y(height - paddleHeight)\r\n} else {\r\n  paddleRight.dy(paddleDirection * paddleSpeed)\r\n}<\/code><\/pre>\n<p>We prevent the paddle from exiting the court by testing its <code>y<\/code> position. Otherwise, the paddle will be moved by a relative distance using <code>dy()<\/code>.<\/p>\n<p data-height=\"380\" data-theme-id=\"1\" data-slug-hash=\"RpYxMd\" data-default-tab=\"result\" data-user=\"wout\" data-embed-version=\"2\" data-pen-title=\"Pong user controlled paddle\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/wout\/pen\/RpYxMd\/\">Pong user controlled paddle<\/a> by Wout Fierens (<a href=\"http:\/\/codepen.io\/wout\">@wout<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h4>Moving the AI paddle<\/h4>\n<p>A good opponent will make the game worthwhile. So we'll have the AI player follow the ball, with a predefined difficulty level. The higher the difficulty, the faster the AI paddle will respond.<\/p>\n<p>First define the difficulty value, defining the AI's speed:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var difficulty = 2<\/code><\/pre>\n<p>Then add the following code to the <code>update<\/code> function:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">\/\/ get position of ball and paddle\r\nvar paddleRightCy = paddleRight.cy()\r\n\r\n\/\/ move the left paddle in the direction of the ball\r\nvar dy = Math.min(difficulty, Math.abs(cy - paddleRightCy))\r\npaddleRightCy += cy &gt; paddleRightCy ? dy : -dy\r\n\r\n\/\/ constraint the move to the canvas area\r\npaddleRight.cy(Math.max(paddleHeight\/2, Math.min(height-paddleHeight\/2, paddleRightCy)))<\/code><\/pre>\n<p data-height=\"380\" data-theme-id=\"1\" data-slug-hash=\"NpLXBx\" data-default-tab=\"result\" data-user=\"wout\" data-embed-version=\"2\" data-pen-title=\"Pong user controlled paddle\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/wout\/pen\/NpLXBx\/\">Pong user controlled paddle<\/a> by Wout Fierens (<a href=\"http:\/\/codepen.io\/wout\">@wout<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3>Score!<\/h3>\n<p>Wait, this isn't right! The game goes on even after one of the players scored. Time to include a <code>reset<\/code> function to move all game elements to their initial position using animations:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">function reset() {\r\n  \/\/ reset speed values\r\n  vx = 0\r\n  vy = 0\r\n\r\n  \/\/ position the ball back in the middle\r\n  ball.animate(100).center(width \/ 2, height \/ 2)\r\n\r\n  \/\/ reset the position of the paddles\r\n  paddleLeft.animate(100).cy(height \/ 2)\r\n  paddleRight.animate(100).cy(height \/ 2)\r\n}<\/code><\/pre>\n<p>The <code>reset<\/code> function should be called if one of the players misses the ball. To make that happen, change the failure detection by removing the <code>vx = -vx<\/code> line and adding the <code>reset()<\/code> call:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">\/\/ check if a player missed the ball\r\nif ((vx &lt; 0 &amp;&amp; cx &lt;= 0) || (vx &gt; 0 &amp;&amp; cx &gt;= width)) {\r\n  \/\/ when x-velocity is negative, its a point for player 2, else player 1\r\n  if (vx &lt; 0) {\r\n    ++playerRight\r\n  } else {\r\n    ++playerLeft\r\n  }\r\n\r\n  \/\/ update score\r\n  scoreLeft.text(playerLeft)\r\n  scoreRight.text(playerLeft)\r\n\r\n  reset()\r\n}<\/code><\/pre>\n<p>We also need to make sure the initial <code>vx<\/code> and <code>vy<\/code> values are set to 0. So the game does not start without our input. To be able to indicate the first serve, we'll add a <code>click<\/code> listener to the SVG document:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">draw.on('click', function() {\r\n  if (vx === 0 &amp;&amp; vy === 0) {\r\n    vx = Math.random() * 500 - 250\r\n    vy = Math.random() * 500 - 250\r\n  }\r\n})<\/code><\/pre>\n<p data-height=\"380\" data-theme-id=\"1\" data-slug-hash=\"JWaMza\" data-default-tab=\"result\" data-user=\"wout\" data-embed-version=\"2\" data-pen-title=\"Pong with start and reset\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/wout\/pen\/JWaMza\/\">Pong with start and reset<\/a> by Wout Fierens (<a href=\"http:\/\/codepen.io\/wout\">@wout<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3>Encore<\/h3>\n<p>Of course, there is a lot left to improve on the game, but the purpose of this tutorial is to teach about SVG and in particular about SVG.js. We want to leave you with some visual effects to spice up the game.<\/p>\n<h4>Ball color<\/h4>\n<p>It would be nice to have the color of the ball change while approaching the opposite opponent. This is done by leveraging the power of the <code>morph<\/code> method on the <code>SVG.Color<\/code> class. We'll detect the position of the ball, and gradually assign the color of the opposite opponent, based on the position of the ball on the x-axis.<\/p>\n<p>We'll start by initializing a new instance of <code>SVG.Color<\/code>:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var ballColor = new SVG.Color('#ff0066')<\/code><\/pre>\n<p>Next, we'll define the target color by calling the <code>morph()<\/code> method:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">ballColor.morph('#00ff99')<\/code><\/pre>\n<p>This will set a start color, being <code>#ff0066<\/code> and an end color, being <code>#00ff99<\/code>. Using the <code>at()<\/code> method on <code>SVG.Color<\/code>, we can tween the color based on a given position between <code>0<\/code> and <code>1<\/code>. So by adding the following code to our <code>update<\/code> function, we can change the color of the ball while it moves:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">ball.fill(ballColor.at(1\/width*ball.x()))<\/code><\/pre>\n<p>That wasn't hard at all, right?<\/p>\n<h4>Boom!<\/h4>\n<p>Imagine a huge color blast when the opponent missed the ball. That would make it even more fun to win a point. To achieve this, we'll use a radial gradient. It will appear where the ball has hit the wall and then quickly fade out. Once faded out, the object carrying the gradient will be deleted from the scene. To achieve this, we'll add another function called <code>boom<\/code> including the required logic:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">function boom() {\r\n  \/\/ detect winning player\r\n  var paddle = vx &gt; width\/2 ? paddleLeft : paddleRight\r\n\r\n  \/\/ create the gradient\r\n  var gradient = draw.gradient('radial', function(stop) {\r\n    stop.at(0, paddle.attr('fill'), 1)\r\n    stop.at(1, paddle.attr('fill'), 0)\r\n  })\r\n\r\n  \/\/ create circle to carry the gradient\r\n  var blast = draw.circle(300)\r\n  blast.center(ball.cx(), ball.cy()).fill(gradient)\r\n\r\n  \/\/ animate to invisibility\r\n  blast.animate(1000, '&gt;').opacity(0).after(function() {\r\n    blast.remove()\r\n  })\r\n}<\/code><\/pre>\n<p data-height=\"380\" data-theme-id=\"1\" data-slug-hash=\"WpzNVE\" data-default-tab=\"result\" data-user=\"wout\" data-embed-version=\"2\" data-pen-title=\"Fully functional Pong game with effects\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/wout\/pen\/WpzNVE\/\">Fully functional Pong game with effects<\/a> by Wout Fierens (<a href=\"http:\/\/codepen.io\/wout\">@wout<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3>Conclusion<\/h3>\n<p>That's it! You just created a working Pong game using SVG.js. In the next tutorial, we will cover how to convert this blob of code into a reusable SVG.js plug-in, while adding new features and easy configuration to the game.<\/p>\n<hr>\n<p>Written by Ulrich-Matthias Sch\u00e4fer & Wout Fierens.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Everybody loves the vintage game Pong, right? We sure do. What&#8217;s more fun? Building it yourself! That&#8217;s why we decided to create one with SVG.js &#8211; to highlight some aspects of our library. It might seem like a complex idea for a small tutorial, but as you&#8217;ll see, it&#8217;s simpler than it sounds. Let&#8217;s dive [&hellip;]<\/p>\n","protected":false},"author":248266,"featured_media":253510,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[725,1207,469,1206],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253412"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/248266"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253412"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253412\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/253510"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253412"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253412"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253412"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":253504,"date":"2017-04-07T07:16:11","date_gmt":"2017-04-07T14:16:11","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253504"},"modified":"2017-04-07T07:16:11","modified_gmt":"2017-04-07T14:16:11","slug":"interesting-takes-log-sign-forms","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/interesting-takes-log-sign-forms\/","title":{"rendered":"Interesting Takes on Log in \/ Sign Up Forms"},"content":{"rendered":"<p>A roundup of simple forms that have interesting UI interactions and animations.<\/p>\n<p>I can't guarantee the final demo for each of them is perfectly accessible or measurably improves UX or anything, but that doesn't mean that you can't take inspiration from the ideas and make sure your implementation of them does.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>A roundup of simple forms that have interesting UI interactions and animations. I can&#8217;t guarantee the final demo for each of them is perfectly accessible or measurably improves UX or anything, but that doesn&#8217;t mean that you can&#8217;t take inspiration from the ideas and make sure your implementation of them does.<\/p>\n","protected":false},"author":3,"featured_media":253506,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[595],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253504"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253504"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253504\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/253506"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253504"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253504"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253504"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":253502,"date":"2017-04-07T07:08:56","date_gmt":"2017-04-07T14:08:56","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253502"},"modified":"2017-04-07T07:08:56","modified_gmt":"2017-04-07T14:08:56","slug":"can-class-names-trigger-safe-search-filters","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/can-class-names-trigger-safe-search-filters\/","title":{"rendered":"Can Class Names Trigger Safe Search Filters?"},"content":{"rendered":"<p>I got a tweet about this a while back, and it's been on my list of things to attempt to start a discussion about. Or even better, gather some real data about. It also might be a smidge related to SEO (as the asker leads with), and since yesterday's <a href=\"https:\/\/css-tricks.com\/seo-and-location\/\">baby thought about SEO<\/a>, it reminded me of this.<\/p>\n<p><!--more--><\/p>\n<p>Here's the question:<\/p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">Hi <a href=\"https:\/\/twitter.com\/chriscoyier\">@chriscoyier<\/a> can CSS class name affect SEO? i.e. can class name &quot;sex&quot; for &lt;select&gt; element with M\/F options trigger safe search filters?<\/p>\n<p>&mdash; Piotr Merton (@piotrmerton) <a href=\"https:\/\/twitter.com\/piotrmerton\/status\/788196764960645120\">October 18, 2016<\/a><\/p><\/blockquote>\n<p><script async src=\"\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"><\/script><\/p>\n<p>In other words, HTML like this:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;label for=\"sex\"&gt;Sex:&lt;\/label&gt;\r\n&lt;select id=\"sex\" name=\"sex\"&gt;\r\n  &lt;option&gt;Male&lt;\/option&gt;\r\n  &lt;option&gt;Female&lt;\/option&gt;\r\n  &lt;option&gt;Yes, please&lt;\/option&gt;\r\n  &lt;option&gt;Heyyy-ooo&lt;\/option&gt;\r\n  &lt;option&gt;Honk honk&lt;\/option&gt;\r\n  &lt;option&gt;Wakka Wakka&lt;\/option&gt;\r\n&lt;\/select&gt;<\/code><\/pre>\n<p>Silly attempts to thwart being gender normative aside, is simply the presence of the word \"Sex\" on the page enough to trigger warnings, blockage, or exclusion from certain apps? Perhaps an app using <a href=\"https:\/\/developers.google.com\/safe-browsing\/v4\/\">Google Safe Browsing APIs<\/a>, a firewall of sorts configured for blocking certain content, or some other kind of software designed to filter web content.<\/p>\n<p>What if your business was Barry's Delicious Smooth Mart so you prefixed a bunch of your CSS selectors:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.bdsm-header {\r\n  background: papayawhip;\r\n}<\/code><\/pre>\n<p>Will there be unintended consequences there?<\/p>\n<p>I'm having a bit of Deja Vu about this conversation, in which I remember seeing a conversation about this somewhere where someone said this has indeed caused some minor problems for them, but I can't seem to dig that up right now.<\/p>\n<p>In fact, I don't have any personal stories or data to share with you on this subject, I just wanted to open it up for comments from folks that <em>actually do have some data<\/em>.<\/p>\n<p>In spending some time searching around about this issue, I found plenty of \"experts\" chiming in saying \"no, CSS classes don't affect anything.\" That stands to reason, but there is no data cited, references provided, or proof supplied. But also note in our first example, the text we were worried about is \"sex\", and it doesn't only appear in classes, but other attributes as well, not to mention the actual visible text of the label.<\/p>\n<p>So if you know something for real, let us know below.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>I got a tweet about this a while back, and it&#8217;s been on my list of things to attempt to start a discussion about. Or even better, gather some real data about. It also might be a smidge related to SEO (as the asker leads with), and since yesterday&#8217;s baby thought about SEO, it reminded [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1210,1209],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253502"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253502"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253502\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253502"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253502"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253502"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":253471,"date":"2017-04-06T15:10:32","date_gmt":"2017-04-06T22:10:32","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253471"},"modified":"2017-04-06T15:56:49","modified_gmt":"2017-04-06T22:56:49","slug":"container-query-discussion","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/container-query-discussion\/","title":{"rendered":"Container Query Discussion"},"content":{"rendered":"<p>Right now, we have the power to write CSS that only applies when the browser window itself is at certain widths or heights. Breakpoints, as it were. Super useful. What we don't have (natively) is the ability to write conditional CSS based on any particular elements (or \"containers\") properties. <\/p>\n<p><!--more--><\/p>\n<p>It's going on 2 years since the <a href=\"http:\/\/ricg.io\/\">RICG<\/a> decided to <a href=\"https:\/\/alistapart.com\/article\/container-queries-once-more-unto-the-breach\">tackle this<\/a>. I'm not exactly sure what the status is there. It seems a bit on pause, but that doesn't mean the entire discussion is on pause.<\/p>\n<p>From what I hear, and echo, the refrain amongst front-end devs is: <strong>if I had container queries available, 90% of the media queries I write would be container queries.<\/strong> The thought being, you're usually trying to adjust some particular element's properties that are tied to something a bit more scoped than the entire browser window.<\/p>\n<p>Ethan Marcotte <a href=\"https:\/\/ethanmarcotte.com\/wrote\/on-container-queries\/\">recently wrote<\/a>:<\/p>\n<blockquote><p>I don't want to suggest that <a href=\"http:\/\/www.xanthir.com\/b4VG0\">the technical challenges<\/a> of specifying container queries are in any way easy. But some kind of movement would be deeply appreciated by the entire responsive design community. Speaking just for myself, I know container queries would revolutionize my design practice, and better prepare responsive design for mobile, desktop, tablet\u2014and whatever's coming next.<\/p><\/blockquote>\n<p>Hear hear.<\/p>\n<p>He pointed to some of his own work in which modules that are in extremely different situations that aren't directly related to the viewport, but more directly related to a parent container.<\/p>\n<p><iframe src=\"https:\/\/player.vimeo.com\/video\/205459025?title=0&byline=0&portrait=0\" width=\"300\" height=\"138\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen><\/iframe><\/p>\n<p>But now lately, in a <strong>wacky surprise twist<\/strong>, there has been a good bit of <em>\"hmmmm, perhaps we don't need these as much as we think we do\"<\/em> going on.<\/p>\n<p>For instance, Dave Rupert, while playing with CSS Grid Layout, found he was able to <a href=\"http:\/\/daverupert.com\/2017\/03\/initial-impressions-of-css-grid\/\">ditch some media queries entirely<\/a>:<\/p>\n<blockquote><p>I <a href=\"http:\/\/codepen.io\/davatron5000\/pen\/ryGYba\">refactored<\/a> a ~50 line Flexbox grid to just ~5 lines of CSS with CSS Grid. ... The best part is, we don\u2019t need media queries! This will save a lot of code down the line. In this particular project, we actually have three Flexbox grids with slightly different breakpoints. The <code>auto-fill<\/code> keyword auto-generates columns when space is available.<\/p><\/blockquote>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"ryGYba\" data-default-tab=\"result\" data-user=\"davatron5000\" data-embed-version=\"2\" data-pen-title=\"Flexbox Grid vs. CSS Grid\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/davatron5000\/pen\/ryGYba\/\">Flexbox Grid vs. CSS Grid<\/a> by Dave Rupert (<a href=\"http:\/\/codepen.io\/davatron5000\">@davatron5000<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Flexbox can do some really fancy dancing with its ability to wrap, its ability to be told if it can grow or not, and how much and to what limits gives us a lot of control without explicit media queries. <\/p>\n<p>Grid gives us even more tools with things like auto layout, <code>minmax()<\/code>, and keywords like <code>min-content<\/code> and <code>auto-fill<\/code>. The fact that you can nest Flex containers and Grid containers any-which-way makes for some powerful possibilities.<\/p>\n<p>For example, see Jonathan Snook <a href=\"https:\/\/www.youtube.com\/watch?v=lhuyxt8YpbM\">playing around<\/a> (who, self-admittedly, is just starting to wrap his head around these types of layouts) have a lot of success in container-query-like control over some modules.<\/p>\n<p><iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/lhuyxt8YpbM\" frameborder=\"0\" allowfullscreen><\/iframe><\/p>\n<p>Paul Robert Lloyd <a href=\"https:\/\/paulrobertlloyd.com\/2017\/04\/container_queries\">explictly questions the need<\/a> for container queries:<\/p>\n<blockquote><p>In my mind, container queries appear to be yesterday\u2019s answer to today\u2019s problems. I'd much rather we use the great new tools we have, and embrace a future that's finally here.<\/p><\/blockquote>\n<p>Even rebuilding Ethan's example with only a page-layout affecting media query:<\/p>\n<p data-height=\"574\" data-theme-id=\"1\" data-slug-hash=\"PpXygo\" data-default-tab=\"css,result\" data-user=\"paulrobertlloyd\" data-embed-version=\"2\" data-pen-title=\"Rebuilding The Toast\u2019s Recirculation Module\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/paulrobertlloyd\/pen\/PpXygo\/\">Rebuilding The Toast\u2019s Recirculation Module<\/a> by Paul Lloyd (<a href=\"http:\/\/codepen.io\/paulrobertlloyd\">@paulrobertlloyd<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Jeremy Keith <a href=\"https:\/\/adactio.com\/links\/12100\">filling in<\/a> as baby bear:<\/p>\n<blockquote>\n<p>... this is a good well-reasoned post about why container queries might not be the all-healing solution for our responsive design problems. Thing is, I don\u2019t think container queries are trying to be an all-encompassing solution, but rather a very useful solution for one particular class of problem.<\/p>\n<p>So I don't really see container queries competing with, say, grid layout (any more than grid layout is competing with flexbox), but rather one more tool that would be really useful to have in our arsenal.<\/p>\n<\/blockquote>\n<p>Even container queries can't solve all RWD problems, of course. As Paul said:<\/p>\n<blockquote><p>The final reason I question the need for container queries is that a change in layout sometimes requires a change in behavior, too. If accomplishing this involves restructuring the DOM, we\u2019re essentially swapping one component for another.<\/p><\/blockquote>\n<p>So yes, newfangled layout tools may save us in many situations from needing container queries <em>specifically for layout changes<\/em>. But layout isn't the only thing that may need to change in an element depending on the container situation. Ethan responds:<\/p>\n<blockquote>\n<p>Depending on a module\u2019s placement, height, and width, I might want to change several different aspects of its design. These changes would include, but aren\u2019t limited to:<\/p>\n<ol>\n<li><strong>Visual weight.<\/strong> Depending on where the module\u2019s positioned, I\u2019ll frequently want to change how visually prominent it is. This might include changing its color, its background color, or the size of individual elements within it, all depending on the space allocated to the module.<\/li>\n<li><strong>Typography.<\/strong> Related to that last point, I frequently need to change the typography of an element, <em>based on the size of its container<\/em>. Grid Layout and flexbox aren\u2019t any help here, sadly; and as much as I love <a href=\"https:\/\/www.smashingmagazine.com\/2016\/05\/fluid-typography\/\" title=\"Smashing Magazine on \u201cfluid typography\u201d\">flexible typography<\/a>\u2014<a href=\"http:\/\/trentwalton.com\/notes\/2017\/02\/07\/viewport-padding.html\" title=\"Trent Walton breaks down some of the viewport-aware sizing techniques I\u2019ve borrowed for this redesign\">Trent can vouch for me here<\/a>\u2014the utilities we have to work with there are still very viewport-focused.<\/li>\n<li><strong>Content hierarchy.<\/strong> I often need to change an element\u2019s priority, depending on the size of its container. Maybe I\u2019ll conditionally <code>position<\/code> an element higher (or lower) to make it more (or less) visible, as the design warrants. In a flexbox-ier layout, I might want to change the <code>order<\/code> of a given element, or perhaps change the <code>flex-direction<\/code> of the module\u2014and again, all based on the dimensions of the container.<\/li>\n<\/ol>\n<\/blockquote>\n<p>Brad Frost makes <a href=\"http:\/\/bradfrost.com\/blog\/link\/questioning-container-queries\/\">a simple, logical argument<\/a>:<\/p>\n<blockquote><p>... having a mechanism that says \"if this component lives in a container that\u2019s at least X-wide, make these style changes\" feels like it makes sense.<\/p><\/blockquote>\n<p>It's a smidge like responsive images. You can do a lot with <code>srcset<\/code> and <code>sizes<\/code>, but there is also <code>&lt;picture&gt;<\/code> when you need to be super explicit about how to behave.<\/p>\n<p>Personally, I'd like to see about 100 different <a href=\"https:\/\/github.com\/ResponsiveImagesCG\/cq-usecases\">use cases<\/a> fleshed out. If it turns out some of them can be done sans container queries, awesome, but it still seems highly likely to me that having container queries available to us would be mighty handy. <\/p>\n","protected":false},"excerpt":{"rendered":"<p>Right now, we have the power to write CSS that only applies when the browser window itself is at certain widths or heights. Breakpoints, as it were. Super useful. What we don&#8217;t have (natively) is the ability to write conditional CSS based on any particular elements (or &#8220;containers&#8221;) properties.<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[510],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253471"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253471"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253471\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253471"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253471"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253471"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":253366,"date":"2017-04-06T08:19:43","date_gmt":"2017-04-06T15:19:43","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253366"},"modified":"2017-04-06T08:19:43","modified_gmt":"2017-04-06T15:19:43","slug":"%e2%80%8bcontent-doesnt-need-delay-website-launches","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/%e2%80%8bcontent-doesnt-need-delay-website-launches\/","title":{"rendered":"\u200bContent doesn\u2019t need to delay website launches"},"content":{"rendered":"<p>Whether content is late, structured differently to the design or lost in email threads - content always gets the blame for website project delays. Now you can use <a href=\"http:\/\/synd.co\/2nEpTs7\">GatherContent<\/a> to organize and produce website content without the chaos. 1000s of teams worldwide use GatherContent to implement a structured process for content that helps launch website projects on time.<\/p>\n<p>GatherContent integrates with WordPress, Drupal, Sitecore, Kentico, AEM, Sitefinity, Umbraco, and more!<\/p>\n<p>See how GatherContent can streamline your website content production - try it for your projects with <a href=\"http:\/\/synd.co\/2nEpTs7\">a free 30 day trial<\/a>!<\/p>\n<p><!--more--><\/p>\n<p>Here's some of the internal screens of what it's like working in there:<\/p>\n<figure id=\"post-253452\" class=\"align-none media-253452\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/04\/GC_Screenshot_-_Project_Overview.png\" srcset=\"https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_800\/v1491436321\/GC_Screenshot_-_Project_Overview_uyx7le.png 800w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_200\/v1491436321\/GC_Screenshot_-_Project_Overview_uyx7le.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" \/><figcaption>Project Overview<\/figcaption><\/figure>\n<figure id=\"post-253453\" class=\"align-none media-253453\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/04\/GC_Screenshot_-_Item_Editor.png\" srcset=\"https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_800\/v1491436333\/GC_Screenshot_-_Item_Editor_hbl3cd.png 800w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_200\/v1491436333\/GC_Screenshot_-_Item_Editor_hbl3cd.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" \/><figcaption>Item Editor<\/figcaption><\/figure>\n<figure id=\"post-253454\" class=\"align-none media-253454\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/04\/GC_Screenshot_-_Content_Tab.png\" srcset=\"https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_800\/v1491436347\/GC_Screenshot_-_Content_Tab_is15ga.png 800w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_200\/v1491436347\/GC_Screenshot_-_Content_Tab_is15ga.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" \/><\/figure>\n<p><strong>Note from Chris:<\/strong> I was so happy to see this sponsorship come through, as we're big fans of GatherContent at CSS-Tricks. We've been using it for years as a tool for (ahem) gathering and collaborating content from sponsors. It's often a three-way collaboration between us, Syndicate Ads (the folks who help us wrangle sponsors), and the sponsor themselves. GatherContent makes that easy.<\/p>\n<p>Just to be super meta, here's an example of us working on this exact thing.<\/p>\n<figure id=\"post-253455\" class=\"align-none media-253455\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/04\/meta-gather.png\" srcset=\"https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_1000\/v1491436418\/meta-gather_wzssp3.png 1000w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_688\/v1491436418\/meta-gather_wzssp3.png 688w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_484\/v1491436418\/meta-gather_wzssp3.png 484w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_200\/v1491436418\/meta-gather_wzssp3.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" \/><\/figure>\n","protected":false},"excerpt":{"rendered":"<p>Whether content is late, structured differently to the design or lost in email threads &#8211; content always gets the blame for website project delays. Now you can use GatherContent to organize and produce website content without the chaos. 1000s of teams worldwide use GatherContent to implement a structured process for content that helps launch website [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17,508],"tags":[],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253366"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253366"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253366\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253366"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253366"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253366"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":253467,"date":"2017-04-06T08:18:34","date_gmt":"2017-04-06T15:18:34","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253467"},"modified":"2017-04-06T08:18:34","modified_gmt":"2017-04-06T15:18:34","slug":"seo-and-location","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/seo-and-location\/","title":{"rendered":"SEO and Location"},"content":{"rendered":"<p>This is just a baby thought I had about SEO. <\/p>\n<p>I overheard some folks at the gym I go to talking about SEO. It was a part-owner of the gym, talking about an SEO firm they were in contact with to help them with the gym website and reaching more people. A concern all businesses share: how do we sell to more people.<\/p>\n<p><!--more--><\/p>\n<p>In the context of a gym, sales will be limited to a pretty narrow geographic region. With rare exception, people don't drive clear across town to go to the gym, because gyms are largely a commodity and dotted all over cities. So the available market is humans in this narrow geographic region who want to join a gym. <\/p>\n<p>Two more facts:<\/p>\n<ol>\n<li>This gym is named: [name of neighborhood] fitness.<\/li>\n<li>It comes up very easily in all manner of web and map searches.<\/li>\n<\/ol>\n<p>I can't imagine what an SEO company can do for this gym, aside from a general lookover of the site for best practices and light advice. <\/p>\n<p>SEO is all about <em>search<\/em>, and this gym already comes up in the relevant searches. There is no magic to work here. Search engines <em>want<\/em> to help you find what you are looking for, and they are doing their jobs well here already. Some other kinds of marketing and advertising might help get more folks in the door, but search is fine. <\/p>\n<p>If search <em>wasn't<\/em> fine, then sure, it seems warranted to try and figure out why and get the business showing up for the relevant searches. <\/p>\n<p>I also overheard what the SEO company wanted: $2,500\/month.<\/p>\n<p>It's not surprising to me why so many web folks roll their eyes and sneer at SEO consultants and agencies. That seems highly predatory. <\/p>\n<p>$2,500 could go a long way in local advertising, actually reaching people in different ways.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>This is just a baby thought I had about SEO. I overheard some folks at the gym I go to talking about SEO. It was a part-owner of the gym, talking about an SEO firm they were in contact with to help them with the gym website and reaching more people. A concern all businesses [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1209],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253467"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253467"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253467\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253467"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253467"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253467"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":253464,"date":"2017-04-06T06:42:03","date_gmt":"2017-04-06T13:42:03","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253464"},"modified":"2017-04-06T06:42:03","modified_gmt":"2017-04-06T13:42:03","slug":"some-conference-news","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/some-conference-news\/","title":{"rendered":"Some Conference News"},"content":{"rendered":"<p>Last year I got to MC the first ever Clarity, \"A Design Systems Conference\", organized by <a href=\"https:\/\/twitter.com\/jina\">Jina<\/a> in San Francisco. <a href=\"https:\/\/www.clarityconf.com\/\">It's back!<\/a> Coming November 28th-30th, 2017. <\/p>\n<hr>\n<p>Saron Yitbarek is organizing the first <a href=\"http:\/\/www.codenewbie.org\/\">CodeNewbie<\/a> conference, <a href=\"http:\/\/codelandconf.com\/\">CodeLand<\/a>, coming up real quick here on April 21st-22nd in New York. <\/p>\n<p>I got to be on <a href=\"http:\/\/www.codenewbie.org\/podcast\/css-tricks\">the CodeNewbie podcast<\/a> a while back, and we had <a href=\"http:\/\/shoptalkshow.com\/episodes\/183-with-saron-yitbarek\/\">her on ShopTalk<\/a>. <\/p>\n<hr>\n<p>Also coming up quick, Timothy Smith is running an inexpensive online workshop called <a href=\"https:\/\/www.eventbrite.com\/e\/lets-learn-css-grid-tickets-33351798126\">\"Let's Learn CSS Grid\"<\/a> coming up April 21st, 2017.<\/p>\n<hr>\n<p>I've just finished giving a talk and all-day session at An Event Apart Seattle, but never fear! If you'd like to catch me speak, I'll be at the next <a href=\"https:\/\/aneventapart.com\/event\/boston-2017\">An Event Apart in Boston<\/a>, coming up May 15th-17th. Also <a href=\"https:\/\/aneventapart.com\/event\/chicago-2017\">in Chicago<\/a> August 28th-30th, 2017 where I'll also be giving the all-day session on being a front-end developer.<\/p>\n<p>If you'd like to catch that all-day session, I'm also going to be giving it August 7th in Dayton, Ohio at the <a href=\"http:\/\/buildright.io\/maker-series\/2017\/chris-coyier\">Build Right: Maker Series<\/a>.<\/p>\n<hr>\n<p>If you're researching web conferences around the world and want to see what's out there, don't forget <a href=\"https:\/\/css-tricks.com\/guide-2017-conferences\/\">our guide<\/a>!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>News about some upcoming conferences, like Clarity, CodeLand, a Grid Workshop,<br \/>\n Maker Series, and upcoming An Event Apart shows.<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[975],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253464"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253464"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253464\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253464"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253464"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253464"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":253430,"date":"2017-04-05T06:50:51","date_gmt":"2017-04-05T13:50:51","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253430"},"modified":"2017-04-05T06:50:51","modified_gmt":"2017-04-05T13:50:51","slug":"little-stuff-markdown-always-forget-google","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/little-stuff-markdown-always-forget-google\/","title":{"rendered":"Little Stuff about Markdown I Always Forget and have to Google"},"content":{"rendered":"<p>This is mostly for me. These are the little things that sometimes confuse me about Markdown and I find myself having to search the web for. So I'll write them down. Blogging as memory extension.<\/p>\n<p>Know that your mileage may vary on this stuff, as there are <a href=\"https:\/\/css-tricks.com\/choosing-right-markdown-parser\/\">many varietals of Markdown<\/a>.<\/p>\n<p><!--more--><\/p>\n<h3>markdown=\"1\"<\/h3>\n<p>There is no concept of a <code>&lt;div&gt;<\/code> in Markdown syntax (or most other structural HTML elements), except that Markdown supports HTML so you can just use a <code>&lt;div&gt;<\/code> if you want to. But as soon as you do, nothing nested inside of it can be Markdown.<\/p>\n<pre rel=\"Markdown\"><code class=\"language-markup\">### Header\r\n\r\n&lt;div class=\"special-class\"&gt;\r\n1. Nope\r\n1. Not \r\n1. Happening\r\n&lt;\/div&gt;<\/code><\/pre>\n<p>Except it can! In many (most?) varietals of Markdown, you can put <code>&lt;div markdown=\"1\"&gt;<\/code> on the element and it will allow Markdown inside of it. <\/p>\n<pre rel=\"Markdown\"><code class=\"language-markup\">### Header\r\n\r\n&lt;div class=\"special-class\" markdown=\"1\"&gt;\r\n1. All\r\n1. Fixed \r\n1. Up\r\n&lt;\/div&gt;<\/code><\/pre>\n<h3>Multiple paragraph lists and blockquotes<\/h3>\n<p>If a list item need multiple paragraphs in it, you can't just break multiple lines and keep going. The next paragraph needs to be indented for it to be considered part of the same list item. Otherwise the list ends and new one starts.<\/p>\n<pre rel=\"Markdown\"><code class=\"language-markup\">1. one paragraph\r\n\r\n    more for 1st list item :)\r\n\r\n1. another paragraph<\/code><\/pre>\n<p><video src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/04\/Apr-05-2017-06-47-18.mp4\" controls><\/video><\/p>\n<p>Blockquotes are similar:<\/p>\n<pre rel=\"Markdown\"><code class=\"language-markup\">&gt; First bit.\r\n&gt; Second bit.<\/code><\/pre>\n<p>There will be no line break there. Those two bits will be inside the same <code>&lt;p&gt;<\/code> inside the <code>&lt;blockquote&gt;<\/code>. To make them multiple paragraphs, you'll need a blank line in between.<\/p>\n<pre rel=\"Markdown\"><code class=\"language-markup\">&gt; First bit.\r\n\r\n&gt; Second bit.<\/code><\/pre>\n<p>If you wanted them to be entirely separate <code>&lt;blockquote&gt;<\/code>s, without any other text in between, I'm not sure what'd you do.<\/p>\n<h3>Escaping characters<\/h3>\n<p>Certain characters have meaning in markdown, like how <code>*asterisks*<\/code> make text italic. But what if you want to actually display an asterisk? You escape it with a backslash, like <code>\\*<\/code>.<\/p>\n<p>You can even escape the backslash itself, meaning <code>\\\\<\/code> is <code>\\<\/code>.<\/p>\n<h3>ID's<\/h3>\n<p>Markdown supports HTML, so if you need any special attributes on elements, you can just use HTML. But it's nice to not have to. <\/p>\n<p>Different varietals of Markdown handle it in different ways. <\/p>\n<p>A somewhat common way is to allow them on headers like this:<\/p>\n<pre rel=\"Markdown\"><code class=\"language-markup\">### Custom IDs {#custom-id}<\/code><\/pre>\n<p>Some varietals simply add an ID on all headings for you automatically. <\/p>\n<p>This is also <a href=\"https:\/\/blog.codepen.io\/2016\/11\/17\/anchor-links-post-headers\/\">doable client side<\/a>.<\/p>\n<h3>Images<\/h3>\n<p>It's the same as the link syntax <code>[link text](url)<\/code> except it starts with a bang.<\/p>\n<pre rel=\"Markdown\"><code class=\"language-markup\">![alt text](http:\/\/example.com\/image.jpg)<\/code><\/pre>\n<p>Slightly trickier still is nesting it to be a link:<\/p>\n<pre rel=\"Markdown\"><code class=\"language-markup\">[![alt text](image.jpg)](https:\/\/css-tricks.com)<\/code><\/pre>\n<h3>Languages on Code Fences<\/h3>\n<p>The language comes right after the first set of backticks.<\/p>\n<pre rel=\"Markdown\"><code class=\"language-markup\">```css\r\nbody {\r\n  background: red;\r\n}\r\n```<\/code><\/pre>\n<h3>Tables<\/h3>\n<p>You basically draw them like ASCII art. Note the dashes to denote the header row, and the colons for alignment:<\/p>\n<pre rel=\"Markdown\"><code class=\"language-markup\">| header | header | header |\r\n|--------|:------:|-------:|\r\n| a      |    b   |      c |\r\n| 1      |    2   |      3 |\r\n| foo    |   bar  |    baz |<\/code><\/pre>\n<figure id=\"post-253435\" class=\"align-none media-253435\"><a href=\"http:\/\/www.tablesgenerator.com\/markdown_tables\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/04\/table-generator.png\" alt=\"\" \/><\/a><\/figure>\n<h3>I guess I'm not alone<\/h3>\n<p>Here's quite <a href=\"https:\/\/twitter.com\/chriscoyier\/status\/849616181853995010\">a thread of what other folks forget<\/a>.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>This is mostly for me. These are the little things that sometimes confuse me about Markdown and I find myself having to search the web for. So I&#8217;ll write them down. Blogging as memory extension. Know that your mileage may vary on this stuff, as there are many varietals of Markdown.<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[570],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253430"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253430"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253430\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253430"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253430"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253430"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":253401,"date":"2017-04-04T09:59:55","date_gmt":"2017-04-04T16:59:55","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253401"},"modified":"2017-04-04T09:59:55","modified_gmt":"2017-04-04T16:59:55","slug":"lazy-loading-gravatars-wordpress","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/lazy-loading-gravatars-wordpress\/","title":{"rendered":"Lazy Loading Gravatars in WordPress"},"content":{"rendered":"<p>Most WordPress themes show user <a href=\"http:\/\/en.gravatar.com\/\">Gravatars<\/a> in the comment threads. It's a way of showing an image with the user, as associated by the email address used. It's a nice touch, and almost an expected design pattern these days. <\/p>\n<p>Every one of those gravatars is an individual HTTP request though, like any other image. A comment thread with 50 comments means 50 HTTP requests, and they aren't always particularly tiny files. Yeesh.<\/p>\n<p>Let's lazy load them.<\/p>\n<p><!--more--><\/p>\n<h3>The Concept<\/h3>\n<p>Lazy loading is the idea that you don't even request the image at all (no HTTP request) unless the image is visible. Meaning that, through JavaScript, we've determined the image is visible. <\/p>\n<figure id=\"post-253403\" class=\"align-none media-253403\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/04\/below-fold.jpg\" srcset=\"https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_1000\/v1491320977\/below-fold_ws5inp.jpg 1000w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_995\/v1491320977\/below-fold_ws5inp.jpg 995w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_797\/v1491320977\/below-fold_ws5inp.jpg 797w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_528\/v1491320977\/below-fold_ws5inp.jpg 528w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_200\/v1491320977\/below-fold_ws5inp.jpg 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" \/><figcaption>Lazy loading means not loading those two images that are outside the browser window, until they become inside the browser window.<\/figcaption><\/figure>\n<p>In order to stop those HTTP requests for not-yet-seen images, we need to get our hands directly on the markup. If there is an <code>&lt;img src=\"\"&gt;<\/code> in the HTML, there is essentially no way to stop the browser from downloading that image as soon as it possibly can, seen or unseen. So, we need to remove that <code>src<\/code>, and put it back when we're ready.<\/p>\n<h3>Woah, There<\/h3>\n<p>It's worth a pause here because we've entered some murky territory. <\/p>\n<p>By removing the <code>src<\/code> of these images, and only ever putting it back with JavaScript, we've decided that we're willing to ship slightly invalid HTML and rely 100% on a script downloading and executing for these images to ever be seen. <\/p>\n<p>I'm OK with that. Mostly because gravatars are just an enhancement anyway. It ain't no big deal if they never show up. I'm not a hardliner most JavaScript debates, but this seems like a particularly clear case where we can lean on JavaScript without worry.<\/p>\n<h3>Altering the HTML<\/h3>\n<p>This is the change we'd be making:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;!-- Normal image. No beating the browser preloader. --&gt;\r\n&lt;img src=\"https:\/\/gravatar.whatever...\" alt=\"\" \/&gt;\r\n\r\n&lt;!-- Let's change to this, which won't download anything. --&gt;\r\n&lt;img data-src=\"https:\/\/gravatar.whatever...\" alt=\"\" \/&gt;<\/code><\/pre>\n<p>Although a missing <code>src<\/code> on the <code>&lt;img&gt;<\/code> is technically invalid HTML. It almost certainly doesn't really matter in that it won't affect how anything works. If the invalid HTML bugs, you could always toss a super minimal blank GIF data URL in there, like:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;img src=\"data:image\/gif;base64,R0lGODlhAQABAIAAAP\/\/\/wAAACH5BAAAAAAALAAAAAABAAEAAAICRAEAOw==\" ... \/&gt;<\/code><\/pre>\n<p>Using <code>width<\/code> and <code>height<\/code> attributes is probably a good idea too, to maintain layout and avoid reflow if and when the images to load.<\/p>\n<h3>Altering the HTML... in WordPress<\/h3>\n<p>But how do you change the HTML that WordPress spits out as part of a comment thread? Comments are slightly unusual in WordPress in that WordPress core gives you the HTML, it isn't part of your theme like most of the other HTML is. <\/p>\n<p>Likely, in your `comments.php` file, you'll see this function:<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">&lt;?php wp_list_comments(); ?&gt;<\/code><\/pre>\n<p>Which spits out a pile of <code>&lt;li&gt;<\/code>'s with your entire comment thread. Not a lot of opportunity there to be fiddling with the output of images. Except, we can! We can list a callback function in there:<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">&lt;?php wp_list_comments('callback=csstricks_comment'); ?&gt;<\/code><\/pre>\n<p>That callback is the name of a function we can toss in our `functions.php` file. Here's an example of that function, which must return a <code>&lt;li&gt;<\/code>:<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">function csstricks_comment($comment, $args, $depth) {\r\n\r\n  $GLOBALS['comment'] = $comment; ?&gt;\r\n\r\n  &lt;li &lt;?php comment_class(); ?&gt;\"&gt;\r\n\r\n     &lt;img src=\"data:image\/gif;base64,R0lGODlhAQABAIAAAP\/\/\/wAAACH5BAAAAAAALAAAAAABAAEAAAICRAEAOw==\" width=\"50\" height=\"50\" class=\"lazyload-gravatar\" alt=\"User Avatar\" data-src=\"&lt;?php echo get_avatar_url(get_comment_author_email($comment_ID), array(\"size\" =&gt; 160)); ?&gt;\"&gt;\r\n\r\n     &lt;?php comment_text(); ?&gt;\r\n\r\n  &lt;?php # phantom &lt;\/li&gt; ?&gt;\r\n\r\n&lt;?php }<\/code><\/pre>\n<p>That's very simplified, but you can see what we've done. We replaced the <code>src<\/code> with the blank GIF, we've added a <code>class<\/code> name we'll ultimately use in JavaScript to do the lazy loading, we've added a <code>data-src<\/code> to the actual gravatar, and we're using <code>width<\/code> and <code>height<\/code> attributes for placeholding. Here's my actual <a href=\"https:\/\/gist.github.com\/chriscoyier\/511ec3064b66592f4efa516fb368517b\">complete callback<\/a> live right now on CSS-Tricks.<\/p>\n<p>If we shipped this right now, sans any JavaScript work, we'd still have a perfectly functional comment thread, just with images that never load.<\/p>\n<h3>Now We're Ready to Lazyload<\/h3>\n<p>The hard part is over. We're perfectly set up to do lazyloading now. If we were to <a href=\"https:\/\/css-tricks.com\/write-a-script\/\">write a script<\/a>, it would be like:<\/p>\n<ol>\n<li>Figure out the visible area of the browser window<\/li>\n<li>Figure out the position on the page of every image with class <code>.lazyload-gravatar<\/code><\/li>\n<li>If any of those images are in the visible area, flop out the src with the value from data-src<\/li>\n<li>If the visible area of the browser window changes in any way, re-evaluate the above<\/li>\n<\/ol>\n<p>We could set about writing that ourselves. And we could do it! But, and I'm sure you're not surprised here, it's a bit tricky and nuanced. Cross-browser concerns, performance concerns, does-it-work-on-mobile concerns, to name a few. This is the kind of thing I'm happy to lean on other's work for, rather than roll myself.<\/p>\n<p>Again, no surprise, there are loads of options to pick from. In my case, I'm happily using jQuery on CSS-Tricks, and I picked a jQuery-based on that looked pretty good to me:<\/p>\n<figure id=\"post-253404\" class=\"align-none media-253404\"><a href=\"http:\/\/jquery.eisbehr.de\/lazy\/\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/04\/jquery-lazy.png\" alt=\"\" \/><\/a><\/figure>\n<p>The API is as simple as can be. After bundled up the lib with the rest of the libs I'm using, I just call:<\/p>\n<pre rel=\"jQuery\"><code class=\"language-javascript\">$('.lazyload-gravatar').Lazy();<\/code><\/pre>\n<p>Look how nicely it works!<\/p>\n<p><video src=\"https:\/\/css-tricks.com\/videos\/lazy-loading-images.mov\" controls><\/video><\/p>\n<p>That's an awful lot of saved HTTP requests and awful good for performance. <\/p>\n<p>Makes you wish web standards and browsers would get together on this and make it a native feature.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Most WordPress themes show user Gravatars in the comment threads. It&#8217;s a way of showing an image with the user, as associated by the email address used. It&#8217;s a nice touch, and almost an expected design pattern these days. Every one of those gravatars is an individual HTTP request though, like any other image. A [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":253405,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[585,265,1205,264],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253401"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253401"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253401\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/253405"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253401"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253401"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253401"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":253363,"date":"2017-04-03T08:32:56","date_gmt":"2017-04-03T15:32:56","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253363"},"modified":"2017-04-03T08:32:56","modified_gmt":"2017-04-03T15:32:56","slug":"make-guides-collections-content-wordpress","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/make-guides-collections-content-wordpress\/","title":{"rendered":"How To Make Guides (Collections of Content) in WordPress"},"content":{"rendered":"<p>A blog post can be anything you want. You could easily write one that links up a bunch of articles on your site. Titles, summaries, links... all hand-crafted HTML. A \"guide\", as it were. It will likely be appreciated by your readers, I find, especially when you're linking up <del>old<\/del> <ins>evergreen<\/ins> content that is still relevant and useful today. <\/p>\n<p>But let's say you want to <em>programmatically<\/em> create these \"guides\". That might make them faster to create, easier to maintain, and give you a nice level of control over them. Let's look at a way to do that.<\/p>\n<p><!--more--><\/p>\n<h3>Guides on CSS-Tricks<\/h3>\n<p>I'm writing about this because guides are something we've just started to do here on CSS-Tricks. For example, I wanted to make a guide of our content that is well suited for folks just starting out, so I made <a href=\"https:\/\/css-tricks.com\/guides\/beginner\/\">Our Guide To Just Starting Out with CSS & HTML<\/a>. <\/p>\n<figure id=\"post-253380\" class=\"align-none media-253380\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/04\/example-guide.png\" srcset=\"https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_1000\/v1491227446\/example-guide_ggrfej.png 1000w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_821\/v1491227446\/example-guide_ggrfej.png 821w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_650\/v1491227446\/example-guide_ggrfej.png 650w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_460\/v1491227446\/example-guide_ggrfej.png 460w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_200\/v1491227446\/example-guide_ggrfej.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" \/><\/figure>\n<p>That wasn't built by hand, it was built by programmatically attaching a variety of content to a Custom Post Type we created just for Guides.<\/p>\n<h3>Programmatically Attaching Posts to Posts<\/h3>\n<p>You know how you can put images into blog posts? But in WordPress, there is also a concept of a <em>featured image<\/em>, which is one specific programmatically attached image for that post. <\/p>\n<figure id=\"post-253382\" class=\"align-none media-253382\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/04\/featured-image.jpg\" srcset=\"https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_1000\/v1491227736\/featured-image_ctesiw.jpg 1000w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_976\/v1491227736\/featured-image_ctesiw.jpg 976w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_922\/v1491227736\/featured-image_ctesiw.jpg 922w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_835\/v1491227736\/featured-image_ctesiw.jpg 835w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_738\/v1491227736\/featured-image_ctesiw.jpg 738w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_697\/v1491227736\/featured-image_ctesiw.jpg 697w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_500\/v1491227736\/featured-image_ctesiw.jpg 500w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_481\/v1491227736\/featured-image_ctesiw.jpg 481w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_376\/v1491227736\/featured-image_ctesiw.jpg 376w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_200\/v1491227736\/featured-image_ctesiw.jpg 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" \/><figcaption>That image is programatically attached to this Post.<\/figcaption><\/figure>\n<p>Enabling that feature in WordPress is like:<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">add_theme_support('post-thumbnails', array('post', 'page', 'whatever'));<\/code><\/pre>\n<p>But we're talking associating <em>Posts with Posts<\/em> not Images to Posts. There is no built-in WordPress way of doing that, so we'll reach for plugins.<\/p>\n<h3>CMB2 and Friends<\/h3>\n<p><a href=\"https:\/\/github.com\/WebDevStudios\/CMB2\">CMB2<\/a> (i.e. the second version of \"Custom Meta Boxes\") is a free, open source plugin for adding better UI and functionality around custom fields. If you're familiar with <a href=\"https:\/\/www.advancedcustomfields.com\/\">Advanced Custom Fields<\/a>, it's a bit like that, only I guess entirely free and a bit more modular. <\/p>\n<p>With that installed, now you can install (I guess we'll call them sub-plugins?) that make CMB2 do stuff. The one we're after is <a href=\"https:\/\/github.com\/WebDevStudios\/cmb2-attached-posts\">CMB2 Attached Posts Field<\/a> which has the explicit job of attaching Posts to Posts (or really, post type to any post type).<\/p>\n<p>It gives you this two-column UI on post types you activate it for:<\/p>\n<figure id=\"post-253383\" class=\"align-none media-253383\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/04\/attached-posts-field.png\" srcset=\"https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_1000\/v1491231451\/attached-posts-field_gs2a7o.png 1000w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_817\/v1491231451\/attached-posts-field_gs2a7o.png 817w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_200\/v1491231451\/attached-posts-field_gs2a7o.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" \/><\/figure>\n<p>Move anything from the left to right, and it's now programatically attached. This is exactly what we're after. Now we can hand select, and hand order, any type of post to attach to any other.<\/p>\n<h3>Configuring Things<\/h3>\n<p>Before you get to the UI you can see above, you not only need to install and activate those two plugins, but also tell CMB2 to create the custom meta boxes and apply them to the types of posts you want.<\/p>\n<p>In our case, our Guides are a custom post type. That's easy enough to enable:<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">register_post_type( 'guides',\r\n  array(\r\n    'labels'        =&gt; array(\r\n      'name'          =&gt; __( 'Guides' ),\r\n      'singular_name' =&gt; __( 'Guide' ),\r\n      'add_new'       =&gt; __( 'Add Guide' ),\r\n      'add_new_item'  =&gt; __( 'Add New Guide' ),\r\n      'edit_item'     =&gt; __( 'Edit Guide' ),\r\n    ),\r\n    'public'      =&gt; true,\r\n    'has_archive' =&gt; true,\r\n    'rewrite'     =&gt; array( 'slug' =&gt; 'guides' ),\r\n    'supports'    =&gt; array( 'title', 'editor', 'thumbnail', 'excerpt' )\r\n  )\r\n);<\/code><\/pre>\n<p>Then we apply this new custom meta box only to that custom post type (so we don't have to see it everywhere):<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">$cmb = new_cmb2_box( array(\r\n  'id'            =&gt; 'guide_metabox',\r\n  'title'         =&gt; __( 'The Guide Metabox', 'cmb2' ),\r\n  'object_types'  =&gt; array( 'guides', ), \/\/ Post type\r\n  'context'       =&gt; 'normal',\r\n  'priority'      =&gt; 'high',\r\n  'show_names'    =&gt; true, \/\/ Show field names on the left\r\n  \/\/ 'cmb_styles' =&gt; false, \/\/ false to disable the CMB stylesheet\r\n  \/\/ 'closed'     =&gt; true, \/\/ Keep the metabox closed by default\r\n) );\r\n\r\n\/\/ Regular text field\r\n$cmb-&gt;add_field( array(\r\n  'name'       =&gt; __( 'Things for the Guide', 'cmb2' ),\r\n  'id'         =&gt; 'attached_cmb2_attached_posts',\r\n  'type'       =&gt; 'custom_attached_posts',\r\n  'show_on_cb' =&gt; 'cmb2_hide_if_no_cats',\r\n  'options' =&gt; array(\r\n    'show_thumbnails' =&gt; true, \/\/ Show thumbnails on the left\r\n    'filter_boxes'    =&gt; true, \/\/ Show a text box for filtering the results\r\n    'query_args'      =&gt; array(\r\n      \/\/ 'posts_per_page' =&gt; 2,\r\n      'post_type' =&gt; array('post', 'page')\r\n    ), \/\/ override the get_posts args\r\n  ),\r\n) );<\/code><\/pre>\n<p>We nestle all this code nicely into a functionality plugin, rather than a `functions.php` file, so that changing themes has no bearing on this content.<\/p>\n<h3>A Template for Guides<\/h3>\n<p>Now that a custom post type exists for our guides, adding a file called `single-guides.php` into our active theme is enough to make that the file that renders for like `\/guide\/example\/`.<\/p>\n<p>In that file, we do whatever normal template-y stuff we'd do on any other template file (e.g. `page.php`, but also loop through all these posts we've attached!<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">&lt;?php\r\n\r\n  $attached = get_post_meta(get_the_ID(), 'attached_cmb2_attached_posts', true);\r\n\r\n  foreach ($attached as $attached_post) {\r\n    $post = get_post($attached_post); ?&gt;\r\n\r\n  &lt;?php include(\"parts\/article-card.php\"); ?&gt;\r\n\r\n&lt;?php } ?&gt;<\/code><\/pre>\n<p>All in all, not that much to it!<\/p>\n<figure id=\"post-253384\" class=\"align-none media-253384\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/04\/working-guide.png\" srcset=\"https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_1000\/v1491232749\/working-guide_h9huvf.png 1000w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_801\/v1491232749\/working-guide_h9huvf.png 801w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_637\/v1491232749\/working-guide_h9huvf.png 637w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_453\/v1491232749\/working-guide_h9huvf.png 453w, https:\/\/res.cloudinary.com\/css-tricks\/image\/upload\/c_scale,w_200\/v1491232749\/working-guide_h9huvf.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" \/><\/figure>\n<p>It feels great to have some kind of mechanism for surfacing evergreen content like this. That can be quite a challenge for sites with a huge amount of content!<\/p>\n<hr>\n<p>High five to <a href=\"https:\/\/twitter.com\/rsm\">Rebekah Monson<\/a>, whom I ripped this idea off of, who uses this to build guides on The New Tropic, like <a href=\"https:\/\/thenewtropic.com\/our-neighborhood-guides\/\">these neighborhood guides<\/a>.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>A blog post can be anything you want. You could easily write one that links up a bunch of articles on your site. Titles, summaries, links&#8230; all hand-crafted HTML. A &#8220;guide&#8221;, as it were. It will likely be appreciated by your readers, I find, especially when you&#8217;re linking up old evergreen content that is still [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253363"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253363"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253363\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253363"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253363"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253363"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":253352,"date":"2017-04-01T05:18:32","date_gmt":"2017-04-01T12:18:32","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253352"},"modified":"2017-04-01T05:18:32","modified_gmt":"2017-04-01T12:18:32","slug":"matrix3d-frame-perfect-custom-scrollbar","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/matrix3d-frame-perfect-custom-scrollbar\/","title":{"rendered":"`matrix3d()` for a Frame-Perfect Custom Scrollbar"},"content":{"rendered":"<p>Das Surma:<\/p>\n<blockquote><p>In this article we will leverage some unconventional CSS matrices to build a custom scroller that doesn't require any JavaScript while scrolling, just some setup code.<\/p><\/blockquote>\n<p>If <a href=\"https:\/\/googlechrome.github.io\/ui-element-samples\/custom-scrollbar\/\">turning a scrollbar into a Nyan cat<\/a> with near-perfect functionality isn't a CSS trick, I don't know what is.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Das Surma: In this article we will leverage some unconventional CSS matrices to build a custom scroller that doesn&#8217;t require any JavaScript while scrolling, just some setup code. If turning a scrollbar into a Nyan cat with near-perfect functionality isn&#8217;t a CSS trick, I don&#8217;t know what is.<\/p>\n","protected":false},"author":3,"featured_media":253353,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[1017],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253352"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253352"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253352\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/253353"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253352"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253352"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253352"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":253349,"date":"2017-04-01T05:06:30","date_gmt":"2017-04-01T12:06:30","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253349"},"modified":"2017-04-01T05:12:16","modified_gmt":"2017-04-01T12:12:16","slug":"whack-a-host","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/whack-a-host\/","title":{"rendered":"Whack-A-Host"},"content":{"rendered":"<p>Dave and I did <a href=\"https:\/\/shoptalkshow.com\/episodes\/254-webvr-josh-carpenter-kevin-ngo\/\">a ShopTalk Show all about VR<\/a> the other week. Then, as Dave does, he went off and used <a href=\"https:\/\/aframe.io\/\">A-Frame<\/a> to build a game: <a href=\"http:\/\/codepen.io\/davatron5000\/pen\/Wpaodj\">ShopTalk Show: What-A-Host<\/a>! Between this and playing around with <a href=\"https:\/\/www.tiltbrush.com\/\">Tilt Brush<\/a> at <a href=\"https:\/\/sarahdrasnerdesign.com\/\">Sarah's<\/a> the other week, I'm thisclose to getting a headset.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Dave and I did a ShopTalk Show all about VR the other week. Then, as Dave does, he went off and used A-Frame to build a game: ShopTalk Show: What-A-Host! Between this and playing around with Tilt Brush at Sarah&#8217;s the other week, I&#8217;m thisclose to getting a headset.<\/p>\n","protected":false},"author":3,"featured_media":253351,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[1203],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253349"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253349"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253349\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/253351"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253349"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253349"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253349"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":253164,"date":"2017-03-31T07:22:54","date_gmt":"2017-03-31T14:22:54","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253164"},"modified":"2017-03-31T07:22:54","modified_gmt":"2017-03-31T14:22:54","slug":"css-grid-replace-flexbox","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/css-grid-replace-flexbox\/","title":{"rendered":"Does CSS Grid Replace Flexbox?"},"content":{"rendered":"<p>No. Well. Mostly No.<\/p>\n<p>Grid is much newer than Flexbox and has a bit less browser support. That's why it makes perfect sense if people are wondering if CSS grid is here to replace Flexbox.<\/p>\n<p>To put a point on it:<\/p>\n<ol>\n<li>Grid can do things Flexbox can't do.<\/li>\n<li>Flexbox can do things Grid can't do.<\/li>\n<li>They can work together: a grid item can be a flexbox container. A flex item can be a grid container.<\/li>\n<\/ol>\n<p><!--more--><\/p>\n<p>Even though Grid is pretty new, we have <a href=\"https:\/\/css-tricks.com\/tag\/grid\/\">lots of articles<\/a> about it, including a <a href=\"https:\/\/css-tricks.com\/getting-started-css-grid\/\">getting started article<\/a>, an article about <a href=\"https:\/\/css-tricks.com\/css-grid-one-layout-multiple-ways\/\">a basic layout done multiple ways<\/a>, and <a href=\"https:\/\/css-tricks.com\/snippets\/css\/complete-guide-grid\/\">a complete guide<\/a>.<\/p>\n<p>If you hadn't heard the trumpets blaring, <a href=\"https:\/\/twitter.com\/render_conf\/status\/847741282730389504\">March 2017<\/a> was the banner month for Grid. It was released, completely unprefixed and ready-to-go, in Chrome, Opera, Firefox, and Safari. Even Edge supports it,  albiet an older version of the spec, which you can get some support for by using <a href=\"https:\/\/css-tricks.com\/autoprefixer\/\">Autoprefixer<\/a>.    <\/p>\n<p>So.<\/p>\n<blockquote><p>Does Grid replace Flexbox?<\/p><\/blockquote>\n<p>It seems a little complicated at first. Especially if you're just starting to get a grip on the weird, alien syntax of Flexbox. Now there is <em>a whole other<\/em> syntax to learn? Sheesh.<\/p>\n<p>Here's some things Grid is <em>specifically<\/em> better at than Flexbox:<\/p>\n<ul>\n<li>Making whole page layouts. It's better for that even just considering <a href=\"https:\/\/jakearchibald.com\/2014\/dont-use-flexbox-for-page-layout\/\">layout performance reasons<\/a>.<\/li>\n<li>Making literal grids. Like X columns with Y gap between them homegrown framework stuff. <code>grid-gap<\/code> is wonderful, as gutters are the main pain point of grid systems.<\/li>\n<li>Requiring <a href=\"http:\/\/daverupert.com\/2017\/03\/initial-impressions-of-css-grid\/\">less media query intervention<\/a> with really powerful functionality like auto layout, <code>minmax()<\/code>, <code>repeat()<\/code>, and <code>auto-fill<\/code>. Here's <a href=\"https:\/\/twitter.com\/jensimmons\/status\/847576895055069184\">a neat idea<\/a>.<\/li>\n<\/ul>\n<p>And another huge one: Grid can position elements in 2 dimensions. Both columns and rows. That's a first. Rachel Andrew once <a href=\"https:\/\/rachelandrew.co.uk\/archives\/2016\/03\/30\/should-i-use-grid-or-flexbox\/\">made that very clear<\/a>:<\/p>\n<blockquote><p>Flexbox is essentially for laying out items in a single dimension \u2013 in a row OR a column. Grid is for layout of items in two dimensions \u2013 rows AND columns.<\/p><\/blockquote>\n<p>Let's see some demos.<\/p>\n<p>Say we're building a horizontal navigation component \u2014 that's the perfect use case for Flexbox because it sets content in only one direction. In Chris' demo below you can mess around with those properties and see just how powerful Flexbox is:<\/p>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"FAbpm\" data-default-tab=\"result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Bar Navigation with Flexbox and SVG icons\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/FAbpm\/\">Bar Navigation with Flexbox and SVG icons<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>But there are some instances where those flexbox properties, such as <code>justify-content<\/code> or <code>align-items<\/code>, should be used in conjunction with Grid properties. Take this demo for instance:<\/p>\n<p data-height=\"865\" data-theme-id=\"1\" data-slug-hash=\"7fd26178982f9be68bc340cec074c38a\" data-default-tab=\"result\" data-user=\"robinrendle\" data-embed-version=\"2\" data-pen-title=\"Flexbox and Grid \u00a0\u2013\u00a0First demo\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/robinrendle\/pen\/7fd26178982f9be68bc340cec074c38a\/\">Flexbox and Grid \u00a0\u2013\u00a0First demo<\/a> by Robin Rendle (<a href=\"http:\/\/codepen.io\/robinrendle\">@robinrendle<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>First we've made a .wrapper that is set to <code>display: flex;<\/code>. That way we can set a max-width on our <code>.grid<\/code> and use <code>justify-content: center;<\/code> to place it in the middle of the viewport. Then we can make our grid with the right number of columns: <\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.wrapper {\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.grid {\r\n  display: grid;\r\n  max-width: 800px;\r\n  grid-template-columns: 1fr 2fr;\r\n}<\/code><\/pre>\n<p>That's just the first step. <\/p>\n<p>Now let's make that <code>.ad<\/code> take up the whole row of our grid. Well, we can do that by specifically targeting our <code>&lt;div&gt;<\/code> without messing up the rest of the children of our grid:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.ad {\r\n  grid-column-start: 1;\r\n  grid-column-end: 3;\r\n}<\/code><\/pre>\n<p>What we're saying with the code above is <em>\"start this div on the first column and end on the very last column.\"<\/em> That should look something like this:<\/p>\n<p data-height=\"800\" data-theme-id=\"1\" data-slug-hash=\"9ae2724ca0729159c99aa943531e8bc5\" data-default-tab=\"result\" data-user=\"robinrendle\" data-embed-version=\"2\" data-pen-title=\"Flexbox and Grid \" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/robinrendle\/pen\/9ae2724ca0729159c99aa943531e8bc5\/\">Flexbox and Grid <\/a> by Robin Rendle (<a href=\"http:\/\/codepen.io\/robinrendle\">@robinrendle<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Further, let's say that we always wanted our ad block to be twice the size of our first row \u2013 we can totally do that! We just need to use the <code>grid-template-rows<\/code> property:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.grid {\r\n  display: grid;\r\n  max-width: 800px;\r\n  grid-template-columns: 1fr 2fr;\r\n  grid-template-rows: 1fr 2fr 1fr;\r\n}<\/code><\/pre>\n<p>That's the equivalent of saying: <em>\"there are three rows in our grid. Always make sure that the second row is twice the size of the first and third.\"<\/em> In other words, we're creating relationships between rows and other rows whilst also defining the number of columns in our grid! <\/p>\n<p data-height=\"800\" data-theme-id=\"1\" data-slug-hash=\"d511509e3140d23a9e0ef31fd65e730d\" data-default-tab=\"result\" data-user=\"robinrendle\" data-embed-version=\"2\" data-pen-title=\"Flexbox and Grid \" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/robinrendle\/pen\/d511509e3140d23a9e0ef31fd65e730d\/\">Flexbox and Grid <\/a> by Robin Rendle (<a href=\"http:\/\/codepen.io\/robinrendle\">@robinrendle<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>With CSS Grid we can set relationships horizontally (with <code>grid-template-columns<\/code>) and vertically (with <code>grid-template-rows<\/code>) but at the same time. Flexbox, on the other hand, is stuck doing either vertical or horizontal layouts (with <code>flex-direction<\/code>) \u2013 but that doesn't mean we should ditch it. <\/p>\n<h3>Potentially Confusing: a \"2D\" Layout with Flexbox<\/h3>\n<p>What can get a little confusing is that it's not impossible to make multi-dimensional layouts in just Flexbox. For example:<\/p>\n<p data-height=\"410\" data-theme-id=\"1\" data-slug-hash=\"RpEQmX\" data-default-tab=\"css,result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"A \"Grid\" with Flexbox\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/RpEQmX\/\">A \"Grid\" with Flexbox<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>There are certainly rows and columns there, even a final element that spans multiple columns. It's easy to build and flexible. It's done through allowing <code>flex-wrap<\/code> on the container, having the children's <code>flex-basis<\/code> be 1\/3 of the width of the container, and allowing <code>flex-grow<\/code> to stretch children if need by. (The <code>flex<\/code> property is shorthand for <code>flex-grow<\/code>, <code>flex-shrink<\/code>, and <code>flex-basis<\/code>.)<\/p>\n<p>It's not wrong, it's just one way of doing something like this, and you could probably make an argument for it being less intuitive and adaptable.<\/p>\n<h3>Potentially Confusing: a \"1D\" Layout with Grid<\/h3>\n<p>Grid <em>can<\/em> do 2D layout, meaning defining both <code>grid-template-rows<\/code> and <code>grid-template-columns<\/code>, but it doesn't have to use both. Here's a demo of using it just to lay boxes in a horizontal row:<\/p>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"VpqXLJ\" data-default-tab=\"css,result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Easy Columns with Grid\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/VpqXLJ\/\">Easy Columns with Grid<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>This isn't wrong either. In fact, you could easily make the argument that this is easier to understand and more succinctly expressed than doing it with flexbox. For example, no layout properties are needed on the child elements at all. But you could also argue that purely 1D layout like this is more powerful in Flexbox, because Flexbox allows us to move those elements around easier (e.g. move them all to one side or another, change their order, space them out evenly, etc).<\/p>\n<h3>About That Nesting<\/h3>\n<p>One more time to lock it in!<\/p>\n<p>This is good to remember: grid items can be flex parents.<\/p>\n<figure id=\"post-253338\" class=\"align-none media-253338\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/both-grid-and-flex.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/both-grid-and-flex.png 1331w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/both-grid-and-flex-300x187.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/both-grid-and-flex-768x478.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/both-grid-and-flex-1024x637.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"LWMdRv\" data-default-tab=\"css,result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Easy Columns with Grid\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/LWMdRv\/\">Easy Columns with Grid<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>And, flex items can be grid parents:<\/p>\n<figure id=\"post-253339\" class=\"align-none media-253339\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/grid-sub.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/grid-sub.png 1358w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/grid-sub-300x197.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/grid-sub-768x503.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/grid-sub-1024x671.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"VpqXyY\" data-default-tab=\"css,result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Easy Columns with Grid\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/VpqXyY\/\">Easy Columns with Grid<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>No. Well. Mostly No. Grid is much newer than Flexbox and has a bit less browser support. That&#8217;s why it makes perfect sense if people are wondering if CSS grid is here to replace Flexbox. To put a point on it: Grid can do things Flexbox can&#8217;t do. Flexbox can do things Grid can&#8217;t do. [&hellip;]<\/p>\n","protected":false},"author":223806,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[532,686],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253164"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/223806"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253164"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253164\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253164"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253164"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253164"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":253332,"date":"2017-03-31T05:24:28","date_gmt":"2017-03-31T12:24:28","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253332"},"modified":"2017-03-31T05:24:28","modified_gmt":"2017-03-31T12:24:28","slug":"about-property-ordering","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/about-property-ordering\/","title":{"rendered":"About Property Ordering"},"content":{"rendered":"<p><a href=\"https:\/\/medium.com\/@jerrylowm\/alphabetize-your-css-properties-for-crying-out-loud-780eb1852153\">Point.<\/a><\/p>\n<p><a href=\"http:\/\/michael.blog\/2017\/03\/30\/organize-your-css-properties-however-you-dang-like\/\">Counterpoint.<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Point. Counterpoint.<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253332"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253332"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253332\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253332"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253332"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253332"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":253293,"date":"2017-03-30T07:18:26","date_gmt":"2017-03-30T14:18:26","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253293"},"modified":"2017-03-30T07:18:26","modified_gmt":"2017-03-30T14:18:26","slug":"book-release-svg-animations","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/book-release-svg-animations\/","title":{"rendered":"Book Release: SVG Animations"},"content":{"rendered":"<p>Our own <a href=\"https:\/\/css-tricks.com\/author\/sdrasner\/\">Sarah Drasner<\/a> has published a book! You can grab it from <a href=\"http:\/\/shop.oreilly.com\/product\/0636920045335.do\">the O'Reilly website<\/a> or <a href=\"http:\/\/amzn.to\/2oeNqSh\">Amazon<\/a>. <\/p>\n<p>If you need a little convincing, I figured I would post the foreword I wrote for the book here, then you can continue reading over on the O'Reilly site.<\/p>\n<p><!--more--><\/p>\n<figure id=\"post-253296\" class=\"align-none media-253296\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/svg-animations.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/svg-animations.png 1510w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/svg-animations-262x300.png 262w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/svg-animations-768x880.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/svg-animations-894x1024.png 894w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<h3>Foreword<\/h3>\n<p>Have you ever learned a new word, then had the opportunity to use that word in the perfect situation come up a number of times that week? That's what it feels like when you start learning SVG. To layer on the metaphors, it's like discovering your toolbox has been missing a tool all this time.<\/p>\n<p>As a designer and developer, now that I've dug into SVG, I can tell you I work with it almost every single day. Not necessarily because I'm jamming SVG into projects because I can, but because it's so often the right tool for the job. After you read this book and SVG becomes your tool too, I think you too will find yourself reaching for it regularly. It will pop to mind when you're working, just like that satisfying moment when a new word you've learned comes in useful.<\/p>\n<p>Perhaps you'll think of SVG when you need to replace a logo with one that will display crisply on screens of any pixel density. Perhaps you'll think of SVG when you need an icon system, a chart or graph, or a vector background pattern. Now that you're holding this book in your hands, you'll almost certainly think of SVG when you think of animation.<\/p>\n<p>SVG is uniquely qualified for animation. It's the single most powerful tool there is for animation on the web. Partly that's because SVG is made of numbers. SVG essentially draws with geometry. And on the web, numbers are easy and intuitive to manipulate and animate. Perhaps you know that you can \"fade out\" an element\u2014a rudimentary animation\u2014by animating opacity from 1 to 0. So too you could animate the radius of a circle, the coordinates of a rectangle, or a point along a path.<\/p>\n<p>Another reason SVG animation is so compelling is how many ways there are to do it. There are a variety of native technologies to choose from, and libraries built on top of those to help. How do you know what to choose? It requires some knowledge and consideration. Fortunately, you've made the perfect purchase.<\/p>\n<p>Sarah is the ultimate tour guide for all of this. She's not just an experienced technical writer, but an accomplished vector artist and front-end developer as well. She has been bringing her own SVG art to life through animation for years and years. She knows the tools. She knows the landscape. She knows how to get to the meat of what is important about all this and explain it.<\/p>\n<p>I'm not gasconading for Sarah without reason. I've worked with Sarah and ingurgitated her knowledge on SVG animation much to my benediction. If you're thinking \"I'm a front-end developer already, and have gotten by just fine without this,\" remember that you don't reach for what you don't know. Read on, and become an SVG opsimath.<\/p>\n<hr>\n<p><a href=\"https:\/\/www.oreilly.com\/learning\/introduction-to-svg-animation\" class=\"button\">Read Chapter One<\/a> <a href=\"http:\/\/shop.oreilly.com\/product\/0636920045335.do?intcmp=il-web-books-videos-product-na_new_site_introduction_to_svg_animation_body_text_cta\" class=\"button\">Buy at the O'Reilly Shop<\/a> <a href=\"http:\/\/amzn.to\/2oeNqSh\" class=\"button\">Buy on Amazon<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Our own Sarah Drasner has published a book! You can grab it from the O&#8217;Reilly website or Amazon. If you need a little convincing, I figured I would post the foreword I wrote for the book here, then you can continue reading over on the O&#8217;Reilly site.<\/p>\n","protected":false},"author":3,"featured_media":253296,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[612,469],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253293"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253293"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253293\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/253296"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253293"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253293"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253293"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":253223,"date":"2017-03-30T04:52:29","date_gmt":"2017-03-30T11:52:29","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253223"},"modified":"2017-04-06T16:02:28","modified_gmt":"2017-04-06T23:02:28","slug":"making-animations-wait","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/making-animations-wait\/","title":{"rendered":"Making Animations Wait"},"content":{"rendered":"<p>I recently launched a <a href=\"http:\/\/courses.cssanimation.rocks\/p\/level-up\">CSS animation course<\/a> for designers and developers wanting to improve their web animation skills. While building the course, I ran into the issue where content would animate before assets had downloaded. This article covers the approach I put together to fix the problem and ensure all animations played when expected.<\/p>\n<p><!--more--><\/p>\n<p>We've all been there. For example, we want to fade in a hero header on load, so we add the fade-in keyframes, setting up the animation, but then the animations starts before the background image is downloaded. We get a half-loaded image fading in, and even worse, our logo or headline appear before the background is ready.<\/p>\n<figure><video src=\"https:\/\/css-tricks.com\/videos\/too-fast-animation.mov\" controls loop autoplay><\/video><\/figure>\n<p>Thankfully there's a way we can fix it.<\/p>\n<h3>The Issue: Parallel Events<\/h3>\n<p>When we load a website, the browser tries to make things are fast as possible by downloading and rendering the HTML and CSS while downloading other assets such as images in parallel.<\/p>\n<p>This loading style can mean we get to see some layout and text content more quickly, but if you've created a large, magazine style header, the image might not arrive in time.<\/p>\n<p>Let's use some built-in browser tricks to put the brakes on the animation until the right moment.<\/p>\n<h3><code>load<\/code> events and <code>animation-play-state<\/code><\/h3>\n<p>Browsers give us a handy JavaScript <code>load<\/code> event when content has finished loading. That event will fire for elements such as images and scripts. We can use this to control when our animations play.<\/p>\n<p>We're going to make use of some JavaScript to listen for a load event, and make use <code>animation-play-state<\/code> to pause our animations until the event.<\/p>\n<p>The following JavaScript should do the trick.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">document.body.classList.add('js-loading');\r\n\r\nwindow.addEventListener(\"load\", showPage);\r\n\r\nfunction showPage() {\r\n  document.body.classList.remove('js-loading');\r\n}<\/code><\/pre>\n<p>Here's what the code does. The first line adds a <code>js-loading<\/code> class to the <code>body<\/code> element. Then it sets up an event listener.<\/p>\n<p>The event listener waits until the <code>load<\/code> event occurs, and then run the function <code>removeLoadingClass<\/code>. At this point, all the images and other assets have downloaded.<\/p>\n<p>Lastly the <code>removeLoadingClass<\/code> removes the class from the <code>body<\/code> tag.<\/p>\n<p>This code should be added to the HTML of your page, such as the <code>head<\/code>. If loaded in from an external file, the CSS could load and be parsed before this code executes, which would give the animations a chance to start before we're ready.<\/p>\n<p>Let's use this class to make any on-page animations wait until the content is ready.<\/p>\n<h3>Waiting for one image<\/h3>\n<p>This approach waits for all assets on a page to load. You might want to only wait for one image, in your header for example. Thankfully there are load events for each image. The approach set out in <a href=\"https:\/\/css-tricks.com\/measuring-image-widths-javascript-carefully\/\">Measuring Image Widths in JavaScript<\/a> can help.<\/p>\n<p>We can adjust the JavaScript to focus on one specific image.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">\/\/ Adjust the \"querySelector\" value to target your image\r\nvar img = document.querySelector(\"img\");\r\ndocument.body.classList.add('js-loading');\r\nimg.addEventListener(\"load\", removeLoadingClass);\r\nfunction removeLoadingClass() {\r\n  document.body.classList.remove('js-loading');\r\n}<\/code><\/pre>\n<h3>The <code>animation-play-state<\/code> Property<\/h3>\n<p>The <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/CSS\/animation-play-state\">animation-play-state<\/a> property is well supported by modern browsers. It tells the browser whether the current animation is running or paused. By default animations are \"running\".<\/p>\n<p>We can use this property to make any animations on the page \"pause\" while we're loading the content. We add this to our CSS.<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.js-loading *,\r\n.js-loading *:before,\r\n.js-loading *:after {\r\n  animation-play-state: paused !important;\r\n}<\/code><\/pre>\n<p>This code sets the play state of everything on the page to \"paused\", whenever the <code>body<\/code> has the class <code>js-loading<\/code>.<\/p>\n<p>It will make sure it applies to all of the <code>:before<\/code> and <code>:after<\/code> pseudo-elements also.<\/p>\n<p>When JavaScript removes the <code>js-loading<\/code> class from the <code>body<\/code> tag, the rule no longer applies and all animations will be in their expected running state.<\/p>\n<p>A nice benefit of this approach is that we don't have to change anything else in our stylesheet!<\/p>\n<h3>What if JavaScript fails?<\/h3>\n<p>This is always a question worth asking if we rely on JavaScript to handle displaying content on screen. Sometimes JavaScript fails. It can be disabled. Plugins can do unpredictable things. While in most cases this will work, JavaScript is always a little outside our control so it's good to think about what would happen if the JavaScript didn't work as expected.<\/p>\n<p>In this case, I think we're good. If the JavaScript doesn't run, it won't apply the <code>js-loading<\/code> class. The animations will play straight away. This might result in a little strangeness with the background image loading as it animates, but that's a worst case scenario and a reasonable fallback.<\/p>\n<h3>See it in action<\/h3>\n<p>Let's test this to see it working. We need a large image. I found <a href=\"https:\/\/images.unsplash.com\/photo-1446776811953-b23d57bd21aa?dpr=2&auto=format&fit=\">this rather gorgeous Nasa photo on Unsplash<\/a>. It's over 2MB in size.<\/p>\n<p>When the page loads we should see the blank screen initially. To really see it in action we can use Chrome's built-in throttling feature. Opening the inspector, select the \"Network\" tab, then open the dropdown containing speed presets. From this, we select \"Good 3G\", which should be slow enough to see this in action.<\/p>\n<figure id=\"post-253253\" class=\"align-none media-253253\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/network-preset.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/network-preset.png 1104w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/network-preset-300x149.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/network-preset-768x381.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/network-preset-1024x508.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>A preset Network speed in Chrome<\/figcaption><\/figure>\n<p>Press \"Rerun\" on this demo and no animations should play until the image has fully loaded.<\/p>\n<p data-height=\"635\" data-theme-id=\"1\" data-slug-hash=\"vxQrEQ\" data-default-tab=\"result\" data-user=\"donovanh\" data-embed-version=\"2\" data-pen-title=\"Using load and animation-play-state to wait till image has loaded #2\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/donovanh\/pen\/vxQrEQ\/\">Using load and animation-play-state to wait till image has loaded #2<\/a> by Donovan Hutchinson (<a href=\"http:\/\/codepen.io\/donovanh\">@donovanh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Try removing the JavaScript (and clear the cache before reloading) to see the difference! <\/p>\n<h3>Loading Spinner<\/h3>\n<p>If you want to avoid a blank page at this point, you ought to have some loading text or animation that lets people know. It depends on how long you think the delay might be. If you have an enormously large image and the page tends to wait for more than a second or two, then a spinner might be a good idea.<\/p>\n<p>On the other hand, it might be worth compressing the image more or scaling it down so that it loads more quickly. Experiment and see what works best for you.<\/p>\n<hr>\n<p>I hope this technique helps you keep your animations working together.<\/p>\n<p>If you'd like to know more about animating your web sites, you might enjoy the tutorials over on <a href=\"https:\/\/cssanimation.rocks\">CSSAnimation.rocks<\/a>. Follow along on Twitter at <a href=\"https:\/\/twitter.com\/cssanimation\">@cssanimation<\/a>.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>I recently launched a CSS animation course for designers and developers wanting to improve their web animation skills. While building the course, I ran into the issue where content would animate before assets had downloaded. This article covers the approach I put together to fix the problem and ensure all animations played when expected.<\/p>\n","protected":false},"author":248196,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[612],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253223"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/248196"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253223"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253223\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253223"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253223"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253223"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252883,"date":"2017-03-29T05:36:00","date_gmt":"2017-03-29T12:36:00","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252883"},"modified":"2017-03-29T08:45:30","modified_gmt":"2017-03-29T15:45:30","slug":"writing-feature-requirements","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/writing-feature-requirements\/","title":{"rendered":"On Writing Feature Requirements"},"content":{"rendered":"<p>I have been asked to lead product development on a team. This is somewhat of a new journey for me because I'm generally used to <a href=\"https:\/\/css-tricks.com\/the-front-end-developers-dilemma\/\">calling myself a web designer<\/a> rather than a product manager or strategist.<\/p>\n<p>The toughest part of this job for me has been organizing my thoughts. I've written an executive summary for the product we're building, done some competitive research and even dusted off my limited MBA education for a <a href=\"https:\/\/en.wikipedia.org\/wiki\/SWOT_analysis\">SWOT analysis<\/a>. Oh yeah, now it looks like I know what I'm doing!<\/p>\n<p>Many of us who read CSS-Tricks with any sort of regularity likely have to think strategically to do our jobs, whether it's in design, development, or both. What I've found, however, is that <em>thinking<\/em> strategically is a whole lot different than <em>acting<\/em> strategically. <!--more--> Where thinking strategically is an internal process that stays in your head, acting strategically requires careful orchestration and the ability to document internal thoughts in a way that can be shared and understood across a team.<\/p>\n<p>The difference between thinking and acting strategically was never truer to me than when I sat down to write feature requirements for this project. I thought I would share what I've learned in my early attempts to write requirements.<\/p>\n<p>Before I get started, I do want to say that there is no shortage of ways to approach feature requirements. What I'm about to share largely borrows bits and pieces that I've found crawling the web for answers to my own questions and piecing them together in a way that works for me.<\/p>\n<h3>Recognize Your Bias<\/h3>\n<p>The first thing I had to learn to accept is that I am biased in how I approach requirements. I am a web designer by trade and, as such, my thinking tends to be on the visual side of things. I can sketch wireframes and produce mockups all day long, but not all people on the team see or think this way.<\/p>\n<p>There is nothing wrong with a bias towards visual thinking, but it's worth recognizing it and remembering that your documentation will need to make sense to others. In my case, I've had a blast sketching layouts and drawing a bunch of squares that represent how users navigate through the product. That's helped me get my thoughts out of my head so I can start the process of documenting them. Your process might be bulleted lists or diagrams. Use what makes sense to you and know you will need to translate that work for others.<\/p>\n<h3>Tell a Story<\/h3>\n<p>I have also learned that thinking about features as stories helps a lot.<\/p>\n<p>Think about it: a story has a protagonist (the user) who is finds herself in a situation (the user flow) before reaching an inciting incident (the task to complete) in order to find a resolution (the expected outcome). Who knew Stephen King was a master at writing feature requirements all this time?<\/p>\n<p>My process so far has been to make a list of all the key product features, then tell a story from the perspective of the end user about how they are using each feature. Our team is calling these user stories, and each feature can have as few as a single story and as many as a dozen, depending on the use cases.<\/p>\n<p>User stories are great because they force you to think from a user's perspective and to focus on expected outcomes. Let's say we are writing the requirements for Account Creation. Here is how we've been framing each user story:<\/p>\n<table>\n<tr>\n<th>As...<\/th>\n<th>I expect that...<\/th>\n<th>So that...<\/th>\n<\/tr>\n<tr>\n<td>[Identify the user]<\/td>\n<td>[Describe the task]<\/td>\n<td>[Explain the anticipated outcome]<\/td>\n<\/tr>\n<\/table>\n<p>Let's say we are writing the requirements for Account Creation. Here is how one user story for it might be written:<\/p>\n<table>\n<tr>\n<th>As...<\/th>\n<th>I expect that...<\/th>\n<th>So that...<\/th>\n<\/tr>\n<tr>\n<td>Any new customer<\/td>\n<td>I can use my existing Google or Facebook account to sign up<\/td>\n<td>I can sign-up faster and manage fewer accounts<\/td>\n<\/tr>\n<\/table>\n<p>I will interject here to say that this exercise requires that you have a darn good understanding of who your users are. Sure, the example above is rather generic because it targets \"any new customer\" but thinking through who your users are, documenting their personalities and even going so far as to give them names will allow you to be more specific and contextual when writing user stories. MailChimp has a <a href=\"https:\/\/blog.mailchimp.com\/new-mailchimp-user-persona-research\/\">wonderful write-up<\/a> on their process for creating user personas that was super helpful for me.<\/p>\n<h3>Document User Flows<\/h3>\n<p>If a user story helps set expectations for a feature requirement, then a user flow provides context for how the user got there and where she ends up after completing the task. <\/p>\n<p>Going back to my personal bias for visual thinking, it makes the most sense to me to see this in a diagram. However, I know not everyone thinks like me, so I have been outlining the required steps a user takes to accomplish the task and using a diagram to illustrate more complex flows.<\/p>\n<p>Here's how my I might write up a flow for the user story we used earlier for social sign-in in an account creation feature:<\/p>\n<table>\n<tr>\n<th>User Flow ID<\/th>\n<th>Description<\/th>\n<\/tr>\n<tr>\n<td>UF-1<\/td>\n<td>Customer responds to a call-to-action on the marketing site to create an account<\/td>\n<\/tr>\n<tr>\n<td>UF-2<\/td>\n<td>Customer chooses to register a new account using a Google or Facebook account on the  Account Sign-Up screen<\/td>\n<\/tr>\n<tr>\n<td>UF-3<\/td>\n<td>Customer selects either Facebook or Google<\/td>\n<\/tr>\n<tr>\n<td>UF-4<\/td>\n<td>Customer is prompted to authorize the use of their selected account to register an account by verifying her identity<\/td>\n<\/tr>\n<tr>\n<td>UF-5<\/td>\n<td>Customer either:<\/p>\n<ul>\n<li>Denies the authorization and is directed back to the Account Sign-Up screen<\/li>\n<li>Approves the authorization and is directed to the User Story 2<\/li>\n<\/td>\n<\/tr>\n<\/table>\n<p>Notice how each step is given an ID and each ID can branch off into sub-tasks. The IDs are useful for being able to refer to specific points in the documentation when discussing them with others on the team. This can certainly get messy, which is where a nice diagram can come in handy.<\/p>\n<figure id=\"post-253128\" class=\"align-none media-253128\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/feature-requirements-user-flow-diagram.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/feature-requirements-user-flow-diagram.jpg 2000w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/feature-requirements-user-flow-diagram-300x104.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/feature-requirements-user-flow-diagram-768x266.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/feature-requirements-user-flow-diagram-1024x354.jpg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>An example of a user flow diagram<\/figcaption><\/figure>\n<h3>Document Requirements<\/h3>\n<p>The crazy part in learning how to write requirements is how much forethought is required before you really start getting into the requirements.<\/p>\n<p>Once the feature has been identified, a user story is written, and the flow outlined, I move into the actual requirements, using the same format that was used for user flows.<\/p>\n<p>Again, back to our social sign-in example, some simple requirements might be:<\/p>\n<table>\n<tr>\n<th>Requirement ID<\/th>\n<th>Description<\/th>\n<\/tr>\n<tr>\n<td>RQ-1<\/td>\n<td>A Google Analytics funnel to measure conversions and drop-offs<\/td>\n<\/tr>\n<tr>\n<td>RQ-2<\/td>\n<td>OAuth integration<\/td>\n<\/tr>\n<tr>\n<td>RQ-3<\/td>\n<td>Options for Facebook and Google<\/td>\n<\/tr>\n<\/table>\n<p>You can be as detailed as you need to be. I try to err on the conservative side and write as many as possible, while trying not to be too rigidly defined that it stifles creative license during design and development.<\/p>\n<h3>Be Transparent With Assumptions<\/h3>\n<p>I've learned that every decision I make is wrought with assumptions. It's hard to be aware of everything, but acknowledging anything you might be taking for granted is important because it provides a window into the decision-making process. Documenting assumptions allows others to understand your logic and provides an opportunity to fuel further discussion.<\/p>\n<p>Let's document a few assumptions in our running example:<\/p>\n<table>\n<tr>\n<th>Assumption ID<\/th>\n<th>Description<\/th>\n<\/tr>\n<tr>\n<td>AS-1<\/td>\n<td>Social logins are worthwhile. MailChimp <a href=\"https:\/\/blog.mailchimp.com\/social-login-buttons-arent-worth-it\/\">wrote up<\/a> a compelling argument against using them but that dates to 2012 and they later acknowledged it can be useful, depending on the site.<\/td>\n<\/tr>\n<tr>\n<td>AS-2<\/td>\n<td>This TechCrunch <a href=\"https:\/\/techcrunch.com\/2015\/01\/27\/facebook-dominates-social-logins\/\">report<\/a> from 2015 is still valid that Google and Facebook are the most used social logins and others are too marginal for us to consider for initial launch.<\/td>\n<\/tr>\n<tr>\n<td>AS-3<\/td>\n<td>We will store this information and keep a user logged in as long as they are logged into the social account she selected<\/td>\n<\/tr>\n<tr>\n<td>AS-4<\/td>\n<td>We will want to encourage this option ahead of the email option because it can save time.<\/td>\n<\/tr>\n<\/table>\n<p>Believe me, I didn't realize a seemingly simple task could carry so many assumptions! This can be so helpful.<\/p>\n<h3>Note Possible Constraints<\/h3>\n<p>A constraint is a limitation that may be outside of your control. Trying to pin these down early helps others on the team plan. I have also found it helpful to ask others if they can help identify constraints because sometimes you don't know what you don't know.<\/p>\n<table>\n<tr>\n<th>Constraint ID<\/th>\n<th>Description<\/th>\n<\/tr>\n<tr>\n<td>CT-1<\/td>\n<td>Google OAuth 2.0 <a href=\"https:\/\/developers.google.com\/identity\/protocols\/OAuth2\">limits<\/a><\/td>\n<\/tr>\n<tr>\n<td>CT-2<\/td>\n<td>Facebook guidelines for <a href=\"https:\/\/developers.facebook.com\/docs\/facebook-login\/web\/permissions\">web permissions<\/a><\/td>\n<\/tr>\n<\/table>\n<h3>Sample Document<\/h3>\n<p>I put together a Google Doc that pulls all these concepts together. Feel free to use it as a starting point any time you find yourself tasked with writing feature requirements.<\/p>\n<p><a class=\"button\" href=\"https:\/\/docs.google.com\/document\/d\/12oU2zABLlMioAVfJl_CGXrJsFwPY03Kap8tbl-eL_24\/edit?usp=sharing\">View Document<\/a><\/p>\n<h3>Wrapping Up<\/h3>\n<p>I sure hope this is helpful to anyone feeling their way through feature requirements. As mentioned earlier, nothing here is meant to be prescriptive. This is only what I've found helpful in my early journey into product development.<\/p>\n<p>That said, you may find some of these additional resources helpful:<\/p>\n<ul>\n<li><a href=\"https:\/\/alistapart.com\/article\/practical-design-discovery\">Practical Design Discovery<\/a>: Dan Brown writes provides a comprehensive guide on A List Apart on how to break design requirements into problem-solving principles that a team can rally around.<\/li>\n<li><a href=\"https:\/\/css-tricks.com\/write-a-script\/\">Write a Script<\/a>: Chris wrote this tidbit in response to a Jeremy Keith post and serves as a good reminder that code requirements can be written narratives that follow the code structure.<\/li>\n<li><a href=\"https:\/\/www.smashingmagazine.com\/2017\/03\/sketch-figma-showdown\/\">Sketch vs. Figma:<\/a> Christian Krammer compared the two apps for wireframing and it convinced me to give Figma a try.<\/li>\n<\/ul>\n","protected":false},"excerpt":{"rendered":"<p>I have been asked to lead product development on a team. This is somewhat of a new journey for me because I&#8217;m generally used to calling myself a web designer rather than a product manager or strategist. The toughest part of this job for me has been organizing my thoughts. I&#8217;ve written an executive summary [&hellip;]<\/p>\n","protected":false},"author":2508,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1187,1188],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252883"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/2508"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252883"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252883\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252883"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252883"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252883"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":253235,"date":"2017-03-29T05:33:35","date_gmt":"2017-03-29T12:33:35","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253235"},"modified":"2017-03-29T05:34:04","modified_gmt":"2017-03-29T12:34:04","slug":"building-performant-expand-collapse-animations","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/building-performant-expand-collapse-animations\/","title":{"rendered":"Building Performant Expand &#038; Collapse Animations"},"content":{"rendered":"<p>It's starting to be pretty common knowledge that there are only 2 things you can animate cheaply in CSS: opacity and transforms. Anything else, you run a high risk of that animation\/transition being choppy. Fortunately, there is a ton of animation possibility with those properties, especially since transform can move and resize elements any-which-way. <\/p>\n<p>You can even get tricky and fake the animating of other properties with transforms. In this tutorial on the Google Chrome Developers Blog, Paul Lewis and Stephen McGruer explain how you can use a vertical scale transform to fake a height animation, while simultaneously triggering a vertical scale transform the other direction so nothing looks squished. <\/p>\n<p>It's clever, performant, and useful. <a href=\"https:\/\/codepen.io\/chriscoyier\/pen\/WpaWBv\">I moved a copy to CodePen<\/a> to play with. <\/p>\n<p>It sure is a bunch of code for such a simple result, though. What I'd <em>prefer<\/em> to do as a developer is just have that click <a href=\"https:\/\/css-tricks.com\/video-screencasts\/150-hey-designers-know-one-thing-javascript-recommend\/\">toggle a class<\/a>, and the menu <a href=\"https:\/\/css-tricks.com\/using-css-transitions-auto-dimensions\/\">animate to an auto dimension<\/a>, and have it all happen performantly.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>It&#8217;s starting to be pretty common knowledge that there are only 2 things you can animate cheaply in CSS: opacity and transforms. Anything else, you run a high risk of that animation\/transition being choppy. Fortunately, there is a ton of animation possibility with those properties, especially since transform can move and resize elements any-which-way. You [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[612],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253235"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253235"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253235\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253235"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253235"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253235"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":253132,"date":"2017-03-28T05:54:27","date_gmt":"2017-03-28T12:54:27","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253132"},"modified":"2017-03-28T05:54:27","modified_gmt":"2017-03-28T12:54:27","slug":"using-devtools-tweak-designs-browser","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/using-devtools-tweak-designs-browser\/","title":{"rendered":"Using DevTools to Tweak Designs in the Browser"},"content":{"rendered":"<p>Let's look at some ways we can use the browsers DevTools to do design work. There are a few somewhat hidden tricks you mind find handy!<\/p>\n<p><!--more--><\/p>\n<h3>Toggling Classes With Checkboxes<\/h3>\n<p>This is useful when trying to pick a design from different options or to toggle the active state of an element without adding the class manually in DevTools. <\/p>\n<p>To achieve this, we could use different classes and scope styles inside them. So if we want to see different options for a banner design, we could so something like: <\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.banner-1 {\r\n  \/* Style variation *\/\r\n}\r\n\r\n.banner-2 {\r\n  \/* Style variation *\/\r\n}<\/code><\/pre>\n<p>Google Chrome gives us the ability to add all of these classes and toggle (show\/hide) them with a checkbox to make a quick comparison between them.<\/p>\n<p><iframe src=\"https:\/\/player.vimeo.com\/video\/207830826\" width=\"640\" height=\"480\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen><\/iframe><\/p>\n<p>See the <a href=\"http:\/\/codepen.io\/shadeed\/pen\/e2a8f51691cad05bdfd5b14fb9365214?editors=0100\">demo Pen<\/a>.<\/p>\n<h3>Editing Content with designMode<\/h3>\n<p>Web content is dynamic, so our design should be flexible and we should test for various types and lengths of content. For example, entering a very long word might break a design. To check that, we can edit our design right in the browser with <code>document.designMode<\/code>.<\/p>\n<p><iframe src=\"https:\/\/player.vimeo.com\/video\/207835383\" width=\"640\" height=\"480\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen><\/iframe><\/p>\n<p>This can help us test our design without editing the content manually in the source code. <\/p>\n<h3>Hiding Elements<\/h3>\n<p>Sometimes we need to hide elements in our design to check how it will look without them. Chrome DevTools give us the ability to inspect an element and type <code>h<\/code> from the keyboard to hide it by toggling CSS visibility property.<\/p>\n<p><iframe src=\"https:\/\/player.vimeo.com\/video\/207836443\" width=\"640\" height=\"401\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen><\/iframe><\/p>\n<p>This is very useful in case you want to hide some elements to take a screenshot and then discuss it with your team\/designer\/manager. Sometimes I use this feature to hide elements and then take a screenshot to mock a quick idea in Photoshop.<\/p>\n<h3>Screenshotting design elements<\/h3>\n<p>There is a useful feature in Firefox DevTools to take a screenshot of a specific element in the DOM. By doing that, we can compare our variations side by side to see which one is the best of our case.<\/p>\n<p>Follow the below steps:<\/p>\n<ol>\n<li>Open Firefox DevTools<\/li>\n<li>Right-click on an element and pick <strong>Screenshot Node<\/strong><\/li>\n<li>The screenshots are saved in the default downloads folder<\/li>\n<\/ol>\n<figure id=\"post-253133\" class=\"align-none media-253133\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/firefox-screenshot.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/firefox-screenshot.jpg 1408w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/firefox-screenshot-300x238.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/firefox-screenshot-768x608.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/firefox-screenshot-1024x811.jpg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>If you want to use Chrome for screenshotting, you can. There is a <a href=\"https:\/\/chrome.google.com\/webstore\/detail\/element-screenshot\/mhbapdljigafafoimcnnhagdclejnkcf\">plugin<\/a> called \"Element Screenshot\" that does almost the same job.<\/p>\n<h3>Changing Design Colors<\/h3>\n<p>In the early stages of every design projects, you might be exploring different color palettes. CSS' <code>hue-rotate<\/code> function is a powerful filter that provides us with the ability to change design colors right in the browser. It causes hue rotation for each pixel in an image or element. The value can be specified in <code>deg<\/code> or <code>rad<\/code>. <\/p>\n<p>In the below video, I added <code>filter: hue-rotate(value)<\/code> to the component, notice how all the colors change.<\/p>\n<p><iframe src=\"https:\/\/player.vimeo.com\/video\/207995530\" width=\"640\" height=\"528\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen><\/iframe><\/p>\n<p>Notice that <em>every<\/em> design element got affected from applying <code>hue-rotate<\/code>. For example, the user avatar colors looks wrong. We can revert the normal look by applying the negative value of <code>hue-rotate<\/code>.<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.bio__avatar {\r\n  filter: hue-rotate(-100deg);\r\n}<\/code><\/pre>\n<p>See the <a href=\"http:\/\/codepen.io\/shadeed\/pen\/2d611749947ac7688c2710248c473e50?editors=0010\">demo Pen<\/a>.<\/p>\n<h3>Using CSS Variables (Custom CSS Properties)<\/h3>\n<p>Even if the support is still not <a href=\"http:\/\/caniuse.com\/#feat=css-variables\">perfectly cross-browser<\/a> friendly (it's <a href=\"https:\/\/developer.microsoft.com\/en-us\/microsoft-edge\/platform\/status\/csscustompropertiesakacssvariables\/?q=css%20v\">currently<\/a> in development in Microsoft Edge), we can get the benefit of CSS variables today. Using them to define the spacing and color units will make it easy to make huge changes by changing tiny values on the fly.<\/p>\n<p>I defined the following for our web page:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">:root {\r\n  --spacing-unit: 1em;\r\n  --spacing-unit-half: calc(var(--spacing-unit) \/ 2); \/* = 0.5em *\/\r\n  --brand-color-primary: #7ebdc2;\r\n  --brand-color-secondary: #468e94;\r\n}<\/code><\/pre>\n<p>These variables will be used throughout the website elements like links, nav items, borders and background colors. When changing a single variable from the dev tools, all the associated elements will be affected!<\/p>\n<figure id=\"post-253134\" class=\"align-none media-253134\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/Screen-Shot-2017-03-12-at-4.34.47-PM.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/Screen-Shot-2017-03-12-at-4.34.47-PM.jpg 826w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/Screen-Shot-2017-03-12-at-4.34.47-PM-300x168.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/Screen-Shot-2017-03-12-at-4.34.47-PM-768x430.jpg 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<h3>Invert elements with CSS <code>filter: invert()<\/code><\/h3>\n<p>This is useful when you have a white text on black background or vice versa. For instance, in the header, we have the page title in white on a black background, and by adding <code>filter: invert<\/code> to the element, all the colors will be inverted. <\/p>\n<figure id=\"post-253135\" class=\"align-none media-253135\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/invert-filter.gif\" alt=\"\" \/><\/figure>\n<h3>CSS Visual Editor<\/h3>\n<p>This feature is becoming better every day. Safari has really nice UI tools for editing values. Chrome is adding similar things slowly to DevTools.<\/p>\n<p><iframe src=\"https:\/\/player.vimeo.com\/video\/208011466\" width=\"640\" height=\"480\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen><\/iframe><\/p>\n<p>Chrome has some cool stuff for things like <code>box-shadow<\/code>, <code>background-color<\/code>, <code>text-shadow<\/code> and <code>color<\/code>.<\/p>\n<figure id=\"post-253136\" class=\"align-none media-253136\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/chrome-visual-css.gif\" alt=\"\" \/><\/figure>\n<p>I think this will be very useful for designers who doesn't know much about CSS. Editing things visually like that will give them more control over some design details, they can tweak things in the browser and show the result to the developer to be implemented.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Let&#8217;s look at some ways we can use the browsers DevTools to do design work. There are a few somewhat hidden tricks you mind find handy!<\/p>\n","protected":false},"author":244130,"featured_media":253133,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[692,1144],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253132"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/244130"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253132"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253132\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/253133"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253132"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253132"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253132"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":253190,"date":"2017-03-27T05:22:13","date_gmt":"2017-03-27T12:22:13","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253190"},"modified":"2017-03-27T05:22:13","modified_gmt":"2017-03-27T12:22:13","slug":"building-css-grid-overlay","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/building-css-grid-overlay\/","title":{"rendered":"Building a CSS Grid Overlay"},"content":{"rendered":"<p>Let's take a look at what it takes to build a grid overlay with CSS.  It will be responsive, easily customizable and make heavy use of CSS variables (known more accurately as \"CSS custom properties\"). If you aren't familiar with custom properties, I'd highly recommend reading <em><a href=\"https:\/\/css-tricks.com\/difference-between-types-of-css-variables\/\">What is the difference between CSS variables and preprocessor variables?<\/a><\/em> and watching <a href=\"https:\/\/www.youtube.com\/watch?v=2an6-WVPuJU\">Lea Verou's enlighting talk<\/a> on using them.<\/p>\n<p><!--more--><\/p>\n<p>This grid overlay that we're building will consider a developer tool, as in, a tool just for us, not really our users. So, let's not worry too much about browser support (If you do care, check out <a href=\"http:\/\/caniuse.com\/#feat=css-variables\">caniuse\u2026 data on custom properties<\/a>). While it's impossible to preprocess custom properties to behave exactly the same as native support, if you use them just like you would preprocessor variables, tools like the postCSS plugin <a href=\"http:\/\/cssnext.io\/\">cssnext<\/a> can transform them into CSS compliant with older browsers.<\/p>\n<h3>Preface<\/h3>\n<p>A couple of weeks ago, at work, I simplified the media queries on one of our projects and added a layout component based on the same principles as <a href=\"http:\/\/flexboxgrid.com\/\">Flexbox Grid<\/a>. Some of my fellow designers didn\u2019t fully understand the responsiveness and fluidity of it, so I created a toggleable grid overlay to help them visualize it.<\/p>\n<p>My hope is that this can be a tool to aid layout-related conversations on our teams and make sure we don\u2019t use too many bespoke widths, paddings etc.<\/p>\n<h3>Terminology<\/h3>\n<p>Working as a front end designer I want all developers and designers to speak the same language (as much as possible) so I\u2019ve chosen a terminology for the CSS variables that digital designers are also familiar with:<\/p>\n<ul>\n<li><strong>Columns<\/strong>: The vertical divisions of the page.<\/li>\n<li><strong>Gutter<\/strong>: The space between the columns.<\/li>\n<li><strong>Offset<\/strong>: The space between the sides of the viewport.<\/li>\n<li><strong>Baseline<\/strong>: The vertical rhythm used for text.<\/li>\n<\/ul>\n<figure id=\"post-253191\" class=\"align-none media-253191\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/s_7887F2C7EE34D61FF16137826B5D88AC920BD1E146FAAC42AB4B6AB5B2DEAC6D_1488871641697_Terminology2x.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/s_7887F2C7EE34D61FF16137826B5D88AC920BD1E146FAAC42AB4B6AB5B2DEAC6D_1488871641697_Terminology2x.png 1800w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/s_7887F2C7EE34D61FF16137826B5D88AC920BD1E146FAAC42AB4B6AB5B2DEAC6D_1488871641697_Terminology2x-300x133.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/s_7887F2C7EE34D61FF16137826B5D88AC920BD1E146FAAC42AB4B6AB5B2DEAC6D_1488871641697_Terminology2x-768x341.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/s_7887F2C7EE34D61FF16137826B5D88AC920BD1E146FAAC42AB4B6AB5B2DEAC6D_1488871641697_Terminology2x-1024x455.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<h3>Making the Grid<\/h3>\n<h4>1) \"Box\"<\/h4>\n<p>Let\u2019s use a pseudo-element on the <html> element to display the grid on top of all of our content. We want the overlay to work with a fluid layout, so we give the element a width off `100% - (2 * offset)`  and also a max-width so the grid overlay doesn\u2019t grow wider than our layout.<\/p>\n<figure id=\"post-253192\" class=\"align-none media-253192\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/s_7887F2C7EE34D61FF16137826B5D88AC920BD1E146FAAC42AB4B6AB5B2DEAC6D_1488871628860_Container2x.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/s_7887F2C7EE34D61FF16137826B5D88AC920BD1E146FAAC42AB4B6AB5B2DEAC6D_1488871628860_Container2x.png 1800w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/s_7887F2C7EE34D61FF16137826B5D88AC920BD1E146FAAC42AB4B6AB5B2DEAC6D_1488871628860_Container2x-300x133.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/s_7887F2C7EE34D61FF16137826B5D88AC920BD1E146FAAC42AB4B6AB5B2DEAC6D_1488871628860_Container2x-768x341.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/s_7887F2C7EE34D61FF16137826B5D88AC920BD1E146FAAC42AB4B6AB5B2DEAC6D_1488871628860_Container2x-1024x455.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"3a68b927d7b72c108103ea3e66fb1d5e\" data-default-tab=\"result\" data-user=\"larsenwork\" data-embed-version=\"2\" data-pen-title=\"1) Box \u2014 GRID OVERLAY\" class=\"codepen\"><a href=\"http:\/\/codepen.io\/larsenwork\/pen\/3a68b927d7b72c108103ea3e66fb1d5e?editors=0100\">See the Pen<\/a><\/p>\n<h4>2) Columns<\/h4>\n<p>If you look at the grid you will notice that the repeating pattern is column+gutter pairs. We're using <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/CSS\/repeating-linear-gradient\">repeating linear gradients<\/a> as a <code>background-image<\/code>. We'll set the size of the <code>background-image<\/code> to <strong>100% + gutter<\/strong> making the repeating pattern <strong>100% \/ columns<\/strong> wide and the actual column <strong>(100% \/ columns) - gutter<\/strong> wide.<\/p>\n<figure id=\"post-253193\" class=\"align-none media-253193\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/s_7887F2C7EE34D61FF16137826B5D88AC920BD1E146FAAC42AB4B6AB5B2DEAC6D_1488844298106_Repeats2x.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/s_7887F2C7EE34D61FF16137826B5D88AC920BD1E146FAAC42AB4B6AB5B2DEAC6D_1488844298106_Repeats2x.png 1800w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/s_7887F2C7EE34D61FF16137826B5D88AC920BD1E146FAAC42AB4B6AB5B2DEAC6D_1488844298106_Repeats2x-300x133.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/s_7887F2C7EE34D61FF16137826B5D88AC920BD1E146FAAC42AB4B6AB5B2DEAC6D_1488844298106_Repeats2x-768x341.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/s_7887F2C7EE34D61FF16137826B5D88AC920BD1E146FAAC42AB4B6AB5B2DEAC6D_1488844298106_Repeats2x-1024x455.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"feda271a5a496ecdd9d504e80e249547\" data-default-tab=\"result\" data-user=\"larsenwork\" data-embed-version=\"2\" data-pen-title=\"2) Columns \u2014 GRID OVERLAY\" class=\"codepen\"><a href=\"http:\/\/codepen.io\/larsenwork\/pen\/feda271a5a496ecdd9d504e80e249547?editors=0100\">See the Pen<\/a><\/p>\n<p>As a side note, I also tried using regular linear gradients with background-repeat to get the lines more pixel perfect. It didn't work because pixel rounding resulted in imperfect total width whenever the layout width wasn't dividable by the number of columns.<\/p>\n<h4>3) Baseline<\/h4>\n<p>We also draw the baseline using repeating linear gradients but it's slightly simpler since we don't add horizontal gutters and we want it to be just a line instead of a block. <\/p>\n<p>Let's also add a baseline-shift variable that allows us to shift the baseline slightly upwards or downwards. We apply the baseline shift by simply adjusting the <code>background-position<\/code>.<\/p>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"0171dab3a9a3894a0069379d7ad2f81c\" data-default-tab=\"result\" data-user=\"larsenwork\" data-embed-version=\"2\" data-pen-title=\"3) Baseline \u2014 GRID OVERLAY\" class=\"codepen\"><a href=\"http:\/\/codepen.io\/larsenwork\/pen\/0171dab3a9a3894a0069379d7ad2f81c?editors=0100\">See the Pen<\/a><\/p>\n<h4>4) Media Queries<\/h4>\n<p>Now that we have our basic setup, let's introduce some media queries. If you look back at the math that we've used so far, you can see that none of it is tied up to any specific number of columns, gutter width, etc.<\/p>\n<p>We use a mobile first approach and only include variables in the media queries when we want to change them. To make it clear for everyone using the overlay that we've passed a new breakpoint we also change the color at every breakpoint.<\/p>\n<p>I recommend opening the Pen in a new tab and see how it behaves when you change different variable values and when you resize the viewport. <\/p>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"9936ec2477a6d2b2699efbaed98d268a\" data-default-tab=\"result\" data-user=\"larsenwork\" data-embed-version=\"2\" data-pen-title=\"4) Media Queries \u2014 GRID OVERLAY\" class=\"codepen\"><a href=\"http:\/\/codepen.io\/larsenwork\/pen\/9936ec2477a6d2b2699efbaed98d268a?editors=0100\">See the Pen<\/a><\/p>\n<p>If you made a mental note in step 1 saying \u201cbut what if I want specific layout widths at specific breakpoints?\u201d then now is when you can easily introduce that logic by setting <code>--max_width<\/code>  for each media query.<\/p>\n<h4>5) Help Text<\/h4>\n<p>Designers like to think about mockups for different devices \u2014 which is generally a good thing as it\u2019s critical that a website looks awesome on those different devices \u2014 but sometimes they forget that the layout on an iPad should work all the way up and\/or down to the next breakpoint.<\/p>\n<p>Breakpoints aren\u2019t normally called \"iPhone\", \"Galaxy Note &#x1f525;\", \"iPad\" etc. for many reasons including the above. A breakpoint denotes where a new range starts and it\u2019s not device specific. <\/p>\n<p>To make it more obvious what our breakpoints are called, we can add the names to our grid overlay.<\/p>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"feb12a6740daba3670a88c4ae391c575\" data-default-tab=\"result\" data-user=\"larsenwork\" data-embed-version=\"2\" data-pen-title=\"5) Help Text \u2014 GRID OVERLAY\" class=\"codepen\"><a href=\"http:\/\/codepen.io\/larsenwork\/pen\/feb12a6740daba3670a88c4ae391c575?editors=0100\">See the Pen<\/a><\/p>\n<blockquote><p>I have a dream that one day a designer doesn't come back to a developer and say: \"we need to adjust how it looks on iPad\" but instead says \"we need to adjust how it looks on medium\".<\/p><\/blockquote>\n<h3>Go Further<\/h3>\n<p>What about lines for the columns and gutters too? Easy, it's just CSS. What about adding more breakpoints? Easy, it's just CSS. What if I want different colors? Easy\u2026 you get it. &#x1f604; <\/p>\n<p>You can see a more advanced example here: <\/p>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"72b2f065dc9835d2497420bcf7f2d140\" data-default-tab=\"result\" data-user=\"larsenwork\" data-embed-version=\"2\" data-pen-title=\"6) Advanced \u2014 GRID OVERLAY\" class=\"codepen\"><a href=\"http:\/\/codepen.io\/larsenwork\/pen\/72b2f065dc9835d2497420bcf7f2d140?editors=0100\">See the Pen<\/a><\/p>\n<p>I'd love to get your input either here or on the <a href=\"https:\/\/github.com\/larsenwork\/CSS-Responsive-Grid-Overlay\">GitHub repository<\/a> which also includes a Chrome extension using this approach.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Let&#8217;s take a look at what it takes to build a grid overlay with CSS. It will be responsive, easily customizable and make heavy use of CSS variables (known more accurately as &#8220;CSS custom properties&#8221;). If you aren&#8217;t familiar with custom properties, I&#8217;d highly recommend reading What is the difference between CSS variables and preprocessor [&hellip;]<\/p>\n","protected":false},"author":248182,"featured_media":253193,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[686,1200,1201],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253190"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/248182"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253190"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253190\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/253193"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253190"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253190"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253190"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":253198,"date":"2017-03-27T05:16:19","date_gmt":"2017-03-27T12:16:19","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253198"},"modified":"2017-03-27T05:16:19","modified_gmt":"2017-03-27T12:16:19","slug":"recreating-legendary-8-bit-games-music-web-audio-api","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/recreating-legendary-8-bit-games-music-web-audio-api\/","title":{"rendered":"Recreating Legendary 8-bit Games Music with the Web Audio API"},"content":{"rendered":"<p>Greg Hovanesyan, who recently posted here <a href=\"https:\/\/css-tricks.com\/introduction-web-audio-api\/\">an Introduction to the Web Audio API<\/a>, follows up with another huge post on how to use it to create iconic music from our nerds past, like sounds from The Legend of Zelda and Metroid.<\/p>\n<p>The final demo comes <a href=\"https:\/\/codepen.io\/gregh\/project\/editor\/aAexRX\/\">as a project<\/a> you can explore. And don't miss our recent roundup of some of <a href=\"https:\/\/blog.codepen.io\/2017\/03\/17\/best-music-pens-codepen\/\">the best Web Audio API Pens ever<\/a> on CodePen. <\/p>\n","protected":false},"excerpt":{"rendered":"<p>Greg Hovanesyan, who recently posted here an Introduction to the Web Audio API, follows up with another huge post on how to use it to create iconic music from our nerds past, like sounds from The Legend of Zelda and Metroid. The final demo comes as a project you can explore. And don&#8217;t miss our [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[955],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253198"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253198"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253198\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253198"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253198"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253198"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":253183,"date":"2017-03-26T10:59:43","date_gmt":"2017-03-26T17:59:43","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253183"},"modified":"2017-03-26T10:59:43","modified_gmt":"2017-03-26T17:59:43","slug":"slides-css-tricks-poster-child-wordpress-site","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/slides-css-tricks-poster-child-wordpress-site\/","title":{"rendered":"Slides: CSS-Tricks is a Poster Child WordPress Site"},"content":{"rendered":"<p>I just gave a talk at <a href=\"https:\/\/2017.miami.wordcamp.org\/\">WordCamp Miami<\/a> where I talked about, to some degree, how WordPress has been a great choice for CSS-Tricks over the last decade. <\/p>\n<p>If I get a chance I'll try to re-give the talk to my computer locally here so there will be a way you can watch the talk with some real context.<\/p>\n<p><!--more--><\/p>\n<p><script async class=\"speakerdeck-embed\" data-id=\"4afbd9e9815b4b7ea8643567a8738692\" data-ratio=\"1.33333333333333\" src=\"\/\/speakerdeck.com\/assets\/embed.js\"><\/script><\/p>\n","protected":false},"excerpt":{"rendered":"<p>I just gave a talk at WordCamp Miami where I talked about, to some degree, how WordPress has been a great choice for CSS-Tricks over the last decade. If I get a chance I&#8217;ll try to re-give the talk to my computer locally here so there will be a way you can watch the talk [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":253184,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1043,264],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253183"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253183"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253183\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/253184"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253183"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253183"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253183"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":253181,"date":"2017-03-26T10:54:39","date_gmt":"2017-03-26T17:54:39","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253181"},"modified":"2017-03-26T10:54:39","modified_gmt":"2017-03-26T17:54:39","slug":"relative-paths-episode-47-dogmatism","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/relative-paths-episode-47-dogmatism\/","title":{"rendered":"Relative Paths Episode 47 &#8211; Dogmatism"},"content":{"rendered":"<p>I joined Mark Phoenix and Ben Hutchings to talk about, in large part, <a href=\"https:\/\/css-tricks.com\/increasing-wariness-dogmatism\/\">this article<\/a> and the larger conversation about behavior and attitude in tech.<\/p>\n<p><iframe width=\"100%\" height=\"450\" scrolling=\"no\" frameborder=\"no\" src=\"https:\/\/w.soundcloud.com\/player\/?url=https%3A\/\/api.soundcloud.com\/tracks\/314224279&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true\"><\/iframe><\/p>\n","protected":false},"excerpt":{"rendered":"<p>I joined Mark Phoenix and Ben Hutchings to talk about, in large part, this article and the larger conversation about behavior and attitude in tech.<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4,17],"tags":[1197],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253181"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253181"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253181\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253181"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253181"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253181"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":253157,"date":"2017-03-25T10:41:26","date_gmt":"2017-03-25T17:41:26","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253157"},"modified":"2017-03-25T10:41:26","modified_gmt":"2017-03-25T17:41:26","slug":"plugins-loaded","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/plugins-loaded\/","title":{"rendered":"Plugins Loaded"},"content":{"rendered":"<p>There is this fella named <a href=\"http:\/\/jjj.me\/\">John James Jacoby<\/a>. He's the lead behind some huge WordPress projects you may have heard of: <a href=\"https:\/\/buddypress.org\/\">BuddyPress<\/a> and bbPress. We use <a href=\"https:\/\/bbpress.org\/\">bbPress<\/a> right here on CSS-Tricks to power the <a href=\"https:\/\/css-tricks.com\/forums\/\">forums<\/a>.<\/p>\n<p>I had some trouble the other day, where editing posts in the forums started behaving weirdly. Not terribly surprising, as we have some custom code written for that to allow Markdown to be used by all forums users for Topics and Replies. I feel like supporting Markdown is pretty important on a site about coding, as it makes posting code wayyyyy easier. Just put inline code in single ` backticks and blocks of code in \"code fences\" which are triple ``` backticks line separated by blank lines on either side. <\/p>\n<p>It scares me to death when problems like this happen, because they are well beyond my WordPress development chops. If Markdown just stopped working in the forums, I don't know what the heck we would do. Fortunately, I didn't have to think about it much longer, because I gently pulled on John's sleeve and asked for help.<\/p>\n<p>Like a hero, he came through with <a href=\"https:\/\/github.com\/stuttter\/bbp-jp-markdown\">a plugin that fixed things up and does the job<\/a>. It connects what I'd consider the \"official\" way to use Markdown in WordPress (Jetpack), and with this coming from the lead bbPress Dev, I'd guess we can call this the official way to use Markdown in bbPress.<\/p>\n<p>So huge thanks, John!<\/p>\n<p>All that to say, obviously, John is a hell of a WordPress developer, and you'd do well to use plugins that he creates. Lucky for you, he's got a new project to let you do that: <a href=\"https:\/\/pluginsloaded.com\/\">Plugins Loaded<\/a>.<\/p>\n<figure id=\"post-253159\" class=\"align-none media-253159\"><a href=\"https:\/\/pluginsloaded.com\/\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/plugins-loaded.png\" alt=\"\" \/><\/a><\/figure>\n<p>It's an interesting model in that every single plugin in here is in the official plugins directory and can be used for free. Or, you can support John by buying a copy from here. <\/p>\n<p>There are plugins here that do add incredibly useful things to WordPress like give you an <a href=\"https:\/\/pluginsloaded.com\/plugins\/wp-event-calendar\/\">Event Calendar<\/a>, extend WordPress' abilities like allow users to <a href=\"https:\/\/pluginsloaded.com\/plugins\/wp-user-avatars\/\">upload and select their own avatars<\/a>, or improve UI\/UX by making the <a href=\"https:\/\/pluginsloaded.com\/plugins\/wp-user-profiles\/\">user profiles screen nicer<\/a>. <\/p>\n","protected":false},"excerpt":{"rendered":"<p>A huge high-five to John James Jacoby for his help here on CSS-Tricks fixing up our Markdown + bbPress integration. John runs Plugins Loaded, a source of high-quality WordPress plugins that you can use for free, or choose to pay to support.<\/p>\n","protected":false},"author":3,"featured_media":253159,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1195,1196,570,970],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253157"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253157"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253157\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/253159"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253157"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253157"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253157"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":253098,"date":"2017-03-24T07:11:21","date_gmt":"2017-03-24T14:11:21","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253098"},"modified":"2017-03-24T08:15:35","modified_gmt":"2017-03-24T15:15:35","slug":"introduction-elm-architecture-build-first-application","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/introduction-elm-architecture-build-first-application\/","title":{"rendered":"Introduction to The Elm Architecture and How to Build our First Application"},"content":{"rendered":"<p>Creating our first Elm application might seem like a hard task. The new syntax and the new paradigm can be intimidating if you haven't used other functional programming languages before. But once you create your first application, you will understand why Elm has been gaining so much attention lately.<\/p>\n<p><!--more--><\/p>\n<div class=\"article-series\">\n<h4>Article Series:<\/h4>\n<ol>\n<li><a href=\"https:\/\/css-tricks.com\/elm-get-started\/\">Why Elm? (And How To Get Started With It)<\/a><\/li>\n<li>Introduction to The Elm Architecture and How to Build our First Application (You are here!)<\/li>\n<\/ol>\n<\/div>\n<p>In this article, we are going to build a simple application that will introduce us to the language fundamentals: the Elm architecture and how to start making things. It is going to be pretty simple, but it will introduce us to one of the most common tasks in any application: reacting to user actions and doing something with them inside the application. <\/p>\n<figure id=\"post-253100\" class=\"align-none media-253100\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/UfVrlid.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/UfVrlid.png 993w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/UfVrlid-300x180.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/UfVrlid-768x461.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>A stylized version of the Elm application for this tutorial<\/figcaption><\/figure>\n<p>It is going to be composed of a form to add bit pieces of text and to filter previous entries. A list of all the entries is also included. <a href=\"https:\/\/github.com\/jameskolce\/first-elm-module\">There is a GitHub repo<\/a> for all the code we go over in this article.<\/p>\n<p>Although this is targeted to complete Elm beginners without any experience with the language, we assume that you have already read the basic things about it, like the syntax to write functions and how to apply them. To learn more about this, you can read the dedicated <a href=\"http:\/\/elm-lang.org\/docs\/syntax\">Syntax page<\/a> on the <a href=\"http:\/\/elm-lang.org\/docs\">Elm documentation<\/a> site.<\/p>\n<h3>Introducing the Elm Architecture<\/h3>\n<p>Every Elm application tends to follow a particular pattern to the point that it is now considered <em>the way<\/em> to write Elm. If you are familiar with the MVC architecture, you will find some familiarities in the concepts but if the concepts are entirely new to you don't worry, once we build this application everything is going to be more clear. <\/p>\n<p>In most applications, we are going to find these three essential parts:<\/p>\n<ul>\n<li><strong>Model<\/strong>: The <code>model<\/code> function stores all of our application state; which is all the dynamic data that is moved around in our application during its execution.<\/li>\n<li><strong>Update<\/strong>: The <code>update<\/code> function contains other functions that make your application dynamic. We use these to process our state using the logic necessary to accomplish the goal of the application.<\/li>\n<li><strong>View<\/strong>: The <code>view<\/code> function handles the visual part of our application. Using smaller functions that resemble HTML, we can build the structure of the application embedding data from the model. We can also include calls to events that will trigger certain functionality.<\/li>\n<\/ul>\n<h3>Hello, World!<\/h3>\n<p>Building a dynamic application with Elm can be considered simpler than start building one with vanilla HTML\/JS. To begin, we just need one file. We don't need to think about what other libraries we are going to need.<\/p>\n<p>Go ahead and create one file with a <code>.elm<\/code> extension in some directory for this project, we are going to refer to it as <code>main.elm<\/code> although you can name it whatever you like. Once you get the file open in your <a href=\"https:\/\/css-tricks.com\/elm-get-started\/#article-header-id-19\">favorite editor<\/a>, add the following content, which is a simple \"Hello, World!\" application that will help us to get started before building the real one:<\/p>\n<pre rel=\"Elm\"><code>import Html exposing (text)\r\n\r\nmain =\r\n  text \"Hello, World!\"<\/code><\/pre>\n<p>First, we import the <a href=\"http:\/\/package.elm-lang.org\/packages\/elm-lang\/html\/latest\/\">Html module<\/a> that allows us to write the visible application structure with something similar to HTML and we expose the text function which makes it possible to output plain text on the site.<\/p>\n<p>As in other programming languages, the <code>main<\/code> function is the entry point of the application; it is the first one that is executed after starting the program. What we are doing here is to pass the <code>\"Hello, World!\"<\/code> string to the text function as a parameter, then assign it to the <code>main<\/code> function. Once the application is executed, it will show a simple \"Hello, World!\" text in the browser.<\/p>\n<p>To see the result in the browser, we have to compile the code first. As mentioned in the article <a href=\"https:\/\/css-tricks.com\/elm-get-started\/\">Why Elm? (And How To Get Started With It)<\/a>, the <a href=\"https:\/\/css-tricks.com\/elm-get-started\/#article-header-id-17\">Elm Platform<\/a> includes the <a href=\"https:\/\/css-tricks.com\/elm-get-started\/#article-header-id-22\">Reactor<\/a> utility which allows us to see our Elm in our browser compiling the code automatically.<\/p>\n<p>In a terminal\/command line window, execute the following command inside the directory containing the Elm file that you just created:<\/p>\n<pre rel=\"Command Line\"><code>elm-reactor<\/code><\/pre>\n<p>It will start a development server, and we can access to it entering <code>http:\/\/localhost:8000<\/code> in the browser.<\/p>\n<figure id=\"post-253101\" class=\"align-none media-253101\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/zH1KHF6.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/zH1KHF6.png 991w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/zH1KHF6-300x181.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/zH1KHF6-768x463.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>The Reactor File Navigation Window after the project has been built<\/figcaption><\/figure>\n<p>Once in the browser, you will see a File Navigation Window. Click on the <strong>main.elm<\/strong> file and wait a couple of seconds while it gets built. In the process it will also create an <strong>elm-package.json<\/strong> file which is the equivalent of the <code>package.json<\/code> file in node.js projects; it contains essential information about your application including the dependencies, in this case, obtained directly from our application file. It will also download those dependencies and place them inside an <strong>elm-stuff<\/strong> directory. Once the process is completed, you will see the text \"Hello, World!\" on the page.<\/p>\n<p>Now that we have confirmed that everything is working, it is time to start building our application.<\/p>\n<h3>Adding Modules and Defining the Entry Point<\/h3>\n<p>To use certain functions, we first have to import the modules that contain them. Replace the content of your file with the following:<\/p>\n<pre rel=\"Elm\"><code>module Main exposing (..)\r\n\r\nimport Html exposing (..)\r\nimport Html.Attributes exposing (..)\r\nimport Html.Events exposing (..)<\/code><\/pre>\n<p>The first line defines our application as a module called <code>Main<\/code> that will expose everything on it. Although we won't use the module externally, it is important to know about it. You can read more about modules in the <a href=\"https:\/\/guide.elm-lang.org\/reuse\/modules.html\">Module<\/a> page from the site <a href=\"https:\/\/guide.elm-lang.org\/reuse\/modules.html\">An Introduction to Elm<\/a>.<\/p>\n<p>The following three lines import some modules that we are going to use across our application. The first one is the one that we used in the Hello World example, <a href=\"http:\/\/package.elm-lang.org\/packages\/elm-lang\/html\/2.0.0\/Html-Attributes\">Html.Attributes<\/a> allows us to use HTML attributes in our Elm code, and <a href=\"http:\/\/package.elm-lang.org\/packages\/elm-lang\/html\/2.0.0\/Html-Events\">Html.Events<\/a> make available common events like mouse or form actions.<\/p>\n<p>In this case, we are exposing everything inside those components, so if at some point in your work, you find any conflict with names, you can specify the exact components that you want to import.<\/p>\n<p>The next thing is to define the entry point of our application, add the following code to your file:<\/p>\n<pre rel=\"Elm\"><code>main =\r\n    Html.beginnerProgram { model = model, view = view, update = update }<\/code><\/pre>\n<p>For simple applications, it is common to use the <code>Html.beginnerProgram<\/code> function, it helps us to put together our program which is composed of those three principal components as mentioned before: the model, the view and the update.<\/p>\n<p>The repetition of the names might seem a little redundant to you at first (<code>model = model<\/code>, etc.) but that\u2019s because we are going to name our model function as <code>model<\/code>, our view as <code>view<\/code> and update as <code>update<\/code>, as is usually done (and recommended) in other Elm programs, but it isn't a strict rule; you can also have something like:<\/p>\n<pre rel=\"Elm\"><code>main =\r\n    Html.beginnerProgram { model = mydata, view = myhtml, update = mylogic }<\/code><\/pre>\n<p>But if you decide to do this in your program, just remember to name your function definitions accordingly.<\/p>\n<h3>Model<\/h3>\n<p>In our model, we are going to put the state of our entire program, so first, we have to think about the things that we are going to store and use.<\/p>\n<p>We can describe <code>Model<\/code> as a <a href=\"http:\/\/elm-lang.org\/docs\/syntax#records\">record<\/a> of:<\/p>\n<ul>\n<li><code>entries<\/code>: A list string with all entries.<\/li>\n<li><code>results<\/code>: A list of strings with the filtered entries.<\/li>\n<li><code>filter<\/code>: A string containing the filter.<\/li>\n<\/ul>\n<p>And to indicate that <strong>type<\/strong> of information in our Elm program, we are going to create what is called a <a href=\"https:\/\/guide.elm-lang.org\/types\/type_aliases.html\">type alias<\/a> for our <code>model<\/code> function, as it name indicates, it will allow us to represent a complex data structure in a simpler way.<\/p>\n<p>Include the following code below the <code>main<\/code> function that you defined previously:<\/p>\n<pre rel=\"Elm\"><code>type alias Model =\r\n    { entries : List String\r\n    , results : List String\r\n    , filter : String\r\n    }<\/code><\/pre>\n<p>As you can see, the code is quite expressive \u2014 not too different from the description we created before \u2014 just a bit more concise. Now we can use <code>Model<\/code> (Types are always capitalized) as a type for our functions without having to write all the structure manually; this is why we use type aliases, to make things cleaner, easier to understand and less repetitive.<\/p>\n<p>Although types can be inferred, it\u2019s a good practice to write them before writing the actual function; it helps us to think and to get into the right place from the beginning. Also, the compiler will tell us if we do something wrong inside the function. <\/p>\n<p>Now we can write our function which will contain the information we just defined, put the following in your file:<\/p>\n<pre rel=\"Elm\"><code>model : Model\r\nmodel =\r\n    { entries = []\r\n    , results = []\r\n    , filter = \"\"\r\n    }<\/code><\/pre>\n<p>The first line tells Elm that our <code>model<\/code> function is of type <code>Model<\/code>, which is the type we defined previously, and next we define the actual function. But because our application starts without any data, we just include empty lists (<code>[]<\/code>). Those values are going to <em>change<\/em> once the user starts interacting with the application.<\/p>\n<p>Strictly speaking, in Elm, values don't change (they are <a href=\"https:\/\/css-tricks.com\/elm-get-started\/#article-header-id-7\">immutable<\/a>), instead new values are created, although that's mostly transparent to us.<\/p>\n<p>That's it! Now our application's state is represented in a central place, but we still need to implement the functions that are going to work with that state and make the internals of the application work.<\/p>\n<h3>Update<\/h3>\n<p>All the logic in our program is handled by a single function named <code>update<\/code> and this function will take something called a [message] \u2014 which we can think of as a container for actions that we can react to \u2014 and also will take our current model, returning a new model with our changes depending on the action applied.<\/p>\n<p>Our application will have two actions, one to enter items into the string list from the form input and another one to filter those entries. To define this in Elm, we can add the following to our file:<\/p>\n<pre rel=\"Elm\"><code>type Msg\r\n    = Filter String\r\n    | Add<\/code><\/pre>\n<p>Here we are defining a new <a href=\"https:\/\/guide.elm-lang.org\/types\/union_types.html\">union type<\/a> called <code>Msg<\/code> to represent our messages, each message can be either a <code>Filter<\/code> action with a <code>String<\/code> attached to it containing the text from the filter or an <code>Add<\/code> action that we are going to use to trigger the addition of the filter (the string in the form input) to the list of entries.<\/p>\n<p>Now we have the <code>Msg<\/code> type ready to be used within our <code>update<\/code> function; we can proceed to add the following in our file:<\/p>\n<pre rel=\"Elm\"><code>update : Msg -&gt; Model -&gt; Model\r\nupdate msg model =\r\n    case msg of                                                                                                                \r\n        Filter filter -&gt;\r\n            { model\r\n                | results = List.filter (String.contains filter) model.entries\r\n                , filter = filter\r\n            }\r\n\r\n        Add -&gt;\r\n            { model\r\n                | entries = model.filter :: model.entries\r\n                , results = model.filter :: model.results\r\n            }<\/code><\/pre>\n<p>Although it might look a little complex, it is composed of very simple parts to achieve the functionality of our application. <\/p>\n<p>The first line is the type definition of our <code>update<\/code> function. It says that it is going to take a <code>Msg<\/code> and a <code>Model<\/code> and will return a <code>Model<\/code> because we are going to update our model on each message depending on its content.<\/p>\n<p>Next, we define the actual function which is going to have <code>msg<\/code> and <code>model<\/code> as parameters that we are going to use inside the function. First, we have to check the type of action that we have to handle using a <code>case<\/code> function, which is <code>Filter<\/code> and <code>Add<\/code> as we defined previously.<\/p>\n<p>The Filter action takes a string which we are naming <code>filter<\/code>, and it will update our <code>model<\/code>, changing the <code>results<\/code> field with a new list product of filtering (<code>List.filter<\/code>) our entries that contain (<code>String.contains<\/code>) the filter string. We also update the value of <code>model.filter<\/code> with the content of the filter, so we can access it as we need. You can check the syntax for updating records in the <a href=\"http:\/\/elm-lang.org\/docs\/syntax#records\">Syntax documentation<\/a>.<\/p>\n<p>The next case is <code>Add<\/code> which is going to add the <code>filter<\/code> string from the <code>model<\/code> to the <code>entries<\/code> and <code>results<\/code> fields, this will happen every time the user clicks an \"Add\" button, which we are going to define in the next section. Adding the string to the entries list is self-explanatory, but we are also adding it to the list of results because in this way we will be able to see it immediately after the <code>Add<\/code> message is sent, otherwise we would have to delete part of the string and write it again to see the addition.<\/p>\n<p>And that would be everything regarding the logic of our application, the only thing we now have to do is to define how it will be shown in the browser.<\/p>\n<h3>View<\/h3>\n<p>So far we have defined the internal parts of our application; everything that happens behind the scenes. But we still have to define how we are going to show all the information to the user and how they can interact with it.<\/p>\n<p>The interface for the application is going to be composed of three main elements: the form input where the user can enter a filter string to search or to add it to the entries, an <strong>Add<\/strong> button to add the text to the entries and the list of entries.<\/p>\n<p>In HTML we would have something like this:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;div&gt;\r\n    &lt;input placeholder=\"Filter\u2026\" oninput=\"Filter()\"&gt;\r\n    &lt;button onclick=\"Add()\"&gt;Add New&lt;\/button&gt;\r\n    &lt;ul&gt;\r\n        &lt;li&gt;Item list&lt;\/li&gt;\r\n        &lt;li&gt;\u2026&lt;\/li&gt;\r\n    &lt;\/ul&gt;\r\n&lt;\/div&gt;<\/code><\/pre>\n<p>But we can't write HTML directly in Elm. We have to use specialized functions that mimic the HTML tags. To accomplish this, add the following to your file:<\/p>\n<pre rel=\"Elm\"><code>view : Model -&gt; Html Msg\r\nview model =\r\n    div []\r\n        [ input [ placeholder \"Filter\u2026\", onInput Filter ] []\r\n        , button [ onClick Add ] [ text \"Add New\" ]\r\n        , ul [] (List.map viewEntry model.results)\r\n        ]<\/code><\/pre>\n<p>First, we define the type of our view function, which is going to have a <code>Model<\/code> as input containing all the data and <code>Html Msg<\/code> as output with is the HTML representation that will be shown in the browser. The body of the function is almost a direct representation of our HTML code but with a different syntax in the form of <code>&lt;tag&gt; [&lt;attributes&gt;] [&lt;content&gt;]<\/code>.<\/p>\n<p>Notice how we are sending a <code>Filter<\/code> message on each <code>onInput<\/code> event, which happens every time the user enters something into the input element. And we do something similar in the <code>Add<\/code> message with the <code>onClick<\/code> event.<\/p>\n<p>For the list of entries, we map over the elements of the <code>mode.results<\/code> list using <code>List.map<\/code>, and we pass each entry to the <code>viewEntry<\/code> function that we are going to define like this (add it to your file):<\/p>\n<pre rel=\"Elm\"><code>viewEntry : String -&gt; Html Msg\r\nviewEntry entry =\r\n    li [] [ text entry ]<\/code><\/pre>\n<p>It is just a simple helper function to have a cleaner code in <code>view<\/code>. It accepts a string as <code>entry<\/code> and returns it inside a <code>li<\/code> element with the type <code>Html Msg<\/code>.<\/p>\n<p>And now our application is finished. You can just reload your browser window (make sure Reactor is still executing), and you will see the final result.<\/p>\n<figure id=\"post-253102\" class=\"align-none media-253102\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/vKjv3Di.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/vKjv3Di.png 993w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/vKjv3Di-300x179.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/vKjv3Di-768x459.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Our Elm application while a filter is applied<\/figcaption><\/figure>\n<h3>Conclusion<\/h3>\n<p>The example included in this article is pretty simple, but hopefully, it will help you through the initial curve of learning the Elm programming language. If you want, you could try to expand this example into a more complex application; it will help you to continue learning without having to deal with the \"how do I start\" problem which is common with new technologies.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Creating our first Elm application might seem like a hard task. The new syntax and the new paradigm can be intimidating if you haven&#8217;t used other functional programming languages before. But once you create your first application, you will understand why Elm has been gaining so much attention lately.<\/p>\n","protected":false},"author":247747,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1126],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253098"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/247747"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253098"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253098\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253098"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253098"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253098"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":253074,"date":"2017-03-23T11:17:26","date_gmt":"2017-03-23T18:17:26","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253074"},"modified":"2017-03-29T10:06:40","modified_gmt":"2017-03-29T17:06:40","slug":"kinda-can-use-custom-fonts-html-emails","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/kinda-can-use-custom-fonts-html-emails\/","title":{"rendered":"You Kinda Can Use Custom Fonts in HTML Emails"},"content":{"rendered":"<p>And you use them pretty much just like you'd use custom fonts on a website. <a href=\"https:\/\/litmus.com\/blog\/the-ultimate-guide-to-web-fonts\">Jaina Mistry had the scoop<\/a> on this last year over on the Litmus blog:<\/p>\n<blockquote>\n<p>While web fonts don't have universal support, here are the email clients where they are supported:<\/p>\n<ul>\n<li>AOL Mail<\/li>\n<li>Native Android mail app (not Gmail app)<\/li>\n<li>Apple Mail<\/li>\n<li>iOS Mail<\/li>\n<li>Outlook 2000<\/li>\n<li>Outlook.com app<\/li>\n<\/ul>\n<\/blockquote>\n<p><!--more--><\/p>\n<p>Aside from using a JavaScript font loader, which definitely won't work in email (no email client will be executing JavaScript), ultimately it comes down to <code>@font-face<\/code> in CSS. So let's do that. <\/p>\n<p>Say we wanted to use <a href=\"https:\/\/fonts.google.com\/specimen\/Lato\">Lato<\/a> in an email, if we can. Go do the normal Google Fonts thing and find the URL for loading Lato. If you just visit that URL, you can see it's loading Lato over @font-face, and you can totally snag that code:<\/p>\n<figure id=\"post-253077\" class=\"align-none media-253077\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/fontface-2.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/fontface-2.jpg 1000w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/fontface-2-300x280.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/fontface-2-768x716.jpg 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>In your HTML template, you'd put that into a <code>&lt;style&gt;<\/code> block in the <code>&lt;head&gt;<\/code>, as well as set the <code>font-family<\/code>:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;style type=\"text\/css\"&gt;\r\n@media screen {\r\n  @font-face {\r\n    font-family: 'Lato';\r\n    font-style: normal;\r\n    font-weight: 400;\r\n    src: local('Lato Regular'), local('Lato-Regular'), url(https:\/\/fonts.gstatic.com\/s\/lato\/v11\/qIIYRU-oROkIk8vfvxw6QvesZW2xOQ-xsNqO47m55DA.woff) format('woff');\r\n  }\r\n\r\n  ...\r\n\r\n  body {\r\n    font-family: \"Lato\", \"Lucida Grande\", \"Lucida Sans Unicode\", Tahoma, Sans-Serif;\r\n  }\r\n&lt;\/style&gt;<\/code><\/pre>\n<p>Notice there are some fallback fonts set there. Might as well fall back to some Lato-like fonts, if we can.<\/p>\n<p>Here we can see this working in the Litmus Builder:<\/p>\n<figure id=\"post-253078\" class=\"align-none media-253078\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/litmus.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/litmus.png 1808w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/litmus-300x234.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/litmus-768x599.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/litmus-1024x799.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>But just to make sure, we'll have to blast it to some actual email clients and see what happens:<\/p>\n<figure id=\"post-253079\" class=\"align-none media-253079\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/appmail10-vertical-allowed-1366.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/appmail10-vertical-allowed-1366.png 1366w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/appmail10-vertical-allowed-1366-300x169.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/appmail10-vertical-allowed-1366-768x432.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/appmail10-vertical-allowed-1366-1024x576.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>\u2705 Lato in Apple Mail 10<\/figcaption><\/figure>\n<figure id=\"post-253080\" class=\"align-none media-253080\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/ol2007-vertical-allowed-1366.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/ol2007-vertical-allowed-1366.png 1366w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/ol2007-vertical-allowed-1366-300x204.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/ol2007-vertical-allowed-1366-768x523.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/ol2007-vertical-allowed-1366-1024x697.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>&#x1f6ab; Lucida Grande in Outlook 2007 (and 2010)<\/figcaption><\/figure>\n<figure id=\"post-253081\" class=\"align-none media-253081\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/iphone6-vertical-allowed-1366.png\" alt=\"\" style=\"max-width: 360px\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/iphone6-vertical-allowed-1366.png 375w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/iphone6-vertical-allowed-1366-183x300.png 183w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>\u2705 Lato on iPhone 6<\/figcaption><\/figure>\n<figure id=\"post-253082\" class=\"align-none media-253082\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/androidgmailapp-vertical-allowed-1366.png\" alt=\"\" style=\"max-width: 360px\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/androidgmailapp-vertical-allowed-1366.png 360w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/androidgmailapp-vertical-allowed-1366-157x300.png 157w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>&#x1f6ab; Droid Sans on Android Gmail<\/figcaption><\/figure>\n<figure id=\"post-253083\" class=\"align-none media-253083\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/chromegmailnew-vertical-allowed-1366.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/chromegmailnew-vertical-allowed-1366.png 1350w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/chromegmailnew-vertical-allowed-1366-300x170.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/chromegmailnew-vertical-allowed-1366-768x435.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/chromegmailnew-vertical-allowed-1366-1024x580.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>&#x1f6ab; Lucida Grande in Gmail on Web<\/figcaption><\/figure>\n<p>I think the way to think about it is: some do, some don't, meh, kind of a cool progressive enhancement to help match your brand.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>And you use them pretty much just like you&#8217;d use custom fonts on a website. Jaina Mistry had the scoop on this last year over on the Litmus blog: While web fonts don&#8217;t have universal support, here are the email clients where they are supported: AOL Mail Native Android mail app (not Gmail app) Apple [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[655,1086],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253074"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253074"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253074\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253074"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253074"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253074"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252642,"date":"2017-03-23T03:52:13","date_gmt":"2017-03-23T10:52:13","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252642"},"modified":"2017-03-23T03:52:13","modified_gmt":"2017-03-23T10:52:13","slug":"hired-job-hunting-simplified%e2%80%8b","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/hired-job-hunting-simplified%e2%80%8b\/","title":{"rendered":"Hired &#8211; Job Hunting Simplified\u200b"},"content":{"rendered":"<p>On Hired, companies apply to you, not the other way around. Upon getting approved your profile becomes visible to over 6,000 innovative companies, hiring for technical roles. So if you\u2019re looking for new opportunities, but don't want the hassle of applying to all those companies, <a href=\"http:\/\/synd.co\/2nnbM7x\">try Hired<\/a> and let the companies apply to you!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>On Hired, companies apply to you, not the other way around. Upon getting approved your profile becomes visible to over 6,000 innovative companies, hiring for technical roles. So if you\u2019re looking for new opportunities, but don&#8217;t want the hassle of applying to all those companies, try Hired and let the companies apply to you!<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17,508],"tags":[],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252642"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252642"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252642\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252642"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252642"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252642"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":253066,"date":"2017-03-23T03:51:18","date_gmt":"2017-03-23T10:51:18","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253066"},"modified":"2017-03-23T03:51:18","modified_gmt":"2017-03-23T10:51:18","slug":"modern-javascript-ancient-web-developers","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/modern-javascript-ancient-web-developers\/","title":{"rendered":"Modern JavaScript for Ancient Web Developers"},"content":{"rendered":"<p>Gina Trapani:<\/p>\n<blockquote><p>... when you're learning modern JavaScript, there's a good chance that the solution to the problem you're having is still getting worked out. In fact, it's very possible it is only one code review away from getting merged into the package you're using.<\/p><\/blockquote>\n<p>It's a weird time. So many of us are living so close to the edge. As Gina puts it, it's harder to find \"a 5-year-old Stack Overflow answer that solves\" your problem. New things drop and go out to production instantly, which is a bit at-odds with the classic wisdom of waiting for the .1 release.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Gina Trapani: &#8230; when you&#8217;re learning modern JavaScript, there&#8217;s a good chance that the solution to the problem you&#8217;re having is still getting worked out. In fact, it&#8217;s very possible it is only one code review away from getting merged into the package you&#8217;re using. It&#8217;s a weird time. So many of us are living [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253066"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253066"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253066\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253066"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253066"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253066"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252793,"date":"2017-03-22T19:09:06","date_gmt":"2017-03-23T02:09:06","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252793"},"modified":"2017-03-23T03:33:39","modified_gmt":"2017-03-23T10:33:39","slug":"need-catch-amp-debate","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/need-catch-amp-debate\/","title":{"rendered":"Need to Catch Up on the AMP Debate?"},"content":{"rendered":"<p>The subject of <a href=\"https:\/\/www.ampproject.org\">AMP<\/a> came up at a meetup I was at the other day. It came up in a \"Hey have y'all seen this thing yet?\" context. Some people have heard of it, some hadn't. Even among those who had heard of it, the vibe was mostly: <em>\"this is newfangled tech. It's the future, probably. I guess it's a thing I gotta learn, I just haven't gotten around to it yet.\"<\/em> Which makes sense. It's just like hearing about some new JavaScript framework that is taking off. <em>\"Obviously, it's a big deal, I just haven't gotten there yet. Perhaps I will one day when it's clear I need to for a project.\"<\/em><\/p>\n<p>Other folks at the meetup were like <em>\"Isn't it that thing that makes it so you can't use CSS or JavaScript?\"<\/em> Someone else thought it was more like a CMS. Neither is quite true, but there is certainly plenty of confusion out there (and a lot of outright shrugs). Let's not re-explain what AMP is here, but cover some of the potentially confusing and controversial points.<\/p>\n<p><!--more--><\/p>\n<h3>Is this a Google thing? Or...?<\/h3>\n<p>That's something the site doesn't make particularly clear. It's technically an open source project with a variety of contributors and partners, but... it's a Google thing. Google employees work on it. Google <a href=\"https:\/\/www.ampproject.org\/amp-conf-2017\/\">threw the recent conference<\/a>. Google hosts the required JavaScript file at the top of all AMP pages. Google hosts the cache that makes up 1\/3 of what AMP \"is\". The whole point of AMP is having Google show your AMP page in the coveted <abbr title=\"Search Engine Results Page\">SERP<\/abbr> carousel. <\/p>\n<p>Here's a succinct explanation of the three parts, <a href=\"https:\/\/adactio.com\/journal\/12011\">from Jeremy Keith<\/a>, controversial bits included:<\/p>\n<blockquote>\n<ol>\n<li><strong>The AMP format<\/strong>. A bunch of web components. For instance, instead of using an <code>img<\/code> element on an AMP page, you use an <code>amp-img<\/code> element instead.<\/li>\n<li><strong>The AMP rules<\/strong>. There\u2019s one JavaScript file, hosted on Google\u2019s servers, that turns those web components from <code>span<\/code>s into working elements. No other JavaScript is allowed. All your styles must be in a <code>style<\/code> element instead of an external file, and there's a limit on what you can do with those styles.<\/li>\n<li><strong>The AMP cache<\/strong>. The source of most confusion\u2014and even downright enmity\u2014this is what's behind the fact that when you launch an AMP result from Google search, you <em>don't<\/em> go to another website. You see Google's cached copy of the page instead of the original.<\/li>\n<\/ol>\n<\/blockquote>\n<p><a href=\"https:\/\/www.ampproject.org\/learn\/overview\/\">The AMP site<\/a> doesn't disagree and is equally clear.<\/p>\n<h3>Your website becomes https:\/\/google.com\/yourwebsite.com<\/h3>\n<p>In a way, anyway. Unless you do something really unusual like <a href=\"https:\/\/paulbakaus.com\/\">Paul Bakaus<\/a> has done and make your entire website AMP, the only way you end up on an AMP page is when you're:<\/p>\n<ol>\n<li>On mobile<\/li>\n<li>Click an AMP result in a Google Search<\/li>\n<\/ol>\n<p>And when you do that, the URL you land on starts with https:\/\/google.com. You bookmark that, you share that, you email it to yourself, whatever, it's a Google URL. Kinda weird. Confuses plenty of people. There is a way to \"Request Desktop Site\", but meh. <\/p>\n<p>John Gruber found it particularly weird:<\/p>\n<blockquote>\n<p>If I tap the result, I get the AMP version of the Ars article, served from Google's domain. So far, I get it. But the kicker is that I don\u2019t see any way to get from the AMP page Google is serving to the canonical version of the article on Ars's website. Even if I share the article, what gets shared is the google.com URL. On desktop browsers, these URLs do get redirected to Ars's website. But on mobile they don't. Share from one mobile device to another and nobody ever leaves google.com. Why would any website turn their entire mobile audience \u2014 a majority share of their total audience, for many sites today \u2014 over to Google?<\/p>\n<p>It makes no sense to me.<\/p>\n<\/blockquote>\n<p>Makes no sense in a <em>why would any publisher do this on purpose?<\/em>, kinda way.<\/p>\n<p>They way I thought of it, at first, was that it's just another publishing format. Just another RSS. This latest round of publishing formats is Facebook Instant Articles, Apple News, and AMP. There will be more. I <a href=\"http:\/\/mediatemple.net\/blog\/tips\/wordpress-apple-news-instant-articles-amp\/\">said<\/a>:<\/p>\n<blockquote>\n<p>Hey, whatever you want. As long as\u2026<\/p>\n<ol>\n<li>It's not very much work<\/li>\n<li>The content's canonical home is my website<\/li>\n<\/ol>\n<p>I just want people to read and like CSS-Tricks. Ideally, I can monetize on (good, curated) sponsored content that makes its way to all these channels anyway.<\/p>\n<\/blockquote>\n<p>Which I still think, for the most part. The strategy is: <em>go where the readers are<\/em>, which makes sense.<\/p>\n<p>Follow up from Gruber:<\/p>\n<blockquote><p>The lock-in aspect makes no sense to me. Why would I want to cede control over my pages to Google? AMP pages do load fast, but if publishers want their web pages to load fast, they can just engineer them to load fast. Best answers I got were that it wasn't really strategic \u2014 publishers are going with AMP just because their SEO people are telling them to, because Google features AMP pages in search results. I suppose that is a strategy, but ceding control over your content to Google isn't a good one in the long term.<\/p><\/blockquote>\n<p>That worry is rooted in distrust of Google. Personally, I'm not too worried about that, but I get it. I get fist-wavy about plenty of <a href=\"https:\/\/css-tricks.com\/just-another-https-nudge\/\">other things<\/a>. <\/p>\n<p>I'd also add that, compared to Apple News or Instant Articles, having google.com at the front of the URL doesn't feel like much of a loss of control.<\/p>\n<h3>It's a non-trivial technology investment<\/h3>\n<p>At first, I kinda thought it was in the trivially-easy category, like RSS.<\/p>\n<p>Yah, it's a kinda weird new format, full of web components like <code>&lt;amp-img&gt;<\/code> and such. But of course, just like a WordPress site can kick out an RSS feed, there is a plugin for a WordPress site to kick out an AMP version. Web searching around, I see there is plugins for other popular CMS's like Drupal and Jekyll. Probably about 20 seconds of technology investment. <\/p>\n<p>But... you lose a lot if that's all you do. <\/p>\n<p>All your ads and calls-to-action and such don't get to come along. You <em>can<\/em> have ads on AMP, but only AMP-specific advertising platforms. It's likely you'll be handling advertising with totally new partners. You'd better hope you get a ton of mobile search traffic, otherwise, it's probably not really worth dealing with. If you're going all-in on a publish-wherever strategy, you're probably looking at all-new advertising partners everywhere. Ugh.<\/p>\n<p>Your newsletter signup form in the footer? Gone. Your little <em>suggested articles<\/em> widget at the end of the article? Gone. <\/p>\n<p>It's not like these things <em>can't<\/em> exist in AMP, it's just going to require to rejigger how they are done entirely to get them back, because your JavaScript isn't allowed. Even your branding and typography and stuff is going to require custom work to maintain.<\/p>\n<p>These are the options for going AMP, it seems to me:<\/p>\n<ul>\n<li>Use a CMS plugin to generate an AMP page for you, and just let the default be the default.<\/li>\n<li>Use a CMS plugin, but fight whatever battles you need to customize it for your needs.<\/li>\n<li>Build your own system.<\/li>\n<li>Use a magical tool like <a href=\"https:\/\/mercury.postlight.com\/amp-converter\/\">Mercury<\/a> or a paid custom service like <a href=\"https:\/\/www.relaymedia.com\/\">Relay Media<\/a><\/li>\n<\/ul>\n<p>Personally, while I am totally fine with another publishing format and totally compelled by the speed, I don't love any of those options.<\/p>\n<h3>AMP won't tell you: heyyyy maybe don't use this<\/h3>\n<p>There is some risk here, and I think that's part of the controversy. The AMP docs aren't going to list reasons to not use AMP. They are compelled to tell you why you <em>should<\/em>.<\/p>\n<p>The risk is that it's more development than it's worth. The risk is that you do a bunch of work and lose money. The risk is confusing users. The risk is something weird and uncouth happing at Google. Even wider scope, the risk is that AMP is bad for the web.<\/p>\n<h3>You don't need AMP to get AMP-like results.<\/h3>\n<p><a href=\"https:\/\/timkadlec.com\/2015\/10\/amp-and-incentives\/\">Tim Kadlec<\/a>:<\/p>\n<blockquote>\n<p>The Google caching is notable in that it is free, but other than that it appears to be nothing more than any CDN can do for you. You can build your sites to be prerender and cache friendly. You can limit your use of JavaScript. You can carefully select your HTML and write your CSS with the goal of performance in mind. You can do all these things all by yourself (and in fact you should be doing all of these things).<\/p>\n<p>There is also nothing too exciting about the claim that using a subset of the web\u2019s features will improve your performance. Kill JavaScript on any traditional article page out there and you\u2019ll likely see very similar returns.<\/p>\n<\/blockquote>\n<p>But, it's like a clean slate. You <em>could<\/em> do this yourself, but you won't. Or at least, people won't at scale. Perhaps in a world where AMP is wildly successful, it influences the \"regular\" web toward cleaning up its act.<\/p>\n<p>Even right now, AMP can be a perfect excuse on internal teams. Jeremy Keith:<\/p>\n<blockquote><p>Beleaguered developers working for publishers of big bloated web pages have a hard time arguing with their boss when they're told to add another crappy JavaScript tracking script or bloated library to their pages. But when they\u2019re making AMP pages, they can easily refuse, pointing out that the AMP rules don\u2019t allow it. Google plays the bad cop for us, and it's a very valuable role. <a href=\"https:\/\/twitter.com\/meyerini\">Sarah<\/a> pointed this out on the panel we were on, and she was spot on.<\/p><\/blockquote>\n<p>Putting a point on the not-required-for-perf thing:<\/p>\n<blockquote><p>At AMP Conf, <a href=\"https:\/\/twitter.com\/NataliaLKB\">Natalia<\/a> pointed out that The Guardian\u2019s non-AMP pages beat out the AMP pages for performance.<\/p><\/blockquote>\n<h3>Is this actually good for the web, or not?<\/h3>\n<p>I absolutely recommend listening to <a href=\"https:\/\/shoptalkshow.com\/episodes\/248-amp\/\">ShopTalk 248: AMP<\/a>, in which we had Paul on along with Barb Palsar. <\/p>\n<p>Paul likes AMP, and is absolutely a pro-web dude, but admitted that there is some risk that AMP turns out to be not-so-good for the open web. Barb is an entrepreneur and admitted AMP is a risk. <\/p>\n<p>Tim Kadlec is <a href=\"https:\/\/timkadlec.com\/2015\/10\/amp-and-incentives\/\">worried about the tool lock-in<\/a>:<\/p>\n<blockquote>\n<p>Using a very specific tool to build a tailored version of my page in order to \"reach everyone\" doesn't fit any definition of the \"open web\" that I\u2019ve ever heard. ... <\/p>\n<p>But they should be decoupled. Provide tooling to improve performance. Provide a model and method for producing a revenue stream and improving distribution.<\/p>\n<\/blockquote>\n<p>Paul Irish chimed in on that article:<\/p>\n<blockquote>\n<p>While the \"tools not rules\" philosophy is technically correct, it doesn't scale across the developer base as easily. Subsetting what is possible on the platform provides clear constraints and is certainly easier to follow.<\/p>\n<p>AMP is a commitment to the web. Google probably could have followed suit with Instant Pages and provided some non-web format that would create a parallel publishing universe. But AMP has been designed to be web-compatible because Google believes that content has the best value when its on the web.<\/p>\n<\/blockquote>\n<p>Gina Trapani <a href=\"https:\/\/twitter.com\/waxpancake\/status\/839195543771332608\">is worried<\/a> too:<\/p>\n<blockquote><p>If you talk about the open web you're talking about standards-based and decentralized and where content isn't privileged right? And AMP does all those things. It's not a W3C standard\u2026 yet. It\u2019s not decentralized because at least all AMP pages are hosted on Google's cache. So if you search Twitter for google.com\/amp there's lots of results there people are sharing that URL so it's not decentralized\u2026. AMP content is privileged in search results, and that concerns me.<\/p><\/blockquote>\n<p>It's that privilege that incentivizes the use of AMP at all. It certainly was for me.<\/p>\n<blockquote><p>In my experience, people are motivated to use AMP\u2026I\u2019ve seen this from our clients\u2026mostly because of SEO. They want it in that top stories carousel, they want that lightning bolt of approval in regular search results which is happening now. And that concerns me. I\u2019d rather that the concern for them was about performance and better user experience but it\u2019s about SEO and search rankings. How many publishers would use AMP if that weren't a factor? Fewer.<\/p><\/blockquote>\n<hr>\n<p>ANYWAY. It's complicated.<\/p>\n<p>To me it would feel better if...<\/p>\n<ul>\n<li>The tooling to create really good AMP pages got even better and easier.<\/li>\n<li>More that just Google used the format to do cool things.<\/li>\n<li>It was never used as search ranking factor (or anything that could be interpreted as such) by anybody.<\/li>\n<li>It became a W3C standard.<\/li>\n<li>The advertising ecosystem became super-ready to follow your content whereever it is.<\/li>\n<\/ul>\n<p>But my thoughts are evolving on this just like everyone elses.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>The subject of AMP came up at a meetup I was at the other day. It came up in a &#8220;Hey have y&#8217;all seen this thing yet?&#8221; context. Some people have heard of it, some hadn&#8217;t. Even among those who had heard of it, the vibe was mostly: &#8220;this is newfangled tech. It&#8217;s the future, [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[591],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252793"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252793"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252793\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252793"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252793"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252793"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":253042,"date":"2017-03-22T07:10:49","date_gmt":"2017-03-22T14:10:49","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253042"},"modified":"2017-03-22T07:10:49","modified_gmt":"2017-03-22T14:10:49","slug":"novapattern","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/novapattern\/","title":{"rendered":"Novapattern"},"content":{"rendered":"<blockquote><p>curates well-designed patterns<\/p><\/blockquote>\n<p>Indeed it does!<\/p>\n<p>Bonus: <a href=\"http:\/\/www.lisbonazulejos.com\/\">Lisbon Azulejos<\/a> is full of lovely patterns created by Mathieu Grac based on tiles from the city of Lisbon. It has interesting UI to explore them. <\/p>\n","protected":false},"excerpt":{"rendered":"<p>curates well-designed patterns Indeed it does! Bonus: Lisbon Azulejos is full of lovely patterns created by Mathieu Grac based on tiles from the city of Lisbon. It has interesting UI to explore them.<\/p>\n","protected":false},"author":3,"featured_media":253043,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[1157],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253042"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253042"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253042\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/253043"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253042"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253042"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253042"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":253038,"date":"2017-03-22T07:03:51","date_gmt":"2017-03-22T14:03:51","guid":{"rendered":"https:\/\/css-tricks.com\/?p=253038"},"modified":"2017-03-22T07:03:51","modified_gmt":"2017-03-22T14:03:51","slug":"inclusive-components","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/inclusive-components\/","title":{"rendered":"Inclusive Components"},"content":{"rendered":"<p>Heydon Pickering with a new project:<\/p>\n<blockquote><p>A blog trying to be a pattern library. Each post explores the design of a robust, accessible interface component.<\/p><\/blockquote>\n<p>Just one post so far on <a href=\"http:\/\/inclusive-components.club\/toggle-button\/\">Toggle Buttons<\/a>, but it's a doozy.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Heydon Pickering with a new project: A blog trying to be a pattern library. Each post explores the design of a robust, accessible interface component. Just one post so far on Toggle Buttons, but it&#8217;s a doozy.<\/p>\n","protected":false},"author":3,"featured_media":253040,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[850,572],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253038"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=253038"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/253038\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/253040"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=253038"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=253038"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=253038"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252961,"date":"2017-03-21T05:46:32","date_gmt":"2017-03-21T12:46:32","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252961"},"modified":"2017-03-21T05:46:32","modified_gmt":"2017-03-21T12:46:32","slug":"text-effects-css-little-contenteditable-trick","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/text-effects-css-little-contenteditable-trick\/","title":{"rendered":"Text Effects with CSS (and a little contenteditable trick)"},"content":{"rendered":"<p><a href=\"https:\/\/twitter.com\/Mandy_Kerr\">Mandy Michael<\/a> has been <a href=\"http:\/\/codepen.io\/collection\/DamKJW\/\">creating some incredible text effects<\/a> with just the power of CSS. She uses every trick in the book: gradients, transforms, pseudo elements, shadows, and clipping paths to name a few. They are all <em>real<\/em> web text too. Custom fonts typically, but no images, canvas, or SVG or anything like that. <\/p>\n<p><!--more--><\/p>\n<p>Take a look at this beautiful effect:<\/p>\n<p data-height=\"404\" data-theme-id=\"1\" data-slug-hash=\"BWyYYP\" data-default-tab=\"result\" data-user=\"mandymichael\" data-embed-version=\"2\" data-pen-title=\"CSS only 3D paper fold text effect\" class=\"codepen\">See the Pen <a href=\"https:\/\/codepen.io\/mandymichael\/pen\/BWyYYP\/\">CSS only 3D paper fold text effect<\/a> by Mandy Michael (<a href=\"http:\/\/codepen.io\/mandymichael\">@mandymichael<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>The fact that it is real text makes it accessible, searchable, and of course, selectable:<\/p>\n<figure id=\"post-252979\" class=\"align-none media-252979\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/selectable.gif\" alt=\"\" \/><\/figure>\n<p>Demos are an awesome place to use the <code>contenteditable<\/code> attribute, which turns any text element into sort of like a <code>textarea<\/code> or <code>input<\/code>, in that then anyone can click right into it and change the text. <\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;h1 contenteditable&gt;Cool Title&lt;\/h1&gt;<\/code><\/pre>\n<p>But because many of Mandy's demos use pseudo elements with text that needs to match the text in the element itself, the text can get out-of-sync:<\/p>\n<figure id=\"post-252980\" class=\"align-none media-252980\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/out-of-sync.gif\" alt=\"\" \/><\/figure>\n<p>Never fear! It's just a few lines of JavaScript to keep those bits of text in sync:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var h1 = document.querySelector(\"h1\");\r\n\r\nh1.addEventListener(\"input\", function() {\r\n  this.setAttribute(\"data-heading\", this.innerText);\r\n});<\/code><\/pre>\n<p>The input event is real handy, as it covers any change in an element's value, even <code>contenteditable<\/code> elements. It has decent browser support, just no IE (Edge is fine). If you really needed this for IE, you could still get it done combining events like <code>keyup<\/code>, <code>paste<\/code>, and <code>blur<\/code> and stuff. But you probably don't need to for a little thing like this.<\/p>\n<p>Now we're all good:<\/p>\n<figure id=\"post-252981\" class=\"align-none media-252981\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/hi.gif\" alt=\"\" \/><\/figure>\n<p>But before we go, let's bask in more of Mandy's creations:<\/p>\n<p data-height=\"338\" data-theme-id=\"1\" data-slug-hash=\"vxmKpz\" data-default-tab=\"result\" data-user=\"mandymichael\" data-embed-version=\"2\" data-pen-title=\"Lines and layered css text effects \" class=\"codepen\">See the Pen <a href=\"https:\/\/codepen.io\/mandymichael\/pen\/vxmKpz\/\">Lines and layered css text effects <\/a> by Mandy Michael (<a href=\"http:\/\/codepen.io\/mandymichael\">@mandymichael<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"WpjMpJ\" data-default-tab=\"result\" data-user=\"mandymichael\" data-embed-version=\"2\" data-pen-title=\"Stripy Rainbow Text Effect\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/mandymichael\/pen\/WpjMpJ\/\">Stripy Rainbow Text Effect<\/a> by Mandy Michael (<a href=\"http:\/\/codepen.io\/mandymichael\">@mandymichael<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p data-height=\"560\" data-theme-id=\"1\" data-slug-hash=\"VprZaq\" data-default-tab=\"result\" data-user=\"mandymichael\" data-embed-version=\"2\" data-pen-title=\"Single element, multi coloured 3d text effect\" class=\"codepen\">See the Pen <a href=\"https:\/\/codepen.io\/mandymichael\/pen\/VprZaq\/\">Single element, multi coloured 3d text effect<\/a> by Mandy Michael (<a href=\"http:\/\/codepen.io\/mandymichael\">@mandymichael<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p data-height=\"333\" data-theme-id=\"1\" data-slug-hash=\"pRXQZO\" data-default-tab=\"result\" data-user=\"mandymichael\" data-embed-version=\"2\" data-pen-title=\"Split fractured text\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/mandymichael\/pen\/pRXQZO\/\">Split fractured text<\/a> by Mandy Michael (<a href=\"http:\/\/codepen.io\/mandymichael\">@mandymichael<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Mandy Michael has been creating some incredible text effects with just the power of CSS. She uses every trick in the book: gradients, transforms, pseudo elements, shadows, and clipping paths to name a few. They are all real web text too. Custom fonts typically, but no images, canvas, or SVG or anything like that.<\/p>\n","protected":false},"author":3,"featured_media":253001,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1192],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252961"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252961"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252961\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/253001"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252961"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252961"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252961"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252999,"date":"2017-03-21T05:42:51","date_gmt":"2017-03-21T12:42:51","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252999"},"modified":"2017-03-21T05:42:51","modified_gmt":"2017-03-21T12:42:51","slug":"zeroing-the-desk","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/zeroing-the-desk\/","title":{"rendered":"Zeroing the Desk"},"content":{"rendered":"<p>Brendan Dawes:<\/p>\n<blockquote><p>After a recording session on one of those large mixing desks, after you've twiddled countless knobs and push around many faders you do something called zeroing the desk. This is were you turn every control and push every fader back to zero, so that when the next engineer comes in he or she isn't going to jump out of their seat when a large sub-bass whacks them straight in the face and possibly blows something up. It's a polite thing to do for your fellow sound engineer.<\/p><\/blockquote>\n<p>Reminds me of <code>all: unset;<\/code> ;)<\/p>\n<p>(via <a href=\"http:\/\/bradfrost.com\/blog\/link\/zeroing-the-desk\/\">Brad Frost<\/a>)<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Brendan Dawes: After a recording session on one of those large mixing desks, after you&#8217;ve twiddled countless knobs and push around many faders you do something called zeroing the desk. This is were you turn every control and push every fader back to zero, so that when the next engineer comes in he or she [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252999"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252999"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252999\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252999"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252999"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252999"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252997,"date":"2017-03-21T05:39:10","date_gmt":"2017-03-21T12:39:10","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252997"},"modified":"2017-03-21T05:39:10","modified_gmt":"2017-03-21T12:39:10","slug":"next-smashing-magazine","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/next-smashing-magazine\/","title":{"rendered":"The Next Smashing Magazine"},"content":{"rendered":"<p>Congrats to the big team over there assembled to take on this major redesign process. Unlike our redesigns around here that are usually more like realignments with minor dev work and UX sprinkles each iteration, this was a ground-up rebuild for them. They migrated a bunch of different platforms all into one, a static-site based system with all front end APIs. It's gotta feel good to pull all that stuff into one system. I remember when I used to have four different systems around here (WordPress, Forums (various), eCommerce (various), and some raw PHP stuff) and the good feeling it was to get it all yanked in under one WordPress roof.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Congrats to the big team over there assembled to take on this major redesign process. Unlike our redesigns around here that are usually more like realignments with minor dev work and UX sprinkles each iteration, this was a ground-up rebuild for them. They migrated a bunch of different platforms all into one, a static-site based [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[629],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252997"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252997"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252997\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252997"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252997"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252997"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252954,"date":"2017-03-20T06:16:37","date_gmt":"2017-03-20T13:16:37","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252954"},"modified":"2017-03-20T06:16:37","modified_gmt":"2017-03-20T13:16:37","slug":"guetzli","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/guetzli\/","title":{"rendered":"Guetzli"},"content":{"rendered":"<p>Geutzili, Google's new open source algorithm...<\/p>\n<blockquote><p>...that creates high-quality JPEG images with file sizes 35% smaller than currently available methods, enabling webmasters to create webpages that can load faster and use even less data. <\/p><\/blockquote>\n<p>I've seen this fairly widely reported, and that's great because images are the main cause of web bloat these days and fighting back with tech seems smart.<\/p>\n<p>I also saw Anselm Hannemann <a href=\"https:\/\/wdrl.info\/archive\/174\">note<\/a>:<\/p>\n<blockquote><p>This is great, but to put things into perspective, we also have to consider that it's up to 100 times slower as Mozilla's <a href=\"https:\/\/github.com\/mozilla\/mozjpeg\">mozJPEG<\/a> encoder and in many cases, it doesn't achieve the same quality at the same file size<\/p><\/blockquote>\n<p>Source: <a href=\"https:\/\/mobile.twitter.com\/kornelski\/status\/842513840898228224\">Kornel Lesi\u0144ski<\/a>, the guy behind ImageOptim, who says Guetzli will be incorporated into the next version.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Geutzili, Google&#8217;s new open source algorithm&#8230; &#8230;that creates high-quality JPEG images with file sizes 35% smaller than currently available methods, enabling webmasters to create webpages that can load faster and use even less data. I&#8217;ve seen this fairly widely reported, and that&#8217;s great because images are the main cause of web bloat these days and [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[1189,722,592],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252954"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252954"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252954\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252954"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252954"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252954"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252847,"date":"2017-03-20T05:07:47","date_gmt":"2017-03-20T12:07:47","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252847"},"modified":"2017-03-20T05:07:47","modified_gmt":"2017-03-20T12:07:47","slug":"creating-book-cover-using-javascript-p5-js","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/creating-book-cover-using-javascript-p5-js\/","title":{"rendered":"Creating a Book Cover Using JavaScript and p5.js"},"content":{"rendered":"<p>I recently published a book and an interactive course called <a href=\"http:\/\/www.codingforvisuallearners.com\/\">Coding for Visual Learners<\/a>. It teaches coding to beginners from scratch using the widely popular JavaScript programming language and the p5.js programming library. Since p5.js a great and an easy to use drawing library, I wanted to make use of it to create the cover of my <a href=\"http:\/\/i.imgur.com\/9EJuFze.jpg\">book<\/a> and course as well. This is a tutorial on how to create this particular visual using JavaScript and p5.js.<\/p>\n<p><!--more--><\/p>\n<figure><img src=\"https:\/\/css-tricks.com\/images\/p5-book-cover.gif\" alt=\"Book Cover using p5.js (circling 1's and 0's around the title)\"><\/figure>\n<p><a href=\"https:\/\/p5js.org\/\">p5.js<\/a> is a drawing & creative coding library that is based on the idea of sketching. Just like how sketching can be thought of as a minimal approach to drawing to quickly prototype an idea, p5.js is built on the concept of writing the minimal amount of code to translate your visual, interaction or animation ideas to the screen. p5.js is a JavaScript implementation of the popular library called Processing which is based on the Java programming language.<\/p>\n<p>The concise nature of p5.js makes it a very easy library to learn. But don't let this simplicity trick you into believing that p5.js has limited capabilities. p5.js has an impressive amount of functionality, history, and community behind it to make it a valuable learning investment if you ever wanted to create art, design, motion or interactive pieces using code. A p5.js program can be anywhere from a few lines of code to thousands.<\/p>\n<p>You can use p5.js to build intricate data visualizations:<\/p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"aJJmZP\" data-default-tab=\"result\" data-user=\"enginarslan\" data-embed-version=\"2\" data-pen-title=\"p5.js data visualization\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/enginarslan\/pen\/aJJmZP\/\">p5.js data visualization<\/a> by Engin Arslan (<a href=\"http:\/\/codepen.io\/enginarslan\">@enginarslan<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Or, generative art:<\/p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"XMMjjP\" data-default-tab=\"result\" data-user=\"enginarslan\" data-embed-version=\"2\" data-pen-title=\"p5.js generative art\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/enginarslan\/pen\/XMMjjP\/\">p5.js generative art<\/a> by Engin Arslan (<a href=\"http:\/\/codepen.io\/enginarslan\">@enginarslan<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>In this tutorial, I will be assuming a bit of JavaScript knowledge like familiarity with if-else structures, arrays, etc. If you would like to brush up your JavaScript knowledge or would like to learn this powerful language from scratch I would highly recommend you to check out my book and the course <a href=\"http:\/\/www.codingforvisuallearners\">Coding for Visual Learners<\/a>. It is tailored for the absolute beginner.<\/p>\n<p>I will also assume some level of familiarity with computer graphics so that concepts like coordinate systems or color modes don't require too much explanation. But in case if anything is not clear, feel free to reach out to me and I will do my best to clarify things.<\/p>\n<p>You can follow along with this write-up either using the <a href=\"https:\/\/p5js.org\/download\/\">p5.js editor<\/a> on your operating system or use an online code editor. Here is a <a href=\"http:\/\/codepen.io\/enginarslan\/pen\/xqqEqB\">pen<\/a> that can serve as a template for your p5.js projects.<\/p>\n<p>Let's get started!<\/p>\n<h3>Part One: p5.js Basics<\/h3>\n<h4>setup & draw functions<\/h4>\n<p>Most p5.js scripts contain two function declarations called <code>setup<\/code> and <code>draw<\/code>. You will be writing all of your p5.js related code inside these two functions and p5.js will execute these functions for you in particular ways. It is important to understand how these functions are executed by p5.js since they form the backbone of any p5.js program.<\/p>\n<ol>\n<li>The <code>setup<\/code> function is where you will be writing code that is related to initialization of your program. Anything that is written inside the <code>setup<\/code> function gets executed once and it gets executed at the beginning of the program.<\/li>\n<li>The <code>draw<\/code> function is where you will be writing most of the drawing related functionality. <code>draw<\/code> function gets executed after the <code>setup<\/code> function and it gets executed continuously (close to 60 times, frames, a second by default) which lets you create all kinds of interactive and animated visuals using this library.<\/li>\n<\/ol>\n<p>Given <code>draw<\/code> and <code>setup<\/code> functions are pretty essential to the workings of p5.js, this is the boilerplate code that you would need to use for almost every p5.js code you write.<\/p>\n<p data-height=\"265\" data-theme-id=\"1\" data-slug-hash=\"EWZbmQ\" data-default-tab=\"js,result\" data-user=\"enginarslan\" data-embed-version=\"2\" data-pen-title=\"book-cover-step-01\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/enginarslan\/pen\/EWZbmQ\/\">book-cover-step-01<\/a> by Engin Arslan (<a href=\"http:\/\/codepen.io\/enginarslan\">@enginarslan<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>If you don't explicitly instruct it, p5.js creates a canvas (the drawing area inside the web page that you will be using) using a default size which is probably too small for your purposes. That's why you are calling the <code>createCanvas<\/code> function which creates a canvas explicitly using the given x and y dimensions. You are also calling the <code>background<\/code> function inside the <code>draw<\/code> function to be able to set a color for the canvas as well. This might not be necessary for boilerplate purposes but it helps with seeing the created canvas.<\/p>\n<h4>Colors & Shapes in p5.js<\/h4>\n<p>Color setting functions in p5.js, like the <code>background<\/code> function you are using here, works with either one, two, three or four arguments. A single argument creates a solid color using the given value for the R, G, and B (Red, Green, Blue) components. Calling a color setting function with a single value is same as calling it with the same value as three separate arguments. These two declarations below would create the same result:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">background(150);\r\nbackground(150, 150, 150);<\/code><\/pre>\n<p>A fourth argument, when provided, sets the alpha (transparency) for the color. A second argument, when is used as the last argument also controls the alpha of the color and hence the alpha of the shapes that you draw after it. Talking of shapes, let's create a shape. Here is a rectangle, drawn by using the <code>rect<\/code> function.<\/p>\n<p data-height=\"265\" data-theme-id=\"1\" data-slug-hash=\"PpWOjY\" data-default-tab=\"js,result\" data-user=\"enginarslan\" data-embed-version=\"2\" data-pen-title=\"book-cover-step-02\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/enginarslan\/pen\/PpWOjY\/\">book-cover-step-02<\/a> by Engin Arslan (<a href=\"http:\/\/codepen.io\/enginarslan\">@enginarslan<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>The first two arguments to the <code>rect<\/code> function set the position of the rectangle and the last two arguments are for setting the size. Notice how when used with the arguments <code>0<\/code> and <code>0<\/code>, the rectangle is drawn to the top-left of the screen. <code>0, 0<\/code> is the origin point for the canvas and it resides at the top-left corner. Rectangle shapes are drawn from their top-left corner by default in p5.js. If you wanted to change this behavior, you can declare a function called <code>rectMode<\/code> with the p5.js variable <code>CENTER<\/code> to change the rectangle drawing mode. It makes sense to place this declaration inside the <code>setup<\/code> function since you will only have to do it once for the lifetime of a program.<\/p>\n<p data-height=\"265\" data-theme-id=\"1\" data-slug-hash=\"vxgWZP\" data-default-tab=\"js,result\" data-user=\"enginarslan\" data-embed-version=\"2\" data-pen-title=\"book-cover-step-03\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/enginarslan\/pen\/vxgWZP\/\">book-cover-step-03<\/a> by Engin Arslan (<a href=\"http:\/\/codepen.io\/enginarslan\">@enginarslan<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>If you wanted to draw this rectangle right in the middle of the screen, you have a couple of options. You could provide it with the value <code>700\/2<\/code> so that it would be using half of the width and half of the height. But hard-coding values like this is not a good programming practice. You could try sharing variables among the <code>rect<\/code> function and the <code>setup<\/code> and <code>draw<\/code> functions. But luckily, since placing things relative to the width and height of the canvas is a common operation, p5.js provides you with a shortcut. You can use the p5.js variables <code>width<\/code> and <code>height<\/code> to be able to get the current width and height of the canvas. Divide these variables by two to use them for the placement of the rectangle.<\/p>\n<p data-height=\"265\" data-theme-id=\"1\" data-slug-hash=\"VpPrzg\" data-default-tab=\"js,result\" data-user=\"enginarslan\" data-embed-version=\"2\" data-pen-title=\"book-cover-step-04\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/enginarslan\/pen\/VpPrzg\/\">book-cover-step-04<\/a> by Engin Arslan (<a href=\"http:\/\/codepen.io\/enginarslan\">@enginarslan<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>So far, you know how to set the color for the background but haven't seen how to set the color for the shapes yet. There are two functions that allow you to do so. One of them is the <code>fill<\/code> function that sets the fill color for the shapes that comes after this function declaration and then there is the <code>stroke<\/code> function that sets the color for the stroke.<\/p>\n<p>How color functions work might feel bit unintuitive since they affect the shapes that come after the declaration and not before. To understand how they operate, you can think of calling these functions as setting the active color for the consecutive drawing operations.<\/p>\n<p>Another related function is <code>strokeWidth<\/code>, which sets the width of the stroke of the shapes. You will be using all these three functions to create a transparent rectangle with white borders.<\/p>\n<p data-height=\"265\" data-theme-id=\"1\" data-slug-hash=\"GWrOMV\" data-default-tab=\"js,result\" data-user=\"enginarslan\" data-embed-version=\"2\" data-pen-title=\"book-cover-step-05\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/enginarslan\/pen\/GWrOMV\/\">book-cover-step-05<\/a> by Engin Arslan (<a href=\"http:\/\/codepen.io\/enginarslan\">@enginarslan<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>You will also create a text in the middle of the screen. For this purpose, you will be using the <code>text<\/code> function. <code>text<\/code> function takes 3 inputs, the text to be drawn to the screen and the x and the y position for the text placement. You can also use the <code>textFont<\/code> function to set the desired font for the text.<\/p>\n<p data-height=\"265\" data-theme-id=\"1\" data-slug-hash=\"KWayya\" data-default-tab=\"js,result\" data-user=\"enginarslan\" data-embed-version=\"2\" data-pen-title=\"book-cover-step-06\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/enginarslan\/pen\/KWayya\/\">book-cover-step-06<\/a> by Engin Arslan (<a href=\"http:\/\/codepen.io\/enginarslan\">@enginarslan<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>There are a couple of things to fix here. First of all, notice how the text is not center aligned. As you can guess by now, there is a function to set how text is aligned, called the <code>textAlign<\/code> function. You will be using the <code>textAlign<\/code> function in the <code>setup<\/code> function since you won't be changing this property again. You will provide it with two arguments: <code>CENTER, CENTER<\/code>. This will make the text drawings to be horizontally and vertically aligned.<\/p>\n<p>The second thing to notice is that the text shape is being affected by the fill and stroke values of the rectangle above but you probably don't want to use these values when drawing the text. Let's set new values before drawing the text to get rid of the previous values. <\/p>\n<p data-height=\"265\" data-theme-id=\"1\" data-slug-hash=\"bqgYaE\" data-default-tab=\"js,result\" data-user=\"enginarslan\" data-embed-version=\"2\" data-pen-title=\"book-cover-step-07\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/enginarslan\/pen\/bqgYaE\/\">book-cover-step-07<\/a> by Engin Arslan (<a href=\"http:\/\/codepen.io\/enginarslan\">@enginarslan<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>To be able to adjust the stroke, you could have either make the stroke color to be transparent or set the strokeWeight to be 0. There is also a <code>noStroke<\/code> function that is used here which gets rid of the stroke altogether. It doesn't really matter which one you choose in my opinion, they all have the same effect in this use case.<\/p>\n<p>You will now adjust the shape of the rectangle to encompass this text a bit better. Also, you will make the background black for legibility purposes.<\/p>\n<p data-height=\"265\" data-theme-id=\"1\" data-slug-hash=\"ZeLavX\" data-default-tab=\"js,result\" data-user=\"enginarslan\" data-embed-version=\"2\" data-pen-title=\"book-cover-step-08\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/enginarslan\/pen\/ZeLavX\/\">book-cover-step-08<\/a> by Engin Arslan (<a href=\"http:\/\/codepen.io\/enginarslan\">@enginarslan<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Currently, the text and the rectangle is too small. You already know how to scale up the rectangle. To be able to change the size of the text you could be using a function called <code>textSize<\/code>. But you will instead use a p5.js transformation function, <code>scale<\/code>, to handle the scaling since it will allow you to control the scale for the rectangle and the text together in a more straightforward manner. Unfortunately, transformations are not very intuitive when working with p5.js so they require a further explanation.<\/p>\n<h4>p5.js transformation functions<\/h4>\n<p>Transformations in p5.js happen relative to the origin point. There is a <code>scale<\/code> function that you can use which would scale the shapes that come after itself by the given amount, but things will get scaled from the origin point (the top-left corner of the screen). This is rarely desirable. When working with shapes, you would generally want to scale them relative to their center point.<\/p>\n<p>Notice how calling the <code>scale<\/code> function makes everything bigger but also displaces them since scaling is happening relative to the top-left corner. <\/p>\n<p data-height=\"265\" data-theme-id=\"1\" data-slug-hash=\"YZNEeM\" data-default-tab=\"js,result\" data-user=\"enginarslan\" data-embed-version=\"2\" data-pen-title=\"book-cover-step-09\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/enginarslan\/pen\/YZNEeM\/\">book-cover-step-09<\/a> by Engin Arslan (<a href=\"http:\/\/codepen.io\/enginarslan\">@enginarslan<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>If only the shape was at the origin point then this scaling operation would have worked for our purposes. Luckily there is a way to achieve that. For this, you should be using the <code>scale<\/code> function alongside with the <code>translate<\/code> function. Here is how it works:<\/p>\n<p data-height=\"265\" data-theme-id=\"1\" data-slug-hash=\"OpWOZV\" data-default-tab=\"js,result\" data-user=\"enginarslan\" data-embed-version=\"2\" data-pen-title=\"book-cover-step-10\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/enginarslan\/pen\/OpWOZV\/\">book-cover-step-10<\/a> by Engin Arslan (<a href=\"http:\/\/codepen.io\/enginarslan\">@enginarslan<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>You have set the x and y position for both the rectangle and the text to be 0. This moves the shapes to the origin point. Then you call the <code>translate<\/code> transformation function to move the shapes to their initial position at <code>width\/2<\/code> and <code>height\/2<\/code>. This works because <code>translate<\/code> function actually doesn't move the shapes, it moves the entire coordinate system. Now that the origin of the coordinate system is in the middle of the screen, you can call the <code>scale<\/code> function, which would do the scaling from this desired point. <\/p>\n<p>Now if this sounds a bit convoluted to you, let me assure that you are not alone. Moving the entire coordinate system to transform a shape is not only an overkill for what you are trying to achieve but can also be impractical since it means that anything else that comes after these shapes will need to use this newly transformed coordinate system which adds a lot of complexity to the process. Let's see it in an example by drawing a new shape.<\/p>\n<p data-height=\"265\" data-theme-id=\"1\" data-slug-hash=\"ryyMdo\" data-default-tab=\"css,result\" data-user=\"enginarslan\" data-embed-version=\"2\" data-pen-title=\"book-cover-step-10-B\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/enginarslan\/pen\/ryyMdo\/\">book-cover-step-10-B<\/a> by Engin Arslan (<a href=\"http:\/\/codepen.io\/enginarslan\">@enginarslan<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>As you can see, you are now drawing a circle using the ellipse function at the x and y coordinates of 120 and 0. But the problem is that even though the provided y value is at 0, you can clearly see that the circle is not at top of the screen but in the middle, which happens to be the new 0 value for the y-axis. This would be highly undesirable for most circumstances but luckily there is a way in p5.js to deal with it. Enter the <code>push<\/code> and <code>pop<\/code> functions!<\/p>\n<h4>push & pop<\/h4>\n<p>The p5.js <code>push<\/code> function allows you to create a new state and <code>pop<\/code> function restores the state to the previous conditions. This allows you to have completely different settings applied to individual objects without worrying those settings to affect the shapes that come after as long as you do everything in between a <code>push<\/code> and a <code>pop<\/code> call. Here is how it works:<\/p>\n<p data-height=\"265\" data-theme-id=\"1\" data-slug-hash=\"evgery\" data-default-tab=\"js,result\" data-user=\"enginarslan\" data-embed-version=\"2\" data-pen-title=\"book-cover-step-11\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/enginarslan\/pen\/evgery\/\">book-cover-step-11<\/a> by Engin Arslan (<a href=\"http:\/\/codepen.io\/enginarslan\">@enginarslan<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Perfect! All that transformation changes you are doing right now remains localized in between the <code>push<\/code> and <code>pop<\/code> function calls. It is important to note that you should always call <code>push<\/code> and <code>pop<\/code> functions together. Using one but not the other doesn't make any sense. Now that you fixed the problems regarding transformations, you can get rid of the circle shape. One final thing you will be adding before finalizing this text on the screen is to add a bit of an animation to it. Let's scale it up a little bit for the first 200 frames of the animation to add a bit more dynamism to the visual. For this purpose, you can use the <code>frameCount<\/code> p5.js variable. <code>frameCount<\/code> p5.js variable keeps track of the number of times the <code>draw<\/code> function is called during the lifetime of a p5.js program.<\/p>\n<p data-height=\"265\" data-theme-id=\"1\" data-slug-hash=\"GWrOBR\" data-default-tab=\"js,result\" data-user=\"enginarslan\" data-embed-version=\"2\" data-pen-title=\"book-cover-step-12\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/enginarslan\/pen\/GWrOBR\/\">book-cover-step-12<\/a> by Engin Arslan (<a href=\"http:\/\/codepen.io\/enginarslan\">@enginarslan<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>The following code snippet is added to the program. If the <code>frameCount<\/code> is less than 200 it adds <code>1\/400<\/code> of the current <code>frameCount<\/code> value to the current scale. The reason why you are using the number 400 is that when the frameCount is 200 you would like to have 0.5 added to the total scale. But this is not the most elegant or scalable way of tackling this problem.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">if (frameCount &lt; 200) {\r\n  scale(1.5 + frameCount\/400);\r\n} else {\r\n  scale(2);\r\n}<\/code><\/pre>\n<p>One p5.js function that you can use to derive this incremental scaling value is the <code>map<\/code> function. <code>map<\/code> function maps the given value that is expected to be in between the given minimum and maximum range to a number in the desired minimum and maximum range. The following declaration:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">map(frameCount, 0, 200, 0, 0.5);<\/code><\/pre>\n<p>will map the <code>frameCount<\/code> variable that is in between 0 and 200 to a value in between 0 and 0.5. Let's make use of it inside the code:<\/p>\n<p data-height=\"265\" data-theme-id=\"1\" data-slug-hash=\"JWEOee\" data-default-tab=\"js,result\" data-user=\"enginarslan\" data-embed-version=\"2\" data-pen-title=\"book-cover-step-13\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/enginarslan\/pen\/JWEOee\/\">book-cover-step-13<\/a> by Engin Arslan (<a href=\"http:\/\/codepen.io\/enginarslan\">@enginarslan<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>This is so much better. And the code is very scalable as well. You could just be changing the <code>scaleFactor<\/code> and <code>maxLimit<\/code> variables to adjust how much and how fast the text grows. In the next part of this walkthrough, you will be building the background effect of the final visual, which is arguably the more exciting part of this visual. But the parts you have seen so far should be enough to get you familiarized with the basics of p5.js.<\/p>\n<h3>Part Two: Creating the Ring Shapes<\/h3>\n<p>In this second part of the tutorial, you will learn about creating the animated, ring-like shapes in the background. But first, let's move the text drawing code to its own function so that it doesn't occupy so much space inside the <code>draw<\/code> function.<\/p>\n<p data-height=\"265\" data-theme-id=\"1\" data-slug-hash=\"Nppraq\" data-default-tab=\"js,result\" data-user=\"enginarslan\" data-embed-version=\"2\" data-pen-title=\"book-cover-step-14\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/enginarslan\/pen\/Nppraq\/\">book-cover-step-14<\/a> by Engin Arslan (<a href=\"http:\/\/codepen.io\/enginarslan\">@enginarslan<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>This update didn't introduce any functionality change but is only a structural update to the code to make it more legible. You won't need the <code>drawTitleText<\/code> function for now, so you can comment it out to be able to focus on the background shapes. <\/p>\n<p>You will use a JavaScript object to represent the numbers for the final visual on the screen. Using an object to create as shape makes it easier to think about the shape as an entity of its own with a certain set of properties and behaviors. It also helps with encapsulating the functionality that is relevant to the shape, under the shape itself, which is good for code organization.<\/p>\n<p>Here, you are creating a JavaScript constructor function called <code>Num<\/code> to represent the numbers that are used in the ring. It takes a couple of arguments; a message for the shape to display, the x, y position, the rotation and the color values for the shape. You haven't seen the <code>rotate<\/code> function before but it is pretty similar to <code>scale<\/code> or <code>translate<\/code> functions. As the name implies, it transforms the shape by rotating it.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">function Num(msg, x, y, rot, clr) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.rot = rot;\r\n    this.msg = msg;\r\n    this.color = clr;\r\n\r\n    this.render = function() {\r\n        push();\r\n        fill(this.color);\r\n        translate(this.x, this.y);\r\n        rotate(this.rot);\r\n        text(this.msg, 0, 0);\r\n        pop();\r\n    }\r\n}<\/code><\/pre>\n<p>The constructor function has a <code>render<\/code> method that handles the drawing of the shape to the screen. You can now use this constructor function to initialize an instance of this shape object and draw it on the screen.<\/p>\n<p data-height=\"265\" data-theme-id=\"1\" data-slug-hash=\"aJJZqq\" data-default-tab=\"js,result\" data-user=\"enginarslan\" data-embed-version=\"2\" data-pen-title=\"book-cover-step-15\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/enginarslan\/pen\/aJJZqq\/\">book-cover-step-15<\/a> by Engin Arslan (<a href=\"http:\/\/codepen.io\/enginarslan\">@enginarslan<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>A couple of things that are worth mentioning.<\/p>\n<p>First of all, notice how the <code>Num<\/code> function is pretty generic. It could be used to render any text to the screen in a flexible manner. It is also easy to use since you can simply control the rotation by defining the desired rotation value instead of using <code>push<\/code> and <code>pop<\/code> functions externally.<\/p>\n<p>Secondly, see how certain words are being avoided when declaring functions. You could have called the constructor function <code>Number<\/code> instead of <code>Num<\/code> but <code>Number<\/code> is an already existing function in JavaScript so you should try to avoid it. Things wouldn't necessarily explode if you were to use <code>Number<\/code> but it is generally a good idea to not cause name conflicts. Also for the arguments, you are not using the <code>rotate<\/code> or <code>color<\/code> as parameter names as these are the names for built-in p5.js functions. If you are to use these names for arguments then you would not be able to use the functions that are using the same name in the context of this function. Learning how to avoid these names comes with practice.<\/p>\n<p>Finally, notice how you are providing a rotation value of 90 to the number object, but the number doesn't seem to have rotated 90 degrees. That's because p5.js uses <em>radians<\/em> by default when performing rotations instead of <em>degrees<\/em>. You can set it to use degrees as the default rotation unit by calling the p5.js <code>angleMode<\/code> function with the <code>DEGREES<\/code> variable inside the <code>setup<\/code> function.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">angleMode(DEGREES);<\/code><\/pre>\n<p>It is great that there is now a single number on the screen but the aim is to have several numbers in a ring formation. Let's figure out how to do this for a single number and then you can scale the operation to do placement for an arbitrary amount of numbers.<\/p>\n<p data-height=\"265\" data-theme-id=\"1\" data-slug-hash=\"QppErE\" data-default-tab=\"js,result\" data-user=\"enginarslan\" data-embed-version=\"2\" data-pen-title=\"book-cover-step-16\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/enginarslan\/pen\/QppErE\/\">book-cover-step-16<\/a> by Engin Arslan (<a href=\"http:\/\/codepen.io\/enginarslan\">@enginarslan<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>The code is growing in size! This is the code that is added for creating the ring layout. <\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var radius = 100;\r\nvar amount = 15;\r\n\r\npush();\r\ntranslate(width \/ 2, height \/ 2);\r\n\r\nfor (var i = 0; i &lt; amount; i++) {\r\n    rotate(i);\r\n    var num = new Num(1, 0 + radius, 0, 90, 255);\r\n    num.render();\r\n}\r\n\r\npop();<\/code><\/pre>\n<p>Here we have a for-loop that creates a given amount of <code>Num<\/code> objects that are away from the current origin, by the given <code>radius<\/code> amount. This is currently only creating 15 objects. This is to illustrate a point. See how the spacing around the shapes is not even. This happens because transformation calls in p5.js (like <code>translate<\/code>, <code>rotate<\/code>, <code>scale<\/code>) have a cumulative effect. For example, these two calls that are listed below would result in a total translation of 20 pixels in the x-axis. <\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">translate(10, 0);\r\ntranslate(10, 0);<\/code><\/pre>\n<p>To remedy this you can use the <code>push<\/code> and <code>pop<\/code> so that the transformation effects remain localized and don't accumulate. That should take care of the uneven spacing of shapes. You should also make it so that the shapes are evenly distributed around the imaginary circle. To do this you can just divide 360 (the total angle of a circle) with the number of shapes you have to derive how much you should rotate each shape to achieve an even distribution.<\/p>\n<p data-height=\"265\" data-theme-id=\"1\" data-slug-hash=\"RppRJO\" data-default-tab=\"js,result\" data-user=\"enginarslan\" data-embed-version=\"2\" data-pen-title=\"book-cover-step-17\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/enginarslan\/pen\/RppRJO\/\">book-cover-step-17<\/a> by Engin Arslan (<a href=\"http:\/\/codepen.io\/enginarslan\">@enginarslan<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Perfect, in the next step, you will be creating a function out of this ring drawing operation. You will make the function to accept <code>radius<\/code> and <code>amount<\/code> as arguments. Also inside the function, you will be generating an array of random numbers to be fed into the <code>Num<\/code> object so that you can pass a random value of 0 or 1 to the object, instead of always using number 1.<\/p>\n<p>For this purpose, you will use the p5.js <code>random<\/code> function. Here is a snippet that generates a random floating point number in between 0 and 2 (excluding 2) that gets converted to an integer using the JavaScript <code>parseInt<\/code> function and gets pushed into an array.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var randomNumbers = [];\r\nfor (var i = 0; i &lt;= amount; i++) {\r\n    randomNumbers.push(parseInt(random(2), 10));\r\n}<\/code><\/pre>\n<p>Now you can pass an item from this <code>randomNumbers<\/code> collection to the <code>Num<\/code> object instead of always using the number 1. Here is the entire code:<\/p>\n<p data-height=\"265\" data-theme-id=\"1\" data-slug-hash=\"MppeBo\" data-default-tab=\"js,result\" data-user=\"enginarslan\" data-embed-version=\"2\" data-pen-title=\"book-cover-step-18\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/enginarslan\/pen\/MppeBo\/\">book-cover-step-18<\/a> by Engin Arslan (<a href=\"http:\/\/codepen.io\/enginarslan\">@enginarslan<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>The problem right now is that the p5.js <code>random<\/code> function is generating a random value for each <code>draw<\/code> function call but for our purposes, we would like these random values to remain the same throughout the execution of the program. To be able to do so you should use the p5.js <code>randomSeed<\/code> function. The <code>randomSeed<\/code> makes sure you are getting the same \"random\" values for the given seed value. You will make it so that the seed should be configurable from outside the function.<\/p>\n<p data-height=\"265\" data-theme-id=\"1\" data-slug-hash=\"JWWKVm\" data-default-tab=\"js,result\" data-user=\"enginarslan\" data-embed-version=\"2\" data-pen-title=\"book-cover-step-19\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/enginarslan\/pen\/JWWKVm\/\">book-cover-step-19<\/a> by Engin Arslan (<a href=\"http:\/\/codepen.io\/enginarslan\">@enginarslan<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>The numbers are not flickering anymore. Since you created the function that draws a single ring, it is not hard at all at this point to draw multiple rings with varying amounts of <code>Num<\/code> objects using a loop. To keep the example simple, we are using a numeric constant to keep the density of the rings similar to each other.<\/p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"gmmwqW\" data-default-tab=\"js,result\" data-user=\"enginarslan\" data-embed-version=\"2\" data-pen-title=\"book-cover-step-19-B\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/enginarslan\/pen\/gmmwqW\/\">book-cover-step-19-B<\/a> by Engin Arslan (<a href=\"http:\/\/codepen.io\/enginarslan\">@enginarslan<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>You are almost done! In fact, I am going to just show the final code at this point, as it doesn't contain anything you haven't learned about. <\/p>\n<p>Here are a couple of things that are updated in this version.<\/p>\n<ul>\n<li>Updated the background for the Coding for Visual Learners Text so that it's semi-transparent.<\/li>\n<li>Introduced rotation to the rings.<\/li>\n<li>Introduced randomness to the color of the Num objects as well.<\/li>\n<\/ul>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"WppxBo\" data-default-tab=\"result\" data-user=\"enginarslan\" data-embed-version=\"2\" data-pen-title=\"Coding for Visual Learners - Cover\" data-preview=\"true\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/enginarslan\/pen\/WppxBo\/\">Coding for Visual Learners - Cover<\/a> by Engin Arslan (<a href=\"http:\/\/codepen.io\/enginarslan\">@enginarslan<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>In case you didn't want the shape to be animated, you can just call a function called <code>noLoop<\/code> inside the <code>setup<\/code> function to only display the first frame of the animation. If you wanted to adjust the shape you can start off by tweaking the <code>amount<\/code>, <code>spacing<\/code>, <code>radius<\/code> and <code>rotSpeed<\/code> parameters.<\/p>\n<p>I used the static image for my book cover but the animated shape to create animations for the course. To be fair, I also used Photoshop a bit for the placement of some of the elements but the base shape is created with JavaScript and p5.js which makes me happy as a programmer.<\/p>\n<hr>\n<p>I hope you enjoyed this short introduction to p5.js! Feel free to reach out to me if you have any questions! You can find my website at <a href=\"http:\/\/enginarslan.com\/\">enginarslan.com<\/a> and I am on Twitter at <a href=\"https:\/\/twitter.com\/inspiratory\">@inspiratory<\/a>.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>I recently published a book and an interactive course called Coding for Visual Learners. It teaches coding to beginners from scratch using the widely popular JavaScript programming language and the p5.js programming library. Since p5.js a great and an easy to use drawing library, I wanted to make use of it to create the cover [&hellip;]<\/p>\n","protected":false},"author":246197,"featured_media":252848,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[612,899,1185],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252847"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/246197"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252847"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252847\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/252848"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252847"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252847"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252847"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252876,"date":"2017-03-17T07:31:08","date_gmt":"2017-03-17T14:31:08","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252876"},"modified":"2017-03-17T07:31:08","modified_gmt":"2017-03-17T14:31:08","slug":"animate-ajaxd-content-natural-height","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/animate-ajaxd-content-natural-height\/","title":{"rendered":"Animate in Ajax&#8217;d Content to its Natural Height"},"content":{"rendered":"<p>Let's <em>combine three things<\/em> we just learned here on CSS-Tricks:<\/p>\n<p>One, <a href=\"https:\/\/css-tricks.com\/using-css-transitions-auto-dimensions\/\">transitioning to auto dimensions<\/a>. Two, <a href=\"https:\/\/css-tricks.com\/need-dependency-free-ajax\/\">Ajaxing for stuff<\/a> in a modern way. Three, <a href=\"https:\/\/css-tricks.com\/measuring-image-widths-javascript-carefully\/\">waiting for images to be loaded<\/a> to measure them. <\/p>\n<p>With all these three things in our toolbox, we can Ajax for some arbitrary content and insert it onto the page with a revealing height animation. Tricky tricky!<\/p>\n<p><!--more--><\/p>\n<p>Here's the final demo:<\/p>\n<p data-height=\"644\" data-theme-id=\"1\" data-slug-hash=\"RpZRBM\" data-default-tab=\"js,result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Slide in Ajax Content\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/RpZRBM\/\">Slide in Ajax Content<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>The thinking here is that since we're guaranteed to be using JavaScript anyway, since we're Ajaxing for some content, we might as well keep using JavaScript to help us make a smooth transition.<\/p>\n<p>In the grand tradition of <a href=\"https:\/\/css-tricks.com\/write-a-script\/\">\"writing a script\"<\/a>, here's ours:<\/p>\n<ol>\n<li>Ajax for the stuff<\/li>\n<li>Make a dummy element that is exactly as wide as where you plan to inject the stuff<\/li>\n<li>Inject your stuff into the dummy element<\/li>\n<li>Measure dummy element (carefully)<\/li>\n<li>Inject your stuff into the real (and collapsed) element<\/li>\n<li>Transition the height to the measured height<\/li>\n<li>Clean up after yourself<\/li>\n<\/ol>\n<p>All the code is commented line-by-line in the <a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/RpZRBM\">demo<\/a>.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Let&#8217;s combine three things we just learned here on CSS-Tricks: One, transitioning to auto dimensions. Two, Ajaxing for stuff in a modern way. Three, waiting for images to be loaded to measure them. With all these three things in our toolbox, we can Ajax for some arbitrary content and insert it onto the page with [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1181,612,1186],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252876"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252876"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252876\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252876"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252876"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252876"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252874,"date":"2017-03-17T06:45:32","date_gmt":"2017-03-17T13:45:32","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252874"},"modified":"2017-03-20T08:46:51","modified_gmt":"2017-03-20T15:46:51","slug":"hassle-free-full-bleed-not","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/hassle-free-full-bleed-not\/","title":{"rendered":"Hassle-free Full Bleed with *:not()"},"content":{"rendered":"<p>Common situation <a href=\"http:\/\/daverupert.com\/2017\/03\/full-bleed-with-not\/\">documented by Dave Rupert<\/a>:<\/p>\n<blockquote>\n<p>Let's say you're making a blog post layout. Content is entered into a CMS inside a WYSIWYG editor field. You echo that content to the page. You pull it up on a mobile device and notice the paragraphs go edge-to-edge. Yikes, it's a little uncomfortable. So you add some kind of left\/right padding maybe using a <code>div.container<\/code>.<\/p>\n<p>This works great until the client asks for the images and video to go full bleed. Your universal padding solution no longer works well.<\/p>\n<\/blockquote>\n<p>You got options. Containerizing isn't great in any scenario. So how do you yank out those full bleed elements? Dave does it with what I'd call a reverso-whitelist. Say you want images and videos to be full bleed, but everything else needs edge padding:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.post &gt; *:not( img ):not( video ) {\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    max-width: 50rem;\r\n    padding-left: 5%;\r\n    padding-right: 5%;\r\n}<\/code><\/pre>\n<p>He's using <code>:not()<\/code> to select everything that isn't an image or video. Those things are the whitelist. Much easier the other direction of maintaining a blacklist of every single possible HTML element. <\/p>\n<p>I use this right here on CSS-Tricks in this design, but instead of applying padding to everything, I use a container and pull out a whitelist of items to the edge with negative margins. I think I like Dave's idea better.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Common situation documented by Dave Rupert: Let&#8217;s say you&#8217;re making a blog post layout. Content is entered into a CMS inside a WYSIWYG editor field. You echo that content to the page. You pull it up on a mobile device and notice the paragraphs go edge-to-edge. Yikes, it&#8217;s a little uncomfortable. So you add some [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252874"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252874"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252874\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252874"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252874"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252874"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252819,"date":"2017-03-16T05:56:01","date_gmt":"2017-03-16T12:56:01","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252819"},"modified":"2017-03-16T10:12:41","modified_gmt":"2017-03-16T17:12:41","slug":"media-temple","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/media-temple\/","title":{"rendered":"Media Temple"},"content":{"rendered":"<p><a href=\"http:\/\/bit.ly\/1PLdefe\">Media Temple<\/a> is a web hosting company that has hosting options for everyone. From inexpensive (but powerful) plans like their Managed WordPress Hosting, to mid-level stuff like the managed DV plan CSS-Tricks runs on, to super heavy duty dedicated and cloud hosting. <\/p>\n<p>CSS-Tricks is the biggest site that I personally manage (with Media Temple's help, of course), so I keep that on a DV all by itself. We've been able to tune it up to be incredibly speedy. The document almost always comes back from WordPress under 100ms, which is pretty smoking! The only caching in place is at the nginx level. The rest of my sites I host on a separate DV, and I actually quite enjoy being able to DevOps myself when I need to, which I can do with Plesk that comes preinstalled on the box.<\/p>\n<p><!--more--><\/p>\n<p>Quick story!<\/p>\n<p>CodePen has a job board which actually doubles as the CSS-Tricks job board and the ShopTalk job board. The jobs have <a href=\"https:\/\/codepen.io\/jobs.json\">a JSON endpoint<\/a>, which we wanted to go HTTPS-only with. Because ShopTalk uses this endpoint from the front end, we needed ShopTalk to be HTTPS also. Time for a little server work!<\/p>\n<p>Perhaps you've heard of <a href=\"https:\/\/letsencrypt.org\/\">Let's Encrypt<\/a>, which provides SSL certificates totally free? I'm sure it's easy for some folks, but I'd say overall, the vibe is that it's not exactly a trivially easy thing to use for average developers like me. Fortunately, there is a <a href=\"https:\/\/ext.plesk.com\/packages\/f6847e61-33a7-4104-8dc9-d26a0183a8dd-letsencrypt\">Plesk extension for Let's Encrypt<\/a>. I just download a `.zip` file and add it right to Plesk with a click or two.<\/p>\n<figure id=\"post-252820\" class=\"align-none media-252820\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/plesk-lets-encrypt.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/plesk-lets-encrypt.png 837w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/plesk-lets-encrypt-300x175.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/plesk-lets-encrypt-768x447.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Let's Encrypt extension installed on my Media Temple DV through Plesk.<\/figcaption><\/figure>\n<p>Another couple of clicks to generate and install the certificate, and I have a working HTTPS site.<\/p>\n<figure id=\"post-252821\" class=\"align-none media-252821\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/https-working.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/https-working.png 904w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/https-working-300x199.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/https-working-768x511.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>And of course if I had any trouble at all, I'd just submit a ticket and get Media Temple's help. Which I have, let's see here... 169 times over almost a decade! I'm looking at my support history right now, and my first ticket ever was November 18, 2008 in which I was asking about the implications of www. at the start of URL's and how it affects hosting.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Media Temple is a web hosting company that has hosting options for everyone. From inexpensive (but powerful) plans like their Managed WordPress Hosting, to mid-level stuff like the managed DV plan CSS-Tricks runs on, to super heavy duty dedicated and cloud hosting. CSS-Tricks is the biggest site that I personally manage (with Media Temple&#8217;s help, [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17,508],"tags":[],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252819"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252819"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252819\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252819"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252819"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252819"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252840,"date":"2017-03-16T05:54:01","date_gmt":"2017-03-16T12:54:01","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252840"},"modified":"2017-03-17T07:34:47","modified_gmt":"2017-03-17T14:34:47","slug":"scrolling-web-primer","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/scrolling-web-primer\/","title":{"rendered":"Scrolling on the Web: A Primer"},"content":{"rendered":"<p>Scrolling is complicated. Nolan Lawson:<\/p>\n<blockquote>\n<ul>\n<li>User scrolls with two fingers on a touch pad<\/li>\n<li>User scrolls with one finger on a touch screen<\/li>\n<li>User scrolls with a mouse wheel on a physical mouse<\/li>\n<li>User clicks the sidebar and drags it up and down<\/li>\n<li>User presses up, down, PageUp, PageDown, or spacebar keys on a keyboard<\/li>\n<\/ul>\n<p>As it turns out, all five of these input methods have vastly different characteristics, especially when it comes to performance and cross-browser behavior. Some of them (such as touch screen scrolling) are likely to be smooth even on a page with heavy JavaScript usage, whereas others (such as keyboard scrolling) will make the same page feel laggy and unresponsive. Furthermore, some kinds of scrolling can be slowed down by DOM event handlers, whereas others won't.<\/p>\n<\/blockquote>\n","protected":false},"excerpt":{"rendered":"<p>Scrolling is complicated. Nolan Lawson: User scrolls with two fingers on a touch pad User scrolls with one finger on a touch screen User scrolls with a mouse wheel on a physical mouse User clicks the sidebar and drags it up and down User presses up, down, PageUp, PageDown, or spacebar keys on a keyboard [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[754],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252840"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252840"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252840\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252840"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252840"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252840"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252837,"date":"2017-03-16T05:51:33","date_gmt":"2017-03-16T12:51:33","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252837"},"modified":"2017-03-16T05:51:33","modified_gmt":"2017-03-16T12:51:33","slug":"systems-smart-enough-know-theyre-not-smart-enough","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/systems-smart-enough-know-theyre-not-smart-enough\/","title":{"rendered":"Systems Smart Enough To Know When They\u2019re Not Smart Enough"},"content":{"rendered":"<p>Josh Clark opens with \"Our answer machines have an over-confidence problem.\" Perhaps you've seen the examples of search results (in any form) presenting terrifyingly wrong (or at least \"controversial\") \"answers\". Hash tag fake news.<\/p>\n<p>Search, in whatever form we offer it to our users, tends that way. <em>This our top result, dear person! Interact with it! Our algorithm predicts you won't regret it!<\/em> Certainly, there is incentive to present results in that way. <\/p>\n<p>Josh asks some hard questions:<\/p>\n<blockquote>\n<ol>\n<li>When should we sacrifice speed for accuracy?<\/li>\n<li>How might we convey uncertainty or ambiguity?<\/li>\n<li>How might we identify hostile information zones?<\/li>\n<li>How might we provide the answer\u2019s context?<\/li>\n<li>How might we adapt to speech and other low-resolution interfaces?<\/li>\n<\/ol>\n<\/blockquote>\n<p>To which I might add: can we find a business incentive to make these things happen? Can such a good job be done with all this, that it attracts users, gains their trust, and makes them good customers? I fear that fast, overconfident, context-free answers is better business, short term.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Josh Clark opens with &#8220;Our answer machines have an over-confidence problem.&#8221; Perhaps you&#8217;ve seen the examples of search results (in any form) presenting terrifyingly wrong (or at least &#8220;controversial&#8221;) &#8220;answers&#8221;. Hash tag fake news. Search, in whatever form we offer it to our users, tends that way. This our top result, dear person! Interact with [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252837"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252837"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252837\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252837"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252837"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252837"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252574,"date":"2017-03-15T07:07:48","date_gmt":"2017-03-15T14:07:48","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252574"},"modified":"2017-03-15T07:32:41","modified_gmt":"2017-03-15T14:32:41","slug":"minecraft-webvr-html-using-frame","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/minecraft-webvr-html-using-frame\/","title":{"rendered":"Minecraft in WebVR with HTML Using A-Frame"},"content":{"rendered":"<p>I'm Kevin Ngo, a virtual reality web developer on the <a href=\"https:\/\/mozvr.com\">Mozilla VR team<\/a> and a core developer of <a href=\"https:\/\/aframe.io\">A-Frame<\/a>. Today, we'll go over how to build a room scale WebVR Minecraft demo that works on HTC Vive, Oculus Rift, Samsung GearVR, Google Cardboard, desktop, and mobile. The demo will be built with A-Frame in just 11 HTML elements!<\/p>\n<p><!--more--><\/p>\n<figure><img src=\"https:\/\/css-tricks.com\/images\/minesweeper-webvr-demo.gif\" alt=\"\" \/><\/figure>\n<h3 id=\"toc-aframe\">A-Frame<\/h3>\n<p>A few years ago, Mozilla invented and pioneered <a href=\"https:\/\/webvr.rocks\">WebVR<\/a>, a JavaScript API for creating immersive VR experiences in your browser, in an experimental build of Firefox. Since then, WebVR has gained wide support from other companies such as Google, Microsoft, Samsung, and Oculus. And it's now set to release enabled by default in Firefox within a few months!<\/p>\n<p>Why WebVR? The Web brings openness to VR; on the Web, content isn't controlled by gatekeepers, and users aren't kept in walled gardens. The Web also brings connectedness to VR; on the Web, we'll be able to traverse from world to world just as we today jump from page to page with links. With WebGL having matured with and new specifications such as Web Assembly and Service Workers, the Web is ready for VR.<\/p>\n<p><a href=\"https:\/\/mozvr.com\">Mozilla VR team<\/a> created A-Frame to kickstart the WebVR ecosystem, giving web developers the power to build 3D and VR worlds.<\/p>\n<figure id=\"post-252621\" class=\"align-none media-252621\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/aframe-homepage.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/aframe-homepage.png 2858w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/aframe-homepage-300x162.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/aframe-homepage-768x414.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/aframe-homepage-1024x552.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>A-Frame Homepage<\/figcaption><\/figure>\n<p><a href=\"https:\/\/aframe.io\">A-Frame<\/a> is a web framework for building virtual reality experiences. A-Frame is based on HTML and <a href=\"https:\/\/aframe.io\/docs\/0.5.0\/introduction\/#entity-component-system\">the Entity-Component pattern<\/a>. HTML is the most accessible language in all of computing, making it possible for anyone to <a href=\"https:\/\/aframe.io\/docs\/0.5.0\/introduction\/getting-started.html\">get started<\/a>. Below is a complete 3D and VR scene in just HTML that runs across multiple VR platforms as well as desktop and mobile:<\/p>\n<p data-rerun-position=\"top right\" data-height=\"300\" data-theme-id=\"dark\" data-slug-hash=\"BjygdO\" data-default-tab=\"html,result\" data-user=\"mozvr\" data-embed-version=\"2\" data-pen-title=\"Hello World \u00e2\u0080\u0094 A-Frame\" data-editable=\"true\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/mozvr\/pen\/BjygdO\/\">Hello World \u00e2\u0080\u0094 A-Frame<\/a> by mozvr (<a href=\"http:\/\/codepen.io\/mozvr\">@mozvr<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>That's it! Specifying just <strong>one line of HTML (<code>&lt;a-scene&gt;<\/code>) will take care of all the 3D and VR boilerplate<\/strong>: canvas, scene, renderer, render loop, camera, and lights. Then we add objects via child elements to the scene. <strong>No build steps<\/strong>, just a copy-and-paste-friendly HTML file.<\/p>\n<figure id=\"post-252622\" class=\"align-none media-252622\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/e155c380-aa92-11e6-9507-f19403783a7b.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/e155c380-aa92-11e6-9507-f19403783a7b.jpg 1960w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/e155c380-aa92-11e6-9507-f19403783a7b-300x61.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/e155c380-aa92-11e6-9507-f19403783a7b-768x157.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/e155c380-aa92-11e6-9507-f19403783a7b-1024x209.jpg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>And we can dynamically query and manipulate A-Frame's HTML the same as we would <a href=\"https:\/\/aframe.io\/docs\/0.5.0\/guides\/using-javascript-and-dom-apis.html\">with standard JavaScript and DOM APIs<\/a> (e.g., <code>querySelector<\/code>, <code>getAttribute<\/code>, <code>addEventListener<\/code>, <code>setAttribute<\/code>):<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">\/\/ Query scene graph using `querySelector`.\r\nvar sceneEl = document.querySelector('a-scene');\r\nvar boxEl = sceneEl.querySelector('a-box');\r\n\r\n\/\/ Get data about entity with `getAttribute`.\r\nconsole.log(box.getAttribute('position'));\r\n\/\/ &gt;&gt; {x: -1, y: 0.5, z: -3}\r\n\r\n\/\/ Add event listener with `addEventListener`.\r\nbox.addEventListener('click', function () {\r\n  \/\/ Modify entity with `setAttribute`.\r\n  box.setAttribute('color', 'red');\r\n});<\/code><\/pre>\n<figure id=\"post-252623\" class=\"align-none media-252623\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/js.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/js.jpg 1960w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/js-300x56.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/js-768x143.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/js-1024x191.jpg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>And since it's just HTML and JavaScript, A-Frame works with many existing frameworks and libraries:<\/p>\n<figure id=\"post-252624\" class=\"align-none media-252624\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/5f3f10b6-aa94-11e6-9d71-94c3e4350d08.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/5f3f10b6-aa94-11e6-9d71-94c3e4350d08.png 2232w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/5f3f10b6-aa94-11e6-9d71-94c3e4350d08-300x139.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/5f3f10b6-aa94-11e6-9d71-94c3e4350d08-768x356.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/5f3f10b6-aa94-11e6-9d71-94c3e4350d08-1024x474.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Works with d3, Vue, React, Redux, jQuery, Angular<\/figcaption><\/figure>\n<p>Although A-Frame's HTML looks easy, A-Frame's API is much more powerful than simply making 3D declarative. A-Frame is an <a href=\"https:\/\/aframe.io\/docs\/0.5.0\/introduction\/#entity-component-system\">entity-component-system (ECS) framework<\/a>. Notably used by Unity, ECS is a pattern popular in game development. The concept follows:<\/p>\n<ul>\n<li>All objects in the scene are <em>entities<\/em>, an empty object that doesn't do anything on its own, analogous to an empty <code>&lt;div&gt;<\/code>. In A-Frame, entities are represented in the DOM as an element.<\/li>\n<li>Then we plug <em>components<\/em> into those entities to provide appearance, behavior, and functionality. In A-Frame, components are registered in JavaScript and can be made to do anything. They have full access to <a href=\"http:\/\/threejs.org\">three.js<\/a> and DOM APIs. Components can be attached to entities in HTML after they are registered.<\/li>\n<\/ul>\n<p>The advantage of ECS is that it's composable; we can mix and match these reusable components to build more complex 3D objects. A-Frame takes it up a notch and makes it declarative and part of the DOM as we'll see in the Minecraft example.<\/p>\n<h3 id=\"toc-exampleskeleton\">Example Skeleton<\/h3>\n<p>Now to our demo. We'll be building a basic VR voxel builder.  The voxel builder will be primarily for <em>room scale VR with positional tracking and tracked controllers<\/em> (e.g., HTC Vive, Oculus Rift + Touch). We'll also make it work on desktop and mobile, but the experience won't be as compelling.<\/p>\n<p>We'll start off with skeleton HTML. If you want to skim through (all 11 lines of HTML), <a href=\"https:\/\/github.com\/ngokevin\/kframe\/tree\/csstricks\/scenes\/aincraft\/\">check out the source code on GitHub<\/a>.<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;script src=\"https:\/\/aframe.io\/releases\/0.5.0\/aframe.min.js\"&gt;&lt;\/script&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;a-scene&gt;\r\n  &lt;\/a-scene&gt;\r\n&lt;\/body&gt;<\/code><\/pre>\n<h3 id=\"toc-addingaground\">Adding a Ground<\/h3>\n<p><code>&lt;a-plane&gt;<\/code> and <code>&lt;a-circle&gt;<\/code> are basic primitives that are commonly used for adding a ground. We'll be using <code>&lt;a-cylinder&gt;<\/code> to better work with the raycasters our controllers will be using. The cylinder will have a radius of 30 meters to match the radius of the sky we'll add later. Note that A-Frame units are in meters to match the real-world units returned from the WebVR API.<\/p>\n<p>The texture of the ground we'll be using is hosted at `https:\/\/cdn.aframe.io\/a-painter\/images\/floor.jpg`. We'll add the texture to our assets, and create a thin cylinder entity pointing to that texture:<\/p>\n<p data-height=\"265\" data-theme-id=\"dark\" data-slug-hash=\"MpbXXe\" data-default-tab=\"html,result\" data-user=\"mozvr\" data-embed-version=\"2\" data-pen-title=\"Minecraft VR Demo (Part 1)\" data-preview=\"true\" data-editable=\"true\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/mozvr\/pen\/MpbXXe\/\">Minecraft VR Demo (Part 1)<\/a> by mozvr (<a href=\"http:\/\/codepen.io\/mozvr\">@mozvr<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3 id=\"preloadingassets\">Preloading Assets<\/h3>\n<p>Specifying a URL via the <code>src<\/code> attribute will load the texture at runtime.<\/p>\n<p>Since network requests can negatively impact render performance, we can <em>preload<\/em> the texture such that the scene doesn't start rendering until its assets have been fetched. We can do this using the <a href=\"https:\/\/aframe.io\/docs\/0.5.0\/core\/asset-management-system.html\">asset management system<\/a>.<\/p>\n<p>We place <code>&lt;a-assets&gt;<\/code> into our <code>&lt;a-scene&gt;<\/code>, place assets (e.g., images, videos, models, sounds) into <code>&lt;a-assets&gt;<\/code>, and point to them from our entities via a selector (e.g., <code>#myTexture<\/code>).<\/p>\n<p>Let's move our ground texture to <code>&lt;a-assets&gt;<\/code> to be preloaded using an <code>&lt;img&gt;<\/code> element:<\/p>\n<p data-rerun-position=\"top right\" data-height=\"300\" data-theme-id=\"dark\" data-slug-hash=\"LWbrBQ\" data-default-tab=\"html,result\" data-user=\"mozvr\" data-embed-version=\"2\" data-pen-title=\"Minecraft VR Demo (Part 2: Preloading Texture)\" data-preview=\"true\" data-editable=\"true\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/mozvr\/pen\/LWbrBQ\/\">Minecraft VR Demo (Part 2: Preloading Texture)<\/a> by mozvr (<a href=\"http:\/\/codepen.io\/mozvr\">@mozvr<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3 id=\"toc-addingabackground\">Adding a Background<\/h3>\n<p>Let's add a 360&deg; background to our <code>&lt;a-scene&gt;<\/code> with the <a href=\"https:\/\/aframe.io\/docs\/0.5.0\/primitives\/a-sky.html\"><code>&lt;a-sky&gt;<\/code> element<\/a>. <code>&lt;a-sky&gt;<\/code> is a large 3D sphere with a material mapped on the inside. Just like a normal image, <code>&lt;a-sky&gt;<\/code> can take an image path with <code>src<\/code>. This ultimately lets us do immersive 360&deg; images with one line of HTML. As an exercise later, try using some 360&deg; images from <a href=\"https:\/\/www.flickr.com\/groups\/equirectangular\/\">Flickr's<br \/>\nequirectangular pool<\/a>.<\/p>\n<p>We could add a plain color background (e.g., <code>&lt;a-sky color=\"#333\"&gt;&lt;\/a-sky&gt;<\/code>) or <a href=\"https:\/\/github.com\/zcanter\/aframe-gradient-sky\">a gradient<\/a>, but let's add a textured background with an image. The image we're using is hosted at `https:\/\/cdn.aframe.io\/a-painter\/images\/sky.jpg`. The image texture we are using covers semi-sphere so we'll chop our sphere in half with <code>theta-length=\"90\"<\/code>, and we'll give our sphere a radius of 30 meters to match the ground:<\/p>\n<p data-rerun-position=\"top right\" data-height=\"300\" data-theme-id=\"dark\" data-slug-hash=\"PpbaBL\" data-default-tab=\"html,result\" data-user=\"mozvr\" data-embed-version=\"2\" data-pen-title=\"Minecraft VR Demo (Part 3: Adding a Background)\" data-preview=\"true\" data-editable=\"true\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/mozvr\/pen\/PpbaBL\/\">Minecraft VR Demo (Part 3: Adding a Background)<\/a> by mozvr (<a href=\"http:\/\/codepen.io\/mozvr\">@mozvr<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3 id=\"addingvoxels\">Adding Voxels<\/h3>\n<p>Voxels in our VR application will be like <code>&lt;a-box&gt;<\/code> but attached with a few custom A-Frame components. But first let's go over the entity-component pattern. Let's see how the easy-to-use primitives such as <code>&lt;a-box&gt;<\/code> are composed under the hood.<\/p>\n<p>This section will later do a deeper dive into the implementation of a couple A-Frame components. In practice though, we'd often get to use components via HTML already written by A-Frame community developers rather than building them from scratch.<\/p>\n<h4 id=\"entitycomponentpattern\">Entity-Component Pattern<\/h4>\n<p>Every single object in an A-Frame scene is <a href=\"https:\/\/aframe.io\/docs\/0.5.0\/core\/entity.html\"><code>&lt;a-entity&gt;<\/code><\/a>, which by itself doesn't do anything, like an empty <code>&lt;div&gt;<\/code>. We plug in components (<strong>not to be confused with Web or React Components<\/strong>) to that entity to provide with appearance, behavior, and logic.<\/p>\n<p>For a box, we attach and configure A-Frame's basic <a href=\"https:\/\/aframe.io\/docs\/0.5.0\/components\/geometry.html\">geometry<\/a> and <a href=\"https:\/\/aframe.io\/docs\/0.5.0\/components\/material.html\">material<\/a> components. Components are represented as HTML attributes, and component properties are defined like CSS styles by default. Here's what <code>&lt;a-box&gt;<\/code> looks like decomposed to its fundamental components. <code>&lt;a-box&gt;<\/code> wraps the components:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;a-box color=\"red\" depth=\"0.5\" height=\"0.5\" shader=\"flat\" width=\"0.5\"&gt;&lt;\/a-box&gt;\r\n&lt;a-entity geometry=\"primitive: box; depth: 0.5; height: 0.5; width 0.5\"\r\n          material=\"color: red; shader: standard\"&gt;&lt;\/a-entity&gt;<\/code><\/pre>\n<p>The benefit of components is that they are <strong>composable<\/strong>. We can mix and match from a bunch of existing components to construct different types of objects.<\/p>\n<p>In 3D development, the possible types of objects we construct are infinite in number and complexity, and we need an easy way of defining new types of objects rather than through traditional inheritance. Contrast this to the 2D web where we develop with a small pool of fixed HTML elements and plop them into a hierarchy.<\/p>\n<h4 id=\"toc-randomcolorcomponent\">Random Color Component<\/h4>\n<p>Components in A-Frame are defined in JavaScript, and they have full access to three.js and DOM APIs; they can do anything. We define all of our objects as a bundle of components.<\/p>\n<p>We'll put the pattern to action by writing an A-Frame component to set a random color on our box. Components are registered with <code>AFRAME.registerComponent<\/code>. We can define a schema, (the component's data) and lifecycle handler methods (the component's logic). For the random color component, we'll won't be setting a schema since it won't be configurable. But we will define the <code>init<\/code> handler, which is called exactly once when the component is attached:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">AFRAME.registerComponent('random-color', {\r\n  init: function () {\r\n    \/\/ ...\r\n  }\r\n});<\/code><\/pre>\n<p>For the random color component, we want to set a random color on the entity that this component is attached to. Components have a reference to the entity with <code>this.el<\/code> from the handler methods. <\/p>\n<p>And to change the color with JavaScript, we change the material component's color property using <code>.setAttribute()<\/code>. A-Frame several DOM APIs a bit, but the APIs mostly mirror<br \/>\nvanilla web development. <a href=\"https:\/\/aframe.io\/docs\/0.5.0\/guides\/using-javascript-and-dom-apis.html\">Read more about using JavaScript and DOM APIs with<br \/>\nA-Frame<\/a>.<\/p>\n<p>We'll also add the <code>material<\/code> component to the list of components that should initialize before this one, just so our material isn't overwritten.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">AFRAME.registerComponent('random-color', {\r\n  dependencies: ['material'],\r\n\r\n  init: function () {\r\n    \/\/ Set material component's color property to a random color.\r\n    this.el.setAttribute('material', 'color', getRandomColor());\r\n  }\r\n});\r\n\r\nfunction getRandomColor() {\r\n  const letters = '0123456789ABCDEF';\r\n  var color = '#';\r\n  for (var i = 0; i &lt; 6; i++ ) {\r\n    color += letters[Math.floor(Math.random() * 16)];\r\n  }\r\n  return color;\r\n}<\/code><\/pre>\n<p>After the component is registered, we can attach this component <strong>straight from HTML<\/strong>. All code written within A-Frame's framework is extending HTML, and those extensions can be used on other objects and in other scenes. The beautiful thing is that a developer could write a component that adds physics to an object, and then someone that doesn't even know JavaScript could add<br \/>\nphysics to their scene!<\/p>\n<p>Take our box entity from earlier, we attach the <code>random-color<\/code> HTML attribute to plug in the <code>random-color<\/code> component. We'll save the component as a JS file and include it before the scene:<\/p>\n<p data-rerun-position=\"top right\" data-height=\"300\" data-theme-id=\"dark\" data-slug-hash=\"ryWKqy\" data-default-tab=\"html,result\" data-user=\"mozvr\" data-embed-version=\"2\" data-pen-title=\"Minecraft VR Demo (Part 4: Random Color Component)\" data-preview=\"true\" data-editable=\"true\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/mozvr\/pen\/ryWKqy\/\">Minecraft VR Demo (Part 4: Random Color Component)<\/a> by mozvr (<a href=\"http:\/\/codepen.io\/mozvr\">@mozvr<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Components can be plugged into on any entity without having to create or extend a class like we'd have to in traditional inheritance. If we wanted to attach it to say, <code>&lt;a-sphere&gt;<\/code> or <code>&lt;a-obj-model&gt;<\/code>, we could!<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;!-- Reusing and attaching the random color component to other entities. --&gt;\r\n&lt;a-sphere random-color&gt;&lt;\/a-sphere&gt;\r\n&lt;a-obj-model src=\"model.obj\" random-color&gt;&lt;\/a-obj-model&gt;<\/code><\/pre>\n<p>if we wanted to share this component for other people to use, we could too.  We curate from many handy components from the ecosystem at <a href=\"https:\/\/aframe.io\/registry\/\">the A-Frame Registry<\/a>, similar to the Unity Asset Store. If we developed our application using components, all our code is inherently modular and reusable!<\/p>\n<h4 id=\"toc-snapcomponent\">Snap Component<\/h4>\n<p>We'll have a <code>snap<\/code> component to snap our boxes to a grid so they aren't overlapping. We won't get into the details of how this component is implemented, but you can check out <a href=\"https:\/\/rawgit.com\/ngokevin\/kframe\/csstricks\/scenes\/aincraft\/components\/snap.js\">the snap component's source code<\/a> (20 lines of JavaScript).<\/p>\n<p>We attach the snap component to our box so that it snaps to every half meter, also with an offset to center the box:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;a-entity\r\n   geometry=\"primitive: box; height: 0.5; width: 0.5; depth: 0.5\"\r\n   material=\"shader: standard\"\r\n   random-color\r\n   snap=\"offset: 0.25 0.25 0.25; snap: 0.5 0.5 0.5\"&gt;&lt;\/a-entity&gt;<\/code><\/pre>\n<p>Now we have a box entity represented as a bundle of components that can be used to describe all the voxels in our scene.<\/p>\n<h4 id=\"mixins\">Mixins<\/h4>\n<p>We can create <a href=\"https:\/\/aframe.io\/docs\/0.5.0\/core\/mixins.html\">a mixin<\/a> to define a reusable bundle of components.<\/p>\n<p>Instead of <code>&lt;a-entity&gt;<\/code>, which adds an object to the scene, we'll describe it using <code>&lt;a-mixin&gt;<\/code> which can be reused to create voxels like a prefab:<\/p>\n<p data-rerun-position=\"top right\" data-height=\"500\" data-theme-id=\"dark\" data-slug-hash=\"OpbEaY\" data-default-tab=\"html,result\" data-user=\"mozvr\" data-embed-version=\"2\" data-pen-title=\"Minecraft VR Demo (Part 5: Mixins)\" data-preview=\"true\" data-editable=\"true\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/mozvr\/pen\/OpbEaY\/\">Minecraft VR Demo (Part 5: Mixins)<\/a> by mozvr (<a href=\"http:\/\/codepen.io\/mozvr\">@mozvr<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>And we've added voxels using that mixin:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;a-entity mixin=\"voxel\" position=\"-1 0 -2\"&gt;&lt;\/a-entity&gt;\r\n&lt;a-entity mixin=\"voxel\" position=\"0 0 -2\"&gt;&lt;\/a-entity&gt;\r\n&lt;a-entity mixin=\"voxel\" position=\"0 1 -2\"&gt;\r\n  &lt;a-animation attribute=\"rotation\" to=\"0 360 0\" repeat=\"indefinite\"&gt;&lt;\/a-animation&gt;\r\n&lt;\/a-entity&gt;\r\n&lt;a-entity mixin=\"voxel\" position=\"1 0 -2\"&gt;&lt;\/a-entity&gt;<\/code><\/pre>\n<p>Next, we'll be creating voxels dynamically through interaction using tracked controllers. Let's start adding our hands to the application.<\/p>\n<h3 id=\"addinghandcontrollers\">Adding Hand Controllers<\/h3>\n<p>Adding HTC Vive or Oculus Touch tracked controllers is easy:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;!-- Vive. --&gt;\r\n&lt;a-entity vive-controls=\"hand: left\"&gt;&lt;\/a-entity&gt;\r\n&lt;a-entity vive-controls=\"hand: right\"&gt;&lt;\/a-entity&gt;\r\n\r\n&lt;!-- Or Rift. --&gt;\r\n&lt;a-entity oculus-touch-controls=\"hand: left\"&gt;&lt;\/a-entity&gt;\r\n&lt;a-entity oculus-touch-controls=\"hand: right\"&gt;&lt;\/a-entity&gt;<\/code><\/pre>\n<p>We'll be using <code>hand-controls<\/code> which abstracts and works with both Vive and Rift controls, providing models of basic hand. We'll make the left hand responsible for teleporting around and the right hand responsible for spawning and placing blocks.<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;a-entity id=\"teleHand\" hand-controls=\"left\"&gt;&lt;\/a-entity&gt;\r\n&lt;a-entity id=\"blockHand\" hand-controls=\"right\"&gt;&lt;\/a-entity&gt;<\/code><\/pre>\n<h4 id=\"addingteleportationtothelefthand\">Adding Teleportation to the Left Hand<\/h4>\n<p>We'll plug in teleportation capabilities to the left hand such that we hold a button to show an arc coming out of the controller, and let go of the button to teleport to the end of the arc. Before, we wrote our own A-Frame components.<\/p>\n<p>But we can also use open source components already made from the community and just use them straight from HTML! <\/p>\n<p>For teleportation, there's a <a href=\"https:\/\/github.com\/fernandojsg\/aframe-teleport-controls\/\">teleport-controls component<\/a> by @fernandojsg. Following the README, we add the component via a <code>&lt;script&gt;<\/code> tag and just set the <code>teleport-controls<\/code> component on the controller on the entity:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;script src=\"https:\/\/aframe.io\/releases\/0.5.0\/aframe.min.js\"&gt;&lt;\/script&gt;\r\n&lt;script src=\"https:\/\/unpkg.com\/aframe-teleport-controls@0.2.x\/dist\/aframe-teleport-controls.min.js\"&gt;&lt;\/script&gt;\r\n\r\n&lt;!-- ... --&gt;\r\n\r\n&lt;a-entity id=\"teleHand\" hand-controls=\"left\" teleport-controls&gt;&lt;\/a-entity&gt;\r\n&lt;a-entity id=\"blockHand\" hand-controls=\"right\"&gt;&lt;\/a-entity&gt;<\/code><\/pre>\n<p>Then we'll configure the <code>teleport-controls<\/code> component to use an arc <code>type<\/code> of teleportation. By default, <code>teleport-controls<\/code> will only teleport on the ground, but we can specify with <code>collisionEntities<\/code> to teleport on the blocks <em>and<\/em> the ground using selectors. These properties are part of the API that the <code>teleport-controls<\/code> component was created with:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;a-entity id=\"teleHand\" hand-controls=\"left\" teleport-controls=\"type: parabolic; collisionEntities: [mixin='voxel'], #ground\"&gt;&lt;\/a-entity&gt;<\/code><\/pre>\n<p>That's it! <strong>One script tag and one HTML attribute and we can teleport<\/strong>.  For more cool components, check out the <a href=\"https:\/\/aframe.io\/registry\/\">A-Frame Registry<\/a>.<\/p>\n<h4 id=\"addingvoxelspawnertotherighthand\">Adding Voxel Spawner to the Right Hand<\/h4>\n<p>In WebVR, the ability to click on objects isn't built-in as it is in 2D applications. We have to provide that ourselves. Fortunately, A-Frame has many components to handle interaction. A common method for cursor-like clicking in VR is to use a raycaster, a laser that shoots out and returns objects that it intersects with. Then we implement the cursor states by listening to interaction events and checking the raycaster for intersections.<\/p>\n<p>A-Frame provides a gaze-based cursor for clicking by looking at objects, but there's also a <a href=\"https:\/\/github.com\/bryik\/aframe-controller-cursor-component\/\">controller-cursor component<\/a> available that attaches the clicking laser to VR tracked controllers. Like the <code>teleport-controls<\/code> component, we include the script tag and attach the <code>controller-cursor<\/code> component. This time to the right hand:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;script src=\"https:\/\/aframe.io\/releases\/0.5.0\/aframe.min.js\"&gt;&lt;\/script&gt;\r\n&lt;script src=\"https:\/\/unpkg.com\/aframe-teleport-controls@0.2.x\/dist\/aframe-teleport-controls.min.js\"&gt;&lt;\/script&gt;\r\n&lt;script src=\"https:\/\/unpkg.com\/aframe-controller-cursor-component@0.2.x\/dist\/aframe-controller-cursor-component.min.js\"&gt;&lt;\/script&gt;\r\n\r\n&lt;!-- ... --&gt;\r\n\r\n&lt;a-entity id=\"teleHand\" hand-controls=\"left\" teleport-controls=\"type: parabolic; collisionEntities: [mixin='voxel'], #ground\"&gt;&lt;\/a-entity&gt;\r\n&lt;a-entity id=\"blockHand\" hand-controls=\"right\" controller-cursor&gt;&lt;\/a-entity&gt;<\/code><\/pre>\n<p>Now when we pull the trigger button on the tracked controllers, <code>controller-cursor<\/code> will emit a <code>click<\/code> event on both the controller and the entity it is intersecting at the time. Events such as <code>mouseenter<\/code>, <code>mouseleave<\/code> are also provided. The event contains details about the intersection.<\/p>\n<p>That provides us with the ability to click, but we'll have to wire up some code to handle those clicks to spawn blocks. We can use an event listener and <code>document.createElement<\/code>:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">document.querySelector('#blockHand').addEventListener(`click`, function (evt) {\r\n  \/\/ Create a blank entity.\r\n  var newVoxelEl = document.createElement('a-entity');\r\n\r\n  \/\/ Use the mixin to make it a voxel.\r\n  newVoxelEl.setAttribute('mixin', 'voxel');\r\n\r\n  \/\/ Set the position using intersection point. The `snap` component above which\r\n  \/\/ is part of the mixin will snap it to the closest half meter.\r\n  newVoxelEl.setAttribute('position', evt.detail.intersection.point);\r\n\r\n  \/\/ Add to the scene with `appendChild`.\r\n  this.appendChild(newVoxelEl);\r\n});<\/code><\/pre>\n<p>To generalize creating entities from an intersection event, we've created an <code>intersection-spawn<\/code> component that can be configured with any event and list of properties. We won't go into the detail of the implementation, but you can <a href=\"https:\/\/github.com\/ngokevin\/kframe\/blob\/csstricks\/scenes\/aincraft\/components\/intersection-spawn.js\">check out the simple <code>intersection-spawn<\/code> component source code on GitHub<\/a>. We attach <code>intersection-spawn<\/code> capabilities to the right hand:<\/p>\n<pre><code class=\"html language-html\">&lt;a-entity id=\"blockHand\" hand-controls=\"right\" controller-cursor intersection-spawn=\"event: click; mixin: voxel\"&gt;&lt;\/a-entity&gt;<\/code><\/pre>\n<p>Now when we click, we spawn voxels!<\/p>\n<h4 id=\"toc-addingsupportformobileanddesktop\">Adding Support for Mobile and Desktop<\/h4>\n<p>We see how we've built a custom type of object (i.e., a tracked hand controller with a hand model that has click capabilities and spawns blocks on click) by mixing together components. The wonderful thing with components is that they are reusable in other contexts. We could even attach the <code>intersection-spawn<\/code> component with the gaze-based <code>cursor<\/code> component so that we can also spawn blocks on mobile and desktop, without changing a thing about the component!<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;a-entity id=\"blockHand\" hand-controls=\"right\" controller-cursor intersection-spawn=\"event: click; mixin: voxel\"&gt;&lt;\/a-entity&gt;\r\n\r\n&lt;a-camera&gt;\r\n  &lt;a-cursor intersection-spawn=\"event: click; mixin: voxel\"&gt;&lt;\/a-cursor&gt;\r\n&lt;\/a-camera&gt;<\/code><\/pre>\n<h3 id=\"toc-tryitout\">Try It Out!<\/h3>\n<p><a href=\"https:\/\/github.com\/ngokevin\/kframe\/tree\/csstricks\/scenes\/aincraft\/\">Read the source code on GitHub<\/a>.<\/p>\n<p>Our VR voxel builder is ultimately <strong>11 HTML elements<\/strong>. We can preview it on desktop and mobile. On desktop, we can drag and click to spawn blacks. On mobile, we can pan the device around and tap to spawn blocks.<\/p>\n<p data-rerun-position=\"top right\" data-height=\"500\" data-theme-id=\"dark\" data-slug-hash=\"OpbwMJ\" data-default-tab=\"html,result\" data-user=\"mozvr\" data-embed-version=\"2\" data-pen-title=\"Minecraft VR Demo (Final)\" data-preview=\"true\" data-editable=\"true\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/mozvr\/pen\/OpbwMJ\/\">Minecraft VR Demo (Final)<\/a> by mozvr (<a href=\"http:\/\/codepen.io\/mozvr\">@mozvr<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>If you have a VR headset (e.g., HTC Vive, Oculus Rift + Touch), grab a <a href=\"https:\/\/webvr.rocks\">WebVR-enabled browser<\/a> and <strong><a href=\"https:\/\/ngokevin.github.io\/kframe\/scenes\/aincraft\/\">head over to the demo<\/a><\/strong>. VR by plugging in an HTC Vive or Oculus Rift and <a href=\"https:\/\/webvr.rocks\">using a WebVR-enabled browser<\/a>.<\/p>\n<p>If you want to view what it looks like in VR from your desktop or mobile device, <a href=\"https:\/\/ngokevin.github.io\/kframe\/scenes\/aincraft\/?avatar-recording=recording.json\">check out the demo with pre-recorded VR motion capture and gestures<\/a>.<\/p>\n<h3 id=\"toc-lookingforward\">Looking Forward<\/h3>\n<p><a href=\"https:\/\/aframe.io\/community\/\">A-Frame has an active open source community and ecosystem<\/a>. To date:<\/p>\n<ul>\n<li>125+ GitHub contributors<\/li>\n<li>240 open \/ 1250 closed GitHub Issues<\/li>\n<li><a href=\"https:\/\/aframevr-slack.herokuapp.com\">3000 members in Slack<\/a><\/li>\n<li>Hundreds of VR projects featured on the <a href=\"https:\/\/aframe.io\/blog\/\">weekly A-Frame Blog<\/a><\/li>\n<\/ul>\n<p>A-Frame is the WebVR framework for innovating what VR on the Web will look like while making it easy for anyone to get involved developing with 3D and VR. HTML keeps it dead simple while being fed by the Entity-Component pattern underneath. These experimentations will be the foundation of the open Metaverse, shared persistent connected virtual spaces that will be inhabited by everyone.<\/p>\n<p>It's the early stages of VR and especially for WebVR, but browsers soon shipping WebVR enabled by default to hundreds of millions, web developers should get involved to make VR accessible to everyone.<\/p>\n<figure id=\"post-252625\" class=\"align-none media-252625\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/aframe-banner.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/aframe-banner.jpg 2000w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/aframe-banner-300x135.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/aframe-banner-768x345.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/aframe-banner-1024x460.jpg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n","protected":false},"excerpt":{"rendered":"<p>I&#8217;m Kevin Ngo, a virtual reality web developer on the Mozilla VR team and a core developer of A-Frame. Today, we&#8217;ll go over how to build a room scale WebVR Minecraft demo that works on HTC Vive, Oculus Rift, Samsung GearVR, Google Cardboard, desktop, and mobile. The demo will be built with A-Frame in just [&hellip;]<\/p>\n","protected":false},"author":248001,"featured_media":252802,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1178,954],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252574"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/248001"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252574"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252574\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/252802"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252574"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252574"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252574"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252794,"date":"2017-03-15T06:56:37","date_gmt":"2017-03-15T13:56:37","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252794"},"modified":"2017-03-15T12:33:10","modified_gmt":"2017-03-15T19:33:10","slug":"measuring-image-widths-javascript-carefully","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/measuring-image-widths-javascript-carefully\/","title":{"rendered":"Measuring Image Widths in JavaScript (Carefully!)"},"content":{"rendered":"<p>Let's say you want to find an <code>&lt;img&gt;<\/code> on the page and find out how wide it is in JavaScript. Maybe you need to make some choices based on that width (or height, or both) You can definitely do that. The DOM will even give you a variety of dimensions to choose from depending on what you need. There is definitely a catch though.<\/p>\n<p><!--more--><\/p>\n<p>Here's the image:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;img src=\"image.jpg\" alt=\"an image\"&gt;<\/code><\/pre>\n<p>And here's us selecting it, by finding the first <code>&lt;img&gt;<\/code> JavaScript can find in the DOM:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var img = document.querySelector(\"img\");<\/code><\/pre>\n<p>Let's just log the width:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">\/\/ How wide the image is rendered at (which could be affected by styles)\r\nconsole.log(img.width);\r\n\r\n\/\/ How wide the image itself actually is\r\nconsole.log(img.naturalWidth);\r\n\r\n\/\/ There is also `offsetWidth` (width with border and padding) and `clientWidth` (width with just padding)\r\n\/\/ Those aren't usually too useful with images<\/code><\/pre>\n<p><strong>Problem alert!<\/strong> You're probably going to get weirdly inconsistent results with that. <\/p>\n<p>The issue is rooted in <em>when<\/em> the JavaScript runs. If the JavaScript runs <em>before<\/em> that image has fully downloaded and rendered, the result will be <code>0<\/code>. If the JavaScript runs after the image has downloaded and rendered, the result will be correct. In our case, the image we're working with is <code>640<\/code> (pixels wide).<\/p>\n<p>It's extra confusing, because sometimes even if your code doesn't account for this, you'll still sometimes get the correct result. That's because, probably, the image is in cache and it's put onto the page so quickly that by the time your bit of JavaScript runs, it knows the proper <code>offsetWidth<\/code>. <\/p>\n<p>This is a race condition, and that's a bad thing.<\/p>\n<h3>The Good Way<\/h3>\n<p>The minimum you can do is ensure the image has loaded before you measure it. Images emit a <code>load<\/code> event when they are finished, and you could use the callback to do the measurements then.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">img.addEventListener(\"load\", function() {\r\n  console.log(\"image has loaded\");\r\n});<\/code><\/pre>\n<p>You'd probably want to do some error handling there too, as images can also emit an <code>error<\/code> event.<\/p>\n<p>There is a good chance you're abstracting this concept, so you'd be watching for any number of images, in which you'd have to loop over them and all that. Plus images can be background-images too... <\/p>\n<p>There is enough going on here that I'd suggest just using <a href=\"http:\/\/imagesloaded.desandro.com\/\">David DeSandro's imagesLoaded library<\/a>. It has no dependencies, is pretty small, and works with jQuery if you're using that.<\/p>\n<p>Here we're just watching for all images on the entire page to be loaded before testing widths:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">imagesLoaded(document.body, function() {\r\n  var img = document.querySelector(\"img\");\r\n  console.log(img.width);\r\n  console.log(img.naturalWidth);\r\n});<\/code><\/pre>\n<h3>Why?<\/h3>\n<p>One use case for this I had recently was a lightbox-like thing. I wanted to make sure that if I was rendering an image smaller than it actually was, the user had the ability to click on it to open it up bigger.<\/p>\n<pre rel=\"jQuery\"><code class=\"language-javascript\">\/\/ Only do this on large screens\r\nif (window.outerWidth &gt; 800) {\r\n\r\n  \/\/ Wait for all images to load inside the article\r\n  $(\"article\").imagesLoaded(function() {\r\n\r\n    $(\"figure &gt; img\").each(function(el) {\r\n\r\n        \/\/ Only do this is shown image is smaller than actual image\r\n        if (this.naturalWidth &gt; this.width) {\r\n\r\n          $(this)\r\n            .closest(\"figure\")\r\n            .addClass(\"can-be-enlarged\")\r\n            .end()\r\n            \/\/ When the image is clicked, toggle a class to enlarge it\r\n            .on(\"click\", function(e) {\r\n              e.stopPropagation();\r\n              $(this)\r\n                .closest(\"figure\")\r\n                .toggleClass(\"enlarge\");\r\n            })\r\n        }\r\n\r\n      });\r\n\r\n    });\r\n\r\n    \/\/ When the enlarged image is clicked again, remove the class, shrinking it back down\r\n    $(\"body\").on(\"click\", \"figure.can-be-enlarged.enlarge\", function() {\r\n      $(this).removeClass(\"enlarge\");\r\n    })\r\n\r\n  }\r\n}<\/code><\/pre>\n<p>The <code>enlarge<\/code> class make the entire <code>&lt;figure&gt;<\/code> into a full-screen overlay with the image and figcaption centered within it. But it only did all this stuff if it made sense to do it, which needed the image with logic to be correct!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Let&#8217;s say you want to find an &lt;img \/&gt; on the page and find out how wide it is in JavaScript. Maybe you need to make some choices based on that width (or height, or both) You can definitely do that. The DOM will even give you a variety of dimensions to choose from depending [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[585,1184],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252794"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252794"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252794\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252794"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252794"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252794"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252760,"date":"2017-03-14T08:13:05","date_gmt":"2017-03-14T15:13:05","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252760"},"modified":"2017-03-14T08:13:05","modified_gmt":"2017-03-14T15:13:05","slug":"need-dependency-free-ajax","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/need-dependency-free-ajax\/","title":{"rendered":"Need to do Dependency-Free Ajax?"},"content":{"rendered":"<p>One of the big reasons to use jQuery, for a long time, was how easy it made Ajax. It has a super clean, flexible, and cross-browser compatible API for all the Ajax methods. jQuery is still mega popular, but it's becoming more and more common to ditch it, especially as older browser share drops and new browsers have a lot of powerful stuff we used to learn on jQuery for. Even just <code>querySelectorAll<\/code> is often cited as a reason to lose the jQuery dependency.<\/p>\n<p>How's Ajax doing?<\/p>\n<p><!--more--><\/p>\n<p>Let's say we needed to do a GET request to get some HTML from a URL endpoint. We aren't going to do any error handling to keep this brief.<\/p>\n<p>jQuery would have been like this:<\/p>\n<pre rel=\"jQuery\"><code class=\"language-javascript\">$.ajax({\r\n  type: \"GET\",\r\n  url: \"\/url\/endpoint\/\",\r\n}).done(function(data) {\r\n  \/\/ We got the `data`!\r\n});<\/code><\/pre>\n<p>If we wanted to ditch the jQuery and go with browser-native Ajax, we could do it like this:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var httpRequest = new XMLHttpRequest();\r\nhttpRequest.onreadystatechange = ajaxDone;\r\nhttpRequest.open('GET', '\/url\/endpoint\/');\r\nhttpRequest.send();\r\n\r\nfunction ajaxDone() {\r\n  if (httpRequest.readyState === XMLHttpRequest.DONE) {\r\n    if (httpRequest.status === 200) {\r\n      \/\/ We got the `httpRequest.responseText`! \r\n    }\r\n  }\r\n}<\/code><\/pre>\n<p>The browser support for this is kinda complicated. The basics work as far back as IE 7, but IE 10 is when it really got solid. If you wanna get more robust, but still skip any dependencies, you can even use a <code>window.ActiveXObject<\/code> fallback and get down to IE 6.<\/p>\n<p>Long story short, it's certainly possible to do Ajax without any dependencies and get pretty deep browser support. Remember jQuery is just JavaScript, so you can always just do whatever it does under the hood.<\/p>\n<p>But there is another thing jQuery has been doing for quite a while with it's Ajax: it's <code>Promise<\/code> based. One of the many cool things about Promises, especially when combined with a \"asynchronous\" even like Ajax, is that it allows you to <a href=\"https:\/\/css-tricks.com\/multiple-simultaneous-ajax-requests-one-callback-jquery\/\">run multiple requests in parallel<\/a>, which is aces for performance. <\/p>\n<p>The native Ajax stuff I just posted isn't Promise-based.<\/p>\n<p>If you want a strong and convenient Promise-based Ajax API, with fairly decent cross-browser support (down to IE 8), you could consider <a href=\"https:\/\/www.npmjs.com\/package\/axios\">Axios<\/a>. Yes, it's a dependency just like jQuery, it's just hyper-focused on Ajax, 11.8 KB before GZip, and doesn't have any dependencies of its own.<\/p>\n<p>With Axios, the code would look like:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">axios({\r\n  method: 'GET',\r\n  url: '\/url\/endpoint\/'\r\n}).then(function(response) {\r\n  \/\/ We got the `response.data`!\r\n});<\/code><\/pre>\n<p>Notice the then statement, which means we're back in the <code>Promise<\/code> land. Tiny side note, apparently the requests don't look identical to jQuery <a href=\"https:\/\/twitter.com\/AmeliasBrain\/status\/841423456835063808\">on the server side<\/a>.<\/p>\n<p>Browsers aren't done with us yet though! There is a fairly new Fetch API that does Promise-based Ajax with a nice and clean syntax:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">fetch('\/url\/endpoint\/')\r\n  .then(function(response) {\r\n    return response.text();\r\n  })\r\n  .then(function(text) {\r\n    \/\/ We got the `text`!\r\n  });<\/code><\/pre>\n<p>The browser support for this is getting pretty good too! It's shipping in all stable desktop browsers, including Edge. The danger zone is no IE support at all and only iOS 10.1+.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>One of the big reasons to use jQuery, for a long time, was how easy it made Ajax. It has a super clean, flexible, and cross-browser compatible API for all the Ajax methods. jQuery is still mega popular, but it&#8217;s becoming more and more common to ditch it, especially as older browser share drops and [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1181,1182,1183,265],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252760"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252760"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252760\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252760"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252760"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252760"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252751,"date":"2017-03-14T07:34:46","date_gmt":"2017-03-14T14:34:46","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252751"},"modified":"2017-03-14T07:36:10","modified_gmt":"2017-03-14T14:36:10","slug":"css-tricks-chronicle-xxx","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/css-tricks-chronicle-xxx\/","title":{"rendered":"CSS-Tricks Chronicle XXX"},"content":{"rendered":"<p>I got a chance to be on the Thunder Nerds podcast the other week, on the episode <a href=\"http:\/\/thundernerdshoo.com\/2017\/02\/svg-yeah-you-know-me-w-chris-coyier\/\">55 \u2013 Down Wit SVG? Yeah You Know Me with Chris Coyier<\/a>. We got to talk about a variety of things that I work on, including <a href=\"https:\/\/abookapart.com\/products\/practical-svg\">Practical SVG<\/a>, CodePen, this site, ShopTalk, and upcoming conferences. Speaking of which...<\/p>\n<hr>\n<p>The very next thing I'll be <a href=\"http:\/\/chriscoyier.net\/speaking\/\">speaking at<\/a> is <a href=\"https:\/\/aneventapart.com\/event\/seattle-2017\">An Event Apart in Seattle<\/a> on April 3-5, 2017. I'm also doing the A Day Apart workshop, which I gave a <a href=\"https:\/\/css-tricks.com\/event-apart-seattle-april-3-5-2017\/\">tiny sneak peek<\/a> at the other day.<\/p>\n<p>I'll be at most of the other <a href=\"https:\/\/aneventapart.com\/\">An Event Apart<\/a> shows this year as well: Boston, Chicago, San Francisco, and Denver.<\/p>\n<p>The AEA gang <a href=\"https:\/\/aneventapart.com\/news\/post\/tiptoe-through-the-tooltips\">interviewed me<\/a> about a bunch of interesting stuff recently, as well.<\/p>\n<hr>\n<p>Other conferences I'll be at this year include:<\/p>\n<ul>\n<li>June 16, 2017, <a href=\"https:\/\/cssday.nl\/2017\">CSS Day<\/a>, Amsterdam, NL<\/li>\n<li>August 17, 2017, <a href=\"http:\/\/buildright.io\/maker-series\/2017\/chris-coyier\">Build Right: Maker Series<\/a>, Dayton, Ohio<\/li>\n<li>September 25-26, 2017, <a href=\"http:\/\/fitc.ca\/event\/webu17\/\">Web Unleashed<\/a>, Toronto, Canada<\/li>\n<li>October 9-11, 2017, <a href=\"http:\/\/2017.cssdevconf.com\/\">CSS Dev Conf<\/a>, New Orleans, LA<\/li>\n<\/ul>\n<p>And at least two more that I'll need to wait to mention until they get something online for.<\/p>\n<p>Sarah Drasner also keeps our <a href=\"https:\/\/css-tricks.com\/guide-2017-conferences\/\">Guide to 2017 Conferences<\/a> post up-to-date, if you want to look more broadly at what's out there.<\/p>\n<hr>\n<p>We've shut down the shop here on CSS-Tricks. It's likely temporary as we kinda revamp the merch in there and freshen things up. No exact plan yet, but of course we'll let you know when it's back open again. <\/p>\n<hr>\n<p>Since the new year, Dave and I have been very steadily publishing new episodes of <a href=\"http:\/\/shoptalkshow.com\/\">ShopTalk<\/a>, and we have plenty more lined up. If you're anything like me, your podcast listening behavior fluctuates and you go in and out of it. If you're about to go into an \"in\" phase, might I recommend\"<\/p>\n<ul>\n<li>247: <a href=\"http:\/\/shoptalkshow.com\/episodes\/247-performance-equation\/\">The Performance Equation<\/a><\/li>\n<li>248: <a href=\"http:\/\/shoptalkshow.com\/episodes\/248-amp\/\">AMP<\/a><\/li>\n<li>250: <a href=\"http:\/\/shoptalkshow.com\/episodes\/250-web-security-april-king-alex-sexton\/\">Web Security<\/a><\/li>\n<\/ul>\n<hr>\n<p><a href=\"https:\/\/blog.codepen.io\/radio\/\">CodePen Radio<\/a> is also going strong. We're up to 120 already! I might recommend:<\/p>\n<ul>\n<li>114: <a href=\"https:\/\/blog.codepen.io\/2017\/01\/24\/114-gitlab\/\">GitLab<\/a><\/li>\n<li>115: <a href=\"https:\/\/blog.codepen.io\/2017\/01\/31\/115-community-2\/\">Community<\/a><\/li>\n<li>118: <a href=\"https:\/\/blog.codepen.io\/2017\/02\/21\/118-email\/\">Email<\/a><\/li>\n<\/ul>\n<hr>\n<p>Speaking of CodePen, if you're a PRO user, you might have already gotten an email about our latest feature, now in BETA. It will be our biggest release ever on CodePen. If you had any sense at all that releases on CodePen were slowing down, you might have been right, because we've been so heads-down on this thing for over a year.<\/p>\n<p>That's not to say there isn't anything new. We've release things like a <a href=\"https:\/\/blog.codepen.io\/2017\/03\/08\/autocomplete-2-0\/\">revamped Autocomplete<\/a>, new fonts like <a href=\"https:\/\/blog.codepen.io\/2017\/02\/15\/new-typeface-firacode-medium\/\">Fira Code<\/a> and an <a href=\"https:\/\/twitter.com\/CodePen\/status\/837453536518619136\">updated Monoid<\/a>, <a href=\"https:\/\/blog.codepen.io\/2017\/02\/09\/pen-editor-now-remembers-layout\/\">persistent editor layout<\/a>, improved CORS handling, improved infinite loop detection, and plenty more.<\/p>\n<hr>\n<p>We've also started sending another weekly newsletter called <a href=\"https:\/\/codepen.io\/spark\/\">The CodePen Spark<\/a> that is loaded with amazing work from that week. We're already up through week 15!<\/p>\n<hr>\n<p>CodePen Meetups are also hopping. I'm gearing up to go to one tonight, <a href=\"https:\/\/www.meetup.com\/Front-end-Developers-of-Miami\/events\/237543866\/?a=socialmedia\">here in Miami<\/a> where I have been living the past few months. I also recently got to attend the one in Denver, which was <em>huuuuge<\/em>. I've never been to one I didn't have a good time and learn something at.<\/p>\n<p>They've also been as international as ever! We have plenty in the United States, but There are upcoming meetups in places like:<\/p>\n<ul>\n<li>Auckland, New Zealand<\/li>\n<li>Sylhet, Bangladesh<\/li>\n<li>\u00d6rebro, Sweden<\/li>\n<\/ul>\n<p>Bulgaria just had their first! Dublin has had <em>fourteen<\/em>! If you'd like to host one in your area, <a href=\"http:\/\/codepen.io\/meetups\/host\">you can<\/a>. <\/p>\n<hr>\n<p>Last but not least, the <a href=\"https:\/\/css-tricks.com\/newsletters\/\">CSS-Tricks Newsletter<\/a> gets better all the time. Remember it's completely hand-written these days to explain all the most interesting stuff that week and much of it is unique to the newsletter.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>All the latest happenings around here on CSS-Tricks as well as on CodePen and ShopTalk. Recommended listening, news, upcoming conferences, things to watch for, and more. Wow, it&#8217;s the 30th <a href=\"https:\/\/css-tricks.com\/category\/chronicle\/\">of these<\/a> already!<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[344],"tags":[],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252751"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252751"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252751\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252751"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252751"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252751"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252690,"date":"2017-03-13T04:55:18","date_gmt":"2017-03-13T11:55:18","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252690"},"modified":"2017-03-13T04:55:18","modified_gmt":"2017-03-13T11:55:18","slug":"getting-started-css-grid","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/getting-started-css-grid\/","title":{"rendered":"Getting Started with CSS Grid"},"content":{"rendered":"<p>This was a blockbuster week for front-end developers as CSS Grid landed in the latest versions of Firefox and Chrome without a feature flag. That's right: we can now go and play with Grid in two of the most popular browsers right away.<\/p>\n<p>But why is CSS Grid a big deal and why should we care? <\/p>\n<p>Well, CSS Grid is the first real layout system for the web. <!--more--> It's designed for organizing content both into columns and rows and it finally gives developers almost God-like control of the screens before us. That means that we can finally ditch decades of hacks and workarounds for setting elements on a web page \u2013 ultimately it means that complex layouts and beautifully typeset pages are now not only possible but <em>easy<\/em> and <em>maintainable<\/em>.<\/p>\n<p>With CSS Grid, the web is about to become a much more beautiful place than what we're accustomed to.<\/p>\n<p>OK, but how does Grid work? There are a lot of complex tutorials out there that go into an awful lot of detail but I think we should start with the very basics. What we'll be making here is a relatively simple type specimen, with a bunch of characters from an alphabet laid out on a page.<\/p>\n<p>To get started we\u2019ll add our markup:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;div class='wrapper'&gt;\r\n  &lt;div class='letter'&gt;\r\n    A\r\n  &lt;\/div&gt;\r\n  &lt;div class='letter'&gt;\r\n    B\r\n  &lt;\/div&gt;\r\n&lt;\/div&gt;<\/code><\/pre>\n<p>First up we'll style those letters to use the right <code>font-size<\/code> and <code>color<\/code> and then we'll center those letters in the divs with flexbox properties like <code>align-items<\/code> and <code>justify-content<\/code>. And yes, that's right! CSS Grid doesn\u2019t replace flexbox properties as much as it compliments what they already do. We can even use many of these properties in conjunction with CSS Grid. But for now let's return to the demo:<\/p>\n<figure id=\"post-252692\" class=\"align-none media-252692\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/Screenshot-2017-03-12-00.31.26.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/Screenshot-2017-03-12-00.31.26.png 1272w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/Screenshot-2017-03-12-00.31.26-300x104.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/Screenshot-2017-03-12-00.31.26-768x266.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/Screenshot-2017-03-12-00.31.26-1024x354.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>In the example above we have two simple divs sitting on top of one another because they\u2019re default is <code>display: block<\/code>. Next up we'll set our parent element to use Grid layout:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.wrapper {\r\n  display: grid;\r\n}<\/code><\/pre>\n<p>Which will then lead to this:<\/p>\n<p data-height=\"365\" data-theme-id=\"1\" data-slug-hash=\"jBmKVK\" data-default-tab=\"css,result\" data-user=\"robinrendle\" data-embed-version=\"2\" data-pen-title=\"Type Specimen Grid Demo \u2013 1\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/robinrendle\/pen\/jBmKVK\/\">Type Specimen Grid Demo \u2013 1<\/a> by Robin Rendle (<a href=\"http:\/\/codepen.io\/robinrendle\">@robinrendle<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Now you might see that nothing really happened. And you'd be right! Unlike setting <code>display: inline-block;<\/code> or <code>display: inline;<\/code>, it\u2019s not entirely clear what happens when we set display to <code>grid<\/code>. In fact, to get our grid to actually <em>do<\/em> something we first need to feed it a certain number of columns or rows. In this example we'll just align the letters next to each other into two columns:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.wrapper {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-column-gap: 1px;\r\n  background-color: black;\r\n}<\/code><\/pre>\n<p>Let\u2019s break these new lines of code down. First we create two columns of our grid with <code>grid-template-columns<\/code>. That <code>1fr<\/code> value might seem super weird if you\u2019ve never seen it before but it's a valid CSS unit that tells each column to be one fraction of our grid. In this instance, that means there will be two columns of equal width.<\/p>\n<p>This will end up looking something like this:<\/p>\n<p data-height=\"365\" data-theme-id=\"1\" data-slug-hash=\"ZeKRKw\" data-default-tab=\"result\" data-user=\"robinrendle\" data-embed-version=\"2\" data-pen-title=\"Type Specimen Grid Demo \u2013 2\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/robinrendle\/pen\/ZeKRKw\/\">Type Specimen Grid Demo \u2013 2<\/a> by Robin Rendle (<a href=\"http:\/\/codepen.io\/robinrendle\">@robinrendle<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Hooray! It works. But see that curious gap between the two columns? That\u2019s the background of the <code>wrapper<\/code> peaking through each <code>letter<\/code> div and that's because we\u2019ve set the <code>grid-column-gap<\/code> property to 1px. Usually, we'd want to give a larger <code>column-gap<\/code> then that, especially if we\u2019re aligning text blocks next to each other. But in this instance, a single pixel is good enough for us.<\/p>\n<p>So what happens if we add two new letters to our markup? How will that change the layout?<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;div class='wrapper'&gt;\r\n  &lt;div class='letter'&gt;\r\n    A\r\n  &lt;\/div&gt;\r\n  &lt;div class='letter'&gt;\r\n    B\r\n  &lt;\/div&gt;\r\n  &lt;div class='letter'&gt;\r\n    C\r\n  &lt;\/div&gt;\r\n  &lt;div class='letter'&gt;\r\n    D\r\n  &lt;\/div&gt;\r\n&lt;\/div&gt;<\/code><\/pre>\n<p>Well, technically it won't change the grid at all \u2013 we've already told the grid to have two columns so those two letter divs are going to sit in place directly beneath the others and be exactly <code>1fr<\/code> wide:<\/p>\n<p data-height=\"365\" data-theme-id=\"1\" data-slug-hash=\"gmWKGx\" data-default-tab=\"result\" data-user=\"robinrendle\" data-embed-version=\"2\" data-pen-title=\"Type Specimen Grid Demo \u2013 3\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/robinrendle\/pen\/gmWKGx\/\">Type Specimen Grid Demo \u2013 3<\/a> by Robin Rendle (<a href=\"http:\/\/codepen.io\/robinrendle\">@robinrendle<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Now here's the weird thing \u2013 why isn\u2019t there a 1px gap between letters A and C as well as between B and D? Well, <code>grid-column-gap<\/code> is only for columns and what we've effectively done here is create a new <em>row<\/em> in our grid. We\u2019ll have to use <code>grid-row-gap<\/code> to see that change take effect:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.wrapper {\r\n  grid-column-gap: 1px;\r\n  grid-row-gap: 1px;\r\n  \/* other styles go here *\/\r\n  \/* we could have also used the shorthand `grid-gap` *\/\r\n}<\/code><\/pre>\n<p>And here's what that looks like:<\/p>\n<p data-height=\"365\" data-theme-id=\"1\" data-slug-hash=\"LWyrOG\" data-default-tab=\"result\" data-user=\"robinrendle\" data-embed-version=\"2\" data-pen-title=\"Type Specimen Grid Demo \u2013 4\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/robinrendle\/pen\/LWyrOG\/\">Type Specimen Grid Demo \u2013 4<\/a> by Robin Rendle (<a href=\"http:\/\/codepen.io\/robinrendle\">@robinrendle<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>We've created our very first grid. We've made a row and a column and all we've really had to do is change the markup. But let's just explore our columns a little more. What would happen if we add another value to the <code>grid-template-columns<\/code> property? Like this:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.wrapper {\r\n grid-template-columns: 1fr 1fr 1fr;\r\n}<\/code><\/pre>\n<p>Well, we'd create another column of course! And notice how we can clearly see the background of the wrapper element now because there aren\u2019t any children to fill that space:<\/p>\n<p data-height=\"365\" data-theme-id=\"1\" data-slug-hash=\"QpvxOB\" data-default-tab=\"result\" data-user=\"robinrendle\" data-embed-version=\"2\" data-pen-title=\"Type Specimen Grid Demo \u2013 5\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/robinrendle\/pen\/QpvxOB\/\">Type Specimen Grid Demo \u2013 5<\/a> by Robin Rendle (<a href=\"http:\/\/codepen.io\/robinrendle\">@robinrendle<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>And if we change the value of a <code>fr<\/code> in that property then that would effectively create what\u2019s known as an asymmetric grid. Let's say that we wanted our first column in our grid to take up three times the amount of space as the other two columns:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.wrapper {\r\n grid-template-columns: 3fr 1fr 1fr;\r\n}<\/code><\/pre>\n<p>That would lead to the columns with <em>A<\/em> and <em>D<\/em> to be larger than the other two columns, just as we\u2019d expect:<\/p>\n<p data-height=\"365\" data-theme-id=\"1\" data-slug-hash=\"XMRYzv\" data-default-tab=\"result\" data-user=\"robinrendle\" data-embed-version=\"2\" data-pen-title=\"Type Specimen Grid Demo \u2013 6\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/robinrendle\/pen\/XMRYzv\/\">Type Specimen Grid Demo \u2013 6<\/a> by Robin Rendle (<a href=\"http:\/\/codepen.io\/robinrendle\">@robinrendle<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Isn\u2019t that powerful? No longer do we have to worry about negative margins or the perfect % value of a grid column to align things properly. We can make super complex grids without having to do any of the math that we would\u2019ve been forced to do in the past. Now we just need to add a new value to the <code>grid-template-columns<\/code> property and voil\u00e1, a new grid column appears like magic!<\/p>\n<p>But what about responsive grids, you might ask? Well that's really just as simple as changing that property within a media query. Let\u2019s say that we want 2 columns as our default grid size then at 500px we want 3 columns and finally, on larger screens, we'll shift all that content into 4 columns. All we\u2019d need to write is this: <\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.wrapper {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  \r\n  @media screen and (min-width: 500px) {\r\n    grid-template-columns: 1fr 1fr 1fr;\r\n  }\r\n  \r\n  @media screen and (min-width: 800px) {\r\n    grid-template-columns: 1fr 1fr 1fr 1fr;\r\n  }\r\n}<\/code><\/pre>\n<p>Make sure to <a href=\"http:\/\/codepen.io\/robinrendle\/pen\/Npjzyz?editors=1100\">open up this demo<\/a> in a new tab and change the size of the viewport to see the responsive magic happen!<\/p>\n<figure id=\"post-252695\" class=\"align-none media-252695\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/media-query-grid.gif\" alt=\"\" \/><\/figure>\n<p>So the <code>grid-template-columns<\/code> property is a lot more complicated than what I\u2019ve shown here but this is a great starting point. Next up we ought to learn about the real, life-changing property in the CSS Grid spec: <code>grid-template-rows<\/code>. <\/p>\n<p>Ok, let's go into it blind. In the small bit of code below, and with what we\u2019ve learned so far about Grid, let's figure out what this new property might do:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.wrapper {\r\n  display: grid;\r\n  grid-template-columns: 3fr 1fr 1fr;\r\n  grid-template-rows: 1fr 3fr;\r\n}<\/code><\/pre>\n<p>Instead of setting the width of columns and their relationship with one another, we\u2019re now going to set the height of rows and their relationship. So if we have two rows like in our previous demo and the last unit is set to 3fr then that means the second row will always be three times the height of the first:<\/p>\n<p data-height=\"465\" data-theme-id=\"1\" data-slug-hash=\"dvWKdp\" data-default-tab=\"result\" data-user=\"robinrendle\" data-embed-version=\"2\" data-pen-title=\"Type Specimen Grid Demo \u2013 8\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/robinrendle\/pen\/dvWKdp\/\">Type Specimen Grid Demo \u2013 8<\/a> by Robin Rendle (<a href=\"http:\/\/codepen.io\/robinrendle\">@robinrendle<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>This might look pretty simple yet previously we\u2019ve never really been able to do this. We\u2019ve always had to write gross hacks like setting a <code>min-height<\/code> on a specific element or changing a class name. But we've never been able to create <em>relationships<\/em> between rows like this before; that\u2019s what makes CSS Grid so powerful.<\/p>\n<p>With this tiny bit of knowledge and a handful of new properties, we can create fabulously complex layouts \u2013 asymmetric and responsive grids being just one small part of them. And so far this has only been a glimpse into the monstrous CSS Grid spec, as there\u2019s an awful lot to cover. But I think that Jen Simmons described it best when <a href=\"http:\/\/jensimmons.com\/post\/feb-28-2017\/benefits-learning-how-code-layouts-css\"\">she wrote about Grid<\/a>:<\/p>\n<blockquote><p>We need to explore CSS Grid until we understand what it wants to do, what it can be forced into doing, and what it refuses to do. Many designers may not ever learn to code CSS, but you need to understand CSS well enough to understand our artistic medium.<\/p><\/blockquote>\n<p>And sure, all the code above looks very strange at first. But what it means is that we don't have to use giant CSS frameworks and also a whole bunch of layout hacks are now completely irrelevant. But what really excites me most about Grid is that it compels us to see the space inside a browser in a completely new way. <\/p>\n<p>We\u2019ll have to not only learn a bunch of new properties, but we\u2019ll also have to entirely rethink what we\u2019ve learned in the past. So CSS Grid is not just a spec but a strange philosophy unto itself. <\/p>\n<p>Let\u2019s figure it out together!<\/p>\n<h3>Browser Support<\/h3>\n<div class=\"caniuse\"><div class=\"caniuse-header\"><p>This browser support data is from <a href=\"http:\/\/caniuse.com\/#feat=css-grid\">Caniuse<\/a>, which also reports this feature is in W3C Candidate Recommendation status.<\/p><\/div><div class=\"caniuse-section\"><h4>Desktop<\/h4><table class=\"browser-support-table\"><thead><tr><th class=\"chrome\"><span>Google Chrome<\/span><\/th><th class=\"firefox\"><span>Mozilla Firefox<\/span><\/th><th class=\"ie\"><span>Internet Explorer<\/span><\/th><th class=\"opera\"><span>Opera<\/span><\/th><th class=\"safari\"><span>Apple Safari<\/span><\/th><\/tr><\/thead><tbody><tr><td class=\"y yep\" title=\"Google Chrome - \"><span class=\"caniuse-agents-version version\">57<\/span><\/td><td class=\"y yep\" title=\"Mozilla Firefox - \"><span class=\"caniuse-agents-version version\">52<\/span><\/td><td class=\"a yep-nope yep-nope-partial\" title=\"Internet Explorer - \"><span class=\"caniuse-agents-version version\">10*<\/span><\/td><td class=\"y yep\" title=\"Opera - \"><span class=\"caniuse-agents-version version\">44<\/span><\/td><td class=\"y yep\" title=\"Apple Safari - \"><span class=\"caniuse-agents-version version\">10.<\/span><\/td><\/tr><\/table><\/div><div class=\"caniuse-section\"><h4>Mobile \/ Tablet<\/h4><table class=\"browser-support-table\"><thead><tr><th class=\"ios_saf\"><span>iOS Safari<\/span><\/th><th class=\"android\"><span>Android<\/span><\/th><th class=\"op_mob\"><span>Opera Mobile<\/span><\/th><th class=\"and_chr\"><span>Android Chrome<\/span><\/th><th class=\"and_ff\"><span>Android Firefox<\/span><\/th><\/tr><\/thead><tbody><tr><td class=\"y yep\" title=\"iOS Safari - \"><span class=\"caniuse-agents-version version\">10.<\/span><\/td><td class=\"n nope\" title=\"Android - \"><span class=\"caniuse-agents-version version\">No<\/span><\/td><td class=\"n nope\" title=\"Opera Mobile - \"><span class=\"caniuse-agents-version version\">No<\/span><\/td><td class=\"y yep\" title=\"Android Chrome - \"><span class=\"caniuse-agents-version version\">57<\/span><\/td><td class=\"y yep\" title=\"Android Firefox - \"><span class=\"caniuse-agents-version version\">52<\/span><\/td><\/tr><\/table><\/div><\/div>\n<h3>More Information<\/h3>\n<ul>\n<li><a href=\"http:\/\/jensimmons.com\/\">Jen Simmons<\/a> and <a href=\"https:\/\/rachelandrew.co.uk\">Rachel Andrew<\/a> have written a lot of amazing tutorials and walkthroughs on the subject<\/li>\n<li><a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Tools\/Page_Inspector\/How_to\/Examine_grid_layouts\">Grid Inspector Tools<\/a> in Firefox is super handy<\/li>\n<li>We have a <a href=\"https:\/\/css-tricks.com\/snippets\/css\/complete-guide-grid\/\">Complete Guide to Grid<\/a> which goes into a lot more detail on each property and value<\/li>\n<\/ul>\n","protected":false},"excerpt":{"rendered":"<p>This was a blockbuster week for front-end developers as CSS Grid landed in the latest versions of Firefox and Chrome without a feature flag. That&#8217;s right: we can now go and play with Grid in two of the most popular browsers right away. But why is CSS Grid a big deal and why should we [&hellip;]<\/p>\n","protected":false},"author":223806,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[686,586],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252690"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/223806"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252690"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252690\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252690"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252690"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252690"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252647,"date":"2017-03-13T04:48:09","date_gmt":"2017-03-13T11:48:09","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252647"},"modified":"2017-03-13T04:48:09","modified_gmt":"2017-03-13T11:48:09","slug":"if-your-company-were-a-couch","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/if-your-company-were-a-couch\/","title":{"rendered":"If Your Company Were a Couch&#8230;"},"content":{"rendered":"<p>Without even realizing it, our perceptions are cross-referenced with our memories. Our brains conjure up an emotional reaction when our eyes see familiar shapes, colors, and textures. This fun exercise uses various styles of couches to help you make decisions about the emotional response that best represents the personality of your company (or how you would like your company to be perceived). <\/p>\n<p><!--more--><\/p>\n<figure id=\"post-252648\" class=\"align-none media-252648\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/the-couch-test.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/the-couch-test.jpg 800w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/the-couch-test-300x211.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/the-couch-test-768x540.jpg 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>So, which couch feels most like your company? Parallel your choice with your company's brand personality attributes. Insights on effective color and hand-picked typography choices (with links to free fonts) are included and will help codify your communication style. See if your choice aligns with your company's mission and vision.<\/p>\n<p>Is your brand...<\/p>\n<h3>Stylish?<\/h3>\n<figure id=\"post-252649\" class=\"align-none media-252649\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/specialmoderndesign-couch_0001.png\" alt=\"MODERN, PROGRESSIVE, STREAMLINED, DESIRABLE, SIMPLE, CONFIDENT, UNIQUE, DISCRIMINATING, CLASSIC, TASTEFUL\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/specialmoderndesign-couch_0001.png 800w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/specialmoderndesign-couch_0001-300x194.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/specialmoderndesign-couch_0001-768x495.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Clean lines, modern, current. That's a stylish company. Being confident and deliberate in your decision-making shows in everything you do. This company may associate themselves with a Mid-Century modern look.<\/p>\n<p><strong>Recommendations:<\/strong><\/p>\n<p>For color \u2014 go fruity for the main color, use: orange, plum, lime, blueberry, etc. ground it with a gray or charcoal. A geometric sans-serif font like <a href=\"https:\/\/www.fontsquirrel.com\/fonts\/raleway\">Raleway<\/a> will feel contemporary yet timeless; look cutting-edge yet approachable \u2014all staying in line with that sharp stylish image.<\/p>\n<p><strong>Case in Point:<\/strong> <\/p>\n<figure id=\"post-252650\" class=\"align-none media-252650\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/cases-special-modern-design-mdesign.png\" alt=\"\" style=\"max-width: 600px;\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/cases-special-modern-design-mdesign.png 600w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/cases-special-modern-design-mdesign-300x73.png 300w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption><a href=\"https:\/\/specialmoderndesign.com\/projects\/20-m-industrial-design\/\">M Industrial Design<\/a>, a design studio<\/figcaption><\/figure>\n<h3>Agile?<\/h3>\n<figure id=\"post-252651\" class=\"align-none media-252651\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/specialmoderndesign-couch_0002.png\" alt=\"ORGANIZED, MODULAR, SYSTEMATIC, SPONTANEOUS, TRANSFORMATIVE, PRACTICAL, ADAPTABLE, RESOURCEFUL, ACCOMMODATING, FLEXIBLE\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/specialmoderndesign-couch_0002.png 800w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/specialmoderndesign-couch_0002-300x222.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/specialmoderndesign-couch_0002-768x569.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Pragmatic in its approach, this company can accommodate almost anything that is thrown its way. The agile company appeals to people who want to get things done no matter what road blocks they come against. Energetic and flexible, this company is always on its toes. <\/p>\n<p><strong>Recommendations:<\/strong><\/p>\n<p>A fun muted tone with sage greens and slate blues will keep the look grounded. The typography should be super clean while the layout is geometric and modular. A condensed font face like <a href=\"http:\/\/www.fontpalace.com\/font-details\/Alpin+Gothic+CG+No1\/\">Alpin Gothic<\/a> will make an excellent evergreen typeface solution for your logotype.<\/p>\n<p><strong>Case in Point:<\/strong> <\/p>\n<figure id=\"post-252652\" class=\"align-none media-252652\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/cases-special-modern-design-shopclass.png\" alt=\"\" style=\"max-width: 600px;\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/cases-special-modern-design-shopclass.png 600w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/cases-special-modern-design-shopclass-300x73.png 300w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption><a href=\"https:\/\/specialmoderndesign.com\/projects\/34-shopclass\/\">Shopclass<\/a>, a versatile vintage furniture store<\/figcaption><\/figure>\n<h3>Collaborative?<\/h3>\n<figure id=\"post-252668\" class=\"align-none media-252668\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/specialmoderndesign-couch_0003.png\" alt=\"PROFESSIONAL, TEAMWORK, INTERACTIVE, CREATIVE, YOUNG, STRATEGIC, HARD-WORKING, INFLUENTIAL, PARTNER, CONNECTED\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/specialmoderndesign-couch_0003.png 800w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/specialmoderndesign-couch_0003-300x188.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/specialmoderndesign-couch_0003-768x482.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Communication is key. Relationships are important to your organization both internal and external. Decisions are not made in a vacuum but are a result of the collaboration of many minds. Your company culture is perceived as young, thoughtful, and deliberate.<\/p>\n<p><strong>Recommendations:<\/strong> <\/p>\n<p>The color family is a pop of color grounded in neutrals. Pick one strong color. Don\u2019t clash hues. Balance a dominant color with lots of white. For a logotype, stay friendly and timeless with a sans-serif font such as, <a href=\"https:\/\/www.fontsquirrel.com\/fonts\/langdon\">Langdon<\/a>.<\/p>\n<p><strong>Case in Point:<\/strong><\/p>\n<figure id=\"post-252669\" class=\"align-none media-252669\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/cases-special-modern-design-dandelion.png\" alt=\"\" style=\"max-width: 600px;\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/cases-special-modern-design-dandelion.png 600w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/cases-special-modern-design-dandelion-300x73.png 300w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Team Dandelion, ideation firm<\/figcaption><\/figure>\n<h3>Rustic?<\/h3>\n<figure id=\"post-252670\" class=\"align-none media-252670\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/specialmoderndesign-couch_0004.png\" alt=\"ADVENTUROUS, WARM, POWERFUL, WEATHERED, EARTHY, UNREFINED, HOMEY, MASCULINE, STRONG, NATURAL\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/specialmoderndesign-couch_0004.png 800w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/specialmoderndesign-couch_0004-300x218.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/specialmoderndesign-couch_0004-768x557.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Solid furniture, wood, and leather \u2014 heirlooms that evoke a rugged, organic tone. You take your work seriously. You are a meat and potatoes kind of company.<\/p>\n<p><strong>Recommendations:<\/strong> <\/p>\n<p>Stay earthy or let your corporate identity color palette go beyond greens and chestnut browns with inspiration drawn from the colors of autumn leaves, baked clays, and terracotta. Keep the font strong, legible, and simple by using a san-serif or get bold with a slab font like <a href=\"https:\/\/www.fontsquirrel.com\/fonts\/museo-slab\">Museo Slab<\/a>. A showy, novelty font will dilute your message.<\/p>\n<p><strong>Case in Point:<\/strong><\/p>\n<figure id=\"post-252671\" class=\"align-none media-252671\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/cases-special-modern-design-ranch.png\" alt=\"\" style=\"max-width: 600px;\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/cases-special-modern-design-ranch.png 600w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/cases-special-modern-design-ranch-300x73.png 300w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption><a href=\"https:\/\/specialmoderndesign.com\/projects\/ranch-live-oak-malibu\/\">The Ranch at Live Oak Malibu<\/a><\/figcaption><\/figure>\n<h3>Playful?<\/h3>\n<figure id=\"post-252672\" class=\"align-none media-252672\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/specialmoderndesign-couch_0005.png\" alt=\"CASUAL, ENERGETIC, SPIRITED, IMAGINATIVE, FUN, EXCITING, PASSIONATE, HAPPY, ENTHUSIASTIC, WHIMSICAL\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/specialmoderndesign-couch_0005.png 800w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/specialmoderndesign-couch_0005-300x211.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/specialmoderndesign-couch_0005-768x540.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Happy and productive corporate or retail culture. This is a place where ideas become realized and enthusiasm is valued. The employees feel appreciated and are proud to be associated with the company.<\/p>\n<p><strong>Recommendations:<\/strong> <\/p>\n<p>Let go a little with this color palette. Explore colors such as vintage teal, pink, or robin\u2019s egg blue. Conversely, use a neutral as a secondary color to counter the fun color and ensure a professional feel. Play with a bold, retro script like, <a href=\"https:\/\/fonts.google.com\/specimen\/Grand+Hotel\">Grand Hotel<\/a> for a logotype. Steer clear of novelty fonts. Over-designed fonts make you look like you are screaming for attention and may come off as amateurish. Downplay to stay above the pack.<\/p>\n<p><strong>Case in Point:<\/strong> <\/p>\n<figure id=\"post-252673\" class=\"align-none media-252673\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/cases-special-modern-design-cakemonkey.png\" alt=\"\" style=\"max-width: 600px;\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/cases-special-modern-design-cakemonkey.png 600w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/cases-special-modern-design-cakemonkey-300x73.png 300w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption><a href=\"https:\/\/specialmoderndesign.com\/projects\/01-cake-monkey-bakery\/\">Cake Monkey Bakery<\/a><\/figcaption><\/figure>\n<h3>Accomplished?<\/h3>\n<figure id=\"post-252674\" class=\"align-none media-252674\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/specialmoderndesign-couch_0006.png\" alt=\"ESTABLISHED, RELIABLE, INFLUENTIAL, INTELLIGENT, KNOWLEDGEABLE, SEASONED, COMPETENT, RESPECTABLE, EXPERIENCED, CREDIBLE\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/specialmoderndesign-couch_0006.png 800w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/specialmoderndesign-couch_0006-300x178.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/specialmoderndesign-couch_0006-768x455.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>A bookshelf laden with books from every generation and a smart looking desk lamp define this category. Rich in tradition and high on integrity, you\u2019re a company built on a solid reputation that has garnered great respect from years of experience and deep knowledge of your industry. <\/p>\n<p><strong>Recommendations:<\/strong> <\/p>\n<p>Consider darker colors to convey depth and couple it with several shades of an earthy tone: a mid-tone khaki or charcoal gray. Using a classic typeface with contrasting thick and thin strokes will be easily readable. A serif typeface will represent stability and credibility, along the lines of <a href=\"https:\/\/www.fontsquirrel.com\/fonts\/crimson\">Crimson<\/a> in upper and lower case. <\/p>\n<p><strong>Case in Point:<\/strong><\/p>\n<figure id=\"post-252675\" class=\"align-none media-252675\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/cases-special-modern-design-flew.png\" alt=\"\" style=\"max-width: 600px;\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/cases-special-modern-design-flew.png 600w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/cases-special-modern-design-flew-300x73.png 300w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption><a href=\"https:\/\/specialmoderndesign.com\/projects\/flewelling-and-moody-architects-special-modern-design\/\">Flewelling and Moody Architects<\/a>, architects for educational facilities<\/figcaption><\/figure>\n<hr>\n<figure id=\"post-252676\" class=\"align-none media-252676\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/logos-with-sould.jpg\" alt=\"\" style=\"max-width: 400px;\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/logos-with-sould.jpg 519w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/logos-with-sould-300x142.jpg 300w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Karen Barranco is originally from New Orleans and now in Los Angeles. In 2000 she founded <a href=\"https:\/\/specialmoderndesign.com\">Special Modern Design<\/a> and her work has been been published internationally in books, print magazines, and online, including being featured on lynda.com and being hand-picked by Shepard Fairey to represent the \"Revitalization of the Los Angeles River by 2020\" initiative. <a href=\"https:\/\/specialmoderndesign.com\/aboutmoderndesign\/logo-brand-for-designers\/\">Logos With Soul<\/a> is a spin-off company for designers.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Without even realizing it, our perceptions are cross-referenced with our memories. Our brains conjure up an emotional reaction when our eyes see familiar shapes, colors, and textures. This fun exercise uses various styles of couches to help you make decisions about the emotional response that best represents the personality of your company (or how you [&hellip;]<\/p>\n","protected":false},"author":248028,"featured_media":252648,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1180,692],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252647"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/248028"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252647"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252647\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/252648"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252647"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252647"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252647"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252663,"date":"2017-03-12T06:48:49","date_gmt":"2017-03-12T13:48:49","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252663"},"modified":"2017-03-12T06:48:49","modified_gmt":"2017-03-12T13:48:49","slug":"linting-html-using-css","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/linting-html-using-css\/","title":{"rendered":"Linting HTML using CSS"},"content":{"rendered":"<p>Ire Aderinokun with some CSS selectors designed to catch problematic HTML elements, such as those with inline styles or missing\/wrong attributes.<\/p>\n<p>I tossed up <a href=\"https:\/\/github.com\/chriscoyier\/linting-html-with-css\">a repo<\/a> so I could make a <a href=\"https:\/\/chriscoyier.github.io\/linting-html-with-css\/\">full page demo<\/a> showing off all those selectors at work. Any <span style=\"color: red;\">red<\/span> you see is a problem of sorts.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Ire Aderinokun with some CSS selectors designed to catch problematic HTML elements, such as those with inline styles or missing\/wrong attributes. I tossed up a repo so I could make a full page demo showing off all those selectors at work. Any red you see is a problem of sorts.<\/p>\n","protected":false},"author":3,"featured_media":252664,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252663"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252663"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252663\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/252664"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252663"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252663"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252663"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252477,"date":"2017-03-10T06:47:39","date_gmt":"2017-03-10T13:47:39","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252477"},"modified":"2017-03-10T09:19:10","modified_gmt":"2017-03-10T16:19:10","slug":"using-css-transitions-auto-dimensions","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/using-css-transitions-auto-dimensions\/","title":{"rendered":"Using CSS Transitions on Auto Dimensions"},"content":{"rendered":"<p>We've all been there. You've got an element you want to be able to collapse and expand smoothly using CSS transitions, but its expanded size needs to be content-dependent. You've set <code>transition: height 0.2s ease-out<\/code>. You've created a <code>collapsed<\/code> CSS class that applies <code>height: 0<\/code>. You try it out, and... the height doesn't transition. It snaps between the two sizes as if <code>transition<\/code> had never been set. After some fiddling, you figure out that this problem only happens when the height starts out or ends up as <code>auto<\/code>. Percentages, pixel values, any absolute units work as expected. But all of those require hard coding a specific height beforehand, rather than allowing it to naturally result from the size of the element content.<\/p>\n<p><!--more--><\/p>\n<figure id=\"post-252525\" class=\"align-none media-252525\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/auto-problem.gif\" alt=\"\" \/><figcaption>Nikita Vasilyev <a href=\"http:\/\/n12v.com\/css-transition-to-from-auto\/\">documented this well<\/a>.<\/figcaption><\/figure>\n<div class=\"explanation\">In this article I mostly speak in terms of <code>height<\/code> for simplicity, but everything here also applies to <code>width<\/code>.<\/div>\n<p>If you were hoping I had a magical, complete solution to this problem, I'm sorry to disappoint you. There's no one solution that achieves the desired effect without downsides. There are, however, multiple workarounds that each come with a different set of advantages and disadvantages, and in most use cases at least one of them will get the job done in an acceptable manner. I'll outline the major ones, and list out their ups and downs so you can hopefully pick the best one for your situation.<\/p>\n<h3>Why hasn't this problem been fixed at the browser level?<\/h3>\n<p>According to the Mozilla Developer Network docs, <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/CSS\/CSS_Transitions\/Using_CSS_transitions#Specifications\">auto values have been intentionally excluded from the CSS transitions spec<\/a>. It looks like it's been requested by <a href=\"https:\/\/www.w3.org\/Bugs\/Public\/show_bug.cgi?id=15844\">a few people<\/a>, but when you think about it, it makes at least a little sense that it hasn't been included. The browser process that re-calculates the sizes and positions of all elements based on their content and the way they interact with each other (known as \"reflow\") is <a href=\"https:\/\/developers.google.com\/speed\/articles\/reflow\">expensive<\/a>. If you were to transition an element into a <code>height<\/code> of <code>auto<\/code>, the browser would have to perform a reflow for every stage of that animation, to determine how all the other elements should move. This couldn't be cached or calculated in a simple way, since it doesn't know the starting and\/or ending values until the moment the transition happens. This would significantly complicate the math that has to be done under the hood and probably degrade performance in a way that might not be obvious to the developer.<\/p>\n<h3>Technique 1: <code>max-height<\/code><\/h3>\n<p>If you web search this problem, the <code>max-height<\/code> approach will probably be mentioned in all of the first five to ten results. It's actually pretty unideal, but I thought it was worth including here for the sake of comparison.<\/p>\n<p>It works like this: CSS values can only be transitioned to and from fixed unit values. But imagine we have an element whose <code>height<\/code> is set to <code>auto<\/code>, but whose <code>max-height<\/code> is set to a fixed value; say, <code>1000px<\/code>. We can't transition <code>height<\/code>, but we <em>can<\/em> transition <code>max-height<\/code>, since it has an explicit value. At any given moment, the actual height of the element will be the maximum of the <code>height<\/code> and the <code>max-height<\/code>. So as long as <code>max-height<\/code>'s value is greater than what <code>auto<\/code> comes out to, we can just transition <code>max-height<\/code> and achieve a version of the desired effect.<\/p>\n<p data-height=\"796\" data-theme-id=\"1\" data-slug-hash=\"bqqeye\" data-default-tab=\"css,result\" data-user=\"brundolf\" data-embed-version=\"2\" data-pen-title=\"Smooth Collapsing div with max-height\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/brundolf\/pen\/bqqeye\/\">Smooth Collapsing div with max-height<\/a> by Brandon (<a href=\"http:\/\/codepen.io\/brundolf\">@brundolf<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h4>There are two crucial downsides to this<\/h4>\n<p>One is obvious, and one is subtle. The obvious disadvantage is that we still have to hard-code a maximum height for the element, even if we don't have to hard-code the height itself. Depending on your situation, maybe you can guarantee that you won't need more height than that. But if not, it's a pretty big compromise. The second, less obvious downside, is that the transition length will not actually be what you specify unless the content height works out to be exactly the same as <code>max-height<\/code>. For example, say your content is 600px tall, and your <code>max-height<\/code> is transitioning from 0px to 1000px with a duration of 1 second. How long will it take the element to get to 600px? 0.6 seconds! The <code>max-height<\/code> will continue transitioning, but the real height will stop changing once it reaches the end of its content. This will be even more pronounced if your transition is using a nonlinear timing function. If the transition is fast at the beginning and slow at the end, your section will expand quickly and collapse slowly. Not ideal. Still, transitions are relatively subjective, so in cases where this technique is otherwise appropriate, it could be an acceptable tradeoff.<\/p>\n<h3>Technique 2: <code>transform: scaleY()<\/code><\/h3>\n<p>If you aren't familiar with the <code>transform<\/code> property, it allows you to apply GPU-driven transformations (translate, scale, rotate, etc.) to an element. It's important to note a couple of things about the nature of these transformations:<\/p>\n<ol>\n<li>They operate on the element's visual representation as if it were simply an image, rather than a DOM element. This means, for example, that an element scaled up too far will look pixellated, since its DOM was originally rendered onto fewer pixels than it now spans.<\/li>\n<li>They <strong>do not trigger reflows<\/strong>. Again, the transform doesn't know or care about the element's DOM structure, only about the \"picture\" the browser drew of it. This is both the reason this technique works and its biggest downside.<\/li>\n<\/ol>\n<p>Implementation works like this: we set a <code>transition<\/code> for the element's <code>transform<\/code> property, then toggle between <code>transform: scaleY(1)<\/code> and <code>transform: scaleY(0)<\/code>. These mean, respectively, \"render this element at the same scale (on the y axis) that it starts out at\" and \"render this element at a scale of 0 (on the y axis)\". Transitioning between these two states will neatly \"squish\" the element to and from its natural, content-based size. As a bonus, even the letters and\/or images inside will visually \"squish\" themselves, rather than sliding behind the element's boundary. The downside? Since no reflow is triggered, the elements around this element will be completely unaffected. They will neither move nor resize to fill in the empty space.<\/p>\n<p data-height=\"755\" data-theme-id=\"1\" data-slug-hash=\"evvdYM\" data-default-tab=\"css,result\" data-user=\"brundolf\" data-embed-version=\"2\" data-pen-title=\"Smooth Collapsing div with scaleY()\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/brundolf\/pen\/evvdYM\/\">Smooth Collapsing div with scaleY()<\/a> by Brandon (<a href=\"http:\/\/codepen.io\/brundolf\">@brundolf<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h4>The advantages and disadvantages of this approach are stark <\/h4>\n<p>It will either work very well for your use-case or won't be appropriate at all.<\/p>\n<p>This mainly depends on whether or not any elements follow the one in question in the flow of the document. For example, something that floats over the main document like a modal or a tooltip will work perfectly this way. It would also work for an element that's at the bottom of the document. But unfortunately, in many situations, this one won't do.<\/p>\n<h3>Technique 3: JavaScript<\/h3>\n<p>Managing a CSS transition in CSS would be ideal, but as we're learning, sometimes it just isn't entirely possible.<\/p>\n<p>If you absolutely have to have smoothly collapsing sections, whose expanded size is completely driven by their content, and which other elements on the page will flow around as they transition, you can achieve that with some JavaScript.<\/p>\n<p>The basic strategy is to manually do what the browser refuses to: calculate the full size of the element's contents, then CSS transition the element to that explicit pixel size.<\/p>\n<p data-height=\"720\" data-theme-id=\"1\" data-slug-hash=\"dvoGyw\" data-default-tab=\"js,result\" data-user=\"brundolf\" data-embed-version=\"2\" data-pen-title=\"dvoGyw\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/brundolf\/pen\/dvoGyw\/\">dvoGyw<\/a> by Brandon (<a href=\"http:\/\/codepen.io\/brundolf\">@brundolf<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Let's deconstruct this a little bit. The first thing to note is that we keep track of whether or not the section is currently collapsed using the <code>data-collapsed<\/code> attribute. This is necessary so we know what to \"do\" to the element each time its expansion is toggled. If this were a React or Angular app, this would be a state variable.<\/p>\n<p>The next thing that might stand out is the use of <code>requestAnimationFrame()<\/code>. This allows you to run a callback the next time the browser re-renders. In this case, we use it to wait to do something until the style we just set has taken effect. This is important where we change the element's height from <code>auto<\/code> to the equivalent explicit pixels value because we don't want to wait on a transition there. So we must clear the value of <code>transition<\/code>, <em>then<\/em> set <code>height<\/code>, then restore <code>transition<\/code>. If these were sequential lines in the code, the result would be as if they'd all been set simultaneously since the browser doesn't re-render in parallel to Javascript execution (at least, for our purposes).<\/p>\n<p>The other idiosyncrasy is where we set <code>height<\/code> back to auto once the expansion has finished happening. We register an event listener with <code>transitionend<\/code>, which fires whenever a CSS transition concludes. Inside of that event listener, we remove it (since we only want it to respond to the immediately following transition), then remove <code>height<\/code> from the inline styles. This way, the element size is back to being defined however the normal styles for the page define it. We don't want to assume that it should remain the same pixel size, or even that it should remain <code>auto<\/code> sized. We want our JavaScript to perform the transition, and then get out of the way and not interfere more than necessary.<\/p>\n<p>The rest is fairly straightforward. And, as you can see, this achieves exactly the desired result. That said, despite best efforts, there are quite a few ways in which this makes our code more brittle and potentially bug-prone:<\/p>\n<ul>\n<li>We've added 27 lines of code instead of 3<\/li>\n<li>Changes to things like <code>padding<\/code> or <code>border-box<\/code> in our section element could require changes to this code<\/li>\n<li>CSS transitions on the section, that happen to end while the height transition is still going, could cause height not to be returned to its default value<\/li>\n<li>Disabling <code>transition<\/code> for one frame could disrupt other transitions on that element which happen to be going at the same time<\/li>\n<li>If a bug ever caused the element's <code>height<\/code> style to get out of sync with its <code>data-collapsed<\/code> attribute, its behavior could have problems<\/li>\n<\/ul>\n<p>On top of all that, the code we've written is procedural instead of declarative, which inherently makes it more error-prone and complex. All that said, sometimes our code just needs to do what it needs to do, and if it's worth the tradeoffs then it's worth the tradeoffs.<\/p>\n<h3>Bonus Technique: Flexbox<\/h3>\n<p>I call this technique a bonus because it doesn't technically achieve the desired behavior. It offers an alternate way of determining your elements' sizes which in many cases may be a reasonable replacement, and which does fully support transitions.<\/p>\n<p>You may want to read about <a href=\"https:\/\/css-tricks.com\/snippets\/css\/a-guide-to-flexbox\/\">flexbox<\/a> and <a href=\"https:\/\/css-tricks.com\/flex-grow-is-weird\/\">flex-grow<\/a> before reading this section, if you're not familiar with them already.<\/p>\n<p>Flexbox is an extremely powerful system for managing the way your interface's sizing adapts to different situations. Many articles have been written about this, and I won't go into it in detail. What I will go into, is the lesser-mentioned fact that the <code>flex<\/code> property and others related to it fully support transitions!<\/p>\n<p data-height=\"919\" data-theme-id=\"1\" data-slug-hash=\"mWWrOe\" data-default-tab=\"css,result\" data-user=\"brundolf\" data-embed-version=\"2\" data-pen-title=\"Smooth Collapsing div with Flexbox\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/brundolf\/pen\/mWWrOe\/\">Smooth Collapsing div with Flexbox<\/a> by Brandon (<a href=\"http:\/\/codepen.io\/brundolf\">@brundolf<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>What this means, is that if your use case allows you to determine sizing using flexbox instead of your content size, making a section smoothly collapse is as simple as setting <code>transition: flex 0.3s ease-out<\/code> and toggling <code>flex: 0<\/code>. Still not as good as being content-based, but more <em>flexible<\/em> (I know, I know, I'm sorry) than going to and from pixel sizes.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>We&#8217;ve all been there. You&#8217;ve got an element you want to be able to collapse and expand smoothly using CSS transitions, but its expanded size needs to be content-dependent. You&#8217;ve set transition: height 0.2s ease-out. You&#8217;ve created a collapsed CSS class that applies height: 0. You try it out, and&#8230; the height doesn&#8217;t transition. It [&hellip;]<\/p>\n","protected":false},"author":243416,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1171,1170],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252477"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/243416"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252477"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252477\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252477"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252477"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252477"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252601,"date":"2017-03-10T06:38:55","date_gmt":"2017-03-10T13:38:55","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252601"},"modified":"2017-03-10T09:05:30","modified_gmt":"2017-03-10T16:05:30","slug":"serverless","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/serverless\/","title":{"rendered":"&#8220;Serverless&#8221;"},"content":{"rendered":"<p>Every time I use the word \"serverless\", which is somewhat regularly lately, as we've had <a href=\"https:\/\/css-tricks.com\/tag\/serverless\/\">a few articles using the term<\/a> lately and use the concept at CodePen for a variety of things, I get some version of:<\/p>\n<blockquote><p>CMON BRAH YOU'RE STILL USING \"SERVERS\".<\/p><\/blockquote>\n<p>And they aren't wrong. Yes, when you build things on the web, there are always servers involved. <!--more--> Always. Whether it's some old computer in a church basement, a computer in a rack at some big hosting company, or \"The Cloud\", it's a server.<\/p>\n<figure id=\"post-252602\" class=\"align-none media-252602\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/no-cloud.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/no-cloud.jpg 698w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/no-cloud-300x172.jpg 300w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Chris Wattersons's classic sticker.<\/figcaption><\/figure>\n<p>I rolled my eyes at the term the first few times I heard it too. But now I'm hesitant to call it a bad term, in part because it's really stuck, and there is something to be said for new terms that catch on so strongly. Also in part because it signifies a dramatic change in how you can use servers. It's different economically, different devops-wise, and different in how you code for them.<\/p>\n<p>To many of us, we're aware a server is a computer. There are various ways to buy them, but you buy them. Here's some money, here's your server. It might be virtual, but it's still something you're responsible for. You put software on it. You spin them up and spin them down. You load balance them. You make choices about how much memory and disk space they have. You're in charge of provisioning and managing them. <\/p>\n<p><strong>What serverless is trying to mean<\/strong>, it seems to me, is a new way to manage and pay for servers. You don't buy individual servers. You don't manage them. You don't scale them. You don't balance them. You aren't really responsible for them. <\/p>\n<p>You just pay for what you use. For example, AWS Lambda is free for 1,000,000 requests and then costs $0.0000002 per request after that. Cheap. Just this week Firebase launched \"functions\" which are essentially a serverless concept, and their $25 a month plan has 2,000,000 requests (along with all the rest of the stuff Firebase gets you).<\/p>\n<p>That doesn't work for all applications. It works for things in which you can write some code that is designed to take some stuff, do some work, and return some new stuff. You write an API.<\/p>\n<p>You don't have to go all in with the \"serverless\" idea. You can, and I imagine most people do, use it for things that make sense to use it for, and use traditional servers for the rest.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Every time I use the word &#8220;serverless&#8221;, which is somewhat regularly lately, as we&#8217;ve had a few articles using the term lately and use the concept at CodePen for a variety of things, I get some version of: CMON BRAH YOU&#8217;RE STILL USING &#8220;SERVERS&#8221;. And they aren&#8217;t wrong. Yes, when you build things on the [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1023,575,1024],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252601"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252601"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252601\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252601"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252601"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252601"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252113,"date":"2017-03-09T07:07:48","date_gmt":"2017-03-09T14:07:48","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252113"},"modified":"2017-03-09T07:07:48","modified_gmt":"2017-03-09T14:07:48","slug":"event-apart-seattle-april-3-5-2017","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/event-apart-seattle-april-3-5-2017\/","title":{"rendered":"An Event Apart Seattle &#8211;  April 3-5, 2017"},"content":{"rendered":"<p><a href=\"https:\/\/aneventapart.com\/event\/seattle-2017\">An Event Apart Seattle<\/a> is coming up! Less than a month away. If you've been trying to decide, now is the time to pull the trigger before it sells out. I'll be there doing <em>three<\/em> official things. One, I'll be speaking. Two, I'll be giving a workshop on the last day. Three, I'll be on a discussion panel talking about staying on top of this field.<\/p>\n<p>The workshop on the final day is called A Day Apart, and you <a href=\"https:\/\/store.aneventapart.com\/register\/2017\/seattle\">buy tickets<\/a> for the conference and the workshop separately or as a package deal. <\/p>\n<p><!--more--><\/p>\n<p>If you'd be just visiting Seattle, that's perfect, as the event is perfectly situated to enjoy a lot of the best of Seattle.<\/p>\n<figure id=\"post-252441\" class=\"align-none media-252441\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/location.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/location.png 980w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/location-300x142.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/location-768x363.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>The lineup is <em>excellent<\/em>.<\/p>\n<figure id=\"post-252442\" class=\"align-none media-252442\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/lineup.jpg\" alt=\"Speaker Lineup\" style=\"width: 261px;\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/lineup.jpg 261w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/lineup-235x300.jpg 235w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<ul>\n<li><strong>Sarah Parmenter:<\/strong> Practical Branding<\/li>\n<li><strong>Krystal Higgins:<\/strong> Onboarding for Any Situation<\/li>\n<li><strong>Luke Wroblewski:<\/strong> Obvious Always Wins<\/li>\n<li><strong>Val Head:<\/strong> Motion In Design Systems: Animation, Style Guides, and the Design Process<\/li>\n<li><strong>Ethan Marcotte:<\/strong> Design Beyond Our Devices<\/li>\n<li><strong>Jeremy Keith:<\/strong> Evaluating Technology<\/li>\n<li><strong>Rachel Andrew:<\/strong> New CSS Layout Meets the Real World<\/li>\n<li><strong>Jen Simmons:<\/strong> Designing with Grid<\/li>\n<li><strong>Eric Meyer:<\/strong> Design for Real Life<\/li>\n<li><strong>Una Kravets:<\/strong> The Joy of Optimizing<\/li>\n<li><strong>Chris Coyier:<\/strong> 10 Things You Can and Should Do With SVG<\/li>\n<\/ul>\n<p>After the first day, there is an opening night happy hour with provided snacks and beverages. That goes right into an evening panel discussion Val Head, Jeffrey Zeldman, and I will be having a chat on how to stay on top of your field and be a lifelong learner.<\/p>\n<p>Speaking of staying on top of your field, that will be a nice segway into my workshop on the final day. Speaking of which, this is what I'm calling it:<\/p>\n<figure id=\"post-252529\" class=\"align-none media-252529\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/title.jpg.001.jpeg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/title.jpg.001.jpeg 1920w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/title.jpg.001-300x169.jpeg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/title.jpg.001-768x432.jpeg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/title.jpg.001-1024x576.jpeg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Tall order, hey? I think we can get through it though, together. There is a lot to talk about. <\/p>\n<p>We're going to start with a design, but also talk about the process and journey of building websites from idea to design to development through deployment. We'll talk about a lot of the tools along the way. <\/p>\n<p>We're going to look at a lot of code. That's the job. Front-end developers spending a lot of time looking at and writing code. As we've covered many times on this site, there are often lots of different ways to do similar things in front-end development, we're going to spend time exploring those situations because that's all part of the job.<\/p>\n<p>There is going to be <em>lots<\/em> of <em>these<\/em> things:<\/p>\n<figure id=\"post-252531\" class=\"align-none media-252531\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/front-end-moment.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/front-end-moment.png 1298w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/front-end-moment-300x74.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/front-end-moment-768x191.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/front-end-moment-1024x254.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>And some of these:<\/p>\n<figure id=\"post-252532\" class=\"align-none media-252532\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/rabbit-hole.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/rabbit-hole.png 976w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/rabbit-hole-300x93.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/rabbit-hole-768x238.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>And some of these:<\/p>\n<figure id=\"post-252533\" class=\"align-none media-252533\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/performance-check-in.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/performance-check-in.png 1424w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/performance-check-in-300x62.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/performance-check-in-768x157.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/performance-check-in-1024x210.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>And why not a few of these:<\/p>\n<figure id=\"post-252534\" class=\"align-none media-252534\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/microtrick.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/microtrick.png 794w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/microtrick-300x138.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/microtrick-768x352.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>I'm excited for all this. I really enjoy front end development, as I suspect a lot of you do, so I look forward to some pretty epic nerding out about all-things-that with whomever of you can make it.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>An Event Apart Seattle is coming up! Less than a month away. If you&#8217;ve been trying to decide, now is the time to pull the trigger before it sells out. I&#8217;ll be there doing three official things. One, I&#8217;ll be speaking. Two, I&#8217;ll be giving a workshop on the last day. Three, I&#8217;ll be on [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":252443,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4,508],"tags":[812],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252113"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252113"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252113\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/252443"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252113"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252113"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252113"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252564,"date":"2017-03-09T07:06:56","date_gmt":"2017-03-09T14:06:56","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252564"},"modified":"2017-03-09T07:06:56","modified_gmt":"2017-03-09T14:06:56","slug":"simple-little-use-case-vmin","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/simple-little-use-case-vmin\/","title":{"rendered":"Simple Little Use Case for `vmin`"},"content":{"rendered":"<p>Viewport units are things like 10vw (10% of the viewport width) or 2vh (2% of the viewport height). Useful sometimes, as they are always relative to the viewport. No cascading or influence by parent elements.<\/p>\n<p>There is also vmin, which is the lesser of vw and vh, and vmax, which is the greater. These values can be used for anything that takes a length value, just like px or em or % or whatever. <\/p>\n<p>Let's take a look at a tiny design pattern that makes use of <code>vmin<\/code>.<\/p>\n<p><!--more--><\/p>\n<h3>A header block!<\/h3>\n<p>If we set the <code>padding<\/code> of an <code>&lt;header&gt;<\/code> like so:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">header {\r\n  padding: 10vmin 1rem;\r\n}<\/code><\/pre>\n<p>We get some fixed padding (1rem) on the outsides, so for example text set inside there never actually touches the edges. We also get a header that sizes itself in what feels like an appropriate way depending on the screen real estate. <\/p>\n<figure id=\"post-252565\" class=\"align-none media-252565\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/large.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/large.png 2446w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/large-300x276.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/large-768x707.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/large-1024x943.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Large and in charge on large desktop views.<\/figcaption><\/figure>\n<figure id=\"post-252566\" class=\"align-none media-252566\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/shortened-vertically.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/shortened-vertically.png 2696w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/shortened-vertically-300x144.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/shortened-vertically-768x367.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/shortened-vertically-1024x490.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>When there is less vertical room, it shortens up so that it isn't getting in the way of content.<\/figcaption><\/figure>\n<figure id=\"post-252567\" class=\"align-none media-252567\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/mobile.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/mobile.png 774w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/mobile-169x300.png 169w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/mobile-768x1359.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/mobile-579x1024.png 579w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Portrait mobile views seem balanced.<\/figcaption><\/figure>\n<figure id=\"post-252568\" class=\"align-none media-252568\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/Screen-Shot-2017-03-09-at-8.57.58-AM.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/Screen-Shot-2017-03-09-at-8.57.58-AM.png 1420w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/Screen-Shot-2017-03-09-at-8.57.58-AM-300x199.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/Screen-Shot-2017-03-09-at-8.57.58-AM-768x509.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/Screen-Shot-2017-03-09-at-8.57.58-AM-1024x679.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Small screen landscape<\/figcaption><\/figure>\n<figure id=\"post-252569\" class=\"align-none media-252569\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/super-tall-narrow.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/super-tall-narrow.png 1024w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/super-tall-narrow-128x300.png 128w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/super-tall-narrow-768x1794.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/super-tall-narrow-438x1024.png 438w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Super tall and narrow still feels right. Which it doesn't really factoring in just viewport height alone.<\/figcaption><\/figure>\n<p>Sizing based on the <em>minimum<\/em> of the two browser window dimensions seems to feel right, rather than basing it solely on width or height.<\/p>\n<p><a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/RpKEzV?editors=1100\">Here's the demo.<\/a><\/p>\n<p>Here's a video:<\/p>\n<figure><video width=\"880\" height=\"720\" src=\"https:\/\/css-tricks.com\/videos\/fluid-header.mov\" controls><\/video><\/figure>\n","protected":false},"excerpt":{"rendered":"<p>Viewport units are things like 10vw (10% of the viewport width) or 2vh (2% of the viewport height). Useful sometimes, as they are always relative to the viewport. No cascading or influence by parent elements. There is also vmin, which is the lesser of vw and vh, and vmax, which is the greater. These values [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1177,1176,1175],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252564"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252564"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252564\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252564"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252564"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252564"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252357,"date":"2017-03-08T05:39:09","date_gmt":"2017-03-08T12:39:09","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252357"},"modified":"2017-03-08T05:39:09","modified_gmt":"2017-03-08T12:39:09","slug":"build-custom-serverless-cms-part-2","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/build-custom-serverless-cms-part-2\/","title":{"rendered":"Build a Custom Serverless CMS: Part 2"},"content":{"rendered":"<p>In our previous proof-of-concept demo, we built a bare bones admin for generating a web page with the ability to edit some text on the page and set the site title and description. For this next demo, we build on our example and add rich text editing and image upload capabilities.<\/p>\n<p><!--more--><\/p>\n<div class=\"article-series\">\n<h4>Article Series:<\/h4>\n<ol>\n<li><a href=\"https:\/\/css-tricks.com\/build-custom-cms-serverless-static-site-generator\/\">Build a Custom CMS for a Serverless Static Site Generator<\/a> + <a href=\"https:\/\/github.com\/johnpolacek\/serverless-cms\">Repo<\/a><\/li>\n<li>Build a Custom Serverless CMS: Part 2 (you are here!) + <a href=\"https:\/\/github.com\/johnpolacek\/serverless-cms-2\">Repo<\/a><\/li>\n<\/ol>\n<\/div>\n<h3>Rich Text Editing<\/h3>\n<p><a href=\"https:\/\/www.tinymce.com\/\">TinyMCE<\/a> is the most widely used web-based Rich Text Editor around, so let's use it. We can add it to our admin form pretty easily. There are many <a href=\"https:\/\/www.tinymce.com\/docs\/configure\/\">configuration options<\/a> available for TinyMCE. For this demo, we only need a few.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">tinymce.init({\r\n  selector: '#calloutText',\r\n  menubar: false,\r\n  statusbar: false,\r\n  toolbar: 'undo redo | styleselect | bold italic | link',\r\n  plugins: 'autolink link'\r\n});<\/code><\/pre>\n<figure id=\"post-252358\" class=\"align-none media-252358\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/tinymce.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/tinymce.png 1310w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/tinymce-300x137.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/tinymce-768x352.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/tinymce-1024x469.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>The rich text editor will encode its content as markup, so we have to update the JSRender template to output the data value for <code>calloutText<\/code> as HTML.<\/p>\n<pre rel=\"HTML\"><code markup=\"tt\" class=\"language-markup\">&lt;div class=\"jumbotron\"&gt;\r\n  &lt;div class=\"container\"&gt;\r\n  &lt;h1 class=\"display-3\"&gt;{{&gt;calloutHeadline}}&lt;\/h1&gt;\r\n  {{:calloutText}}\r\n  ...<\/code><\/pre>\n<h3>Image Uploads<\/h3>\n<p>Now we add an image background to our Jumbotron. First, we need to add a new form field so an admin can select a file to upload, then update our form submit handler to upload the image to S3. <\/p>\n<figure id=\"post-252359\" class=\"align-none media-252359\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/bg-image.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/bg-image.png 1308w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/bg-image-300x53.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/bg-image-768x136.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/bg-image-1024x181.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>With multiple uploads and callbacks happening here, we can create an upload helper method and use <a href=\"https:\/\/api.jquery.com\/jquery.when\/\">Deferred objects<\/a> to make our Ajax calls <a href=\"https:\/\/css-tricks.com\/multiple-simultaneous-ajax-requests-one-callback-jquery\/\">run simultaneously<\/a>.<\/p>\n<pre rel=\"jQuery\"><code class=\"language-javascript\">$('body').on('submit','#form-admin',function(e) {\r\n\r\n  e.preventDefault();\r\n\r\n  var formData = {};\r\n  var $formFields = $('#form-admin').find('input, textarea, select').not(':input[type=button], :input[type=submit], :input[type=reset]');\r\n\r\n  $formFields.each(function() {\r\n    formData[$(this).attr('name')] = $(this).val();\r\n  });\r\n \r\n  var jumbotronHTML = '&lt;!DOCTYPE html&gt;' +\r\n    $.render.jumbotronTemplate(formData);\r\n \r\n  var fileHTML = new File([jumbotronHTML], 'index.html', {type: \"text\/html\", lastModified: new Date()});\r\n \r\n  var fileJSON = new File([JSON.stringify(formData)], 'admin.json');\r\n  \r\n  var uploadHTML  = $.Deferred();\r\n  var uploadJSON. = $.Deferred();\r\n  var uploadImage = $.Deferred();\r\n \r\n  upload({\r\n    Key: 'index.html',\r\n    Body: fileHTML,\r\n    ACL: 'public-read',\r\n    ContentDisposition: 'inline',\r\n    ContentType: 'text\/html'\r\n  }, uploadHTML);\r\n\r\n  upload({\r\n    Key: 'admin\/index.json',\r\n    Body: fileJSON,\r\n    ACL: 'public-read'\r\n   }, uploadJSON);\r\n\r\n  if ($('#calloutBackgroundImage').prop('files').length) {\r\n    upload({\r\n      Key: 'img\/callout.jpg',\r\n      Body: $('#calloutBackgroundImage').prop('files')[0],\r\n      ACL: 'public-read'\r\n    }, uploadImage);\r\n  } else {\r\n    uploadImage.resolve();\r\n  } \r\n \r\n  $.when(uploadHTML, uploadImage, uploadJSON).then(function() {\r\n    $('#form-admin').prepend('&lt;p id=\"success\"&gt;Update successful! <a href=\"..\/index.html\">View Website<\/a>&lt;\/p&gt;');\r\n  })\r\n});\r\n\r\nfunction upload(uploadData, deferred) {\r\n  s3.upload(uploadData, function(err, data) {\r\n    if (err) {\r\n      return alert('There was an error: ', err.message);\r\n      deferred.reject();\r\n    } else {\r\n      deferred.resolve();\r\n    }\r\n  });\r\n}<\/code><\/pre>\n<p>Next, we update our jumbotron to display the callout background image.<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.jumbotron {\r\n  background-image: url(..\/img\/callout.jpg);\r\n  background-repeat: no-repeat;\r\n  background-attachment: fixed;\r\n  background-position: center;\r\n  background-size: cover;\r\n}<\/code><\/pre>\n<figure id=\"post-252360\" class=\"align-none media-252360\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/jumbotron.jpeg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/jumbotron.jpeg 1800w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/jumbotron-300x133.jpeg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/jumbotron-768x340.jpeg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/jumbotron-1024x453.jpeg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<h3>Blog Posts<\/h3>\n<p>Let's use rich text editing and image uploads together to create blog posts. Since we are doing a lot of templating, we can make life easier by writing a helper function to automatically register JSX templates.<\/p>\n<pre rel=\"jQuery\"><code class=\"language-javascript\">$('script[type=\"text\/x-jsrender\"]').each(function() {\r\n  $.templates($(this).attr('id'), '#'+$(this).attr('id'));\r\n});<\/code><\/pre>\n<p>We can manage different areas of the site, in this case a blog, by adding navigation to our admin page with a nav bar template partial.<\/p>\n<pre rel=\"Template\"><code class=\"language-javascript\">&lt;script type=\"text\/x-jsrender\" id=\"adminNav\"&gt;\r\n  &lt;nav class=\"navbar navbar-light rounded bg-faded my-4\"&gt;\r\n    &lt;div class=\"navbar-collapse\" id=\"navbarNav\"&gt;\r\n      &lt;ul class=\"nav navbar-nav d-flex flex-row\"&gt;\r\n        &lt;li class=\"nav-item pl-2 pr-3 mr-1 border-right\"&gt;\r\n          &lt;a class=\"nav-link text-primary\" href=\"#adminIndex\"&gt;Admin&lt;\/a&gt;\r\n        &lt;\/li&gt;\r\n        &lt;li class=\"nav-item px-2{{if active=='adminIndex'}} active{{\/if}}\"&gt;\r\n          &lt;a class=\"nav-link\" href=\"#adminIndex\"&gt;Home {{if active=='adminIndex'}}&lt;span class=\"sr-only\"&gt;(current)&lt;\/span&gt;{{\/if}}&lt;\/a&gt;\r\n        &lt;\/li&gt;\r\n        &lt;li class=\"nav-item px-2{{if active=='adminBlog'}} active{{\/if}}\"&gt;\r\n          &lt;a class=\"nav-link\" href=\"#adminBlog\"&gt;Blog {{if active=='adminBlog'}}&lt;span class=\"sr-only\"&gt;(current)&lt;\/span&gt;{{\/if}}&lt;\/a&gt;\r\n        ...<\/code><\/pre>\n<p>Next, update our existing admin page with the nav bar and a new ID.<\/p>\n<pre rel=\"Template\"><code class=\"language-javascript\">&lt;script type=\"text\/x-jsrender\" id=\"adminHome\"&gt;\r\n  {{include tmpl='adminNav' \/}}\r\n  &lt;form class=\"py-2\" id=\"form-admin\"&gt;\r\n    &lt;h3 class=\"py-2\"&gt;Site Info&lt;\/h3&gt;\r\n    ...<\/code><\/pre>\n<figure id=\"post-252361\" class=\"align-none media-252361\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/newid-siteinfo.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/newid-siteinfo.png 1800w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/newid-siteinfo-300x149.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/newid-siteinfo-768x382.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/newid-siteinfo-1024x510.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>To add navigation to our admin view, when the nav buttons are clicked we can add an event handler that will load the associated data and render the appropriate template. <\/p>\n<p>We will be using the rich text editor as we edit different areas of the site, so creating another helper function will enable us to easily configure the editor with different settings.<\/p>\n<pre rel=\"jQuery\"><code class=\"language-javascript\">$('body').on('click','.nav-link', function(e) {\r\n  e.preventDefault();\r\n  loadPage($(this).attr('href').slice(1));\r\n});\r\n\r\nfunction loadPage(pageId) {\r\n  adminData = {};\r\n$.getJSON(pageId+'.json', function( data ) {\r\n    adminData = data;\r\n  }).always(function() {\r\n    $('.container').html($.render[pageId]($.extend(adminData,{active:pageId})));\r\n    initRichTextEditor();\r\n  });\r\n}\r\n\r\nfunction initRichTextEditor(settings) {\r\n  tinymce.init($.extend({\r\n    selector:'textarea',\r\n    menubar: false,\r\n    statusbar: false,\r\n    toolbar: 'undo redo | styleselect | bold italic | link',\r\n    plugins: 'autolink link',\r\n    init_instance_callback : function(editor) {\r\n      $('.mce-notification-warning').remove();\r\n    }\r\n  }, settings ? settings : {}));\r\n}<\/code><\/pre>\n<p>Create a new admin section for managing the blog with a button to create a new post.<\/p>\n<pre rel=\"Template\"><code class=\"language-javascript\">&lt;script type=\"text\/x-jsrender\" id=\"adminBlog\"&gt;\r\n  {{include tmpl='adminNav' \/}}\r\n  &lt;div id=\"blogPosts\"&gt;\r\n    &lt;h3 class=\"py-2\"&gt;Blog Posts&lt;\/h3&gt;\r\n    &lt;button id=\"newPostButton\" class=\"btn btn-primary\"&gt;+ New Post&lt;\/button&gt;\r\n    ...<\/code><\/pre>\n<p>Also, we need a form to write these posts. Note we include a hidden file input which we'll use to allow the rich text editor to upload images.<\/p>\n<pre rel=\"Template\"><code class=\"language-javascript\">&lt;script type=\"text\/x-jsrender\" id=\"editBlogPost\"&gt;\r\n  &lt;form class=\"py-2\" id=\"form-blog\"&gt;\r\n    {{if postTitle}}\r\n      &lt;h3 class=\"py-2\"&gt;Edit Blog Post&lt;\/h3&gt;\r\n    {{else}}\r\n      &lt;h3 class=\"py-2\"&gt;New Blog Post&lt;\/h3&gt;\r\n    {{\/if}}\r\n    &lt;div class=\"form-group\"&gt;\r\n        &lt;label for=\"postTitle\"&gt;Title&lt;\/label&gt;\r\n        &lt;input type=\"text\" value=\"{{&gt;postTitle}}\" class=\"form-control\" id=\"postTitle\" name=\"postTitle\" \/&gt;\r\n    &lt;\/div&gt;\r\n    &lt;div class=\"form-group pb-2\"&gt;\r\n      &lt;textarea class=\"form-control\" id=\"postContent\" name=\"postContent\" rows=\"12\"&gt;{{&gt;postContent}}&lt;\/textarea&gt;\r\n    &lt;\/div&gt;\r\n    &lt;div class=\"hidden-xs-up\"&gt;\r\n      &lt;input type=\"file\" id=\"imageUploadFile\" \/&gt;\r\n    &lt;\/div&gt;\r\n    &lt;div class=\"text-xs-right\"&gt;\r\n      &lt;button class=\"btn btn-link\"&gt;Cancel&lt;\/button&gt;\r\n      &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Save&lt;\/button&gt;\r\n    &lt;\/div&gt;  \r\n  &lt;\/form&gt;\r\n&lt;\/script&gt;<\/code><\/pre>\n<figure id=\"post-252362\" class=\"align-none media-252362\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/new-blog-post.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/new-blog-post.png 1792w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/new-blog-post-300x185.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/new-blog-post-768x473.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/new-blog-post-1024x631.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Enabling admin to edit multiple pages of the site will require us to structure our site generation differently. Every time a change is made to the site title and info, we need to propagate that to both the homepage and the blog.<\/p>\n<p>First, we create template partials for our site nav that we can include in each of the page templates.<\/p>\n<pre rel=\"Template\"><code class=\"language-javascript\">&lt;script type=\"text\/x-jsrender\" id=\"siteNav\"&gt;\r\n  &lt;nav class=\"navbar navbar-static-top navbar-dark bg-inverse\"&gt;\r\n    &lt;a class=\"navbar-brand pr-2\" href=\"#\"&gt;{{&gt;siteTitle}}&lt;\/a&gt;\r\n    &lt;ul class=\"nav navbar-nav\"&gt;\r\n      &lt;li class=\"nav-item{{if active=='index'}} active{{\/if}}\"&gt;\r\n        &lt;a class=\"nav-link\" href=\"{{&gt;navPath}}index.html\"&gt;Home {{if active=='index'}}&lt;span class=\"sr-only\"&gt;(current)&lt;\/span&gt;{{\/if}}&lt;\/a&gt;\r\n      &lt;\/li&gt;\r\n      &lt;li class=\"nav-item{{if active=='blog'}} active{{\/if}}\"&gt;\r\n        &lt;a class=\"nav-link\" href=\"{{&gt;navPath}}blog.html\"&gt;Blog {{if active=='blog'}}&lt;span class=\"sr-only\"&gt;(current)&lt;\/span&gt;{{\/if}}&lt;\/a&gt;\r\n      ...<\/code><\/pre>\n<pre rel=\"Template\"><code class=\"language-javascript\">&lt;body&gt;\r\n  {{include tmpl='siteNav' \/}}\r\n  ...<\/code><\/pre>\n<p>When our admin clicks the new post button, they should be presented with our edit form. We can create a function to do just that and attach it to a click event on the button.<\/p>\n<p>Additionally, we want to be able to add images to our blog posts. In order to do that, we need to add a custom image upload window to our rich text editor with some configuration settings.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">function editPost(postData) {\r\n  $('.container').append($.render.editBlogPost(postData));\r\n  initRichTextEditor({\r\n    toolbar: 'undo redo | styleselect | bold italic | bullist numlist | link addImage',\r\n    setup: function(editor) {\r\n      editor.addButton('addImage', {\r\n        text: 'Add Image',\r\n        icon: false,\r\n        onclick: function() {\r\n          \/\/ Open window\r\n          editor.windowManager.open({\r\n            title: 'Add Image',\r\n            body: [{\r\n              type: 'button',\r\n              name: 'uploadImage',\r\n              label: 'Select an image to upload',\r\n              text: 'Browse',\r\n              onclick: function(e) {\r\n                $('#imageUploadFile').click();\r\n              },\r\n              onPostRender: function() {\r\n                addImageButton = this;\r\n              }\r\n            }, {\r\n              type: 'textbox',\r\n              name: 'imageDescription',\r\n              label: 'Image Description'\r\n            }],\r\n            buttons: [{\r\n              text: 'Cancel',\r\n              onclick: 'close'\r\n            }, {\r\n              text: 'OK',\r\n              classes: 'widget btn primary first abs-layout-item',\r\n              disabled: true,\r\n              onclick: 'close',\r\n              id: 'addImageButton'\r\n            }]\r\n          });\r\n        }\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n$('body').on('click', '#addImageButton', function() {\r\n  if ($(this).hasClass('mce-disabled')) {\r\n    alert('Please select an image');\r\n  } else {\r\n    var fileUploadData,\r\n      extension = 'jpg',\r\n      mimeType = $('#imageUploadFile')[0].files[0].type; \/\/ You can get the mime type\r\n    if (mimeType.indexOf('png') != -1) {\r\n      extension = 'png';\r\n    }\r\n    if (mimeType.indexOf('gif') != -1) {\r\n      extension = 'gif';\r\n    }\r\n    var filepath = 'img\/blog\/' + ((new Date().getMonth()) + 1) + '\/' + Date.now() + '.' + extension;\r\n\r\n    upload({\r\n      Key: filepath,\r\n      Body: $('#imageUploadFile').prop('files')[0],\r\n      ACL: 'public-read'\r\n    }).done(function() {\r\n      var bucketUrl = 'http:\/\/serverless-cms.s3-website-us-east-1.amazonaws.com\/';\r\n      tinyMCE.activeEditor.execCommand('mceInsertRawHTML', false, '&lt;p&gt;&lt;img src=\"' + bucketUrl + filepath + '\" alt=\"' + $('.mce-textbox').val() + '\" \/&gt;&lt;\/p&gt;');\r\n      $('#imageUploadFile').val();\r\n      tinyMCE.activeEditor.windowManager.close();\r\n    });\r\n  }\r\n});<\/code><\/pre>\n<p>The above code will place an <b>Add Image<\/b> button into the rich text editor controls which will open a modal for admin to choose an image to upload. When admin clicks <b>Browse<\/b>, we have added a click trigger to the hidden file input in the edit form.<\/p>\n<figure id=\"post-252363\" class=\"align-none media-252363\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/add-image.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/add-image.png 780w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/add-image-300x154.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/add-image-768x394.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Once they have selected an image to add to the post, clicking <b>OK<\/b> to close the window will also upload the image to S3 then insert the image at the cursor location in the rich text editor.<\/p>\n<figure id=\"post-252364\" class=\"align-none media-252364\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/blog-burger.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/blog-burger.png 800w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/blog-burger-300x195.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/blog-burger-768x500.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Next, we need to save the blog post. To accomplish this, we will combine our form data with a template to render HTML and upload to S3. There is a template for the blog and the individual post itself. We also need to store the post data so that the admin can see a list of posts and make edits.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">$('body').on('submit', '#form-blog', function(e) {\r\n  e.preventDefault();\r\n  var updateBlogPosts = $.Deferred();\r\n  if ($(this).attr('data-post-id') === '') {\r\n    postId = Date.now();\r\n  } else {\r\n    postId = $(this).attr('data-post-id');\r\n  }\r\n  if (!adminData.posts) {\r\n    adminData.posts = [];\r\n  }\r\n  var postUrl = 'posts\/' + ($('#title').val().toLowerCase().replace(\/[^\\w\\s]\/gi, '').replace(\/\\s\/g, '-')) + '.html';\r\n  var postTitle = $('#title').val();\r\n  var postContent = tinyMCE.activeEditor.getContent({\r\n    format: 'raw'\r\n  });\r\n  adminData.posts.push({\r\n    url: postUrl,\r\n    title: postTitle,\r\n    excerpt: $(postContent)[0].innerText\r\n  });\r\n  var uploads = generateHTMLUploads('blog');\r\n  uploads.push(generateAdminDataUpload());\r\n\r\n  var postHTML = '&lt;!DOCTYPE html&gt;' + $.render['blogPostTemplate']($.extend(adminData, {\r\n    active: 'blog',\r\n    title: postTitle,\r\n    content: postContent,\r\n    navPath: '..\/'\r\n  }));\r\n\r\n  var fileHTML = new File([postHTML], postUrl, {\r\n    type: \"text\/html\",\r\n    lastModified: new Date()\r\n  });\r\n  uploads.push(upload({\r\n    Key: postUrl,\r\n    Body: postHTML,\r\n    ACL: 'public-read',\r\n    ContentDisposition: 'inline',\r\n    ContentType: 'text\/html'\r\n  }))\r\n  $.when.apply($, uploads).then(function() {\r\n    loadPage('adminBlog');\r\n  });\r\n});<\/code><\/pre>\n<p>In our admin blog page, we will list our published posts.<\/p>\n<figure id=\"post-252365\" class=\"align-none media-252365\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/blog-post-list.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/blog-post-list.png 870w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/blog-post-list-300x208.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/blog-post-list-768x533.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<pre rel=\"Template\"><code class=\"language-javascript\">&lt;script type=\"text\/x-jsrender\" id=\"adminBlog\"&gt;\r\n  {{include tmpl='adminNav' \/}}\r\n  &lt;div id=\"blogPosts\"&gt;\r\n    &lt;h3 class=\"py-2\"&gt;Blog Posts&lt;\/h3&gt;\r\n    &lt;button id=\"newPostButton\" class=\"btn btn-primary my-1\"&gt;+ New Post&lt;\/button&gt;\r\n    {{if posts}}\r\n      &lt;div class=\"container p-0\"&gt;\r\n        &lt;ul class=\"list-group d-inline-block\"&gt;\r\n          {{for posts}}\r\n            &lt;li class=\"list-group-item\"&gt;\r\n              &lt;span class=\"pr-3\"&gt;{{&gt;title}}&lt;\/span&gt;\r\n              &lt;a href=\"..\/{{&gt;url}}\" target=\"_blank\" class=\"pl-3 float-xs-right\"&gt;view&lt;\/a&gt;\r\n              &lt;a href=\"#\" data-id=\"{{:#getIndex()}}\" data-url=\"{{&gt;url}}\" class=\"edit-post pl-3 float-xs-right\"&gt;edit&lt;\/a&gt;\r\n            &lt;\/li&gt;\r\n          {{\/for}}\r\n        &lt;\/ul&gt;\r\n      &lt;\/div&gt;\r\n    {{\/if}}\r\n  &lt;\/div&gt;\r\n&lt;\/script&gt;<\/code><\/pre>\n<p>Finally, we will expand our new post click handler to handle editing posts by loading the post data into the form template.<\/p>\n<pre rel=\"jQuery\"><code class=\"language-javascript\">$('body').on('click', '#newPostButton, .edit-post', function(e) {\r\n  e.preventDefault();\r\n  $('#blogPosts').remove();\r\n  if ($(this).is('#newPostButton')) {\r\n    editPost({});\r\n  } else {\r\n    var postId = $(this).attr('data-id');\r\n    var postUrl = $(this).attr('data-url');\r\n    $('&lt;div \/&gt;').load('..\/' + postUrl, function() {\r\n      editPost({\r\n        id: postId,\r\n        title: $(this).find('h1').text(),\r\n        content: $(this).find('#content').html()\r\n      });\r\n    });\r\n  }\r\n});<\/code><\/pre>\n<h3>Next Steps<\/h3>\n<p>Obviously, this is a basic example and is missing a lot of key functionality, like the ability to have draft posts, delete posts and pagination.<\/p>\n<p>As the site grows in scope, generating batches of HTML files on the client side will become burdensome and unreliable. However, we can keep our architecture serverless by offloading the site generation to <a href=\"https:\/\/aws.amazon.com\/lambda\/\">AWS Lambda<\/a> and create microservices for updating site info and managing blog posts.<\/p>\n<p>Managing our site data structure by updating flat JSON files stored on S3 is inexpensive and can lend itself to easily setting up backups and restoration. However, for projects that are more than a simple blog or marketing site, it is possible to use <a href=\"https:\/\/aws.amazon.com\/dynamodb\/\">AWS Dynamo DB<\/a> to store data, which is also supported by the <a href=\"https:\/\/aws.amazon.com\/sdk-for-browser\/\">AWS SDK for JavaScript<\/a> in the Browser.<\/p>\n<p>A blog is just one example of something that can be built in this way. The rise of Serverless Web Application Architectures (aka Backend as a Service) makes it possible for the front end to control both the user and authoring experience, and craft web products and content entirely from to start to finish. <\/p>\n<p>It is an exciting time to be building things on the web.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>In our previous proof-of-concept demo, we built a bare bones admin for generating a web page with the ability to edit some text on the page and set the site title and description. For this next demo, we build on our example and add rich text editing and image upload capabilities.<\/p>\n","protected":false},"author":247082,"featured_media":249866,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1023,425,1024,1025],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252357"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/247082"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252357"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252357\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/249866"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252357"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252357"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252357"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252092,"date":"2017-03-07T06:19:29","date_gmt":"2017-03-07T13:19:29","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252092"},"modified":"2017-03-07T17:44:47","modified_gmt":"2017-03-08T00:44:47","slug":"document-outline-dilemma","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/document-outline-dilemma\/","title":{"rendered":"The Document Outline Dilemma"},"content":{"rendered":"<p>For the past few weeks there has been lots of talk about HTML headings in web standards circles. Perhaps you've seen some of the blog posts, tweets, and GitHub issue threads. Headings have been part of HTML <a href=\"http:\/\/info.cern.ch\/hypertext\/WWW\/MarkUp\/Tags.html#15\">since the very first websites at CERN<\/a>, so it might be surprising to find them controversial 25 years later. I'm going to quickly summarize <em>why<\/em> they are still worth discussing, with plenty of links to other sources, before adding my own opinions to the mix. If you're up-to-date on the debate, you can <a href=\"https:\/\/css-tricks.com\/document-outline-dilemma\/#the-bigger-dilemma\">jump straight to the \"Bigger Dilemma\" section<\/a>.<\/p>\n<p><!--more--><\/p>\n<figure id=\"post-252473\" class=\"align-none media-252473\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/h.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/h.png 800w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/h-300x188.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/h-768x480.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<h3>The Story So Far\u2026<\/h3>\n<p>HTML uses headings (<code>&lt;h1&gt;<\/code>, <code>&lt;h2&gt;<\/code>, <code>&lt;h3&gt;<\/code>, and so on until <code>&lt;h6&gt;<\/code>) to mark up titles for a subsequent section of text. The numbers (or <em>levels<\/em>) of the heading elements are supposed to logically correspond to a tree-like structure of nested sections, like books that have chapters with sections and sub-sections.<\/p>\n<p>However, HTML markup did not originally have a way to reflect this nested logical structure in a nested DOM structure.  Unlike nested lists, nested headings weren't actually <em>nested<\/em> in elements that defined the parent sections.  Heading elements of different levels were all sibling elements, and also siblings to the paragraphs they provide a title for.  The \"sections\" were a purely logical structure, not a DOM structure, containing all markup that starts with a heading and continued until you reached another heading of the same or higher level.<\/p>\n<p>As <a href=\"http:\/\/bkardell.com\/blog\/On-Headings.html\">Brian Kardell<\/a> points out, this made perfect sense in the \"flat earth markup\" of early HTML, where tags were just typographic instructions inserted into a flow of text.  The concept of an HTML page as a tree structure came later, when so-called Dynamic HTML needed a document object model (DOM) to describe that flow of text and tags as a data structure that scripts could access.<\/p>\n<p>Not to spoil the ending, but HTML now has a <code>&lt;section&gt;<\/code> element which can (optionally) be used to create a nested DOM structure to match your logical heading structure.  The <code>&lt;main&gt;<\/code>, <code>&lt;header&gt;<\/code>, <code>&lt;footer&gt;<\/code>, <code>&lt;article&gt;<\/code>, <code>&lt;aside&gt;<\/code>, and <code>&lt;nav&gt;<\/code> elements all also help create a nested document structure that is reflected in DOM nesting.<\/p>\n<p>But there was another problem with the originally heading model: it couldn't easily be remixed in template systems.  Because the heading level is expressed by the tag name (<code>&lt;h1&gt;<\/code> versus <code>&lt;h4&gt;<\/code>), rather than by the context in which it's used, you can't easily re-use the same content in a different context where the level would be different.  For example, a blog might use the same set of article headlines and intro paragraphs in many contexts: as stand-alone blog post pages; as abstracts on a main index page; or as abstracts on an archive page which also has headings dividing the list by month or year.  What heading level should the article title be?<\/p>\n<p>Early proposals for sectioning elements also included a level-free <code>&lt;h&gt;<\/code> or <code>&lt;heading&gt;<\/code> element, that would be assigned a level based on context.  (In fact, the <a href=\"https:\/\/lists.w3.org\/Archives\/Public\/www-talk\/1991SepOct\/0003.html\">idea goes back to the earliest discussions of HTML<\/a>.)  But when sectioning elements were finally added to HTML, they were designed to work with the existing heading elements.  However, the specifications defined a \"Document Outline Algorithm\" which would re-calculate the heading levels for the existing numbered heading tags, based on section nesting.  <\/p>\n<p>With the Document Outline Algorithm, you could (theoretically) use an <code>&lt;h1&gt;<\/code> for all headings, and the browser would figure out the level of each heading based on its nesting within <code>&lt;article&gt;<\/code>, <code>&lt;section&gt;<\/code>, and related elements.  The outline algorithm would ensure that the top heading in the page would be a level 1, and that all other headings would be nested in a consistent order, with no levels skipped.  The <a href=\"https:\/\/html.spec.whatwg.org\/multipage\/semantics.html#headings-and-sections\">WHATWG version of the outline<\/a> also defines rules for dealing with multi-part headings in <code>&lt;hgroup&gt;<\/code> elements, so the sub-headings do not create sub-sections. (The W3C version of HTML 5 instead declared <code>&lt;hgroup&gt;<\/code> obsolete: multi-part headings should be marked up as paragraphs inside a section <code>&lt;header&gt;<\/code> or spans inside the main heading element.)<\/p>\n<p>Browsers modified their default styles so that headings inside of nested sections would have progressively smaller font sizes (just like how the default style for <code>&lt;h3&gt;<\/code> has smaller font than <code>&lt;h2&gt;<\/code>, which is smaller than <code>&lt;h1&gt;<\/code>).  But they didn't change the way they exposed heading levels to the accessibility APIs that are used by screen readers.  And screen-reader users are the only ones who really experience heading levels as part of the user interface.  <\/p>\n<p>Screen readers announce the numbered level when reading headings, and they allow users to quickly scan through headings of a given level.  According to a <a href=\"http:\/\/webaim.org\/projects\/screenreadersurvey5\/#finding\">WebAIM survey<\/a>, two-thirds of screen-reader users scan headings as the first step of trying to find information on a long web page.   For these users, the only effect of the Document Outline Algorithm was that some new pages (eagerly adopting the new spec) were presented as flat lists of level-one headings, with no structure at all.<\/p>\n<p>Why won't browsers use the outline algorithm for accessible heading levels? Many arguments have been made, but the most compelling one is that it could alter the way existing web sites are presented to screen-reader users, and it's not clear that those alterations would mostly be positive.<\/p>\n<p>Adrian Roselli has compiled a good overview of the discussions about the problems caused by the unimplemented outline specification, in <a href=\"http:\/\/adrianroselli.com\/2016\/08\/there-is-no-document-outline-algorithm.html\">\"There is No Document Outline\"<\/a>. The <a href=\"http:\/\/w3c.github.io\/html\/sections.html#creating-an-outline\">latest W3C HTML specs<\/a> only use the document outline algorithm to suggest how authors should synchronize their numbered heading tags with their nested sectioning elements.  The <a href=\"https:\/\/html.spec.whatwg.org\/multipage\/semantics.html#headings-and-sections\">WHATWG HTML specs<\/a> still have the full outline algorithm described as a normative requirement, although there is an <a href=\"https:\/\/github.com\/whatwg\/html\/issues\/83\">open issue<\/a> where many suggest removing it altogether.  As WHATWG spec editor Domenic Denicola <a href=\"https:\/\/github.com\/whatwg\/html\/issues\/83#issuecomment-136883781\">puts it<\/a>:<\/p>\n<blockquote><p>At some point we cannot claim that user agents are broken. They are instead rejecting our change request. <\/p><\/blockquote>\n<h3>The Current Debate<\/h3>\n<p>The latest flurry of debate was sparked when Jonathan Neal filed <a href=\"https:\/\/github.com\/w3c\/html\/issues\/774\">an issue on the W3C HTML spec<\/a> re-proposing the elusive <code>&lt;h&gt;<\/code> element.  The key to the proposal is that an <code>&lt;h&gt;<\/code> heading element could have a nesting level defined by sectioning elements, while still allowing the existing numbered heading tags to have the level determined by their tag name.  Authors would opt in to the outline algorithm by using the new tag.  Until browsers supported <code>&lt;h&gt;<\/code>, a JavaScript (or server-side) polyfill could calculate the heading levels and add them into the DOM with ARIA attributes: <code>role=\"heading\"<\/code> and <code>aria-level=\"3\"<\/code> tell the browser to treat an element as a level-3 heading for accessibility purposes, regardless of tag name or nesting, so the page author ends up fully responsible for any heading confusion.<\/p>\n<p>There's a lot of good discussion on that issue page, and in longer linked blog posts.  The main argument in favour of adding a new element is that it wouldn't change the meaning of existing content.  In addition to Neal's arguments on GitHub, <a href=\"http:\/\/bkardell.com\/blog\/On-Headings.html\">Brian Kardell's proposal of a custom element and polyfill<\/a> approaches the issue from this point of view.  On the other side, <a href=\"https:\/\/jakearchibald.com\/2017\/do-we-need-a-new-heading-element\/\">Jake Archibald argues for fixing the elements we already have<\/a>:<\/p>\n<blockquote><p>The work needed to fix the existing web is a subset of creating a new element that does the same thing, but doesn't fix the existing web.<\/p><\/blockquote>\n<p>In other words, if the outline algorithm is so great that it's worth a new element, why not just implement the outline algorithm for existing elements instead?<\/p>\n<p>If you're still having a hard time understanding why no one can agree about what to do with something as seemingly simple as HTML heading, Brian Kardell has <a href=\"https:\/\/bkardell.com\/blog\/Whats-The-Deal-With-That.html\">helpfully stripped away all the technical details in a second post<\/a>.<\/p>\n<h3 id=\"the-bigger-dilema\">The Bigger Dilemma<\/h3>\n<p>There is a hidden assumption below all the discussion of how to create a document outline for a web page.  Discussing <em>how<\/em> to create the document outline assumes that the structure of a web page <em>can<\/em> be defined as an outline: as a tree where the nesting level of a heading defines its importance.  <\/p>\n<p>I personally don't think a simple nested outline can capture all the levels of meaning that are conveyed by HTML heading levels, as they are used on the web.  I'll get to why in a bit.  But there's a reason that all the discussion has focused on this type of outline: because this is the type of outline screen readers expect.<\/p>\n<p>For most web users, and web authors, the document outline is irrelevant.  They do not know and do not care how the headings and sections are nested, they only see what's on the screen.  And what's on the screen, in most web pages today, is a two-dimensional layout of content, some of it nested, but some of it independent, with each part given implied importance and relationships by layout, colors, and typography.<\/p>\n<p>So, the question we should be debating isn't \"How should we assign outline levels to headings?\"  It's: \"How can we summarize the meaningful structure of a web page, so that people using assistive technology can easily find content?\"<\/p>\n<p>I'd personally love it if browsers added a feature, for all users, to show the outline as a table of contents, and make it possible to quickly navigate to headings with the keyboard.  Maybe if they did, more web authors would pay attention to what their outline looked like.  But the browsers don't, and so most authors don't.<\/p>\n<p>If you do want to see what your website's heading outline looks like\u2014and how it would theoretically look like using the document outline algorithm\u2014you can use the <a href=\"https:\/\/validator.w3.org\/nu\/?showoutline=yes\">W3C Nu HTML validator service<\/a>, with the Show Outlines option checked.<\/p>\n<p>As it currently stands, the  document outline is only of daily importance to screen-reader users, and those users are currently used to dealing with the mess of erratic heading levels in web pages.  I'm sure many screen-reader users would appreciate heading levels being fixed.  But fixing headings for screen-reader users doesn't just mean creating a tree of neatly nested headings with no skipped level numbers.  It means creating a heading structure that accurately reflects the <em>meaning<\/em> intended by the creators of the web page, the meaning that visual users infer from style and layout.  And in order to do that, we need to consider how meaning is communicated to all the users of web pages who aren't hearing each heading announced with a numerical level.<\/p>\n<h3>A Language is Defined by Those Who Speak It<\/h3>\n<p>HTML is unique among computer code languages, because it defines so many constructs without assigning them specific behavior.  Meaning in computer code is known as the <em>semantic<\/em> side of the language, as opposed to the syntactic structures of its grammar.  But in most programming languages, the semantic aspects of built-in objects are still strongly tied to instructions for the computer.  In JavaScript, <code>new Date()<\/code> and <code>new Promise()<\/code> have the same syntax\u2014calling a constructor function\u2014but your JS interpreter understands the semantic distinction between the two object names, and behaves very differently for each.<\/p>\n<p>In contrast, an HTML <code>&lt;article&gt;<\/code> or a <code>&lt;section&gt;<\/code> doesn't come with any instructions for what your web browser should do with it (other than the un-implemented outline algorithm).  Instead, the difference between the two is all about the meaning of the content, a way to provide machine-readable annotations for the information communicated from one human being, the website author, to another: the reader. <\/p>\n<p>Meaning in human communication is difficult to define, and never static.  But most importantly of all, it is defined by the people who use the language.  Dictionaries compile summaries of the meanings that are used, but they don't restrict them.  If people start using words in new and different ways, the dictionary (if it's any good) will update their definitions.  <\/p>\n<p>When I was in grade school, a librarian showed off the multi-volume Oxford English Dictionary by introducing us to a selection of wild and crazy words.  <i>Google<\/i>* was the name for the number that would be written as a 1 followed by 100 zeros (10<sup>100<\/sup>, in scientific notation).  Crazy, right?  Who would ever need to know a word like that?  But times change.  In 2006, the OED added a new definition, <i>google<\/i> as a verb (meaning to use the Google search engine), which might be used a google times more often than the number quantity in modern English conversation.<\/p>\n<p>*<strong>Correction:<\/strong> As Mark notes in the comments, the correct spelling of the word I was shown all those years ago is actually <a href=\"https:\/\/en.oxforddictionaries.com\/definition\/googol\"><i>googol<\/i><\/a>. And now I don't know what to believe anymore.<\/p>\n<p>When it comes to the meaning of HTML tags, the equivalent of dictionaries are the two competing HTML specifications (<a href=\"https:\/\/html.spec.whatwg.org\/multipage\/\">WHATWG<\/a> and <a href=\"http:\/\/w3c.github.io\/html\/index.html#contents\">W3C<\/a>).  And just like dictionaries, they both started out as efforts to describe the language as it was currently used.  <\/p>\n<p>The fact that there are two different HTML specifications make discussing changes more difficult, but it also strongly highlights the collective, consensus-based nature of HTML as a language.  There is no one defining document setting the rules for HTML.  HTML is defined by the people who write it and by the web browsers that interpret it.<\/p>\n<p>But it's not that simple, of course.  HTML isn't only used by human beings, it is also used by computers.  And computers aren't very good about handling fuzzy and shifting meaning.<\/p>\n<p>Whenever you ask a computer to do something with your content\u2014like, for example, tell the screen reader what headings there are in this website and how they are organized\u2014it needs clear and explicit rules for how to do so.  If some web authors are using heading tags in one way, and some authors are using the same tags with different meaning, your browser is going to need additional rules to figure out which is which\u2014or else it's going to get it wrong, at least some of the time.<\/p>\n<p>The driving force of the web standards movement was a hope that all web browsers would react to web page code in (approximately) the same way.  And that means defining new features in standards documents before they can be used on the web.  Instead of being descriptive, like a dictionary (defining how things are), they are prescriptive, like a legal code (defining how things <em>should<\/em> be).  <\/p>\n<p>The slow pace of developing standards, with lots of input from browser teams, is supposed to ensure that the end result is both prescriptive and descriptive, at least for the parts of the language that describe browser behavior.  But it doesn't always work.  There are lots of details in both specs that don't match actual browser behavior. The W3C's issue repo even has a comfortingly-named <a href=\"https:\/\/github.com\/w3c\/html\/issues?q=is%3Aissue+is%3Aopen+label%3A%22match+reality+better%22\">Match Reality Better<\/a> label aimed at fixing these bits.<\/p>\n<p>And that's just for the features that describe what <em>browsers<\/em> should do.  What about all the HTML elements that define the semantics of content?  Shouldn't those \"match reality better,\" too?<\/p>\n<p>A few months ago <a href=\"https:\/\/github.com\/w3c\/html\/issues\/606\">Sara Soueidan suggested to the W3C HTML working group<\/a> that maybe the <code>&lt;address&gt;<\/code> element should be valid for all addresses (and not just page-owner contact addresses).  Many people before her have certainly made the same complaint.  But this time, something happened.  Following a little rough data scraping, which suggested that actual usage in the wild wasn't restricted to the original definition, the definition <a href=\"https:\/\/w3c.github.io\/html\/grouping-content.html#the-address-element\">in the W3C specs was updated<\/a>.<\/p>\n<p>Does it make any difference? Maybe not. Browsers don't do anything with <code>&lt;address&gt;<\/code> except make it italic.  And <a href=\"https:\/\/html.spec.whatwg.org\/multipage\/semantics.html#the-address-element\">the WHATWG HTML specs<\/a> still have the old definition.  But it means the spec comes a little closer to describing the way code is actually used on the web, not how someone once imagined it might be.<\/p>\n<p>Which brings us back, at last, to headings: How are they actually used on the web?  And is it even possible to define a prescriptive set of instructions, for web authors and for web browsers, that ensure that the meaning of headings can be correctly communicated to screen readers (and potentially, other software)?<\/p>\n<h3>The Many Meanings of Headings<\/h3>\n<p>What is a heading?  It's a short title for a section of a document.  The heading for this section is \"The Many Meanings of Headings.\"  So far, so good.<\/p>\n<p>But all headings are not created equal.<\/p>\n<p>There are big headings:<\/p>\n<figure>\n<h1>A Big Heading<\/h1>\n<\/figure>\n<p>and there are much smaller headings:<\/p>\n<figure>\n<h6>A heading so small it's barely a heading<\/h6>\n<\/figure>\n<p>If you inspect the code, you'll see that one of those is an <code>&lt;h1&gt;<\/code> and the other is an <code>&lt;h6&gt;<\/code>.  Both of them are wrapped in <code>&lt;figure&gt;<\/code> tags, which\u2014according to the document outline algorithm\u2014<a href=\"http:\/\/w3c.github.io\/html\/sections.html#sectioning-roots\">should encapsulate them<\/a> and keep them from messing up the main document outline.  But we all know by now that the document outline algorithm isn't actually used by web browsers, so apologies to any screen reader users who ended up halfway down the article by mistake.<\/p>\n<p>For anyone reading this article with their eyes in a modern browser, the difference between the two headings is communicated by the font size, and possibly the font style.  The exact details will depend on whether you're looking at the website's CSS or your browser's reading mode CSS, and on how recently Chris has changed CSS-Tricks' styles.  But unless Chris has <em>really<\/em> messed things up, it will be pretty clear to visual readers that the <code>&lt;h1&gt;<\/code> is bigger and more important than the <code>&lt;h6&gt;<\/code>.  We could change the CSS so they looked identical, but at this point it is hard to understand why you would want to do that.  If you wanted them to look the same, why not use the same tag name?<\/p>\n<p>So let's go a step further, and put those two headings together with some filler text in between.  Here's one way we could do that, with a main heading, some text, then a sub-heading and some more text:<\/p>\n<p data-height=\"388\" data-theme-id=\"1\" data-slug-hash=\"YZXWPY\" data-default-tab=\"html,result\" data-user=\"AmeliaBR\" data-embed-version=\"2\" data-pen-title=\"Heading outlines example #1\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/AmeliaBR\/pen\/YZXWPY\/\">Heading outlines example #1<\/a> by Amelia Bellamy-Royds (<a href=\"http:\/\/codepen.io\/AmeliaBR\">@AmeliaBR<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Here's another way to arrange the same headings and paragraphs:<\/p>\n<p data-height=\"377\" data-theme-id=\"1\" data-slug-hash=\"PpqzPy\" data-default-tab=\"html,result\" data-user=\"AmeliaBR\" data-embed-version=\"2\" data-pen-title=\"Heading outlines example #2\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/AmeliaBR\/pen\/PpqzPy\/\">Heading outlines example #2<\/a> by Amelia Bellamy-Royds (<a href=\"http:\/\/codepen.io\/AmeliaBR\">@AmeliaBR<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>And here's a third:<\/p>\n<p data-height=\"373\" data-theme-id=\"1\" data-slug-hash=\"OpVXMa\" data-default-tab=\"html,result\" data-user=\"AmeliaBR\" data-embed-version=\"2\" data-pen-title=\"Heading outlines example #3\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/AmeliaBR\/pen\/OpVXMa\/\">Heading outlines example #3<\/a> by Amelia Bellamy-Royds (<a href=\"http:\/\/codepen.io\/AmeliaBR\">@AmeliaBR<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>If you're only looking at the result tab of those pens, and using your eyes to do so, you might be forgiven for thinking the second and the third are identical, and very different from the first.  Visually, both example #2 and example #3 have a main section with a big heading and a sidebar section with a minor heading.  The difference is that one uses <code>&lt;div&gt;<\/code> elements to create the structure and the other uses HTML sectioning elements.<\/p>\n<p>If you've read this far, you probably won't be too surprised to discover that these two examples create different structures when processed by the HTML document outline algorithm.  Under that algorithm, divs are ignored, so Example #2 would be treated the exact same as example #1: a main heading, some paragraph text, then a sub-heading and another paragraph.  The <a href=\"https:\/\/validator.w3.org\/nu\/?showsource=yes&showoutline=yes&doc=http%3A%2F%2Fcodepen.io%2FAmeliaBR%2Fdebug%2F7ece21c76bd09d3604bda2ec846d5b2b#outline\">outline<\/a> does not indicate at all that the sidebar is a separate, parallel structure to the main article:<\/p>\n<figure style=\"text-align: left;\">\n<ol style=\"list-style-type: upper-alpha;\">\n<li>\n      <span class=\"heading\">A big heading<\/span><\/p>\n<ol style=\"list-style-type: lower-alpha;\">\n<li>\n          <span class=\"heading\">A heading so small it's barely a heading<\/span>\n        <\/li>\n<\/ol>\n<\/li>\n<\/ol>\n<\/figure>\n<p>In contrast, if I <a href=\"https:\/\/validator.w3.org\/nu\/?showsource=yes&showoutline=yes&doc=http%3A%2F%2Fcodepen.io%2FAmeliaBR%2Fdebug%2F2898324c3e9843a67bf60b55b0b8d3f2#outline\">run the outline algorithm on Example #3<\/a>, It tells me that there is an unlabelled main document (no top-level heading), with two equal sibling child elements (both headings treated as level-2).  So now it clearly conveys the parallel structure, but not the difference in heading importance:<\/p>\n<figure style=\"text-align: left;\">\n<ol style=\"list-style-type: upper-alpha;\">\n<li>\n       [body element with no heading]<\/p>\n<ol style=\"list-style-type: lower-alpha;\">\n<li><span class=\"heading\">A big heading<\/span><\/li>\n<li><span class=\"heading\">A heading so small it's barely a heading<\/span><\/li>\n<\/ol>\n<\/li>\n<\/ol>\n<\/figure>\n<p>I don't think <em>either<\/em> of these outlines accurately describes that visual layout.  Neither does the outline based on tag names, which not only treats the sidebar as nested in the main article, but also gets distracted by my use of <code>&lt;h6&gt;<\/code> in a page without any <code>&lt;h2\/3\/4\/5&gt;<\/code> elements.<\/p>\n<p>If I was asked to describe this layout to someone, I would tell them <em>two<\/em> things:<\/p>\n<ul>\n<li>there are two, side-by-side sections;<\/li>\n<li>one of those sections is more important than the other.<\/li>\n<\/ul>\n<p>The relative importance of the components is a separate piece of information from the nesting structure\u2014or lack thereof, in this simple example.  In a more complex example, you'll have some chunks of content with meaningful nested headings (like this article), and other chunks (like the sidebars, or the comment section below) that have parallel, independent outlines whose inner heading levels are un-related to the ones in the first chunk.  Treating each parallel chunk as equal ignores the relative importance they were given in the markup.  But tacking those extra headings onto the end of the main article, just because there isn't a bigger heading in between, seems somehow worse.<\/p>\n<p>Even when components are nested, they often have an importance level that is independent of the number of sections that surround them.  I write books on SVG for O'Reilly.  The markup we use to create the books is converted to HTML.  The book (level-1 heading) has chapters (level-2 headings) with sections (level-3 headings) that sometimes have sub-sections or even sub-sub-sections (level-4 and 5).  But it also has examples, and warning notes, and sidebars, all of which can have their own headings which will be styled identically irrespective of whether that component is in a regular section or a sub-sub-section.  If we used the \u201ccorrect\u201d HTML heading elements, they would have different tag names, depending on the section depth, but would be styled identically.<\/p>\n<p>In web design and in content management, we have two very different ways of talking about the level of a heading: the level of importance, or the level of nesting.  I think that the main reason web standards folks can't agree on an algorithm for turning headings into an outline is because people want an algorithm in which both agree, and they often don't.  <\/p>\n<p>Maybe what's really needed is to stop talking about outlines as if they re-number heading importance levels.  Stop telling web developers they are wrong for using the heading levels that make sense for their content.  Let context define the outline nesting, but don't define outline nesting as if it was interchangeable with tag names.  Ideally, find a way for browsers to communicate to screen readers <em>both<\/em> the nested structure of sections and the raw heading-level numbers, so the screen readers can let their users navigate by nesting structure, while still communicating the relative importance of each heading. <\/p>\n<p>Then focus on the real question: <\/p>\n<blockquote><p>How can we summarize the meaningful structure of a web page, so that people using assistive technology can easily find content?<\/p><\/blockquote>\n<p>My instinct is that the outline that uses sectioning elements is usually better for navigation than sections based only on tag names, but that the details need to be improved.  In particular:<\/p>\n<ul>\n<li>There need to be better <a href=\"https:\/\/github.com\/w3c\/html\/issues\/794\">rules for collapsing un-named sections<\/a>, maybe treating them as ARIA groups instead of as additional nesting levels in the outline.<\/li>\n<li>There may need to be better rules for handling multi-part headings grouped by an <a href=\"https:\/\/html.spec.whatwg.org\/multipage\/semantics.html#the-hgroup-element\"><code>&lt;hgroup&gt;<\/code><\/a> or <code>&lt;header&gt;<\/code> element.<\/li>\n<li>And there probably need to be better rules about which elements (if any) <a href=\"https:\/\/github.com\/w3c\/html\/issues\/806\">encapsulate their child headings<\/a> from the main outline altogether.<\/li>\n<\/ul>\n<h3>Show Me the Data<\/h3>\n<p>But that's just my opinion.  <\/p>\n<p>In order to get browsers or screen-readers to change their behavior\u2014let alone to convince all the hundreds of thousands of web developers who are using headings in their content\u2014we are going to need more than hunches and opinions.  As <a href=\"https:\/\/github.com\/w3c\/html\/issues\/774#issuecomment-278401013\">I argued early on<\/a>, we need some data.  Both <a href=\"https:\/\/jakearchibald.com\/2017\/do-we-need-a-new-heading-element\/\">Jake<\/a> and <a href=\"https:\/\/bkardell.com\/blog\/Whats-The-Deal-With-That.html\">Brian<\/a> have echoed that call.<\/p>\n<p>But the kind of data we need isn't the kind that can be collected by a web crawler.  We need data about meaning, the kind of meaning that only real human brains can provide.<\/p>\n<p>The HTML sectioning elements have been around for years now.  They aren't theoretical anymore.  They are part of the language that you, web developers, use to communicate.  If you're using sectioning elements, hopefully you have a reason why.  When you select a heading tag, hopefully you have a reason why.  It's time to review the HTML standards to make sure they reflect the reasons and meaning used by most developers.<\/p>\n<p>So, I'm asking you: run your favorite websites (that you built or that you use) through <a href=\"https:\/\/validator.w3.org\/nu\/?showoutline=yes\">the two outline builders in the HTML validator<\/a>.<\/p>\n<ul>\n<li>Do either of the outlines make sense?<\/li>\n<li>Can you make them make sense, with reasonable tweaks to the markup that you can implement with your build systems or component frameworks?<\/li>\n<li>Which outline is better?<\/li>\n<li>What aspects of the document structure cause the most problems?<\/li>\n<\/ul>\n<p>And while we're at it, one more question: <\/p>\n<blockquote><p>How would you, as a web user, like to be able to access and navigate documents based on headings or outlines?<\/p><\/blockquote>\n","protected":false},"excerpt":{"rendered":"<p>For the past few weeks there has been lots of talk about HTML headings in web standards circles. Perhaps you&#8217;ve seen some of the blog posts, tweets, and GitHub issue threads. Headings have been part of HTML since the very first websites at CERN, so it might be surprising to find them controversial 25 years [&hellip;]<\/p>\n","protected":false},"author":223301,"featured_media":252473,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[466,1163,1113,731],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252092"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/223301"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252092"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252092\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/252473"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252092"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252092"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252092"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252034,"date":"2017-03-06T06:07:30","date_gmt":"2017-03-06T13:07:30","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252034"},"modified":"2017-03-09T07:31:29","modified_gmt":"2017-03-09T14:31:29","slug":"introduction-web-audio-api","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/introduction-web-audio-api\/","title":{"rendered":"Introduction to Web Audio API"},"content":{"rendered":"<p>Web Audio API lets us make sound right in the browser. It makes your sites, apps, and games more fun and engaging. You can even build music-specific applications like drum machines and synthesizers. In this article, we'll learn about working with the Web Audio API by building some fun and simple projects.<\/p>\n<p><!--more--><\/p>\n<h3>Getting Started<\/h3>\n<p>Let's do some terminology. All audio operations in Web Audio API are handled inside an <em>audio context<\/em>. Each basic audio operation is performed with audio <em>nodes<\/em> that are chained together, forming an <em>audio routing graph<\/em>. Before playing any sound, you'll need to create this audio context. It is very similar to how we would create a context to draw inside with the <code>&lt;canvas&gt;<\/code> element. Here's how we create an audio context: <\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var context = new (window.AudioContext || window.webkitAudioContext)();<\/code><\/pre>\n<p>Safari requires a webkit prefix to support AudioContext, so you should use that line instead of <code>new AudioContext();<\/code><\/p>\n<p>Normally the Web Audio API workflow looks like this:<\/p>\n<figure id=\"post-252166\" class=\"align-none media-252166\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/workflow.png\" alt=\"Create audio context - srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/workflow.png 1440w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/workflow-300x30.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/workflow-768x77.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/workflow-1024x102.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/> create source -> connect filter nodes -> connect to destination\" \/><\/figure>\n<p>There are three types of sources: <\/p>\n<ol>\n<li>Oscillator - mathematically computed sounds<\/li>\n<li>Audio Samples - from audio\/video files<\/li>\n<li>Audio Stream - audio from webcam or microphone<\/li>\n<\/ol>\n<h3>Let's start with the oscillator<\/h3>\n<p>An oscillator is a repeating waveform. It has a frequency and peak amplitude. One of the most important features of the oscillator, aside from its frequency and amplitude, is the shape of its waveform. The four most commonly used oscillator waveforms are sine, triangle, square, and sawtooth. <\/p>\n<figure id=\"post-252167\" class=\"align-none media-252167\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/waveforms.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/waveforms.png 1448w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/waveforms-300x222.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/waveforms-768x568.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/waveforms-1024x757.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>It is also possible to create custom shapes. Different shapes are suitable for different synthesis techniques and they produce different sounds, from smooth to harsh.<\/p>\n<p>The Web Audio API uses <code>OscillatorNode<\/code> to represent the repeating waveform. We can use all of the above shown waveform shapes. To do so, we have to assign the value property like so:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">OscillatorNode.type = 'sine'|'square'|'triangle'|'sawtooth';<\/code><\/pre>\n<p>You can create a custom waveform as well. You use the <code>setPeriodicWave()<\/code> method to create the shape for the wave, that will automatically set the type to custom. Let's listen how different waveforms produce different sounds:<\/p>\n<p data-height=\"351\" data-theme-id=\"1\" data-slug-hash=\"faf5edb298b9b1426ea4ac9c373511a5\" data-default-tab=\"result\" data-user=\"gregh\" data-embed-version=\"2\" class=\"codepen\"><a href=\"http:\/\/codepen.io\/gregh\/pen\/faf5edb298b9b1426ea4ac9c373511a5\/\">See the Pen.<\/a><\/p>\n<p>Custom waveforms are created using <em>Fourier Transforms<\/em>. If you want to learn more about custom waveform shapes (like how to make a police siren, for example) you can learn it from <a href=\"https:\/\/www.sitepoint.com\/using-fourier-transforms-web-audio-api\/\">this<\/a> good resource.<\/p>\n<h3>Running the oscillator<\/h3>\n<p>Let's try to make some noise. Here's what we need for that:<\/p>\n<ol>\n<li>We have to create a Web Audio API context<\/li>\n<li>Create the oscillator node inside that context<\/li>\n<li>Choose waveform type<\/li>\n<li>Set frequency<\/li>\n<li>Connect oscillator to the destination<\/li>\n<li>Start the oscillator<\/li>\n<\/ol>\n<p>Let's convert those steps into code.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var context = new (window.AudioContext || window.webkitAudioContext)();\r\n\r\nvar oscillator = context.createOscillator();\r\n\r\noscillator.type = 'sine';\r\noscillator.frequency.value = 440;\r\noscillator.connect(context.destination);\r\noscillator.start();<\/code><\/pre>\n<p>Note how we define the audio context. Safari requires the <code>webkit<\/code> prefix, so we make it cross-browser compatible.<\/p>\n<p>Then we create the oscillator and set the type of the waveform. The default value for type is <code>sine<\/code>, so you can skip this line, I just like to add it to make it more clear and easy to update. We set the frequency value to 440, which is the A4 note (which is also the default value). The frequencies of musical notes C0 to B8 are in the range of 16.35 to 7902.13Hz. We will check out an example where we play a lot of different notes later in this article.<\/p>\n<p>Now when we know all of that, let's make the volume adjustable as well. For that we need to create the gain node inside of the context, connect it to the chain, and connect gain to the destination.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var gain = context.createGain();\r\noscillator.connect(gain);\r\ngain.connect(context.destination);\r\n\r\nvar now = context.currentTime;\r\ngain.gain.setValueAtTime(1, now);\r\ngain.gain.exponentialRampToValueAtTime(0.001, now + 0.5);\r\noscillator.start(now);\r\noscillator.stop(now + 0.5);<\/code><\/pre>\n<p>Now you have some knowledge of working with the oscillator, here's a good exercise. <a href=\"http:\/\/codepen.io\/gregh\/pen\/7e39f90b03543a99d863ab7a7bcfc15d\">This Pen<\/a> has the oscillator code setup. Try to make a simple app that changes the volume when you move the cursor up and down your screen, and changes the frequency when you move the cursor left and right.<\/p>\n<h3>Timing of Web Audio API<\/h3>\n<p>One of the most important things in building audio software is managing <em>time<\/em>. For the precision needed here, using the JavaScript clock is not the best practice, because it's simply not precise enough. However the Web Audio API comes with the <code>currentTime<\/code> property, which is an increasing double hardware timestamp, which can be used for scheduling audio playback. It starts at 0 when the audio context is declared. Try running <code>console.log(context.currentTime)<\/code> to see the timestamp.<\/p>\n<p>For example, if you want the Oscillator to play immediately you should run <code>oscillator.start(0)<\/code> (you can omit the 0, because it's the default value). However you may want it to start in one second from now, play for two seconds, then stop. Here's how to do that:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var now = context.currentTime;\r\noscillator.play(now + 1);\r\noscillator.stop(now + 3);<\/code><\/pre>\n<p>There are two methods to touch on here.<\/p>\n<p>The <code>AudioParam.setValueAtTime(value, startTime)<\/code> method schedules change of the value at the precise time. For example, you want to change frequency value of the oscillator in one second:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">oscillator.frequency.setValueAtTime(261.6, context.currentTime + 1);<\/code><\/pre>\n<p>However, you also use it when you want to instantly update the value, like <code>.setValueAtTime(value, context.currentTime)<\/code>. You can set the value by modifying the value property of the <code>AudioParam<\/code>, but any updates to the value are ignored without throwing an exception if they happen at the same moment as the automation events (events scheduled using <code>AudioParam<\/code> methods).<\/p>\n<p>The <code>AudioParam.exponentialRampToValueAtTime(value, endTime)<\/code> method schedules gradual change of the value. This code will exponentially decrease the volume of the oscillator in one second, which is a good way to stop sound smoothly:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">gain.gain.exponentialRampToValueAtTime(0.001, context.currentTime + 1);<\/code><\/pre>\n<p>We can't use 0 as the value because the value needs to be positive, so we use a very small value instead.<\/p>\n<h3>Creating the Sound class<\/h3>\n<p>Once you stop an oscillator, you cannot start it again. You didn't do anything wrong, it's the feature of the Web Audio API that optimizes the performance. What we can do is to create a sound class that will be responsible from creating oscillator nodes, and play and stop sounds. That way we'll be able to call the sound multiple times. I'm going to use ES6 syntax for this one:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">class Sound {\r\n\r\n  constructor(context) {\r\n    this.context = context;\r\n  }\r\n\r\n  init() {\r\n    this.oscillator = this.context.createOscillator();\r\n    this.gainNode = this.context.createGain();\r\n\r\n    this.oscillator.connect(this.gainNode);\r\n    this.gainNode.connect(this.context.destination);\r\n    this.oscillator.type = 'sine';\r\n  }\r\n\r\n  play(value, time) {\r\n    this.init();\r\n\r\n    this.oscillator.frequency.value = value;\r\n    this.gainNode.gain.setValueAtTime(1, this.context.currentTime);\r\n            \r\n    this.oscillator.start(time);\r\n    this.stop(time);\r\n\r\n  }\r\n\r\n  stop(time) {\r\n    this.gainNode.gain.exponentialRampToValueAtTime(0.001, time + 1);\r\n    this.oscillator.stop(time + 1);\r\n  }\r\n\r\n}<\/code><\/pre>\n<p>We pass the context to the constructor, so we can create all of the instances of the <code>Sound<\/code> class within same context. Then we have the <code>init<\/code> method, that creates the oscillator and all of the necessary filter nodes, connects them, etc. The <code>Play<\/code> method accepts the value (the frequency in hertz of the note it's going to play) and the time when it shall be played. But first, it creates the oscillator, and that happens every time we call the <code>play<\/code> method. The <code>stop<\/code> method exponentially decreases the volume in one second until it stops the oscillator completely. So whenever we need to play the sound again, we create a new instance of the <code>sound<\/code> class and call the play method. Now we can play some notes:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">let context = new (window.AudioContext || window.webkitAudioContext)();\r\nlet note = new Sound(context);\r\nlet now = context.currentTime;\r\nnote.play(261.63, now);\r\nnote.play(293.66, now + 0.5);\r\nnote.play(329.63, now + 1);\r\nnote.play(349.23, now + 1.5);\r\nnote.play(392.00, now + 2);\r\nnote.play(440.00, now + 2.5);\r\nnote.play(493.88, now + 3);\r\nnote.play(523.25, now + 3.5);<\/code><\/pre>\n<p>That will play C D E F G A B C, all within the same context. If you want to know the frequencies of notes in hertz, you can find them <a href=\"http:\/\/www.phy.mtu.edu\/~suits\/notefreqs.html\">here<\/a>.<\/p>\n<p>Knowing all of this makes us able to build something like a xylophone! It creates a new instance of <code>Sound<\/code> and plays it on <code>mouseenter<\/code>. You can check the example and try make one by yourself as an exercise. <\/p>\n<p data-height=\"565\" data-theme-id=\"1\" data-slug-hash=\"RKVNgB\" data-default-tab=\"result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"Play the Xylophone (Web Audio API)\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/gregh\/pen\/RKVNgB\/\">Play the Xylophone (Web Audio API)<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>I've created a playground, containing all the required HTML and CSS, and the <code>Sound<\/code> class we've created. Use the <code>data-frequency<\/code> attribute to obtain the note values. <a href=\"http:\/\/codepen.io\/gregh\/pen\/104a1de2b8650609ea8f49418d2f6021\/?editors=0010\">Try here<\/a>.<\/p>\n<h3>Working with a recorded sound<\/h3>\n<p>Now that you've built something with an oscillator, let's now see how to work with a recorded sound. Some sounds are very hard to reproduce using the oscillator. In order to use realistic sounds in many cases, you'll <em>have<\/em> to use recorded sounds. This can be `.mp3`, `.ogg`, `.wav`, etc. See the <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTML\/Supported_media_formats\">full list<\/a> for more info. I like to use `.mp3` as it's lightweight, widely supported, and has pretty good sound quality.<\/p>\n<p>You can't simply get sound by a URL like you do with images. We have to run an <code>XMLHttpRequest<\/code> to get the files, decode the data, and put into the buffer.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">class Buffer {\r\n\r\n  constructor(context, urls) {  \r\n    this.context = context;\r\n    this.urls = urls;\r\n    this.buffer = [];\r\n  }\r\n\r\n  loadSound(url, index) {\r\n    let request = new XMLHttpRequest();\r\n    request.open('get', url, true);\r\n    request.responseType = 'arraybuffer';\r\n    let thisBuffer = this;\r\n    request.onload = function() {\r\n      thisBuffer.context.decodeAudioData(request.response, function(buffer) {\r\n        thisBuffer.buffer[index] = buffer;\r\n        updateProgress(thisBuffer.urls.length);\r\n        if(index == thisBuffer.urls.length-1) {\r\n          thisBuffer.loaded();\r\n        }       \r\n      });\r\n    };\r\n    request.send();\r\n  };\r\n\r\n  loadAll() {\r\n    this.urls.forEach((url, index) =&gt; {\r\n      this.loadSound(url, index);\r\n    })\r\n  }\r\n\r\n  loaded() {\r\n    \/\/ what happens when all the files are loaded\r\n  }\r\n\r\n  getSoundByIndex(index) {\r\n    return this.buffer[index];\r\n  }\r\n\r\n}<\/code><\/pre>\n<p>Let's take a look at the constructor. We receive our context there as we did in the <code>Sound<\/code> class, receive the list of URLa that will be loaded, and an empty array for the buffer.<\/p>\n<p>The we have two methods: <code>loadSound<\/code> and <code>loadAll<\/code>. <code>loadAll<\/code> loops through the list of URLs and calls the <code>loadSound<\/code> method. It's important to pass the index, so that we put the buffered sound into the correct element of the array, regardless of which request loads first. This also let's us see which request is the last, which means that on its completion the buffer is loaded.<\/p>\n<p>Then you can call the <code>loaded()<\/code> method, which can do something like hiding the loading indicator. And finally the <code>getSoundByIndex(index)<\/code> method gets the sound from the buffer by index for playback.<\/p>\n<p>The <code>decodeAudioData<\/code> method has a newer Promise-based syntax, but it doesn't work in Safari yet:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">context.decodeAudioData(audioData).then(function(decodedData) {\r\n  \/\/ use the decoded data here\r\n});<\/code><\/pre>\n<p>Then we have to create the class for the sound. Now we have our complete class to work with the recorded sound:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">class Sound() {\r\n\r\n  constructor(context, buffer) {\r\n    this.context = context;\r\n    this.buffer = buffer;\r\n  }\r\n\r\n  init() {\r\n    this.gainNode = this.context.createGain();\r\n    this.source = this.context.createBufferSource();\r\n    this.source.buffer = this.buffer;\r\n    this.source.connect(this.gainNode);\r\n    this.gainNode.connect(this.context.destination);\r\n  }\r\n\r\n  play() {\r\n    this.setup();\r\n    this.source.start(this.context.currentTime);\r\n  }  \r\n\r\n  stop() {\r\n    this.gainNode.gain.exponentialRampToValueAtTime(0.001, this.context.currentTime + 0.5);\r\n    this.source.stop(this.context.currentTime + 0.5);\r\n  }\r\n\r\n}<\/code><\/pre>\n<p>The constructor accepts the context and the buffer. We create by calling <code>createBufferSource()<\/code> method, instead of <code>createOscillator<\/code> as we did before. The buffer is the note (element from the buffer array) that we get using the <code>getSoundByIndex()<\/code> method. Now instead of the oscillator we create a buffer source, set the buffer, and then connect it to the destination (or gain and other filters).<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">let buffer = new Buffer(context, sounds);\r\nbuffer.loadAll();\r\n\r\nsound = new Sound(context, buffer.getSoundByIndex(id));\r\nsound.play();<\/code><\/pre>\n<p>Now we have to create an instance of buffer and call the <code>loadAll<\/code> method, to load all of the sounds into the buffer. We also have the <code>getSoundById<\/code> method to grab the exact sound we need, so we pass the sound to the <code>Sound<\/code> and call <code>play()<\/code>. The <code>id<\/code> can be stored as a data attribute on the button that you click to play the sound.<\/p>\n<p>Here's a project that uses all of that: the buffer, the recorded notes, etc:<\/p>\n<p data-height=\"585\" data-theme-id=\"1\" data-slug-hash=\"zNzvOm\" data-default-tab=\"result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"The Bluesman - You Can Play The Blues (Web Audio API)\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/gregh\/pen\/zNzvOm\/\">The Bluesman - You Can Play The Blues (Web Audio API)<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>You can use that example for for reference, but for your own exercise, <a href=\"http:\/\/codepen.io\/gregh\/pen\/ef483b902dd8ce0ef5f6cc378014963d\/\">here's a playground<\/a> I've created. It has all the necessary HTML and CSS and the URLs to the notes that I have recorded on a real electric guitar. Try writing your own code!<\/p>\n<h3>Intro to Filters<\/h3>\n<p>The Web Audio API lets you add different filter nodes between your sound source and destination. <code>BiquadFilterNode<\/code> is a simple low-order filter which gives you control over what parts of the frequency parts shall be emphasized and which parts shall be attenuated. This lets you build equalizer apps and other effects. There are 8 types of biquad filters: highpass, lowpass, bandpass, lowshelf, highshelf, peaking, notch, and allpass.<\/p>\n<p><strong>Highpass<\/strong> is a filter that passes higher frequencies well, but attenuates lower frequency components of signals. <strong>Lowpass<\/strong> passes lower frequencies, but attenuates higher frequencies. They are also called \"low cut\" and \"high cut\" filters, because that explains what what happens to the signal.<\/p>\n<p><strong>Highshelf<\/strong> and <strong>Lowshelf<\/strong> are filters are used to control the bass and treble of the sound. They are used to emphasize or reduce signals above or below the given frequency.<\/p>\n<p>You will find a Q property <code>BiquadFilterNode<\/code> interface, which is a double representing the <strong>Q Factor<\/strong>. Quality Factor or <a href=\"https:\/\/en.wikipedia.org\/wiki\/Q_factor\">Q Factor<\/a> control the bandwidth, the number of frequencies that are affected. The lower the Q factor, the wider the bandwidth, meaning the more frequencies will be affected. The higher the Q factor, that narrower the bandwidth.<\/p>\n<p>You can find more info about filters <a href=\"https:\/\/www.w3.org\/TR\/webaudio\/#the-biquadfilternode-interface\">here<\/a>, but we can already build a parametric equalizer. It's an equalizer that gives full control for adjusting the frequency, bandwidth and gain.<\/p>\n<p>Let's build a parametric equalizer.<\/p>\n<p data-height=\"351\" data-theme-id=\"1\" data-slug-hash=\"a0549c218cda309903280ecd68c767be\" data-default-tab=\"result\" data-user=\"gregh\" data-embed-version=\"2\" class=\"codepen\"><a href=\"http:\/\/codepen.io\/gregh\/pen\/a0549c218cda309903280ecd68c767be\/\">See the Pen.<\/a><\/p>\n<p>Let's take a look on how we can apply distortion to the sound. If you wonder what makes an electric guitar sound like one, it is the distortion effect. We use the <strong>WaveShaperNode<\/strong> interface to represent a non-linear distorter. What we need to do is to create a curve that will shape the signal, distorting and producing the characteristic sound. We don't have to spend a lot of time to create the curve, as it's already <a href=\"http:\/\/stackoverflow.com\/a\/22313408\/1090298\">done for us<\/a>. We can adjust the amount of distortion as well:<\/p>\n<p data-height=\"351\" data-theme-id=\"1\" data-slug-hash=\"e48840cabd9f0f8425dff97cbf98f7f6\" data-default-tab=\"result\" data-user=\"gregh\" data-embed-version=\"2\" class=\"codepen\"><a href=\"http:\/\/codepen.io\/gregh\/pen\/e48840cabd9f0f8425dff97cbf98f7f6\/\">See the Pen.<\/a><\/p>\n<h3>Afterword<\/h3>\n<p>Now that you've seen how to work with the Web Audio API, I recommend playing with it on your own and making your own projects!<\/p>\n<p>Here are some libraries for working with web audio:<\/p>\n<ul>\n<li><a href=\"https:\/\/alemangui.github.io\/pizzicato\/\">Pizzicato.js<\/a> - Pizzicato aims to simplify the way you create and manipulate sounds via the Web Audio API<\/li>\n<li><a href=\"https:\/\/github.com\/jeromeetienne\/webaudiox\">webaudiox.js<\/a> - webaudiox.js is a bunch of helpers that will make working with the WebAudio API easier<\/li>\n<li><a href=\"https:\/\/github.com\/goldfire\/howler.js\">howler.js<\/a> - Javascript audio library for the modern web<\/li>\n<li><a href=\"https:\/\/github.com\/rserota\/wad\">WAD<\/a> - Use the HTML5 Web Audio API for dynamic sound synthesis. It's like jQuery for your ears<\/li>\n<li><a href=\"https:\/\/tonejs.github.io\/\">Tone.js<\/a> - A Web Audio framework for making interactive music in the browser<\/li>\n<\/ul>\n","protected":false},"excerpt":{"rendered":"<p>Web Audio API lets us make sound right in the browser. It makes your sites, apps, and games more fun and engaging. You can even build music-specific applications like drum machines and synthesizers. In this article, we&#8217;ll learn about working with the Web Audio API by building some fun and simple projects.<\/p>\n","protected":false},"author":247289,"featured_media":252420,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[723],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252034"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/247289"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252034"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252034\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/252420"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252034"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252034"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252034"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252161,"date":"2017-03-03T07:02:59","date_gmt":"2017-03-03T14:02:59","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252161"},"modified":"2017-03-05T14:42:56","modified_gmt":"2017-03-05T21:42:56","slug":"weapons-math-destruction","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/weapons-math-destruction\/","title":{"rendered":"Weapons of Math Destruction"},"content":{"rendered":"<p>I think you'd do well to read Cathy O'Neils <a href=\"http:\/\/amzn.to\/2lDancO\">Weapons of Math Destruction<\/a>: How Big Data Increases Inequality and Threatens Democracy. I saw her read at the Miami Book Fair several months ago and immediately bought a copy. I even got her to sign it which is kinda cool ;)<\/p>\n<p>Cathy's big idea is that we're absolutely surrounded by algorithms that inform big decision making. There are lots of good algorithms that help us. Sadly, there are lots of insidiously, dangerous, bad algorithms that do serious damage, and they are lurking all about disguised as good algorithms. <\/p>\n<p><!--more--><\/p>\n<figure id=\"post-252217\" class=\"align-none media-252217\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/cathy_oneil-620x412.jpg\" style=\"max-width: 620px;\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/cathy_oneil-620x412.jpg 620w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/cathy_oneil-620x412-300x199.jpg 300w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>One aspect of a <em>good<\/em> algorithm is some kind of feedback and correctional system. Early on Cathy points to some advertising algorithms as an example of a healthy algorithm. For example, if an algorithm is in place to recommend a product you should buy, and it does a terrible job at that, it will be tweaked until fixed, thereby correcting what is has set out to do. Moneyball-style algorithms are the same. The data is open. Baseball team managers use algorithms to help recruit for their team and manage how they play. If it isn't working, it will be tweaked until it does.<\/p>\n<p>A bad algorithm might lack a feedback loop. One of her strongest examples is in the algorithms that rate teachers. There is plenty of evidence that these algorithms are often wrong, ousting teachers that definitely should not have been. And not in a \"they tested badly, but have a heart of gold\" way, in a \"the algorithm was actually just wrong\" way. What makes something like this a \"weapon of math destruction\" (WMD) then, is the fact that it affects a lot of people, screws up, and there is no correction mechanism. There are lots of interesting criteria, though. I'll let you read more about it.<\/p>\n<p>There is an awful lot of considerations and nuance here, and I think Cathy delivers pretty gracefully on all that. She has an impressive pedigree academically, professionally, and journalistically. There is some pitchfork raising here, but the prongs are made of research, data, and morals.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>I think you&#8217;d do well to read Cathy O&#8217;Neils Weapons of Math Destruction: How Big Data Increases Inequality and Threatens Democracy. I saw her read at the Miami Book Fair several months ago and immediately bought a copy. I even got her to sign it which is kinda cool ;) Cathy&#8217;s big idea is that [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":252162,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252161"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252161"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252161\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/252162"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252161"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252161"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252161"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251929,"date":"2017-03-03T06:56:29","date_gmt":"2017-03-03T13:56:29","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251929"},"modified":"2017-03-07T12:40:49","modified_gmt":"2017-03-07T19:40:49","slug":"just-another-https-nudge","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/just-another-https-nudge\/","title":{"rendered":"Just Another HTTPS Nudge"},"content":{"rendered":"<p>I was strongly reminded about the scariness of non-secure websites the other day. <\/p>\n<p>I'm using Xfinity as an internet service provider, and they give you a device that is both a cable modem and a router.  <\/p>\n<p>Here's a tiny bit of backstory. I use a VPN, and I discovered that in using their modem directly, the VPN wouldn't work. I'm not sure why. I didn't dig into it very far, because I have a modem of my own I'd prefer to use. So I plugged that in, which worked... but not particularly well. The connection was spotty and slow, even right in my own house.<\/p>\n<p><!--more--><\/p>\n<p>I think (maybe?) it was competing WiFi signals from the two routers sitting right next to each other. Don't quote me on that. The reason I think that is because, fortunately, I was able to turn off the router on the Xfinity device, and that solved the problem. Thde speed and connectivity was back. To their credit, it was <em>really<\/em> fast. The Xfinity device has a featured called \"Bridge Mode\" that is specifically for turning off the router so that you can use your own. I was able to enable that, use my own router, get the speed back, and connect to the VPN. <\/p>\n<p>Win! That lasted for a few months. Then recently there was some weird big internet outage in our area. Xfinity notified us about it. They had to push some updates or something to our device, and that broke everything again. I struggled with it for days, but what ultimately worked was turning off Bridge Mode, and turning it back on again (isn't it always?).<\/p>\n<p>In those in-between days, the only thing I could figure out to get online was to connect to the SSID \"xfinitywifi\" that this router seemed to be emitting. This \"xfinity\" network is unusual because it behaves kinda like a coffee shop or university hotspot in that it pops up that weird browser modal and you have to log in with your (Xfinity) credentials. It's a value-add kinda thing for their service. Their routers are dotted all over the place, so if you're a customer of theirs, you get internet (\"for free\") a lot of places. My fiance was at the doctor the other day, and she was using it there.<\/p>\n<p>If that's the network you're connected to, <strong>Xfinity performs man-in-the-middle attacks on websites<\/strong> to send you messages. Here's an example of me just looking at a (non-secure) website:<\/p>\n<figure id=\"post-251930\" class=\"align-none media-251930\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/man-in-middle.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/man-in-middle.png 1379w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/man-in-middle-300x262.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/man-in-middle-768x670.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/man-in-middle-1024x893.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Man-in-the-middle, meaning, this website had no such popup in its code. Xfinity intercepted the request, saw it was a website, and forcefully injected its own code into the site. In this case, to advertise an app and to tell you about security. Ooozing with irony, that.<\/p>\n<p>If they can do that, imagine what else they can do. (Highly recommended listening: <a href=\"http:\/\/shoptalkshow.com\/episodes\/250-web-security-april-king-alex-sexton\/\">ShopTalk #250<\/a>) They could get even more forceful with advertising. Swap out existing advertising with their own. Install a keylogger. Report back information about what you're doing and where you are. You might not even know if anything is happening at all.<\/p>\n<p>This might seem a little tin foil hatish, but realize: they've already been incentivized to do this. All the incentive is there to keep milking value out of this superpower they have. <\/p>\n<p>Some good news: <strong>Individual websites can stop this with HTTPS.<\/strong> That's a massively good step. With HTTPS, the traffic packets are encrypted and Xfinity can't read or manipulate them effectively. Through metadata, they might be able to guess what they are (e.g. know you're streaming a video and throttle speed), but there isn't much else they can do. <\/p>\n<p>It's not just this one indiscretion, Xfinity also uses this tactic to send you other messages.<\/p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\"><a href=\"https:\/\/twitter.com\/chriscoyier\">@chriscoyier<\/a> <a href=\"https:\/\/twitter.com\/XFINITY\">@XFINITY<\/a> also how they warn you about bandwidth or billing issues. not fun.<\/p>\n<p>&mdash; David Bisset (@dimensionmedia) <a href=\"https:\/\/twitter.com\/dimensionmedia\/status\/835153619720765441\">February 24, 2017<\/a><\/p><\/blockquote>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\"><a href=\"https:\/\/twitter.com\/chriscoyier\">@chriscoyier<\/a> <a href=\"https:\/\/twitter.com\/XFINITY\">@XFINITY<\/a> I have seen an ISP adding ads to bing home page. &#x1f615;<\/p>\n<p>&mdash; AKT (@itsakt) <a href=\"https:\/\/twitter.com\/itsakt\/status\/835403725493579778\">February 25, 2017<\/a><\/p><\/blockquote>\n<p><script async src=\"\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"><\/script><\/p>\n<p>It's this double whammy of scary:<\/p>\n<ul>\n<li>Seriously?! You require me to have a box in my house that broadcasts a public WiFi hotspot <del>that I can't turn off?<\/del> <ins>You're automatically opted into it, but you <a href=\"http:\/\/d.pr\/i\/2e5x\/1KuJAIHF\">can turn it off<\/a>.<\/ins><\/li>\n<li>Seriously?! You use that hotspot to perform man-in-the-middle attacks on anybody using it?<\/li>\n<\/ul>\n<p>I'm sure it's not just Xfinity, it's just that's what I'm using now and have now seen it with my own eyes. To be clear, I'm sure I signed something that allows them to do everything they are doing and I don't think anything they are doing is technically illegal (again, don't quote me on that).<\/p>\n<p>Being upset at them, and telling them about it, is a good step. Fighting back is another. Internet access is vital, so you have to use something, but if you have an option, is there an ISP that doesn't do this available to you? Use them. Money talks.<\/p>\n<p>Again, HTTPS solves this on a per-website basis. Jeff Atwood <a href=\"https:\/\/blog.codinghorror.com\/lets-encrypt-everything\/\">sums this up<\/a> pretty well:<\/p>\n<blockquote>\n<ol>\n<li>\n<p>You have <a href=\"https:\/\/blog.codinghorror.com\/an-inalienable-right-to-privacy\/\">an unalienable right to privacy<\/a>, both in the real world and online. And <strong>without HTTPS you have zero online privacy<\/strong> \u2013 from anyone else on your WiFi, from your network provider, from website operators, from large companies, from the government.<\/p>\n<\/li>\n<li>\n<p><strong>The performance penalty of HTTPS is gone<\/strong>, in fact, HTTPS arguably <a href=\"http:\/\/blog.httpwatch.com\/2015\/01\/16\/a-simple-performance-comparison-of-https-spdy-and-http2\/\">performs <em>better<\/em> than HTTP on modern devices<\/a>.<\/p>\n<\/li>\n<li>\n<p><strong>Using HTTPS means nobody can tamper with the content in your web browser.<\/strong> This was a bit of an abstract concern five years ago, but these days, there are more and more instances of upstream providers actively mucking with the data that passes through their pipes. For example, if Comcast detects you have a copyright strike, they'll <a href=\"http:\/\/arstechnica.com\/tech-policy\/2013\/02\/heres-what-an-actual-six-strikes-copyright-alert-looks-like\/\">insert banners into your web content<\/a> \u2026 <em>all<\/em> your web content! And that's what the good guy scenario looks like \u2013 or at least a corporation trying to follow the rules. Imagine what it looks like when someone, or some large company, decides the rules don't apply to them?<\/p>\n<\/li>\n<\/ol>\n<\/blockquote>\n<p>The move to HTTPS is non-trivial, and introduces somewhat complicated dependencies. It's easy to forget to renew your certificate and break your entire website just like that. I'm not arguing against HTTPS (exactly the opposite), but you should know that it requires some upfront work and some diligent maintenance. <\/p>\n<p>If you're on WordPress like me, I wrote up how I <a href=\"https:\/\/css-tricks.com\/moving-to-https-on-wordpress\/\">moved to all-HTTPS<\/a> going on two years ago. It involved a little database work even, getting URL's pointing to the right places.<\/p>\n<p>SSL certificates (the main prerequisite for HTTPS) also have traditionally cost money. No more! <a href=\"https:\/\/letsencrypt.org\/\">Let's Encrypt<\/a> is here: <\/p>\n<blockquote><p>Lets Encrypt is a free, automated, and open Certificate Authority.<\/p><\/blockquote>\n<p>There is an <a href=\"https:\/\/github.com\/tollmanz\/lets-encrypt-wp\">in-progress WordPress plugin<\/a> for it. Let's hope that gets off the ground. Just a few days ago I used the Let's Encrypt Plesk extention to put HTTPS on ShopTalk's website and it took me like 5 minutes. I'll have to write that up soon.<\/p>\n<p>Also check out the really excellent <a href=\"https:\/\/movingtohttps.com\/\">Moving To HTTPS Guide<\/a>:<\/p>\n<blockquote><p>A community site to help site owners migrate to HTTPS with a simple tested process. Allowing you to filter the plan based on multiple platforms (WordPress, Magento, and more), hosting environments (cPanel, Apache, and more) along with the level of control \/ access you have over the site.<\/p><\/blockquote>\n<figure id=\"post-251932\" class=\"align-none media-251932\"><a href=\"https:\/\/movingtohttps.com\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/httpsguide.png\" alt=\"\" \/><\/a><\/figure>\n","protected":false},"excerpt":{"rendered":"<p>I was strongly reminded about the scariness of non-secure websites the other day. I&#8217;m using Xfinity as an internet service provider, and they give you a device that is both a cable modem and a router. Here&#8217;s a tiny bit of backstory. I use a VPN, and I discovered that in using their modem directly, [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1042,779],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251929"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251929"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251929\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251929"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251929"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251929"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252205,"date":"2017-03-03T06:34:45","date_gmt":"2017-03-03T13:34:45","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252205"},"modified":"2017-03-03T06:34:45","modified_gmt":"2017-03-03T13:34:45","slug":"randomizing-svg-shapes","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/randomizing-svg-shapes\/","title":{"rendered":"Randomizing SVG Shapes"},"content":{"rendered":"<p>SVG shapes are all built from numbers. Obvious, perhaps, but also, I'm not sure we take as much advantage of that as we could with inline <code>&lt;svg&gt;<\/code>. For example, it's pretty easy to generate a new pseudo-random number in JavaScript:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">function getRandomInt(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}<\/code><\/pre>\n<p>Now imagine a bunch of variables set to random numbers, and using ES6 template literals to stitch them together:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">let newPoints = `${x1},${y1} {x2},${y2} {x3},${y3} {x3},${y3}`; <\/code><\/pre>\n<p>Which makes a valid syntax for the <code>points<\/code> attribute of a <code>&lt;polygon&gt;<\/code>. <\/p>\n<p><code>let polygon = document.querySelector(\"polygon\");<br \/>\npolygon.setAttribute(\"points\", newPoints);<\/code><\/p>\n<p>A more detailed example of that, and <a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/dNoMqx\/\">a demo<\/a>, over on the Media Temple blog.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>SVG shapes are all built from numbers. Obvious, perhaps, but also, I&#8217;m not sure we take as much advantage of that as we could with inline &lt;svg&gt;. For example, it&#8217;s pretty easy to generate a new pseudo-random number in JavaScript: function getRandomInt(min, max) { return Math.floor(Math.random() * (max &#8211; min + 1) + min); } [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[469],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252205"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252205"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252205\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252205"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252205"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252205"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252042,"date":"2017-03-02T05:58:36","date_gmt":"2017-03-02T12:58:36","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252042"},"modified":"2017-03-02T05:58:36","modified_gmt":"2017-03-02T12:58:36","slug":"coffee-personalized-taste","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/coffee-personalized-taste\/","title":{"rendered":"Coffee Personalized to Your Taste"},"content":{"rendered":"<p><em>Hey isn't this a web design site?!<\/em> Sure is. But I have it on good authority that web designers, along with a lot of the rest of the world <em>love<\/em> coffee. And, you know, convenience. And quality. I sure do.<\/p>\n<p><a href=\"http:\/\/synd.co\/2lOheTr\">Driftaway Coffee<\/a> is a freshly roasted coffee subscription that is personalized to your taste, delivered directly to your door. All subscriptions start with a tasting kit of four different coffees, you try them out, enter your favorites and based on which ones you like, you will get coffees matching your taste profile.<\/p>\n<p>I'm in! Driftaway is sponsoring here, of course, but my house is a legit paid subscriber. We subscribe to a bunch of stuff at our house, to make our lives easier. Things that we know we'll use and use at a fairly constant rate. Dog food, paper towels, and Epic bars! Coffee is totally on that list, but I'm not about to buy coffee from Amazon. <\/p>\n<p>I want an online coffee retailer that I can trust. That is incentivized to send me fresh coffee that I like because that's what they've hinged their business on. Fortunately, that's Driftaway.<\/p>\n<p><!--more--><\/p>\n<figure id=\"post-252106\" class=\"align-none media-252106\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/coffee-1.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/coffee-1.jpg 1300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/coffee-1-300x225.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/coffee-1-768x576.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/coffee-1-1024x768.jpg 1024w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/coffee-1-399x300.jpg 399w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>My house, in the wee hours of the morning.<\/figcaption><\/figure>\n<p>So how's the coffee? I'm a fan. I'd say we're borderline coffee snobs around my house. We have a gooseneck kettle to get the water to the perfect 205&deg;F. We have an Chemex Coffeemaker with a permanent home on the counter, right next to our fancy burr grinder. All that to say we've spent some time and money on our enjoyment of coffee and refining our tastes. I've enjoyed all of the profiles they've sent us so far, but of course, some more than others.<\/p>\n<figure id=\"post-252139\" class=\"align-none media-252139\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/Screen-Shot-2017-03-01-at-3.59.20-PM.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/Screen-Shot-2017-03-01-at-3.59.20-PM.png 2732w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/Screen-Shot-2017-03-01-at-3.59.20-PM-300x186.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/Screen-Shot-2017-03-01-at-3.59.20-PM-768x475.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/Screen-Shot-2017-03-01-at-3.59.20-PM-1024x633.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>You really do teach them what you think of the coffees, so future orders can be refined.<\/figcaption><\/figure>\n<p>The Kitchn (a popular home cooking site) says of Driftaway \"This is a great subscription for someone wanting to dive into the world of coffee, as Driftaway makes the process simple yet still focused on what you think tastes best.\"<\/p>\n<p><a href=\"http:\/\/synd.co\/2mgpeOr\">Join thousands of others<\/a> that are part of the Driftaway family today!<\/p>\n<figure><audio src=\"https:\/\/web-audio-shorts.s3.amazonaws.com\/2017-03-01-driftaway.m4a\" controls class=\"ad\"><\/audio><figcaption>Audio review<\/figcaption><\/figure>\n","protected":false},"excerpt":{"rendered":"<p>Hey isn&#8217;t this a web design site?! Sure is. But I have it on good authority that web designers, along with a lot of the rest of the world love coffee. And, you know, convenience. And quality. I sure do. Driftaway Coffee is a freshly roasted coffee subscription that is personalized to your taste, delivered [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":252140,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17,508],"tags":[],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252042"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252042"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252042\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/252140"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252042"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252042"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252042"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251936,"date":"2017-03-02T05:56:52","date_gmt":"2017-03-02T12:56:52","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251936"},"modified":"2017-03-02T05:59:21","modified_gmt":"2017-03-02T12:59:21","slug":"text-stroke-stuck-middle","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/text-stroke-stuck-middle\/","title":{"rendered":"Text Stroke: Stuck In The Middle With You"},"content":{"rendered":"<p>There is a non-standard way to stroke HTML text (SVG has a standard way). It's not particularly new. There are <code>-webkit-<\/code> and <code>-moz-<\/code> prefixes for it. Jen Simmons recently <a href=\"http:\/\/jensimmons.com\/post\/feb-22-2017\/text-stroke\">posted about it<\/a>, with an example:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">span {\r\n     -moz-text-fill-color: #fde;\r\n  -webkit-text-fill-color: #fde;\r\n     -moz-text-stroke-color: #666;\r\n  -webkit-text-stroke-color: #666;\r\n     -moz-text-stroke-width: 2px;  \r\n  -webkit-text-stroke-width: 2px;\r\n}<\/code><\/pre>\n<p>And she's right:<\/p>\n<blockquote><p>This CSS isn't fully-baked or fully-supported. But it's good enough to be used today, especially since it's simply offering a visual enhancement. It's not mission critical to making a website usable.<\/p><\/blockquote>\n<p>I'd only perhaps add that if you were going to do something like add a stroke around white text, you could wrap it in a <code>@supports<\/code> to be extra sure it'll be OK (just in case a browser exists that supports text-fill-color but not text-stroke-color) <!--more-->:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">@supports \r\n  ((-webkit-text-stroke-color: #666)\r\n  and\r\n  (-webkit-text-fill-color: white))\r\n  or\r\n  ((-moz-text-stroke-color: #666)\r\n  and\r\n  (-moz-text-fill-color: white)) {\r\n  span {\r\n       -moz-text-fill-color: white;\r\n    -webkit-text-fill-color: white;\r\n       -moz-text-stroke-color: #666;\r\n    -webkit-text-stroke-color: #666;\r\n       -moz-text-stroke-width: 2px;  \r\n    -webkit-text-stroke-width: 2px;\r\n  }\r\n}<\/code><\/pre>\n<p data-height=\"490\" data-theme-id=\"1\" data-slug-hash=\"EWjdWB\" data-default-tab=\"result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Text stroke in action\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/EWjdWB\/\">Text stroke in action<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3>It Ruins Most Typefaces<\/h3>\n<p>That's the thing that gets me about it. When you set a stroke straddled over the designed edge of a character, you're losing the integrity of the shape. <\/p>\n<figure id=\"post-252157\" class=\"align-none media-252157\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/stroke-gif.gif\" alt=\"\" \/><\/figure>\n<p>And that's the trouble with text-stroke in CSS: you have no choice. It's center-aligned stroke only. Either of the other options, arguably, would have been more useful. It's not the world's biggest deal. The larger the text and the beefier the characters, the easier it is to get away with. <\/p>\n<h3>Set Behind Trick<\/h3>\n<p>If you'd like to simulate an outside-aligned stroke, James Nowland shows how you can set psuedo-element text behind the original text and still use text-stroke:<\/p>\n<p data-height=\"414\" data-theme-id=\"1\" data-slug-hash=\"qdMpVK\" data-default-tab=\"result\" data-user=\"jnowland\" data-embed-version=\"2\" data-pen-title=\"CSS3 Stroke and Gradient Text\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/jnowland\/pen\/qdMpVK\/\">CSS3 Stroke and Gradient Text<\/a> by James Nowland (<a href=\"http:\/\/codepen.io\/jnowland\">@jnowland<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>There is a non-standard way to stroke HTML text (SVG has a standard way). It&#8217;s not particularly new. There are -webkit- and -moz- prefixes for it. Jen Simmons recently posted about it, with an example: span { -moz-text-fill-color: #fde; -webkit-text-fill-color: #fde; -moz-text-stroke-color: #666; -webkit-text-stroke-color: #666; -moz-text-stroke-width: 2px; -webkit-text-stroke-width: 2px; } And she&#8217;s right: This CSS [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1162],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251936"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251936"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251936\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251936"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251936"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251936"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252155,"date":"2017-03-02T05:44:34","date_gmt":"2017-03-02T12:44:34","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252155"},"modified":"2017-03-02T05:45:19","modified_gmt":"2017-03-02T12:45:19","slug":"some-thursday-reads","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/some-thursday-reads\/","title":{"rendered":"Some Thursday Reads"},"content":{"rendered":"<p>Bel\u00e9n Albeza, <a href=\"https:\/\/hacks.mozilla.org\/2016\/04\/you-might-not-need-a-css-framework\/\">\"You might not need a CSS framework\"<\/a>:<\/p>\n<blockquote><p>Regardless of the reasons for using a framework, frameworks might introduce technical debt in your project.<\/p><\/blockquote>\n<p>Jen Simmons, <a href=\"http:\/\/jensimmons.com\/post\/feb-28-2017\/benefits-learning-how-code-layouts-css\">\"The benefits of learning how to code layouts with CSS\"<\/a>:<\/p>\n<blockquote><p>The more I use CSS Grid, the more convinced I am that there is no benefit to be had by adding a layer of abstraction over it. CSS Grid is the layout framework. Baked right into the browser.<\/p><\/blockquote>\n<p>Ethan Marcotte, <a href=\"https:\/\/ethanmarcotte.com\/wrote\/on-container-queries\/\">\"On container queries.\"<\/a>:<\/p>\n<blockquote>\n<p>Why can't we apply styles based on the space available to the module we're designing, rather than looking at the shape of the viewport?<\/p>\n<p>This is, in a nutshell, the disconnect that container queries are trying to address. As our designs become more modular and pattern-driven, the value of <em>media<\/em> queries has decreased.<\/p>\n<\/blockquote>\n<p>Dan Mall, <a href=\"http:\/\/danmall.me\/articles\/cooking-with-design-systems\/\">\"Cooking with Design Systems\"<\/a>:<\/p>\n<blockquote>\n<p>Let's say I run a food truck. I have a small kitchen in said truck, so I need to be judicious in what ingredients I stock. ...<\/p>\n<p>Turns out this is also a pretty good model for organizing a design system.<\/p>\n<\/blockquote>\n","protected":false},"excerpt":{"rendered":"<p>Bel\u00e9n Albeza, &#8220;You might not need a CSS framework&#8221;: Regardless of the reasons for using a framework, frameworks might introduce technical debt in your project. Jen Simmons, &#8220;The benefits of learning how to code layouts with CSS&#8221;: The more I use CSS Grid, the more convinced I am that there is no benefit to be [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4,17],"tags":[],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252155"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252155"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252155\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252155"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252155"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252155"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251801,"date":"2017-03-01T05:26:50","date_gmt":"2017-03-01T12:26:50","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251801"},"modified":"2017-03-11T12:35:16","modified_gmt":"2017-03-11T19:35:16","slug":"php-beginners-building-simple-crm-scratch","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/php-beginners-building-simple-crm-scratch\/","title":{"rendered":"PHP For Beginners: Building a Simple CRM from Scratch"},"content":{"rendered":"<p>Customer Relationship Management (CRM) is a system that manages customer interactions and data throughout the customer lifecycle between the customer and the company across different channels. In this tutorial, we are going to build a custom CRM in PHP, which a sales team can use to track customers through the entire sales cycle.<\/p>\n<p>We'll be creating a simple CRM system for salespeople <!--more--> to:<\/p>\n<ul>\n<li>Access their tasks<\/li>\n<li>View their leads <\/li>\n<li>Create new tasks for each lead<\/li>\n<li>Create new opportunity<\/li>\n<li>Lose a sale<\/li>\n<\/ul>\n<p>Sales managers will be able to:<\/p>\n<ul>\n<li>Manage all customers <\/li>\n<li>Manage sales team<\/li>\n<li>View current sales activities<\/li>\n<\/ul>\n<p><a href=\"https:\/\/github.com\/phpcontrols\/phpgrid-custom-crm\">Download Demo Files<\/a><\/p>\n<h3>Building Blocks of a CRM<\/h3>\n<p>Here is a list of the essential components of the CRM:<\/p>\n<ul>\n<li><strong>Leads<\/strong>: initial contacts<\/li>\n<li><strong>Accounts<\/strong>: Information about the companies you do business with<\/li>\n<li><strong>Contact<\/strong>: Information about the people you know and work with. Usually, one account has many contacts<\/li>\n<li><strong>Opportunities<\/strong>: Qualified leads<\/li>\n<li><strong>Activities<\/strong>: Tasks, meetings, phone calls, emails and any other activities that allow you to interact with customers <\/li>\n<li><strong>Sales<\/strong>: Your sales team<\/li>\n<li><strong>Dashboard<\/strong>: CRM dashboards are much more than just eye candy. They should deliver key information at a glance and provide links to drill down for more details.<\/li>\n<li><strong>Login<\/strong>: Salespeople and managers have different roles in the system. Managers have access to reports and sales pipeline information.<\/li>\n<\/ul>\n<figure id=\"post-251802\" class=\"align-none media-251802\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Sales-process-overview.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Sales-process-overview.png 683w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Sales-process-overview-300x105.png 300w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Sales Process Overview<\/figcaption><\/figure>\n<h3>System Requirements<\/h3>\n<ul>\n<li>PHP 5.3+,<\/li>\n<li>MySQL or MariaDB<\/li>\n<li><a href=\"https:\/\/phpgrid.com\">phpGrid<\/a><\/li>\n<\/ul>\n<h3>Create CRM Database<\/h3>\n<p>We will start by creating our custom CRM database. The main tables we will be using are:<\/p>\n<ul>\n<li><strong>contact<\/strong> - contains basic customer data<\/li>\n<li><strong>notes<\/strong> - holds information collection from Contact by sales people.<\/li>\n<li><strong>users<\/strong> - information about sales people<\/li>\n<\/ul>\n<figure id=\"post-251803\" class=\"align-none media-251803\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/main-tables.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/main-tables.png 524w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/main-tables-300x242.png 300w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Main Database Tables<\/figcaption><\/figure>\n<p>The <strong>contact<\/strong> table contains basic customer information including names, company addresses, project information, etc.<\/p>\n<p>The <strong>notes<\/strong> table is used to store all sales activity information such as meetings and phone calls. <\/p>\n<p>The <strong>users<\/strong> table holds login information about users of the system such as usernames and passwords. Users can also have roles, either Sales or Manager.<\/p>\n<p>All other tables are simple <a href=\"https:\/\/www.quora.com\/In-database-what-are-lookup-tables\">lookup tables<\/a> to join to the aforementioned three main relational database tables.<\/p>\n<ul>\n<li><strong>contact_status<\/strong> - contains contact status such as Lead and Opportunity each indicating a different stage in a typical sales cycle<\/li>\n<li><strong>task_status<\/strong> - the task status can be either Pending or Completed<\/li>\n<li><strong>user_status<\/strong> - a sale person can be Active or Inactive <\/li>\n<li><strong>todo_type<\/strong> - a type of task either Task or Meeting<\/li>\n<li><strong>todo_desc<\/strong> - description of a task such as Follow Up Email, Phone Call, and Conference etc.<\/li>\n<li><strong>roles<\/strong> - a user can be either a Sales Rep or a Manager<\/li>\n<\/ul>\n<h4>Complete Database Schema Diagram<\/h4>\n<p>A database schema is the structure that represents the logical view (tables, views, primary and foreign keys) of the entire database. A database schema includes entities and the relationship among them. <\/p>\n<p>It is a good practice to have one primary key for each table in a relational database. A primary key is a unique identifier for each record. It can be the social security number (SSN), vehicle identification number (VIN), or simply auto-increment number (a unique number that is generated when a new record is inserted into a table).<\/p>\n<p>Below is the database diagram of our simple CRM. The key symbol in each table represents the table primary key. The magnifying glass indicates foreign key linking another table in the database. Sometimes we call it the \"lookup\" table. <\/p>\n<figure id=\"post-251804\" class=\"align-none media-251804\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/db-uml.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/db-uml.png 1836w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/db-uml-300x190.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/db-uml-768x487.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/db-uml-1024x649.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<h4>install.sql<\/h4>\n<p>Once you have an understanding of the database table structure, find the `install.sql` script in the db folder and use a MySQL tool such as <a href=\"http:\/\/www.mysql.com\/products\/workbench\/\">MySQL Workbench<\/a> or <a href=\"https:\/\/www.sequelpro.com\/\">Sequel Pro<\/a> to run the SQL script. It should create a new relational database named <code>custom_crm<\/code> and its database tables. <\/p>\n<h3>Setup phpGrid<\/h3>\n<p>Our simple CRM contains many datagrids. The datagrid is a spreadsheet-like data table that displays rows and columns representing records and fields from the database table. The datagrid gives the end-user ability to read and write to database tables on a web page.  <\/p>\n<p>We opt-in a datagrid tool from <a href=\"https:\/\/phpgrid.com\">phpGrid<\/a> to create the datagrid. The reason to use a tool instead of building them from scratch is that developing the datagrid is usually extremely tedious and error-prone. The datagrid library will handle all internal database CRUD (Create, Remove, Update, and Delete) operations for us with better and faster results with little code.<\/p>\n<p>To install phpGrid, follow these steps:<\/p>\n<ol>\n<li>Unzip the phpGrid download file<\/li>\n<li>Upload the phpGrid folder to the `phpGrid` folder<\/li>\n<li>Complete the installation by configuring the `conf.php` file<\/li>\n<\/ol>\n<p>Before we begin coding, we must specify the database information in `conf.php`, the phpGrid configuration file. Here is an example of database connection settings:<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">define('PHPGRID_DB_HOSTNAME', 'localhost'); \r\ndefine('PHPGRID_DB_USERNAME', 'root');     \r\ndefine('PHPGRID_DB_PASSWORD', ''); \r\ndefine('PHPGRID_DB_NAME', 'custom_crm'); \r\ndefine('PHPGRID_DB_TYPE', 'mysql');  \r\ndefine('PHPGRID_DB_CHARSET','utf8');<\/code><\/pre>\n<ul>\n<li><strong>PHPGRID_DB_HOSTNAME<\/strong> - web server IP or host name<\/li>\n<li><strong>PHPGRID_DB_USERNAME<\/strong> - database user name<\/li>\n<li><strong>PHPGRID_DB_PASSWORD<\/strong> - database password<\/li>\n<li><strong>PHPGRID_DB_NAME<\/strong> - database name of our CRM<\/li>\n<li><strong>PHPGRID_DB_TYPE<\/strong> - type of database<\/li>\n<li><strong>PHPGRID_DB_CHARSET<\/strong> - always 'utf8' in MySQL<\/li>\n<\/ul>\n<h3>Page Template<\/h3>\n<figure id=\"post-251805\" class=\"align-none media-251805\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/crm-page-template.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/crm-page-template.png 1458w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/crm-page-template-300x202.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/crm-page-template-768x518.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/crm-page-template-1024x691.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>The CRM Page Template<\/figcaption><\/figure>\n<p>Before we can start building our first page of the CRM, it is a good practice to make the page items reusable such as header and footer. <\/p>\n<p>The page will be comprised of a header, menu, body and footer. We will start by creating a reusable page template. <\/p>\n<h4>head.php<\/h4>\n<p>This is a basic HTML5 template header. It includes a link to a custom stylesheet that will be created in a later step.<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n\r\n&lt;head&gt;\r\n  &lt;title&gt;My Custom CRM&lt;\/title&gt;\r\n  &lt;meta charset=\"utf-8\"&gt;\r\n  &lt;link rel=\"stylesheet\" href=\"..\/css\/style.css\"&gt;\r\n&lt;\/head&gt;\r\n\r\n&lt;body&gt;<\/code><\/pre>\n<h4>menu.php<\/h4>\n<figure id=\"post-251806\" class=\"align-none media-251806\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/custom-crm-salesrep-menu.png\" alt=\"\" \/><figcaption>The Top Menu Bar<\/figcaption><\/figure>\n<pre rel=\"PHP\"><code class=\"language-markup\">&lt;div id=\"menu\"&gt;\r\n    &lt;ul&gt;\r\n        &lt;li&gt;&lt;a href=\"tasks.php\" &lt;?php if($_GET['currentPage'] == 'tasks') echo 'class=\"active\"'; ?&gt;&gt;Tasks&lt;\/a&gt;&lt;\/li&gt;\r\n        &lt;li&gt;&lt;a href=\"leads.php\" &lt;?php if($_GET['currentPage'] == 'leads') echo 'class=\"active\"'; ?&gt;&gt;Leads&lt;\/a&gt;&lt;\/li&gt;\r\n        &lt;li&gt;&lt;a href=\"opportunities.php\" &lt;?php if($_GET['currentPage'] == 'opportunities') echo 'class=\"active\"'; ?&gt;&gt;Opportunities&lt;\/a&gt;&lt;\/li&gt;\r\n        &lt;li&gt;&lt;a href=\"customerwon.php\" &lt;?php if($_GET['currentPage'] == 'customerwon') echo 'class=\"active\"'; ?&gt;&gt;Customers\/Won&lt;\/a&gt;&lt;\/li&gt;\r\n    &lt;\/ul&gt;\r\n&lt;\/div&gt;<\/code><\/pre>\n<p>Notice the usage of <code>$_GET['currentPage']<\/code>. Each page will set a value which will highlight the name of the current page on the top menu bar.<\/p>\n<p>Include the following code in `style.css` for menu styling. It will transform the above, unordered list into a menu.<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">#menu ul { \r\n  list-style-type: none; \r\n  margin: 0; \r\n  padding: 0; \r\n  overflow: hidden; \r\n  background-color: #1590C2;\r\n} \r\n#menu ul li { \r\n  float: left; \r\n}\r\n#menu ul li a { \r\n  display: block; \r\n  color: white;\r\n  text-align: center; \r\n  padding: 14px 16px; \r\n  text-decoration: none; \r\n}\r\n#menu ul li a:hover, \r\n#menu .active { \r\n  background-color: #ddd; \r\n  color: black; \r\n}<\/code><\/pre>\n<h4>footer.php<\/h4>\n<p>Closing tags for the elements we opened in the header:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;\/body&gt;\r\n&lt;\/html&gt;<\/code><\/pre>\n<h3>Our Complete Reusable Page Template<\/h3>\n<p>This is the complete page template. The main content will go after <code>Section Title<\/code>.<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">&lt;?php\r\n  include_once(\"..\/phpGrid\/conf.php\");      \r\n  include_once('..\/inc\/head.php');\r\n?&gt;<\/code><\/pre>\n<pre rel=\"PHP\"><code class=\"language-javascript\">&lt;h1&gt;My Custom CRM&lt;\/h1&gt;\r\n\r\n&lt;?php include_once('..\/inc\/menu.php'); ?&gt;\r\n\r\n&lt;h3&gt;Section Title&lt;\/h3&gt;\r\n\r\n&lt;?php \r\n  \/\/ Your main content, such as a datagrid, goes here \r\n?&gt;\r\n\r\n&lt;?php include_once('..\/inc\/footer.php'); ?&gt;<\/code><\/pre>\n<h3>CRM Main Pages<\/h3>\n<p>Are you still with me? Good! We can now finally develop the first page in our CRM. <\/p>\n<p>Our CRM for sales team members has four pages: <\/p>\n<ul>\n<li><strong>Tasks<\/strong><\/li>\n<li><strong>Leads<\/strong><\/li>\n<li><strong>Opportunities<\/strong><\/li>\n<li><strong>Customers\/Won<\/strong><\/li>\n<\/ul>\n<p>Each page indicates a different stage in a typical sales cycle.<\/p>\n<h4>Design Mockup<\/h4>\n<p>Here's our CRM design mockup for the sales people.<\/p>\n<figure id=\"post-252132\" class=\"align-none media-252132\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/sales-team-crm-screen-mockup-2.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/sales-team-crm-screen-mockup-2.png 1786w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/sales-team-crm-screen-mockup-2-300x192.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/sales-team-crm-screen-mockup-2-768x492.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/sales-team-crm-screen-mockup-2-1024x656.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Sales Team CRM Screen<\/figcaption><\/figure>\n<h4>Tasks<\/h4>\n<p>When a sales team member logged in, the first page he sees is a list of current tasks.<\/p>\n<p>As you may recall, our <code>notes<\/code> table holds all the sales activity information. We can create a datagrid and populate it from the Notes table using phpGrid.<\/p>\n<p>The Tasks page main content is a datagrid. The following two lines will give us a list of tasks of the current sales person. <\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">&lt;?php\r\n  $dg = new C_DataGrid(\"SELECT * FROM notes\", \"ID\", \"notes\");\r\n  $dg -&gt; display();\r\n?&gt;<\/code><\/pre>\n<ul>\n<li>The first line creates a phpGrid object by passing the SELECT SQL statement, its primary key - <code>ID<\/code>, and then the name of the database table - <code>notes<\/code>. <\/li>\n<li>The second and the final line calls <a href=\"https:\/\/phpgrid.com\/documentation\/display\/\">display()<\/a> function to render the datagrid on the screen. Check out the <a href=\"https:\/\/phpgrid.com\/example\/example-1-a-basic-php-datagrid-2\/\">basic datagrid demo<\/a> for more detail.<\/li>\n<\/ul>\n<h4>Leads<\/h4>\n<p>The leads page contains list of current leads that the sales person is responsible for. Each Lead can have one or many Notes. We will use the <a href=\"https:\/\/phpgrid.com\/example\/subgrid\/\">phpGrid subgrid<\/a> feature for that.<\/p>\n<p>We also need to use <a href=\"https:\/\/phpgrid.com\/documentation\/set_query_filterwhere\/\"><code>set_query_filter()<\/code><\/a> to display only the leads, <code>Status = 1<\/code>, and only for the current sales person. <\/p>\n<h4>Contact status table<\/h4>\n<figure id=\"post-251808\" class=\"align-none media-251808\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/contact_status_table.png\" alt=\"\" \/><figcaption>Contact Status Table<\/figcaption><\/figure>\n<pre rel=\"PHP\"><code class=\"language-javascript\">&lt;?php\r\n  $dg = new C_DataGrid(\"SELECT * FROM contact\", \"id\", \"contact\");\r\n  $dg-&gt;set_query_filter(\" Status = 1 &amp;&amp; sales_rep = 1 \");\r\n\r\n  \/\/ the detail grid displays notes about a lead\r\n  $sdg = new C_DataGrid(\"SELECT * FROM notes\", \"id\", \"notes\");\r\n  $sdg-&gt;set_query_filter(\" Sales_Rep = 1 \");\r\n  $sdg-&gt;enable_edit();\r\n\r\n  $dg-&gt;set_subgrid($sdg, 'Contact', 'id');\r\n  $dg -&gt; display();\r\n?&gt;<\/code><\/pre>\n<h4>Opportunities<\/h4>\n<p>A Lead becomes an Opportunity once it is qualified. The Opportunities page is similar to the Leads page. The only difference is the filtered status code in set_query_filter is <code>Status = 2<\/code>.<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">&lt;?php\r\n  $dg = new C_DataGrid(\"SELECT * FROM contact\", \"id\", \"contact\");\r\n  $dg-&gt;set_query_filter(\" Status = 2 &amp;&amp; sales_rep = 1 \");\r\n\r\n  $sdg = new C_DataGrid(\"SELECT * FROM notes\", \"id\", \"notes\");\r\n  $sdg-&gt;set_query_filter(\" Sales_Rep = 1 \");\r\n  $sdg-&gt;enable_edit();\r\n\r\n  $dg-&gt;set_subgrid($sdg, 'Contact', 'id');\r\n  $dg -&gt; display();\r\n?&gt;<\/code><\/pre>\n<h4>Customers\/Won<\/h4>\n<p>Customers\/Won has the <code>Status = 3<\/code>. Similar to Leads and Opportunities, Customers\/Won can also have Notes.<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">&lt;?php\r\n  $dg = new C_DataGrid(\"SELECT * FROM contact\", \"id\", \"contact\");\r\n  $dg-&gt;set_query_filter(\" Status = 3 &amp;&amp; sales_rep = 1 \");\r\n\r\n  $sdg = new C_DataGrid(\"SELECT * FROM notes\", \"id\", \"notes\");\r\n  $sdg-&gt;set_query_filter(\" Sales_Rep = 1 \");\r\n  $sdg-&gt;enable_edit();\r\n\r\n  $dg-&gt;set_subgrid($sdg, 'Contact', 'id');\r\n  $dg -&gt; display();\r\n?&gt;<\/code><\/pre>\n<p>That's all there is to it for sales people in our simple CRM.<\/p>\n<h3>Manager Dashboard<\/h3>\n<p>The sales manager will have access to all records in the sales pipeline as well as the ability to manage sales team and customer data. <\/p>\n<p>Here's the design mockups:<\/p>\n<figure id=\"post-252052\" class=\"align-none media-252052\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Manager-sales-reps-crm-screen-mockup.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Manager-sales-reps-crm-screen-mockup.png 1752w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Manager-sales-reps-crm-screen-mockup-300x183.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Manager-sales-reps-crm-screen-mockup-768x468.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Manager-sales-reps-crm-screen-mockup-1024x624.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>My Sales Reps<\/figcaption><\/figure>\n<h4>Menu<\/h4>\n<p>Managers Dashboard has three menu items. <\/p>\n<figure><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/custom-crm-managers-menu.png\" alt=\"\" \/><\/figure>\n<pre rel=\"PHP\"><code class=\"language-markup\">&lt;div id=\"menu\"&gt;\r\n    &lt;ul&gt;\r\n        &lt;li&gt;&lt;a href=\"?gn=users\" &lt;?php if($tableName == 'users') echo 'class=\"active\"'; ?&gt;&gt;My Sales Reps&lt;\/a&gt;&lt;\/li&gt;\r\n        &lt;li&gt;&lt;a href=\"?gn=notes\" &lt;?php if($tableName  == 'notes') echo 'class=\"active\"'; ?&gt;&gt;Tasks&lt;\/a&gt;&lt;\/li&gt;\r\n        &lt;li&gt;&lt;a href=\"?gn=contact\" &lt;?php if($tableName == 'contact') echo 'class=\"active\"'; ?&gt;&gt;Contact&lt;\/a&gt;&lt;\/li&gt;\r\n    &lt;\/ul&gt;\r\n&lt;\/div&gt;<\/code><\/pre>\n<h4>Main content<\/h4>\n<p>Each menu item represents a table in the CRM database. <code>$_GET['gn']<\/code> will store the table name. It dynamically generates the datagrid based on table name passed. <\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">&lt;?php\r\n  $tableName = (isset($_GET['gn']) &amp;&amp; isset($_GET['gn']) !== '') ? $_GET['gn'] : 'users';\r\n\r\n  switch($tableName){\r\n    case \"users\":\r\n        $dg = new C_DataGrid(\"SELECT * FROM users\", \"id\", \"users\");\r\n\r\n        $sdg = new C_DataGrid(\"SELECT * FROM contact\", \"id\", \"contact\");\r\n        $dg-&gt;set_subgrid($sdg, 'sales_rep', 'id');\r\n        break;\r\n\r\n    case \"notes\":\r\n        $dg = new C_DataGrid(\"SELECT * FROM notes\", \"id\", \"notes\");\r\n        break;\r\n\r\n    case \"contact\":\r\n        $dg = new C_DataGrid(\"SELECT * FROM contact\", \"id\", \"contact\");\r\n\r\n        $sdg = new C_DataGrid(\"SELECT * FROM notes\", \"id\", \"notes\");\r\n        $sdg-&gt;enable_edit();\r\n\r\n        $dg-&gt;set_subgrid($sdg, 'Contact', 'id');\r\n        break;\r\n}\r\n\r\n  $dg-&gt;enable_edit();\r\n  $dg-&gt;display();\r\n?&gt;<\/code><\/pre>\n<h3>My Sales Rep<\/h3>\n<p>Since a sales manager needs to quickly find out whom a sale person is working with, we added a detail grid <code>$sdg<\/code> populated from contact table and link with the parent grid. <\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">$sdg = new C_DataGrid(\"SELECT * FROM contact\", \"id\", \"contact\");\r\n$dg-&gt;set_subgrid($sdg, 'sales_rep', 'id');<\/code><\/pre>\n<p><code>sales_rep<\/code> is the connecting key in <code>contact<\/code> table to the <code>id<\/code> that is the foreign key in <code>users<\/code> table. Remember the <code>users<\/code> stores all of our sales people information. <\/p>\n<h4>Screenshots<\/h3>\n<figure id=\"post-252054\" class=\"align-none media-252054\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/CRM-sales-team-view.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/CRM-sales-team-view.png 2808w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/CRM-sales-team-view-300x127.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/CRM-sales-team-view-768x325.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/CRM-sales-team-view-1024x433.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>CRM - Sales Screen<\/figcaption><\/figure>\n<figure id=\"post-252055\" class=\"align-none media-252055\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/CRM-managers-view.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/CRM-managers-view.png 2810w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/CRM-managers-view-300x132.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/CRM-managers-view-768x337.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/CRM-managers-view-1024x449.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>CRM - Manager Screen<\/figcaption><\/figure>\n<h3>Interactive Demo<\/h3>\n<p><a href=\"https:\/\/phpdatagrid.com\/apps\/phpgrid-custom-crm\/sales\/tasks.php\">CRM Sales Rep Screen<\/a><br \/>\n<a href=\"https:\/\/phpdatagrid.com\/apps\/phpgrid-custom-crm\/managers\/pipeline.php\">CRM Managers screen<\/a><\/p>\n<h3>GitHub Source Code<\/h3>\n<p><a href=\"https:\/\/github.com\/phpcontrols\/phpgrid-custom-crm\">Repo<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Customer Relationship Management (CRM) is a system that manages customer interactions and data throughout the customer lifecycle between the customer and the company across different channels. In this tutorial, we are going to build a custom CRM in PHP, which a sales team can use to track customers through the entire sales cycle. We&#8217;ll be [&hellip;]<\/p>\n","protected":false},"author":247877,"featured_media":252135,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1146,772],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251801"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/247877"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251801"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251801\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/252135"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251801"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251801"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251801"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251751,"date":"2017-03-01T05:12:07","date_gmt":"2017-03-01T12:12:07","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251751"},"modified":"2017-03-20T06:37:03","modified_gmt":"2017-03-20T13:37:03","slug":"tools-visualize-edit-svg-paths-kinda","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/tools-visualize-edit-svg-paths-kinda\/","title":{"rendered":"Tools to Visualize and Edit SVG Paths (Kinda!)"},"content":{"rendered":"<p>It was brought up at the <a href=\"http:\/\/environmentsforhumans.com\/2017\/svg-summit\/\">SVG Summit<\/a> the other day, wouldn't it be nice when working with SVG to be able to work with it both ways at once?<\/p>\n<ol>\n<li>See and edit the code, and see the results visually<\/li>\n<li>See and edit the visual shapes, and see the code change<\/li>\n<\/ol>\n<p>There might not be the perfect one true tool, but there are certainly some ideas getting there!<\/p>\n<p><!--more--><\/p>\n<h3>Anthony Dugois's <a href=\"https:\/\/codepen.io\/anthonydugois\/pen\/mewdyZ\">SVG Path Builder<\/a><\/h3>\n<p>I'd embed <a href=\"https:\/\/codepen.io\/anthonydugois\/pen\/mewdyZ\">the Pen<\/a> here, but you really need a bit more space to play with it. Here's a video of how it works:<\/p>\n<figure><video height=\"720\" width=\"1116\" src=\"https:\/\/css-tricks.com\/videos\/svg-path-builder.mov\" controls><\/video><\/figure>\n<p>It shows you the code output, but you can't adjust the code to see the changes back in the visual part. It still does an incredible job of showing you the different types of curve commands available in the <a href=\"https:\/\/css-tricks.com\/svg-path-syntax-illustrated-guide\/\">SVG path syntax<\/a>. <\/p>\n<h3>Sten Hougaard's <a href=\"https:\/\/codepen.io\/netsi1964\/pen\/pJzWoz\">SVG manipulate paths<\/a><\/h3>\n<p><a href=\"https:\/\/codepen.io\/netsi1964\/pen\/pJzWoz\">A Pen<\/a> by Mr. Hougaard has some pre-set curves that you can drag around and play with. <\/p>\n<figure><video height=\"720\" width=\"1092\" src=\"https:\/\/css-tricks.com\/videos\/svg-manipulate-paths.mov\" controls><\/video><\/figure>\n<p>It doesn't just give you the data, but also gives you a complete <code>&lt;path&gt;<\/code> element. It's also one-directional, no changing the code by hand.<\/p>\n<h3>Varun Vachhar's <a href=\"https:\/\/xvg.now.sh\/\">XVG<\/a><\/h3>\n<p><a href=\"https:\/\/xvg.now.sh\/\">This Chrome extension<\/a> doesn't let you see the SVG code or let you manipulate anything, but it does show you the points and curve handles that make up an SVG anywhere you find one on the web, giving you a bit of a behind the scenes look.<\/p>\n<figure><video height=\"720\" width=\"1208\" src=\"https:\/\/css-tricks.com\/videos\/xvg.mov\" controls><\/video><\/figure>\n<p>It's really cool how you can invoke this anywhere. It would be great to see it evolve with interactive manipulation capabilities and show the output of those changes.<\/p>\n<h3>Bennett Feely's <a href=\"http:\/\/bennettfeely.com\/clippy\/\">Clippy<\/a><\/h3>\n<p>Clippy isn't SVG, it's for CSS clip-path, but I think you'll easily see how this kind of UI would be very cool for SVG manipulation and seeing the code as you do things.<\/p>\n<figure><video height=\"658\" width=\"1054\" src=\"https:\/\/css-tricks.com\/videos\/clippy.mov\" controls><\/video><\/figure>\n<h3>Ana Tudor's Cubic B\u00e9zier curve with SVG<\/h3>\n<p>This one I can embed right here:<\/p>\n<p data-height=\"692\" data-theme-id=\"1\" data-slug-hash=\"EKLNvZ\" data-default-tab=\"result\" data-user=\"thebabydino\" data-embed-version=\"2\" data-pen-title=\"cubic B\u00e9zier curve with SVG\" class=\"codepen\">See the Pen <a href=\"https:\/\/codepen.io\/thebabydino\/pen\/EKLNvZ\/\">cubic B\u00e9zier curve with SVG<\/a> by Ana Tudor (<a href=\"http:\/\/codepen.io\/thebabydino\">@thebabydino<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>No editing of the code directly, but it's very clear from the interactions what parts of the code you are changing when you manipulate the SVG curve control points.<\/p>\n<h3>Brent Jackson's Paths<\/h3>\n<p class=\"explanation\"><strong>Adding <a href=\"http:\/\/jxnblk.com\/paths\/\">this one!<\/a><\/strong> I'm so glad it was pointed out because it seems like the closest thing to being able to edit on <strong>both sides<\/strong>: code and visually.<\/p>\n<figure id=\"post-252957\" class=\"align-none media-252957\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/03\/paths.gif\" alt=\"\" \/><\/figure>\n<h3>Graphics Software: Visual Only<\/h3>\n<p>Remember the point here is searching for UI that connects the idea of <em>visual<\/em> editing and <em>code<\/em> editing. Vector editing software like Adobe Illustrator is visual only in that there are tools to manipulate graphics visually, but you don't know how that is affecting the code.<\/p>\n<figure id=\"post-252041\" class=\"align-none media-252041\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/illustrator.gif\" alt=\"\" \/><\/figure>\n<p>You can export the code and look at it, but that's not the realtime connection we're exploring here.<\/p>\n<h3>Code Editors: Code Only<\/h3>\n<p>Code editors like CodePen help tie together code and visual output:<\/p>\n<figure id=\"post-252043\" class=\"align-none media-252043\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/editor.gif\" alt=\"\" \/><\/figure>\n<p>But it's still a one-way street. You can't do anything with that visual side other than look at it.<\/p>\n<h3>Awaiting the Perfect Tool<\/h3>\n<p>Lots of choices; nothing perfect! Nothing that I've seen, yet, ties together perfectly code editing and visual editing as equal first-class UI citizens.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>It was brought up at the SVG Summit the other day, wouldn&#8217;t it be nice when working with SVG to be able to work with it both ways at once? See and edit the code, and see the results visually See and edit the visual shapes, and see the code change There might not be [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":252131,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[469],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251751"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251751"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251751\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/252131"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251751"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251751"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251751"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251754,"date":"2017-02-28T05:59:10","date_gmt":"2017-02-28T12:59:10","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251754"},"modified":"2017-02-28T06:17:46","modified_gmt":"2017-02-28T13:17:46","slug":"computer-science-distilled-chapter-2-complexity","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/computer-science-distilled-chapter-2-complexity\/","title":{"rendered":"Computer Science Distilled, Chapter 2: Complexity"},"content":{"rendered":"<div class=\"explanation\">This is a full chapter excerpt from Wladston Viana Ferreira Filho's brand new book <a href=\"http:\/\/amzn.to\/2lEeHZY\">Computer Science Distilled<\/a> which he has graciously allowed for us to publish here.<\/div>\n<blockquote><p>In almost every computation, a variety of arrangements for the processes is possible. It is essential to choose that arrangement which shall tend to minimize the time necessary for the calculation.<\/p><\/blockquote>\n<p>\u2014Ada Lovelace<\/p>\n<p>How much time does it take to sort 26 shuffled cards? If instead, you had 52 cards, would it take twice as long? How much longer would it take for a thousand decks of cards? The answer is intrinsic to the <strong>method<\/strong> used to sort the cards.<\/p>\n<p>A method is a list of unambiguous instructions for achieving a goal. A method that always requires a finite series of operations is called an <strong>algorithm<\/strong>. For instance, a card-sorting algorithm is a method that will always specify some operations to sort a deck of 26 cards per suit and per rank.<\/p>\n<p>Less operations need less computing power. We like fast solutions, so we monitor the number of operations in our algorithms. Many algorithms require a fast-growing number of operations when the input grows in size. For example, our card-sorting algorithm could take few operations to sort 26 cards, but four times more operations to sort 52 cards!<\/p>\n<p>To avoid bad surprises when our problem size grows, we find the algorithm's <strong>time complexity<\/strong>. In this chapter, you'll learn to:<\/p>\n<ul>\n<li>Count and interpret <span class=\"ltx_text ltx_font_bold\">time<\/span> complexities<\/li>\n<li>Express their growth with fancy <strong>Big-O<\/strong>'s<\/li>\n<li>Run away from <strong>exponential<\/strong> algorithms<\/li>\n<li>Make sure you have enough computer <strong>memory<\/strong>.<\/li>\n<\/ul>\n<p>But first, how do we define time complexity?<\/p>\n<p>Time complexity is written <math id=\"Ch2.p8.m1\" class=\"ltx_Math\" alttext=\"T(n)\" display=\"inline\"><mrow><mi>T<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mi>n<\/mi><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/math>. It gives the number of operations the algorithm performs when processing an input of size <math id=\"Ch2.p8.m2\" class=\"ltx_Math\" alttext=\"n\" display=\"inline\"><mi>n<\/mi><\/math>. We also refer to an algorithm's <math id=\"Ch2.p8.m3\" class=\"ltx_Math\" alttext=\"T(n)\" display=\"inline\"><mrow><mi>T<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mi>n<\/mi><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/math> as its <strong>running cost<\/strong>. If our card-sorting algorithm follows <math id=\"Ch2.p8.m4\" class=\"ltx_Math\" alttext=\"T(n)=n^{2}\" display=\"inline\"><mrow><mrow><mi>T<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mi>n<\/mi><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><mo>=<\/mo><msup><mi>n<\/mi><mn>2<\/mn><\/msup><\/mrow><\/math>, we can predict how much longer it takes to sort a deck once we double its size: <math id=\"Ch2.p8.m5\" class=\"ltx_Math\" alttext=\"\\frac{T(2n)}{T(n)}=4\" display=\"inline\"><mrow><mfrac><mrow><mi>T<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mrow><mn>2<\/mn><mo>\u2062<\/mo><mi>n<\/mi><\/mrow><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><mrow><mi>T<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mi>n<\/mi><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/mfrac><mo>=<\/mo><mn>4<\/mn><\/mrow><\/math>.<\/p>\n<h3>Hope for the best, prepare for the worst<\/h3>\n<p>Isn't it faster to sort a pile of cards that's almost sorted already?<\/p><p>Input size isn't the only characteristic that impacts the number of operations required by an algorithm. When an algorithm can have different values of <math id=\"Ch2.S0.SS1.p1.m1\" class=\"ltx_Math\" alttext=\"T(n)\" display=\"inline\"><mrow><mi>T<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mi>n<\/mi><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/math> for the same value of <math id=\"Ch2.S0.SS1.p1.m2\" class=\"ltx_Math\" alttext=\"n\" display=\"inline\"><mi>n<\/mi><\/math>, we resort to cases:<\/p>\n<ul>\n<li><strong>Best Case:<\/strong> when the input requires the minimum number of operations for any input of that size. In sorting, it happens when the input is already sorted.<\/li>\n<li><strong>Worst Case:<\/strong> when the input requires the maximum number of operations for any input of that size. In many sorting algorithms, that\u2019s when the input was given in reverse order.<\/li>\n<li><strong>Average Case:<\/strong> refers to the average number of operations required for typical inputs of that size. For sorting, an input in random order is usually considered.<\/li>\n<\/ul>\n<p>In general, the most important is the worst case. From there, you get a guaranteed baseline you can always count on. When nothing is said about the scenario, the worst case is assumed. Next, we'll see how to analyze a worst case scenario, hands on.<\/p>\n<figure id=\"post-251758\" class=\"align-none media-251758\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/xkcd_1658.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/xkcd_1658.png 1213w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/xkcd_1658-300x138.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/xkcd_1658-768x353.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/xkcd_1658-1024x470.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Figure 2.1: \u201cEstimating Time\u201d, courtesy of <a href=\"http:\/\/xkcd.com\">xkcd.com<\/a>.<\/figcaption><\/figure>\n<h3>2.1 Counting Time<\/h3>\n<p>We find the time complexity of an algorithm by counting the number of basic operations it requires for a hypothetical input of size <math id=\"Ch2.S1.p1.m1\" class=\"ltx_Math\" alttext=\"n\" display=\"inline\"><mi>n<\/mi><\/math>. We'll demonstrate it with <strong>Selection Sort<\/strong>, a sorting algorithm that uses a nested loop. An outer <code>for<\/code> loop updates the current position being sorted, and an inner <code>for<\/code> loop selects the item that goes in the current position<sup>1<\/sup>:<\/p>\n<pre><code>function selection_sort(list)\r\n    for current \u2190 1 \u2026 list.length - 1\r\n        smallest \u2190 current\r\n        for i \u2190 current + 1 \u2026 list.length\r\n            if list[i] &lt; list[smallest]\r\n                smallest \u2190 i\r\n        list.swap_items(current, smallest)<\/code><\/pre>\n<p>Let's see what happens with a list of <math id=\"Ch2.S1.p3.m1\" class=\"ltx_Math\" alttext=\"n\" display=\"inline\"><mi>n<\/mi><\/math> items, assuming\r\nthe worst case. The outer loop runs <math id=\"Ch2.S1.p3.m2\" class=\"ltx_Math\" alttext=\"n-1\" display=\"inline\"><mrow><mi>n<\/mi><mo>-<\/mo><mn>1<\/mn><\/mrow><\/math> times and does two\r\noperations per run (one assignment and one swap) totaling <math id=\"Ch2.S1.p3.m3\" class=\"ltx_Math\" alttext=\"2n-2\" display=\"inline\"><mrow><mrow><mn>2<\/mn><mo>\u2062<\/mo><mi>n<\/mi><\/mrow><mo>-<\/mo><mn>2<\/mn><\/mrow><\/math> operations. The inner loop first runs <math id=\"Ch2.S1.p3.m4\" class=\"ltx_Math\" alttext=\"n-1\" display=\"inline\"><mrow><mi>n<\/mi><mo>-<\/mo><mn>1<\/mn><\/mrow><\/math> times, then <math id=\"Ch2.S1.p3.m5\" class=\"ltx_Math\" alttext=\"n-2\" display=\"inline\"><mrow><mi>n<\/mi><mo>-<\/mo><mn>2<\/mn><\/mrow><\/math> times, <math id=\"Ch2.S1.p3.m6\" class=\"ltx_Math\" alttext=\"n-3\" display=\"inline\"><mrow><mi>n<\/mi><mo>-<\/mo><mn>3<\/mn><\/mrow><\/math> times, and so on. We know how to sum these types of sequences<sup>2<\/sup>:\n<table class=\"leave-alone\">\n<tr>\n<td><\/td>\n<td>\n<math id=\"Ch2.Ex1X.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle{\\small\\text{number of inner loop runs}}\\,=\" display=\"inline\"><mrow><mpadded width=\"+1.7pt\"><mtext mathsize=\"90%\">number of inner loop runs<\/mtext><\/mpadded><mo>=<\/mo><mi><\/mi><\/mrow><\/math>\n<\/td>\n<td class=\"ltx_td ltx_align_left ltx_eqn_cell\">\n<math id=\"Ch2.Ex1X.m3\" class=\"ltx_Math\" alttext=\"\\displaystyle\\overbrace{n-1\\quad\\ \\ \\quad+\\quad\\ \\ \\quad n-2\\quad+\\quad\\cdots+%\n2+1}^{n-1\\ \\text{total runs of the outer loop.}}\" display=\"inline\"><mover><mover accent=\"true\"><mrow><mrow><mi>n<\/mi><mo movablelimits=\"false\">-<\/mo><mn>1<\/mn><\/mrow><mo movablelimits=\"false\" separator=\"true\">\u2003\u2003\u2003<\/mo><mo movablelimits=\"false\">+<\/mo><mo movablelimits=\"false\" separator=\"true\">\u2003\u2003\u2003<\/mo><mrow><mi>n<\/mi><mo movablelimits=\"false\">-<\/mo><mn>2<\/mn><\/mrow><mo movablelimits=\"false\" separator=\"true\">\u2003<\/mo><mo movablelimits=\"false\">+<\/mo><mo movablelimits=\"false\" separator=\"true\">\u2003<\/mo><mrow><mi mathvariant=\"normal\">\u22ef<\/mi><mo movablelimits=\"false\">+<\/mo><mn>2<\/mn><mo movablelimits=\"false\">+<\/mo><mn>1<\/mn><\/mrow><\/mrow><mo movablelimits=\"false\">\u23de<\/mo><\/mover><mrow><mi>n<\/mi><mo>-<\/mo><mrow><mpadded width=\"+5pt\"><mn>1<\/mn><\/mpadded><mo>\u2062<\/mo><mtext>total runs of the outer loop.<\/mtext><\/mrow><\/mrow><\/mover><\/math>\n<\/td>\n<td class=\"ltx_eqn_cell ltx_eqn_center_padright\"><\/td>\n<\/tr>\n<tr>\n<td><\/td>\n<td style=\"text-align: right;\">\n<math id=\"Ch2.Ex1Xa.m2\" class=\"ltx_Math\" alttext=\"\\displaystyle=\" display=\"inline\"><mo>=<\/mo><\/math>\n<\/td>\n<td>\n<math id=\"Ch2.Ex1Xa.m3\" class=\"ltx_Math\" alttext=\"\\displaystyle\\sum_{i=1}^{n-1}i=\\frac{(n-1)(n)}{2}=\\frac{n^{2}-n}{2}.\" display=\"inline\"><mrow><mrow><mrow><mstyle displaystyle=\"true\"><munderover><mo largeop=\"true\" movablelimits=\"false\" symmetric=\"true\">\u2211<\/mo><mrow><mi>i<\/mi><mo>=<\/mo><mn>1<\/mn><\/mrow><mrow><mi>n<\/mi><mo>-<\/mo><mn>1<\/mn><\/mrow><\/munderover><\/mstyle><mi>i<\/mi><\/mrow><mo>=<\/mo><mstyle displaystyle=\"true\"><mfrac><mrow><mrow><mo stretchy=\"false\">(<\/mo><mrow><mi>n<\/mi><mo>-<\/mo><mn>1<\/mn><\/mrow><mo stretchy=\"false\">)<\/mo><\/mrow><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mi>n<\/mi><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><mn>2<\/mn><\/mfrac><\/mstyle><mo>=<\/mo><mstyle displaystyle=\"true\"><mfrac><mrow><msup><mi>n<\/mi><mn>2<\/mn><\/msup><mo>-<\/mo><mi>n<\/mi><\/mrow><mn>2<\/mn><\/mfrac><\/mstyle><\/mrow><mo>.<\/mo><\/mrow><\/math>\n<\/td>\n<td><\/td>\n<\/tr>\n<\/table>\n<p>In the worst case, the <span class=\"ltx_text ltx_font_typewriter\">if<\/span> condition is always met. This means the inner loop does one comparison and one assignment <math id=\"Ch2.S1.p5.m1\" class=\"ltx_Math\" alttext=\"(n^{2}-n)\/2\" display=\"inline\"><mrow><mrow><mo stretchy=\"false\">(<\/mo><mrow><msup><mi>n<\/mi><mn>2<\/mn><\/msup><mo>-<\/mo><mi>n<\/mi><\/mrow><mo stretchy=\"false\">)<\/mo><\/mrow><mo>\/<\/mo><mn>2<\/mn><\/mrow><\/math> times, hence <math id=\"Ch2.S1.p5.m2\" class=\"ltx_Math\" alttext=\"n^{2}-n\" display=\"inline\"><mrow><msup><mi>n<\/mi><mn>2<\/mn><\/msup><mo>-<\/mo><mi>n<\/mi><\/mrow><\/math> operations. In total, the algorithm costs <math id=\"Ch2.S1.p5.m3\" class=\"ltx_Math\" alttext=\"2n-2\" display=\"inline\"><mrow><mrow><mn>2<\/mn><mo>\u2062<\/mo><mi>n<\/mi><\/mrow><mo>-<\/mo><mn>2<\/mn><\/mrow><\/math> operations for the outer loop, plus <math id=\"Ch2.S1.p5.m4\" class=\"ltx_Math\" alttext=\"n^{2}-n\" display=\"inline\"><mrow><msup><mi>n<\/mi><mn>2<\/mn><\/msup><mo>-<\/mo><mi>n<\/mi><\/mrow><\/math> operations for the inner loop. We thus get the time complexity:<\/p>\n<table class=\"leave-alone\">\n<tr>\n<td><\/td>\n<td>\n<math id=\"Ch2.Ex2.m1\" class=\"ltx_Math\" alttext=\"T(n)=n^{2}+n-2.\" display=\"block\"><mrow><mrow><mrow><mi>T<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mi>n<\/mi><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><mo>=<\/mo><mrow><mrow><msup><mi>n<\/mi><mn>2<\/mn><\/msup><mo>+<\/mo><mi>n<\/mi><\/mrow><mo>-<\/mo><mn>2<\/mn><\/mrow><\/mrow><mo>.<\/mo><\/mrow><\/math>\n<\/td>\n<td><\/td>\n<\/tr>\n<\/table>\n<p>Now what? If our list size was <math id=\"Ch2.S1.p7.m1\" class=\"ltx_Math\" alttext=\"n=8\" display=\"inline\"><mrow><mi>n<\/mi><mo>=<\/mo><mn>8<\/mn><\/mrow><\/math> and we double it, the\r\nsorting time will be multiplied by:<\/p>\n<table class=\"leave-alone\">\n<tr>\n<td><\/td>\n<td>\n<math id=\"Ch2.Ex3.m1\" class=\"ltx_Math\" alttext=\"\\frac{T(16)}{T(8)}=\\frac{16^{2}+16-2}{8^{2}+8-2}\\approx 3.86.\" display=\"block\"><mrow><mrow><mfrac><mrow><mi>T<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mn>16<\/mn><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><mrow><mi>T<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mn>8<\/mn><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/mfrac><mo>=<\/mo><mfrac><mrow><mrow><msup><mn>16<\/mn><mn>2<\/mn><\/msup><mo>+<\/mo><mn>16<\/mn><\/mrow><mo>-<\/mo><mn>2<\/mn><\/mrow><mrow><mrow><msup><mn>8<\/mn><mn>2<\/mn><\/msup><mo>+<\/mo><mn>8<\/mn><\/mrow><mo>-<\/mo><mn>2<\/mn><\/mrow><\/mfrac><mo>\u2248<\/mo><mn>3.86<\/mn><\/mrow><mo>.<\/mo><\/mrow><\/math>\n<\/td>\n<td><\/td>\n<\/tr>\n<\/table>\n<p>If we double it again we will multiply time by <math id=\"Ch2.S1.p9.m1\" class=\"ltx_Math\" alttext=\"3.90\" display=\"inline\"><mn>3.90<\/mn><\/math>. Double it over and over and find <math id=\"Ch2.S1.p9.m2\" class=\"ltx_Math\" alttext=\"3.94\" display=\"inline\"><mn>3.94<\/mn><\/math>, <math id=\"Ch2.S1.p9.m3\" class=\"ltx_Math\" alttext=\"3.97\" display=\"inline\"><mn>3.97<\/mn><\/math>, <math id=\"Ch2.S1.p9.m4\" class=\"ltx_Math\" alttext=\"3.98\" display=\"inline\"><mn>3.98<\/mn><\/math>. Notice how this gets closer and closer to 4? This means it would take four times as long to sort two million items than to sort one million items.<\/p>\n<h4>2.1.1 Understanding Growth<\/h4>\n<p>Say the input size of an algorithm is very large, and we increase it even more. To predict how the execution time will grow, we don't need to know all terms of <math id=\"Ch2.S1.SS1.p1.m1\" class=\"ltx_Math\" alttext=\"T(n)\" display=\"inline\"><mrow><mi>T<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mi>n<\/mi><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/math>. We can approximate <math id=\"Ch2.S1.SS1.p1.m2\" class=\"ltx_Math\" alttext=\"T(n)\" display=\"inline\"><mrow><mi>T<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mi>n<\/mi><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/math> by its fastest-growing term, called the <strong>dominant term<\/strong>.<\/p>\n<blockquote><p><strong>The Index Card Problem:<\/strong> Yesterday, you knocked over one box of index cards. It took you two hours of Selection Sort to fix it. Today, you spilled ten boxes. How much time will you need to arrange the cards back in?<\/p><\/blockquote>\n<p>We've seen Selection Sort follows <math id=\"Ch2.S1.SS1.p3.m1\" class=\"ltx_Math\" alttext=\"T(n)=n^{2}+n-2\" display=\"inline\"><mrow><mrow><mi>T<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mi>n<\/mi><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><mo>=<\/mo><mrow><mrow><msup><mi>n<\/mi><mn>2<\/mn><\/msup><mo>+<\/mo><mi>n<\/mi><\/mrow><mo>-<\/mo><mn>2<\/mn><\/mrow><\/mrow><\/math>. The fastest-growing term is <math id=\"Ch2.S1.SS1.p3.m2\" class=\"ltx_Math\" alttext=\"n^{2}\" display=\"inline\"><msup><mi>n<\/mi><mn>2<\/mn><\/msup><\/math>,\r\ntherefore we can write <math id=\"Ch2.S1.SS1.p3.m3\" class=\"ltx_Math\" alttext=\"T(n)\\approx n^{2}\" display=\"inline\"><mrow><mrow><mi>T<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mi>n<\/mi><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><mo>\u2248<\/mo><msup><mi>n<\/mi><mn>2<\/mn><\/msup><\/mrow><\/math>. Assuming there are <math id=\"Ch2.S1.SS1.p3.m4\" class=\"ltx_Math\" alttext=\"n\" display=\"inline\"><mi>n<\/mi><\/math> cards per box, we find:<\/p>\n<table class=\"leave-alone\">\n<tr>\n<td><\/td>\n<td class=\"ltx_eqn_cell ltx_align_center\">\n<math id=\"Ch2.Ex4.m1\" class=\"ltx_Math\" alttext=\"\\frac{T(10n)}{T(n)}\\approx\\frac{{(10n)}^{2}}{n^{2}}=100.\" display=\"block\"><mrow><mrow><mfrac><mrow><mi>T<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mrow><mn>10<\/mn><mo>\u2062<\/mo><mi>n<\/mi><\/mrow><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><mrow><mi>T<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mi>n<\/mi><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/mfrac><mo>\u2248<\/mo><mfrac><msup><mrow><mo stretchy=\"false\">(<\/mo><mrow><mn>10<\/mn><mo>\u2062<\/mo><mi>n<\/mi><\/mrow><mo stretchy=\"false\">)<\/mo><\/mrow><mn>2<\/mn><\/msup><msup><mi>n<\/mi><mn>2<\/mn><\/msup><\/mfrac><mo>=<\/mo><mn>100<\/mn><\/mrow><mo>.<\/mo><\/mrow><\/math>\n<\/td>\n<td><\/td>\n<\/tr>\n<\/table>\n<p>It will take you approximately <math id=\"Ch2.S1.SS1.p5.m1\" class=\"ltx_Math\" alttext=\"(100\\times 2)\\text{hours}=200\" display=\"inline\"><mrow><mrow><mrow><mo stretchy=\"false\">(<\/mo><mrow><mn>100<\/mn><mo>\u00d7<\/mo><mn>2<\/mn><\/mrow><mo stretchy=\"false\">)<\/mo><\/mrow><mo>\u2062<\/mo><mtext>hours<\/mtext><\/mrow><mo>=<\/mo><mn>200<\/mn><\/mrow><\/math> hours! What if we had used a different sorting method? For example, there\u2019s one called \"Bubble Sort\" whose time complexity is <math id=\"Ch2.S1.SS1.p5.m2\" class=\"ltx_Math\" alttext=\"T(n)=0.5n^{2}+0.5n\" display=\"inline\"><mrow><mrow><mi>T<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mi>n<\/mi><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><mo>=<\/mo><mrow><mrow><mn>0.5<\/mn><mo>\u2062<\/mo><msup><mi>n<\/mi><mn>2<\/mn><\/msup><\/mrow><mo>+<\/mo><mrow><mn>0.5<\/mn><mo>\u2062<\/mo><mi>n<\/mi><\/mrow><\/mrow><\/mrow><\/math>. The fastest-growing term then gives <math id=\"Ch2.S1.SS1.p5.m3\" class=\"ltx_Math\" alttext=\"T(n)\\approx 0.5n^{2}\" display=\"inline\"><mrow><mrow><mi>T<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mi>n<\/mi><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><mo>\u2248<\/mo><mrow><mn>0.5<\/mn><mo>\u2062<\/mo><msup><mi>n<\/mi><mn>2<\/mn><\/msup><\/mrow><\/mrow><\/math>, hence:<\/p>\n<table class=\"leave-alone\">\n<tr>\n<td><\/td>\n<td>\n<math id=\"Ch2.Ex5.m1\" class=\"ltx_Math\" alttext=\"\\frac{T(10n)}{T(n)}\\approx\\frac{0.5\\times{(10n)}^{2}}{0.5\\times n^{2}}=100.\" display=\"block\"><mrow><mrow><mfrac><mrow><mi>T<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mrow><mn>10<\/mn><mo>\u2062<\/mo><mi>n<\/mi><\/mrow><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><mrow><mi>T<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mi>n<\/mi><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/mfrac><mo>\u2248<\/mo><mfrac><mrow><mn>0.5<\/mn><mo>\u00d7<\/mo><msup><mrow><mo stretchy=\"false\">(<\/mo><mrow><mn>10<\/mn><mo>\u2062<\/mo><mi>n<\/mi><\/mrow><mo stretchy=\"false\">)<\/mo><\/mrow><mn>2<\/mn><\/msup><\/mrow><mrow><mn>0.5<\/mn><mo>\u00d7<\/mo><msup><mi>n<\/mi><mn>2<\/mn><\/msup><\/mrow><\/mfrac><mo>=<\/mo><mn>100<\/mn><\/mrow><mo>.<\/mo><\/mrow><\/math>\n<\/td>\n<td><\/td>\n<\/tr>\n<\/table>\n<figure id=\"post-251834\" class=\"align-none media-251834\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/quad_growth.svg\" alt=\"\" \/><figcaption>Figure\u00a02.2: Zooming out <math id=\"Ch2.F2.m5\" class=\"ltx_Math\" alttext=\"n^{2}\" display=\"inline\"><msup><mi mathcolor=\"#3B3B3B\">n<\/mi><mn mathcolor=\"#3B3B3B\">2<\/mn><\/msup><\/math><span class=\"ltx_text\" style=\"color:#3B3B3B;\">,\u2002<\/span> <math id=\"Ch2.F2.m6\" class=\"ltx_Math\" alttext=\"n^{2}+n-2\" display=\"inline\"><mrow><mrow><msup><mi mathcolor=\"#0596CC\">n<\/mi><mn mathcolor=\"#0596CC\">2<\/mn><\/msup><mo mathcolor=\"#0596CC\">+<\/mo><mi mathcolor=\"#0596CC\">n<\/mi><\/mrow><mo mathcolor=\"#0596CC\">-<\/mo><mn mathcolor=\"#0596CC\">2<\/mn><\/mrow><\/math><span class=\"ltx_text\" style=\"color:#0596CC;\">,\u2002<\/span> and\r\n\u2002<math id=\"Ch2.F2.m7\" class=\"ltx_Math\" alttext=\"0.5n^{2}+0.5n\" display=\"inline\"><mrow><mrow><mn mathcolor=\"#D9541A\">0.5<\/mn><mo mathcolor=\"#D9541A\">\u2062<\/mo><msup><mi mathcolor=\"#D9541A\">n<\/mi><mn mathcolor=\"#D9541A\">2<\/mn><\/msup><\/mrow><mo mathcolor=\"#D9541A\">+<\/mo><mrow><mn mathcolor=\"#D9541A\">0.5<\/mn><mo mathcolor=\"#D9541A\">\u2062<\/mo><mi mathcolor=\"#D9541A\">n<\/mi><\/mrow><\/mrow><\/math><span class=\"ltx_text\" style=\"color:#D9541A;\">,\u2002<\/span> as <math id=\"Ch2.F2.m8\" class=\"ltx_Math\" alttext=\"n\" display=\"inline\"><mi>n<\/mi><\/math> gets larger and larger.<\/figcaption><\/figure>\n<p>The <math id=\"Ch2.S1.SS1.p7.m1\" class=\"ltx_Math\" alttext=\"0.5\" display=\"inline\"><mn>0.5<\/mn><\/math> coefficient cancels itself out! The idea that <math id=\"Ch2.S1.SS1.p7.m2\" class=\"ltx_Math\" alttext=\"n^{2}-n-2\" display=\"inline\"><mrow><msup><mi>n<\/mi><mn>2<\/mn><\/msup><mo>-<\/mo><mi>n<\/mi><mo>-<\/mo><mn>2<\/mn><\/mrow><\/math> and <math id=\"Ch2.S1.SS1.p7.m3\" class=\"ltx_Math\" alttext=\"0.5n^{2}+0.5n\" display=\"inline\"><mrow><mrow><mn>0.5<\/mn><mo>\u2062<\/mo><msup><mi>n<\/mi><mn>2<\/mn><\/msup><\/mrow><mo>+<\/mo><mrow><mn>0.5<\/mn><mo>\u2062<\/mo><mi>n<\/mi><\/mrow><\/mrow><\/math> both grow like <math id=\"Ch2.S1.SS1.p7.m4\" class=\"ltx_Math\" alttext=\"n^{2}\" display=\"inline\"><msup><mi>n<\/mi><mn>2<\/mn><\/msup><\/math> isn't easy to get. How does the fastest-growing term of a function ignore all other numbers and dominate growth? Let\u2019s try to visually understand this.<\/p>\n<p>In Figure 2.2, the two time complexities we've seen are compared to <math id=\"Ch2.S1.SS1.p8.m1\" class=\"ltx_Math\" alttext=\"n^{2}\" display=\"inline\"><msup><mi>n<\/mi><mn>2<\/mn><\/msup><\/math> at different zoom levels. As we plot them for larger and larger values of <math id=\"Ch2.S1.SS1.p8.m2\" class=\"ltx_Math\" alttext=\"n\" display=\"inline\"><mi>n<\/mi><\/math>, their curves seem to get closer and closer. Actually, you can plug any numbers into the bullets of <math id=\"Ch2.S1.SS1.p8.m3\" class=\"ltx_Math\" alttext=\"T(n)=\\mathord{\\bullet}\\enskip n^{2}+\\mathord{\\bullet}\\enskip n+\\mathord{\\bullet}\" display=\"inline\"><mrow><mrow><mi>T<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mi>n<\/mi><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><mo>=<\/mo><mrow><mrow><mpadded width=\"+5pt\"><mi mathvariant=\"normal\">\u2219<\/mi><\/mpadded><mo>\u2062<\/mo><msup><mi>n<\/mi><mn>2<\/mn><\/msup><\/mrow><mo>+<\/mo><mrow><mpadded width=\"+5pt\"><mi mathvariant=\"normal\">\u2219<\/mi><\/mpadded><mo>\u2062<\/mo><mi>n<\/mi><\/mrow><mo>+<\/mo><mi mathvariant=\"normal\">\u2219<\/mi><\/mrow><\/mrow><\/math>, and it will still grow like <math id=\"Ch2.S1.SS1.p8.m4\" class=\"ltx_Math\" alttext=\"n^{2}\" display=\"inline\"><msup><mi>n<\/mi><mn>2<\/mn><\/msup><\/math>.<\/p>\n<p>Remember, this effect of curves getting closer works if the fastest-growing term is the same. The plot of a function with a linear growth (<math id=\"Ch2.S1.SS1.p9.m1\" class=\"ltx_Math\" alttext=\"n\" display=\"inline\"><mi>n<\/mi><\/math>) never gets closer and closer to one with a quadratic growth (<math id=\"Ch2.S1.SS1.p9.m2\" class=\"ltx_Math\" alttext=\"n^{2}\" display=\"inline\"><msup><mi>n<\/mi><mn>2<\/mn><\/msup><\/math>), which in turn never gets closer and closer to one having a cubic growth (<math id=\"Ch2.S1.SS1.p9.m3\" class=\"ltx_Math\" alttext=\"n^{3}\" display=\"inline\"><msup><mi>n<\/mi><mn>3<\/mn><\/msup><\/math>).<\/p>\n<p>That's why with very big inputs, algorithms with a quadratically growing cost perform a lot worse than algorithms with a linear cost. However, they perform a lot better than those with a cubic cost. If you\u2019ve understood this, the next section will be easy: we will just learn the fancy notation coders use to express this.<\/p>\n<h3>2.2 The Big-O Notation<\/h3>\n<p>There's a special notation to refer to classes of growth: the <span class=\"ltx_text ltx_font_bold\">Big-O notation<\/span>. A function with a fastest-growing term of <math id=\"Ch2.S2.p1.m1\" class=\"ltx_Math\" alttext=\"2^{n}\" display=\"inline\"><msup><mn>2<\/mn><mi>n<\/mi><\/msup><\/math> <em class=\"ltx_emph\">or weaker<\/em> is <math id=\"Ch2.S2.p1.m2\" class=\"ltx_Math\" alttext=\"O(2^{n})\" display=\"inline\"><mrow><mi>O<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><msup><mn>2<\/mn><mi>n<\/mi><\/msup><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/math>; one with a quadratic <em class=\"ltx_emph\">or weaker<\/em> growth is <math id=\"Ch2.S2.p1.m3\" class=\"ltx_Math\" alttext=\"O(n^{2})\" display=\"inline\"><mrow><mi>O<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><msup><mi>n<\/mi><mn>2<\/mn><\/msup><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/math>; growing linearly <em class=\"ltx_emph\">or less<\/em>, <math id=\"Ch2.S2.p1.m4\" class=\"ltx_Math\" alttext=\"O(n)\" display=\"inline\"><mrow><mi>O<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mi>n<\/mi><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/math>, and so on. The notation is used for expressing the dominant term of algorithms' cost functions in the worst case\u2014that's the standard way of expressing time complexity<sup>3<\/sup>.<\/p>\n<figure id=\"post-251835\" class=\"align-none media-251835\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/growth_curves.svg\" alt=\"\" \/><figcaption>Figure\u00a02.3: Different orders of growth often seen inside <math id=\"Ch2.F3.m2\" class=\"ltx_Math\" alttext=\"O\" display=\"inline\"><mi>O<\/mi><\/math>.<\/figcaption><\/figure>\n<p>Both Selection Sort and Bubble Sort are <math id=\"Ch2.S2.p2.m1\" class=\"ltx_Math\" alttext=\"O(n^{2})\" display=\"inline\"><mrow><mi>O<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><msup><mi>n<\/mi><mn>2<\/mn><\/msup><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/math>, but we'll soon discover <math id=\"Ch2.S2.p2.m2\" class=\"ltx_Math\" alttext=\"O(n\\log n)\" display=\"inline\"><mrow><mi>O<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mrow><mi>n<\/mi><mo>\u2062<\/mo><mrow><mi>log<\/mi><mo>\u2061<\/mo><mi>n<\/mi><\/mrow><\/mrow><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/math> algorithms that do the same job. With our <math id=\"Ch2.S2.p2.m3\" class=\"ltx_Math\" alttext=\"O(n^{2})\" display=\"inline\"><mrow><mi>O<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><msup><mi>n<\/mi><mn>2<\/mn><\/msup><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/math> algorithms, 10<math id=\"Ch2.S2.p2.m4\" class=\"ltx_Math\" alttext=\"\\times\" display=\"inline\"><mo>\u00d7<\/mo><\/math> the input size resulted in 100<math id=\"Ch2.S2.p2.m5\" class=\"ltx_Math\" alttext=\"\\times\" display=\"inline\"><mo>\u00d7<\/mo><\/math> the running cost. Using a <math id=\"Ch2.S2.p2.m6\" class=\"ltx_Math\" alttext=\"O(n\\log n)\" display=\"inline\"><mrow><mi>O<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mrow><mi>n<\/mi><mo>\u2062<\/mo><mrow><mi>log<\/mi><mo>\u2061<\/mo><mi>n<\/mi><\/mrow><\/mrow><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/math> algorithm, 10<math id=\"Ch2.S2.p2.m7\" class=\"ltx_Math\" alttext=\"\\times\" display=\"inline\"><mo>\u00d7<\/mo><\/math> the input size results in only <math id=\"Ch2.S2.p2.m8\" class=\"ltx_Math\" alttext=\"10\\log 10\\approx 34\\mathord{\\times}\" display=\"inline\"><mrow><mrow><mn>10<\/mn><mo>\u2062<\/mo><mrow><mi>log<\/mi><mo>\u2061<\/mo><mn>10<\/mn><\/mrow><\/mrow><mo>\u2248<\/mo><mrow><mn>34<\/mn><mo>\u2062<\/mo><mi mathvariant=\"normal\">\u00d7<\/mi><\/mrow><\/mrow><\/math> the running cost.<\/p>\n<p>When <math id=\"Ch2.S2.p3.m1\" class=\"ltx_Math\" alttext=\"n\" display=\"inline\"><mi>n<\/mi><\/math> is a million, <math id=\"Ch2.S2.p3.m2\" class=\"ltx_Math\" alttext=\"n^{2}\" display=\"inline\"><msup><mi>n<\/mi><mn>2<\/mn><\/msup><\/math> is a trillion, whereas <math id=\"Ch2.S2.p3.m3\" class=\"ltx_Math\" alttext=\"n\\log n\" display=\"inline\"><mrow><mi>n<\/mi><mo>\u2062<\/mo><mrow><mi>log<\/mi><mo>\u2061<\/mo><mi>n<\/mi><\/mrow><\/mrow><\/math> is just a few million. Years running a quadratic algorithm on a large input could be equivalent to minutes if a <math id=\"Ch2.S2.p3.m4\" class=\"ltx_Math\" alttext=\"O(n\\log n)\" display=\"inline\"><mrow><mi>O<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mrow><mi>n<\/mi><mo>\u2062<\/mo><mrow><mi>log<\/mi><mo>\u2061<\/mo><mi>n<\/mi><\/mrow><\/mrow><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/math> algorithm was used. That\u2019s why you need time complexity analysis when you design systems that handle very large inputs.<\/p>\n<p>When designing a computational system, it's important to anticipate the most frequent operations. Then you can compare the Big-O costs of different algorithms that do these operations<sup>4<\/sup>. Also, most algorithms only work with specific input structures. If you choose your algorithms in advance, you can structure your input data accordingly.<\/p>\n<p>Some algorithms always run for a constant duration regardless of input size\u2014they're <math id=\"Ch2.S2.p5.m1\" class=\"ltx_Math\" alttext=\"O(1)\" display=\"inline\"><mrow><mi>O<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mn>1<\/mn><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/math>. For example, checking if a number is odd or even: we see if its last digit is odd and <em class=\"ltx_emph\">boom<\/em>, problem\r\nsolved. No matter how big the number. We'll see more <math id=\"Ch2.S2.p5.m2\" class=\"ltx_Math\" alttext=\"O(1)\" display=\"inline\"><mrow><mi>O<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mn>1<\/mn><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/math> algorithms in the next chapters. They're amazing, but first let's see which algorithms are <em>not<\/em> amazing.<\/p>\n<h3>2.3 Exponentials<\/h3>\n<p>We say <math id=\"Ch2.S3.p1.m1\" class=\"ltx_Math\" alttext=\"O(2^{n})\" display=\"inline\"><mrow><mi>O<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><msup><mn>2<\/mn><mi>n<\/mi><\/msup><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/math> algorithms are <span class=\"ltx_text ltx_font_bold\">exponential time<\/span>. From the graph of growth orders (Figure 2.3), it doesn't seem the quadratic <math id=\"Ch2.S3.p1.m2\" class=\"ltx_Math\" alttext=\"n^{2}\" display=\"inline\"><msup><mi>n<\/mi><mn>2<\/mn><\/msup><\/math> and the exponential <math id=\"Ch2.S3.p1.m3\" class=\"ltx_Math\" alttext=\"2^{n}\" display=\"inline\"><msup><mn>2<\/mn><mi>n<\/mi><\/msup><\/math> are much different. Zooming out the graph, it's obvious the exponential growth brutally dominates the quadratic one:<\/p>\n<figure id=\"post-251836\" class=\"align-none media-251836\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/growth_curves_2.svg\" alt=\"\" \/><figcaption>Figure 2.4: Different orders of growth, zoomed out. The linear and logarithmic curves grow so little they aren't visible anymore.<\/figcaption><\/figure>\n<p>Exponential time grows so much, we consider these algorithms \"not runnable\". They run for very few input types, and require huge amounts of computing power if inputs aren't tiny. Optimizing every aspect of the code or using supercomputers doesn't help. The crushing exponential always dominates growth and keeps these algorithms unviable.<\/p>\n<p>To illustrate the explosiveness of exponential growth, let's zoom out the graph even more and change the numbers (Figure 2.5). The exponential was reduced in power (from <math id=\"Ch2.S3.p3.m1\" class=\"ltx_Math\" alttext=\"2\" display=\"inline\"><mn>2<\/mn><\/math> to <math id=\"Ch2.S3.p3.m2\" class=\"ltx_Math\" alttext=\"1.5\" display=\"inline\"><mn>1.5<\/mn><\/math>) and had its growth divided by a thousand. The polynomial had its exponent increased (from <math id=\"Ch2.S3.p3.m3\" class=\"ltx_Math\" alttext=\"2\" display=\"inline\"><mn>2<\/mn><\/math> to <math id=\"Ch2.S3.p3.m4\" class=\"ltx_Math\" alttext=\"3\" display=\"inline\"><mn>3<\/mn><\/math>) and its growth multiplied by a thousand.<\/p>\n<figure id=\"post-251837\" class=\"align-none media-251837\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/growth_curves_3.svg\" alt=\"\" \/><figcaption>Figure\u00a02.5: No exponential can be beaten by a polynomial. At this zoom level, even the <math id=\"Ch2.F5.m2\" class=\"ltx_Math\" alttext=\"n\\log n\" display=\"inline\"><mrow><mi>n<\/mi><mo>\u2062<\/mo><mrow><mi>log<\/mi><mo>\u2061<\/mo><mi>n<\/mi><\/mrow><\/mrow><\/math> curve grows too little to be visible.<\/figure>\n<p>Some algorithms are even worse than exponential time algorithms. It's the case of <span class=\"ltx_text ltx_font_bold\">factorial time<\/span> algorithms, whose time complexities are <math id=\"Ch2.S3.p4.m1\" class=\"ltx_Math\" alttext=\"O(n!)\" display=\"inline\"><mrow><mi>O<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mrow><mi>n<\/mi><mo lspace=\"0pt\" rspace=\"3.5pt\">!<\/mo><\/mrow><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/math>. Exponential and factorial time algorithms are horrible, but we need them for the hardest computational problems: the famous <span class=\"ltx_text ltx_font_bold\">NP-complete<\/span> problems. We will see important examples of NP-complete problems in the next chapter. For now, remember this: the first person to find a non-exponential algorithm to a NP-complete problem gets a million dollars<sup>5<\/sup> from the Clay Mathematics Institute.<\/p>\n<p>It's important to recognize the class of problem you're dealing with. If it's known to be NP-complete, trying to find an optimal solution is fighting the impossible. Unless you\u2019re shooting for that million dollars.<\/p>\n<h3>2.4 Counting Memory<\/h3>\n<p>Even if we could perform operations infinitely fast, there would still be a limit to our computing power. During execution, algorithms need working storage to keep track of their ongoing calculations. This consumes <strong>computer memory<\/strong>, which is not infinite.<\/p>\n<p>The measure for the working storage an algorithm needs is called <strong>space complexity<\/strong>. Space complexity analysis is similar to time complexity analysis. The difference is that we count computer memory, and not computing operations. We observe how space complexity evolves when the algorithm's input size grows, just as we do for time complexity.<\/p>\n<p>For example, Selection Sort just needs working storage for a fixed set of variables. The number of variables does not depend on the input size. Therefore, we say Selection Sort's space complexity is <math id=\"Ch2.S4.p3.m1\" class=\"ltx_Math\" alttext=\"O(1)\" display=\"inline\"><mrow><mi>O<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mn>1<\/mn><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/math>: no matter what the input size, it requires the same amount of computer memory for working storage.<\/p>\n<p>However, many other algorithms need working storage that grows with input size. Sometimes, it's impossible to meet an algorithm\u2019s memory requirements. You won't find an appropriate sorting algorithm with <math id=\"Ch2.S4.p4.m1\" class=\"ltx_Math\" alttext=\"O(n\\log n)\" display=\"inline\"><mrow><mi>O<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mrow><mi>n<\/mi><mo>\u2062<\/mo><mrow><mi>log<\/mi><mo>\u2061<\/mo><mi>n<\/mi><\/mrow><\/mrow><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/math> time complexity <em class=\"ltx_emph\">and<\/em> <math id=\"Ch2.S4.p4.m2\" class=\"ltx_Math\" alttext=\"O(1)\" display=\"inline\"><mrow><mi>O<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mn>1<\/mn><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/math> space complexity. Computer memory limitations sometimes force a tradeoff. With low memory, you\u2019ll probably need an algorithm with slow <math id=\"Ch2.S4.p4.m3\" class=\"ltx_Math\" alttext=\"O(n^{2})\" display=\"inline\"><mrow><mi>O<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><msup><mi>n<\/mi><mn>2<\/mn><\/msup><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/math> time complexity because it has <math id=\"Ch2.S4.p4.m4\" class=\"ltx_Math\" alttext=\"O(1)\" display=\"inline\"><mrow><mi>O<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mn>1<\/mn><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/math>\r\nspace complexity.<\/p>\n<h3>Conclusion<\/h3>\n<p>In this chapter, we learned algorithms can have different types of voracity for consuming computing time and computer memory. We\u2019ve seen how to assess it with time and space complexity analysis. We learned to calculate time complexity by finding the <em class=\"ltx_emph\">exact<\/em> <math id=\"Ch2.Sx1.p1.m1\" class=\"ltx_Math\" alttext=\"T(n)\" display=\"inline\"><mrow><mi>T<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mi>n<\/mi><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/math> function, the number of operations performed by an algorithm.<\/p>\n<p>We've seen how to express time complexity using the Big-O notation (<math id=\"Ch2.Sx1.p2.m1\" class=\"ltx_Math\" alttext=\"O\" display=\"inline\"><mi>O<\/mi><\/math>). Throughout this book, we'll perform simple time complexity analysis of algorithms using this notation. Many times, calculating <math id=\"Ch2.Sx1.p2.m2\" class=\"ltx_Math\" alttext=\"T(n)\" display=\"inline\"><mrow><mi>T<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mi>n<\/mi><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><\/math> is not necessary for inferring the Big-O complexity of an algorithm.<\/p>\n<p>We've seen the cost of running exponential algorithms explode in a way that makes these algorithms not runnable for big inputs. And we learned how to answer these questions:<\/p>\n<ul>\n<li>Given different algorithms, do they have a significant difference in terms of operations required to run?<\/li>\n<li>Multiplying the input size by a constant, what happens with the time an algorithm takes to run?<\/li>\n<li>Would an algorithm perform a reasonable number of operations once the size of the input grows?<\/li>\n<li>If an algorithm is too slow for running on an input of a given size, would optimizing the algorithm, or using a supercomputer help?<\/li>\n<\/ul>\n<hr>\n<p><sup>1<\/sup>: To understand an new algorithm, run it on paper with a small sample input.<\/p>\n<p><sup>2<\/sup>: In the previous chapter, we showed <math id=\"Ch2.S1.p3.m7\" class=\"ltx_Math\" alttext=\"\\sum_{i=1}^{n}i=n(n+1)\/2\" display=\"inline\"><mrow><mrow><msubsup><mo largeop=\"true\" symmetric=\"true\">\u2211<\/mo><mrow><mi>i<\/mi><mo>=<\/mo><mn>1<\/mn><\/mrow><mi>n<\/mi><\/msubsup><mi>i<\/mi><\/mrow><mo>=<\/mo><mrow><mrow><mi>n<\/mi><mo>\u2062<\/mo><mrow><mo stretchy=\"false\">(<\/mo><mrow><mi>n<\/mi><mo>+<\/mo><mn>1<\/mn><\/mrow><mo stretchy=\"false\">)<\/mo><\/mrow><\/mrow><mo>\/<\/mo><mn>2<\/mn><\/mrow><\/mrow><\/math>.<\/p>\n<p><sup>3<\/sup>: We say <em>'oh'<\/em>, e.g., \"that sorting algorithm is <em>oh-n-squared<\/em>\".<\/p>\n<p><sup>4<\/sup>: For the Big-O complexities of most algorithms that do common tasks, see <a href=\"http:\/\/code.energy\/bigo\">http:\/\/code.energy\/bigo<\/a><\/p>\n<p><sup>5<\/sup>: It has been proven a non-exponential algorithm for <em class=\"ltx_emph\">any<\/em> NP-complete problem could be generalized to <em class=\"ltx_emph\">all<\/em> NP-complete problems. Since we don't know if such an algorithm exists, you also get a million dollars if you prove an NP-complete problem cannot be solved by non-exponential algorithms!<\/p>\n<hr>\n<figure id=\"post-251767\" class=\"align-none media-251767\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/csd.jpeg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/csd.jpeg 1280w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/csd-300x200.jpeg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/csd-768x512.jpeg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/csd-1024x682.jpeg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p><em>Computer Science Distilled: Learn the Art of Solving Computational Problems<\/em> by Wladston Viana Ferreira Filho is <a href=\"http:\/\/amzn.to\/2mlMhnz\">available on Amazon<\/a> now. <\/p>\n","protected":false},"excerpt":{"rendered":"<p>This is a full chapter excerpt from Wladston Viana Ferreira Filho&#8217;s brand new book <a href=\"http:\/\/amzn.to\/2lEeHZY\">Computer Science Distilled<\/a> which he has graciously allowed for us to publish here.<\/p>\n<blockquote><p>In almost every computation, a variety of arrangements for the processes is possible. It is essential to choose that arrangement which shall tend to minimize the time necessary for the calculation. \u2014Ada Lovelace<\/p><\/blockquote>\n","protected":false},"author":247919,"featured_media":251767,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1148,1115],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251754"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/247919"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251754"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251754\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/251767"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251754"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251754"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251754"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251922,"date":"2017-02-28T05:57:38","date_gmt":"2017-02-28T12:57:38","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251922"},"modified":"2017-02-28T05:57:38","modified_gmt":"2017-02-28T12:57:38","slug":"websites-generate-svg-patterns","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/websites-generate-svg-patterns\/","title":{"rendered":"Websites to Generate SVG Patterns"},"content":{"rendered":"<p>These aren't particularly hard to web search for, but just in case you didn't know they existed I figured I'd drop them here. I've used all three of these in the past and I think they do a good job of driving home how cool of patterns you can make in SVG with such little code.<\/p>\n<p><!--more--><\/p>\n<h3><a href=\"http:\/\/www.heropatterns.com\/\">Hero Patterns<\/a><\/h3>\n<blockquote><p>A collection of repeatable SVG background patterns for you to use on your web projects.<\/p><\/blockquote>\n<figure id=\"post-251923\" class=\"align-none media-251923\"><a href=\"http:\/\/www.heropatterns.com\/\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/HeroPatterns.png\" alt=\"\" \/><\/a><\/figure>\n<figure><img src=\"https:\/\/css-tricks.com\/images\/wiggle.gif\"><\/figure>\n<h3><a href=\"https:\/\/philiprogers.com\/svgpatterns\/\">SVG Patterns Gallery<\/a><\/h3>\n<blockquote><p>SVG images are typically smaller than bitmap images and remain sharp on high-dpi screens. Unlike CSS3 gradients, SVG images are supported on IE9.<\/p><\/blockquote>\n<figure id=\"post-251925\" class=\"align-none media-251925\"><a href=\"https:\/\/philiprogers.com\/svgpatterns\/\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/patternsgallery.png\" alt=\"\" \/><\/a><\/figure>\n<h3><a href=\"http:\/\/www.svgeneration.com\/\">SVGeneration<\/a><\/h3>\n<blockquote><p>Scalable Vector Graphics are crisp and clear and can be rendered in all modern browsers.<\/p><\/blockquote>\n<figure id=\"post-251926\" class=\"align-none media-251926\"><a href=\"http:\/\/www.svgeneration.com\/\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/svggeneration.png\" alt=\"\" \/><\/a><\/figure>\n<figure id=\"post-251927\" class=\"align-none media-251927\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/triangles.gif\" alt=\"\" \/><\/figure>\n","protected":false},"excerpt":{"rendered":"<p>These aren&#8217;t particularly hard to web search for, but just in case you didn&#8217;t know they existed I figured I&#8217;d drop them here. I&#8217;ve used all three of these in the past and I think they do a good job of driving home how cool of patterns you can make in SVG with such little [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":251923,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1157,469],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251922"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251922"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251922\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/251923"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251922"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251922"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251922"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":252086,"date":"2017-02-28T05:57:04","date_gmt":"2017-02-28T12:57:04","guid":{"rendered":"https:\/\/css-tricks.com\/?p=252086"},"modified":"2017-02-28T07:27:54","modified_gmt":"2017-02-28T14:27:54","slug":"scaling-svg-clipping-paths-css-use","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/scaling-svg-clipping-paths-css-use\/","title":{"rendered":"Scaling SVG Clipping Paths for CSS Use"},"content":{"rendered":"<p><a href=\"http:\/\/meyerweb.com\/eric\/thoughts\/2017\/02\/24\/scaling-svg-clipping-paths-for-css-use\/\">A legit CSS trick<\/a> documented by Eric Meyer!<\/p>\n<p>So there is <code>polygon()<\/code> in CSS and <code>&lt;polygon&gt;<\/code> in SVG. They are closely related, but there are <a href=\"https:\/\/css-tricks.com\/basic-shapes-path-never-twain-shall-meet\/\">all kinds of weirdnesses<\/a>. For example, you can use <code>path()<\/code> in CSS to update the d attribute of a <code>&lt;path&gt;<\/code>, but you can't do the same with <code>polygon()<\/code> and <code>&lt;polygon&gt;<\/code>.<\/p>\n<p><!--more--><\/p>\n<p>Part of the problem is that <code>polygon()<\/code> in CSS only accepts numbers with units, like px, %, em, or whatever.<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.clip-me {\r\n  \/* Works! *\/\r\n  clip-path: polygon(50% 0, 100% 25%, 100% 75%, 50% 100%, 0 75%, 0 25%);\r\n\r\n  \/* Does NOT work *\/\r\n  clip-path: polygon(50 0, 100 25, 100 75, 50 100, 0 75, 0 25);\r\n}<\/code><\/pre>\n<p>Which is exactly the opposite in SVG:<\/p>\n<pre rel=\"SVG\"><code class=\"language-markup\">&lt;svg&gt;\r\n  \/* Works! *\/\r\n  &lt;polygon points=\"50 0, 100 25, 100 75, 50 100, 0 75, 0 25\"&gt;&lt;\/polygon&gt;\r\n\r\n  \/* Does NOT work *\/\r\n  &lt;polygon points=\"50px 0px, 100px 25px, 100px 75px, 50px 100px, 0px 75px, 0px 25px\"&gt;&lt;\/polygon&gt;\r\n  &lt;polygon points=\"50% 0%, 100% 25%, 100% 75%, 50% 100%, 0px 75%, 0% 25%\"&gt;&lt;\/polygon&gt;\r\n&lt;\/svg&gt;<\/code><\/pre>\n<p>The trick is that you can force the SVG coordinates to <em>behave like<\/em> percentage coordinates (even with weird <code>viewBox<\/code>es) with some light math, a <code>transform<\/code> attribute, and a special <code>clipPathUnits<\/code> attribute.<\/p>\n<pre rel=\"SVG\"><code class=\"language-markup\">&lt;svg viewBox=\"0 0 329.6667 86\"&gt;\r\n  &lt;clipPath id=\"cloud02\" clipPathUnits=\"objectBoundingBox\"\r\n   transform=\"scale(0.003033 0.0116279)\"&gt;\r\n    &lt;path d=\"\u2026(coordinates go here)\u2026\"\/&gt;\r\n  &lt;\/clipPath&gt;\r\n&lt;\/svg&gt;<\/code><\/pre>\n<blockquote><p>Those two values are 1\/329.6667 and 1\/86, respectively, and they effectively scale every point in the d attribute to fit into the needed 0\u20131 range. Thus we have an SVG clipping path that scales with the element and fits to its dimensions!<\/p><\/blockquote>\n","protected":false},"excerpt":{"rendered":"<p>A legit CSS trick documented by Eric Meyer! So there is polygon() in CSS and &lt;polygon&gt;&lt;\/polygon&gt; in SVG. They are closely related, but there are all kinds of weirdnesses. For example, you can use path() in CSS to update the d attribute of a &lt;path&gt;&lt;\/path&gt;, but you can&#8217;t do the same with polygon() and &lt;polygon&gt;&lt;\/polygon&gt;.<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[469],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252086"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=252086"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/252086\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=252086"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=252086"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=252086"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251999,"date":"2017-02-27T08:14:34","date_gmt":"2017-02-27T15:14:34","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251999"},"modified":"2017-02-27T08:14:54","modified_gmt":"2017-02-27T15:14:54","slug":"annotation-now-web-standard","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/annotation-now-web-standard\/","title":{"rendered":"Annotation is Now a Web Standard"},"content":{"rendered":"<p>This sure is exciting news: the various groups that make up the W3C have agreed upon a set of rules by which we\u2019ll be able to annotate, highlight and make comments to a webpage without the need of a third party script or framework. <\/p>\n<p>Dan Whaley describes why this could be a big deal:<\/p>\n<blockquote><p>The W3C standards are a key milestone towards a future in which all pages could support rich layers of conversation without requiring any action by their publishers\u2014because that capability can be built into the browser itself and be available as a native feature, just like like web search. The shared vision is that conversations will be able happen anywhere on the Web, or even on documents in native apps, and inline instead of below-the fold, in a federated, standards-based way.<\/p><\/blockquote>\n","protected":false},"excerpt":{"rendered":"<p>This sure is exciting news: the various groups that make up the W3C have agreed upon a set of rules by which we\u2019ll be able to annotate, highlight and make comments to a webpage without the need of a third party script or framework. Dan Whaley describes why this could be a big deal: The [&hellip;]<\/p>\n","protected":false},"author":223806,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[1159],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251999"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/223806"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251999"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251999\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251999"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251999"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251999"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251741,"date":"2017-02-27T05:37:53","date_gmt":"2017-02-27T12:37:53","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251741"},"modified":"2017-02-27T05:37:53","modified_gmt":"2017-02-27T12:37:53","slug":"responsive-images-wordpress-cloudinary-part-2","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/responsive-images-wordpress-cloudinary-part-2\/","title":{"rendered":"Responsive Images in WordPress with Cloudinary, Part 2"},"content":{"rendered":"<p>In Part\u00a01 of this series, I provided some background on responsive images, describing how you can add <code>srcset<\/code> and <code>sizes<\/code> attributes to an <code>img<\/code> element to serve appropriately sized image files to users of a website based on the size and capabilities of their browser and device. I also shared how WordPress used its native image resizing functionality to implement <code>srcset<\/code> and <code>sizes<\/code> automatically and how you can use an external image service like <a href=\"http:\/\/synd.co\/2l93ek1\">Cloudinary<\/a> to extend the native implementation that WordPress provides.<\/p>\n<p><!--more--><\/p>\n<div class=\"article-series\">\n<h4>Article Series:<\/h4>\n<ol>\n<li><a href=\"https:\/\/css-tricks.com\/responsive-images-wordpress-cloudinary-part-1\/\">An Intro to Responsive Images and WordPress<\/a><\/li>\n<li>A WordPress Plugin integrating Cloudinary and Responsive Images (you are here!)<\/li>\n<\/ol>\n<\/div>\n<p>In this installment, I go into more detail about how image resizing in WordPress works. I explain how I used built-in WordPress hooks along with <a href=\"http:\/\/synd.co\/2l93ek1\">Cloudinary's<\/a> application programming interface (API)\u2014and its <a href=\"http:\/\/synd.co\/2lGrltq\">PHP integration library<\/a>\u2014to create <a href=\"http:\/\/synd.co\/2l11AUh\">a WordPress plug\u2011in<\/a> that offloads responsive image resizing and optimization to Cloudinary.<\/p>\n<h3>Getting Started<\/h3>\n<p>This article assumes that you understand how to create a WordPress plug\u2011in. If you don't, read the WordPress Codex article <a href=\"http:\/\/synd.co\/2mmyA73\">Writing a Plugin<\/a> before continuing. For my example, I used the <a href=\"https:\/\/wp-cli.org\/commands\/scaffold\/plugin\/\">WP-CLI<\/a> to create a scaffold for my plug\u2011in from the command line.<\/p>\n<p>Next, follow the instructions in the WordPress <a href=\"http:\/\/synd.co\/2lGrltq\">PHP Getting Started Guide<\/a> to download and include <a href=http:\/\/synd.co\/2lGD0sz\">Cloudinary's PHP library<\/a> in your plug\u2011in. Save the library files to the `\/lib\/cloudinary_php\/` directory within your plug\u2011in, and include them in your main plug\u2011in file with the following code:<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">\/\/ Load dependencies.\r\nrequire 'lib\/cloudinary_php\/src\/Cloudinary.php';\r\nrequire 'lib\/cloudinary_php\/src\/Uploader.php';\r\nrequire 'lib\/cloudinary_php\/src\/Api.php';<\/code><\/pre>\n<p>Finally, set up Cloudinary using the configuration parameters found in your <a href=\"http:\/\/synd.co\/2lpMzLU\">Cloudinary management console<\/a>, which you define as constants in your `wp-config.php` file because it's a bad idea to save account information directly to your plug\u2011in. Here's what the config setup in my plug\u2011in looks like:<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">Cloudinary::config( array(\r\n \"cloud_name\" =&gt; CLD_CLOUD_NAME,\r\n \"api_key\"    =&gt; CLD_API_KEY,\r\n \"api_secret\" =&gt; CLD_API_SECRET\r\n) );<\/code><\/pre>\n<p>Now that you have configured your plug\u2011in to communicate with the <a href=\"http:\/\/synd.co\/2l93ek1\">Cloudinary<\/a> API, you can start building the functionality of your plug\u2011in.<\/p>\n<h3>Image Resizing in WordPress<\/h3>\n<p>In planning my plug\u2011in, I wanted to integrate seamlessly with the default user experience for managing images in WordPress. I also wanted to maintain local copies of my files so that everything would continue working even if I decided to deactivate the plug\u2011in. To fulfill these goals, it's helpful to understand what WordPress does whenever you upload an image.<\/p>\n<figure id=\"post-251897\" class=\"align-none media-251897\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/wp_generate_attachment_metadata.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/wp_generate_attachment_metadata.png 4500w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/wp_generate_attachment_metadata-300x160.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/wp_generate_attachment_metadata-768x410.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/wp_generate_attachment_metadata-1024x546.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>By default, <code>wp_generate_attachment_metadata()<\/code> resizes images and stores metadata about them in the database.<\/figcaption><\/figure>\n<p>When you upload an image, WordPress executes the <code>media_handle_upload()<\/code> function, which saves the uploaded file to the server and creates a new post in the database representing the image using the <code>wp_insert_attachment()<\/code> function. After the post is created, <code>media_handle_upload()<\/code> calls <code>wp_generate_attachment_metadata()<\/code> to create additional metadata about the image. It's during this step that WordPress creates additional sizes of the image and includes information about those sizes in the attachment metadata. Here's an example of what attachment metadata in WordPress looks like by default:<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">array(\r\n  'width' =&gt; 1500,\r\n  'height' =&gt; 1500,\r\n  'file' =&gt; '2016\/11\/image.jpg',\r\n  'sizes' =&gt; array(\r\n    'thumbnail' =&gt; array(\r\n      'file' =&gt; 'image-150x150.jpg',\r\n      'width' =&gt; 150,\r\n      'height' =&gt; 150,\r\n      'mime-type' =&gt; 'image\/jpeg',\r\n    ),\r\n    'medium' =&gt; array(\r\n      'file' =&gt; 'image-300x300.jpg',\r\n      'width' =&gt; 300,\r\n      'height' =&gt; 300,\r\n      'mime-type' =&gt; 'image\/jpeg',\r\n    ),\r\n    'large' =&gt; array(\r\n      'file' =&gt; 'image-1024x1024.jpg',\r\n      'width' =&gt; 1024,\r\n      'height' =&gt; 1024,\r\n      'mime-type' =&gt; 'image\/jpeg',\r\n    ),\r\n  ),\r\n)<\/code><\/pre>\n<p>As you can see, WordPress now knows the file name and dimensions for the original image file, and for any additional sizes created by WordPress after the image was uploaded. WordPress references this metadata to create the HTML markup needed to display the image on a webpage. This is the information we will extend by including information generated by the <a href=\"http:\/\/synd.co\/2l93ek1\">Cloudinary<\/a> API.<\/p>\n<h3>Integrating WordPress with Cloudinary<\/h3>\n<p>For the remainder of this article, I'll be referencing the <code>Cloudinary_WP_Integration<\/code> class in the plug\u2011in. Here's the <a href=\"http:\/\/synd.co\/2kNcDlv\">full source code for this class<\/a>. In this class, I've added a method named <code>register_hooks()<\/code>, which adds all my custom functionality by taking advantage of WordPress built-in filter hooks. To better understand WordPress hooks, read about the <a href=\"http:\/\/synd.co\/2kNa96g\">Plugin API in the WordPress Codex<\/a>.<\/p>\n<figure id=\"post-251898\" class=\"align-none media-251898\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/generate_cloudinary_metadata.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/generate_cloudinary_metadata.png 4500w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/generate_cloudinary_metadata-300x160.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/generate_cloudinary_metadata-768x410.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/generate_cloudinary_metadata-1024x546.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption><code>generate_cloudinary_data()<\/code> mirrors images to Cloudinary and saves additional, Cloudinary-specific data to the database.<\/figcaption><\/figure>\n<p>Because I want to mirror uploaded files with <a href=\"http:\/\/synd.co\/2l93ek1\">Cloudinary<\/a> and use its API to generate a set of image sizes for use in <code>srcset<\/code> attributes, the first thing I do is hook into the <code>wp_generate_attachment_metadata<\/code> filter to extend the metadata that WordPress is already creating. To register this functionality, I added the following code to my <code>register_hooks()<\/code> class:<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">add_filter( 'wp_generate_attachment_metadata', array( $this, 'generate_cloudinary_data' ) );<\/code><\/pre>\n<p>This tells WordPress to call the <code>generate_cloudinary_data()<\/code> method in my class when the <code>wp_generate_attachment_metadata<\/code> filter is fired. Here's what that method looks like:<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">public function generate_cloudinary_data( $metadata ) {\r\n \/\/ Bail early if we don't have a file path to work with.\r\n if ( ! isset( $metadata['file'] ) ) {\r\n  return $metadata;\r\n }\r\n\r\n $uploads = wp_get_upload_dir();\r\n $filepath = trailingslashit( $uploads['basedir'] ) . $metadata['file'];\r\n\r\n \/\/ Mirror the image on Cloudinary and build custom metadata from the response.\r\n if ( $data = $this-&gt;handle_upload( $filepath ) ) {\r\n  $metadata['cloudinary_data'] = array(\r\n   'public_id'  =&gt; $data['public_id'],\r\n   'width'      =&gt; $data['width'],\r\n   'height'     =&gt; $data['height'],\r\n   'bytes'      =&gt; $data['bytes'],\r\n   'url'        =&gt; $data['url'],\r\n   'secure_url' =&gt; $data['secure_url'],\r\n  );\r\n\r\n  foreach ( $data['responsive_breakpoints'][0]['breakpoints'] as $size ) {\r\n   $metadata['cloudinary_data']['sizes'][$size['width'] ] = $size;\r\n  }\r\n };\r\n\r\n return $metadata;\r\n}<\/code><\/pre>\n<p>This code uses <code>wp_get_upload_dir()<\/code> to build the path to the uploaded image and passes it to a second method, <code>handle_upload()<\/code>, which uploads the image to Cloudinary and returns data from the API. When <code>handle_upload()<\/code> is complete, I add the returned data to a <code>cloudinary_data<\/code> array in the metadata, and then loop through each breakpoint size that Cloudinary returns\u2014which I'll explain in a moment\u2014and save those to the <code>cloudinary_data['sizes']<\/code> key. Let's look at what happens in the <code>handle_upload()<\/code> method:<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">public function handle_upload( $file ) {\r\n  $data = false;\r\n  if ( is_callable( array( '\\Cloudinary\\Uploader', 'upload' ) ) ) {\r\n    $api_args = array(\r\n      'responsive_breakpoints' =&gt; array(\r\n        array(\r\n          'create_derived' =&gt; false,\r\n          'bytes_step'  =&gt; 20000,\r\n          'min_width' =&gt; 200,\r\n          'max_width' =&gt; 1000,\r\n          'max_images' =&gt; 20,\r\n        ),\r\n     ),\r\n     'use_filename' =&gt; true,\r\n    );\r\n    $response = \\Cloudinary\\Uploader::upload( $file, $api_args );\r\n    \/\/ Check for a valid response before returning Cloudinary data.\r\n    $data = isset( $response['public_id'] ) ? $response : false;\r\n  }\r\n  return $data;\r\n}<\/code><\/pre>\n<p>This method determines whether it can call the <code>upload()<\/code> method in the <code>\\Cloudinary\\Uploader<\/code> class I imported earlier by using <code>is_callable()<\/code>. If it can, it builds the arguments I plan to pass to <code>\\Cloudinary\\Uploader::upload()<\/code>. First, I use Cloudinary's <a href=\"http:\/\/synd.co\/2mmihHB\">responsive image breakpoint functionality<\/a> to automatically generate the best set of image sizes based on the content of the image itself. I'm passing a few options to the responsive_breakpoints argument here, so let me explain each:<\/p>\n<ul>\n<li><code>create_derived<\/code> tells Cloudinary whether it should create additional image files as soon as the original is uploaded. Passing <code>false<\/code> generates data about the image without actually creating the files until they're requested.<\/li>\n<li><code>bytes_step<\/code> defines how many bytes should be allowed between images before creating a new size. I'm going with 20,000 (or 20\u00a0KB), but you can tweak that number to suit your needs.<\/li>\n<li>The <code>min_width<\/code> and <code>max_width<\/code> arguments tell Cloudinary what the dimensions of the smallest and largest images, respectively, should be so that you don't create unnecessary image sizes.<\/li>\n<li><code>max_images<\/code> sets the maximum total number of images that Cloudinary should create.<\/li>\n<\/ul>\n<p>With this information, <a href=\"http:\/\/synd.co\/2l93ek1\">Cloudinary<\/a> automatically determines the optimal number and size of images to create for use in <code>srcset<\/code> attributes. Finally, I set <code>use_filename<\/code> to true, which tells Cloudinary to use file names matching the one I'm uploading\u2014defined as the <code>$file<\/code> variable\u2014rather than generating random image file names. This helps me identify images in my Cloudinary library but makes no real difference otherwise.<\/p>\n<p>Now that I have a way to automatically upload images to Cloudinary and save the returned data to the attachment metadata for my image, I can use these data to serve images from the Cloudinary content delivery network (CDN) rather than my local server. To do this, I first want to filter all attachment URLs so that the Cloudinary URL is used instead of local URLs. For this, I've added a filter named <code>get_attachment_url()<\/code> to the <code>wp_get_attachment_url<\/code> hook in my <code>register_hooks()<\/code> method here:<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">add_filter( 'wp_get_attachment_url', array( $this, 'get_attachment_url' ), 10, 2 );<\/code><\/pre>\n<p>This line returns the URL and attachment ID of an image to be passed to my <code>get_attachment_url()<\/code> method, which looks like this:<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">public function get_attachment_url( $url, $attachment_id ) {\r\n  $metadata = wp_get_attachment_metadata( $attachment_id );\r\n\r\n  if ( isset( $metadata['cloudinary_data']['secure_url'] ) ) {\r\n    $url = $metadata['cloudinary_data']['secure_url'];\r\n  }\r\n\r\n  return $url;\r\n}<\/code><\/pre>\n<p>This method looks up the metadata associated with my image and determines whether a URL from the <code>cloudinary_data<\/code> I saved in my last step exists. If it does, it returns the URL from Cloudinary. Otherwise, it returns the local URL.<\/p>\n<p>This takes care of the URL for the full-sized image, but replacing URLs for any of the sizes WordPress creates (i.e.,\u00a0intermediate sizes) can be a bit trickier. To accomplish this, I need to hook into <code>image_downsize()<\/code>, which is the function WordPress uses to get information about intermediate sizes associated with an image. Here, I use Cloudinary instead of local files.<\/p>\n<p>The following code registers my filter followed by the method that replaces the data from WordPress with data from Cloudinary:<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">add_filter( 'image_downsize', array( $this, 'image_downsize' ), 10, 3 );\r\npublic function image_downsize( $downsize, $attachment_id, $size ) {\r\n  $metadata = wp_get_attachment_metadata( $attachment_id );\r\n\r\n  if ( isset( $metadata['cloudinary_data']['secure_url'] ) ) {\r\n    $sizes = $this-&gt;get_wordpress_image_size_data( $size );\r\n\r\n    \/\/ If we found size data, let's figure out our own downsize attributes.\r\n    if ( is_string( $size ) &amp;&amp; isset( $sizes[ $size ] ) &amp;&amp;\r\n       ( $sizes[ $size ]['width'] &lt;= $metadata['cloudinary_data']['width'] ) &amp;&amp;\r\n       ( $sizes[ $size ]['height'] &lt;= $metadata['cloudinary_data']['height'] ) ) {\r\n\r\n      $width = $sizes[ $size ]['width'];\r\n      $height = $sizes[ $size ]['height'];\r\n\r\n      $dims = image_resize_dimensions( $metadata['width'], $metadata['height'], $sizes[ $size ]['width'], $sizes[ $size ]['height'], $sizes[ $size ]['crop'] );\r\n\r\n      if ( $dims ) {\r\n        $width = $dims[4];\r\n        $height = $dims[5];\r\n      }\r\n\r\n      $crop = ( $sizes[ $size ]['crop'] ) ? 'c_lfill' : 'c_limit';\r\n\r\n      $url_params = \"w_$width,h_$height,$crop\";\r\n\r\n      $downsize = array(\r\n        str_replace( '\/image\/upload', '\/image\/upload\/' . $url_params, $metadata['cloudinary_data']['secure_url'] ),\r\n        $width,\r\n        $height,\r\n        true,\r\n      );\r\n\r\n    } elseif ( is_array( $size ) ) {\r\n      $downsize = array(\r\n        str_replace( '\/image\/upload', \"\/image\/upload\/w_$size[0],h_$size[1],c_limit\", $metadata['cloudinary_data']['secure_url'] ),\r\n        $size[0],\r\n        $size[1],\r\n        true,\r\n      );\r\n    }\r\n  }\r\n\r\n  return $downsize;\r\n}<\/code><\/pre>\n<p>This is a long block of code, so let me walk through it. Again, I start by getting the attachment metadata and checking for the <code>$metadata['cloudinary_data']<\/code> information. I then use a helper function called <code>get_wordpress_image_size_data()<\/code> to get the image sizes that are registered with WordPress, which I then pass to <code>image_resize_dimensions()<\/code> to calculate the expected dimensions if I'm using a named size (e.g.,\u00a0thumbnail, medium). If the <code>$size<\/code> parameter is already an array of dimensions, which happens occasionally, I pass those dimensions directly to <a href=\"http:\/\/synd.co\/2l93ek1\">Cloudinary<\/a> for processing.<\/p>\n<p>I should note here that I could have used the Cloudinary API to replicate all the alternate sizes WordPress creates. Instead, I chose to take advantage of <a href=\"http:\/\/synd.co\/2lGKbR9\">Cloudinary's dynamic URL image generation functionality<\/a> to generate the additional sizes I need by replacing the URL to the full-sized image with dynamic parameters like this:<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">str_replace( \r\n  '\/image\/upload',\r\n  \"\/image\/upload\/w_$size[0],h_$size[1],c_limit\",\r\n  $metadata['cloudinary_data']['secure_url'] );<\/code><\/pre>\n<p>If the image dimensions should be an exact crop, I'll use Cloudinary's <code>c_lfill<\/code> cropping algorithm. Otherwise, <code>c_limit<\/code> make images that fit within my target dimensions while maintaining the original file's aspect ratio.<\/p>\n<p>Once I've completed these steps, Cloudinary should serve any image newly uploaded to WordPress. The last task is to generate <code>srcset<\/code> and <code>sizes<\/code> attributes by using the metadata that I previously got back from Cloudinary's responsive image breakpoint functionality.<\/p>\n<h3>Automatically Generating srcset and sizes<\/h3>\n<figure id=\"post-251899\" class=\"align-none media-251899\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/responsive_delivery.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/responsive_delivery.png 4200w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/responsive_delivery-300x171.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/responsive_delivery-768x439.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/responsive_delivery-1024x585.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>The payoff.<\/figcaption><\/figure>\n<p>To understand the details of WordPress's responsive images implementation, you may want to read <a href=\"http:\/\/synd.co\/2lwd9RS\">Responsive Images in WordPress\u00a04.4<\/a>. To summarize, I'll review the two occasions when WordPress dynamically adds <code>srcset<\/code> and <code>sizes<\/code> to images.<\/p>\n<h4>Responsive Markup for Dynamically Generated Images<\/h4>\n<p>First, WordPress automatically attempts to add these attributes to any image dynamically generated in a template using <code>wp_get_attachment_image()<\/code> or similar functions. You can add <code>srcset<\/code> and <code>sizes<\/code> attributes to these images by filtering the image attributes before the markup is assembled by using the <code>wp_get_attachment_image_attributes<\/code> filter:<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">add_filter( 'wp_get_attachment_image_attributes', array( $this, 'wp_get_attachment_image_attributes' ), 10, 3 );\r\npublic function wp_get_attachment_image_attributes( $attr, $attachment, $size ) {\r\n  $metadata = wp_get_attachment_metadata( $attachment-&gt;ID );\r\n\r\n  if ( is_string( $size ) ) {\r\n    if ( 'full' === $size ) {\r\n      $width = $attachment['width'];\r\n      $height = $attachment['height'];\r\n    } elseif ( $data = $this-&gt;get_wordpress_image_size_data( $size ) ) {\r\n      \/\/ Bail early if this is a cropped image size.\r\n      if ( $data[$size]['crop'] ) {\r\n        return $attr;\r\n      }\r\n\r\n      $width = $data[$size]['width'];\r\n      $height = $data[$size]['height'];\r\n    }\r\n  } elseif ( is_array( $size ) ) {\r\n    list( $width, $height ) = $size;\r\n  }\r\n\r\n  if ( isset( $metadata['cloudinary_data']['sizes'] ) ) {\r\n    $srcset = '';\r\n\r\n    foreach( $metadata['cloudinary_data']['sizes'] as $s ) {\r\n      $srcset .= $s['secure_url'] . ' ' . $s['width'] . 'w, ';\r\n    }\r\n\r\n    if ( ! empty( $srcset ) ) {\r\n      $attr['srcset'] = rtrim( $srcset, ', ' );\r\n      $sizes = sprintf( '(max-width: %1$dpx) 100vw, %1$dpx', $width );\r\n\r\n      \/\/ Convert named size to dimension array for the filter.\r\n      $size = array($width, $height);\r\n      $attr['sizes'] = apply_filters( 'wp_calculate_image_sizes', $sizes, $size, $attr['src'], $metadata, $attachment-&gt;ID );\r\n    }\r\n  }\r\n\r\n  return $attr;\r\n}<\/code><\/pre>\n<p>In the <code>wp_get_attachment_image_attributes()<\/code> method, you calculate the dimensions of the image based on the <code>$size<\/code> parameter. For now, I'm only adding <code>srcset<\/code> and <code>sizes<\/code> to those images with an aspect ratio matching the original file so that I can take advantage of the breakpoint sizes Cloudinary provided when I uploaded my image. If I determine that the <code>$size<\/code> is a different aspect ratio (e.g.,\u00a0a hard crop), I return the <code>$attr<\/code> value unchanged.<\/p>\n<p>Once you have the dimensions of your image, you loop through all the breakpoint sizes from the <code>$metadata['cloudinary_data']['sizes']<\/code> array to build the <code>srcset<\/code> attribute. Afterward, you create a <code>sizes<\/code> attribute based on the width of the image. Finally, you pass your <code>sizes<\/code> attribute value to the <code>wp_calculate_image_sizes()<\/code> filter so that themes and plug\u2011ins can modify the <code>sizes<\/code> attribute based on their specific layout needs.<\/p>\n<h4>Responsive Markup for Images in Post Content<\/h4>\n<p>WordPress also automatically adds <code>srcset<\/code> and <code>sizes<\/code> attributes to images embedded in post content. Instead of saving these attributes in the post content in the database, WordPress generates them dynamically when the page is generated. That way, as <a href=\"http:\/\/synd.co\/2kN5a5R\">new methods for serving responsive images become available<\/a>, WordPress can easily adopt them.<\/p>\n<p>You want your <a href=\"http:\/\/synd.co\/2l93ek1\">Cloudinary<\/a> integration to be just as future friendly as the native implementation. So, replace the content filter that WordPress uses \u2014 <code>wp_make_content_images_responsive()<\/code> \u2014 with your own filter, named <code>make_content_images_responsive()<\/code>. Here's the code that accomplishes both tasks:<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">\/\/ Replace the default WordPress content filter with our own.\r\nremove_filter( 'the_content', 'wp_make_content_images_responsive' );\r\nadd_filter( 'the_content', array( $this, 'make_content_images_responsive',  ) );\r\npublic function make_content_images_responsive( $content ) {\r\n  if ( ! preg_match_all( '\/&lt;img [^&gt;]+&gt;\/', $content, $matches ) ) {\r\n    return $content;\r\n  }\r\n\r\n  $selected_images = $attachment_ids = array();\r\n\r\n  foreach( $matches[0] as $image ) {\r\n    if ( false === strpos( $image, ' srcset=' ) &amp;&amp; preg_match( '\/wp-image-([0-9]+)\/i', $image, $class_id ) &amp;&amp;\r\n      ( $attachment_id = absint( $class_id[1] ) ) ) {\r\n\r\n      \/*\r\n       * If exactly the same image tag is used more than once, overwrite it.\r\n       * All identical tags will be replaced later with 'str_replace()'.\r\n       *\/\r\n      $selected_images[ $image ] = $attachment_id;\r\n      \/\/ Overwrite the ID when the same image is included more than once.\r\n      $attachment_ids[ $attachment_id ] = true;\r\n    }\r\n  }\r\n\r\n  if ( count( $attachment_ids ) &gt; 1 ) {\r\n    \/*\r\n     * Warm object cache for use with 'get_post_meta()'.\r\n     *\r\n     * To avoid making a database call for each image, a single query\r\n     * warms the object cache with the meta information for all images.\r\n     *\/\r\n    update_meta_cache( 'post', array_keys( $attachment_ids ) );\r\n  }\r\n\r\n  foreach ( $selected_images as $image =&gt; $attachment_id ) {\r\n    $image_meta = wp_get_attachment_metadata( $attachment_id );\r\n    $content = str_replace( $image, $this-&gt;add_srcset_and_sizes( $image, $image_meta, $attachment_id ), $content );\r\n  }\r\n\r\n  return $content;\r\n}<\/code><\/pre>\n<p>The <code>make_content_images_responsive()<\/code> method is essentially a copy of the <code>wp_make_content_images_responsive()<\/code> function from WordPress, which searches the content for all <code>&lt;img&gt;<\/code> elements \u2014 handling some edge cases and including some performance optimizations in the process\u2014and passes them to a second function that handles adding the <code>srcset<\/code> and <code>sizes<\/code> attributes. I created a custom callback method in my class named <code>add_srcset_and_sizes()<\/code> for this purpose:<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">public function add_srcset_and_sizes( $image, $image_meta, $attachment_id ) {\r\n  if ( isset( $image_meta['cloudinary_data']['sizes'] ) ) {\r\n    \/\/ See if our filename is in the URL string.\r\n    if ( false !== strpos( $image, wp_basename( $image_meta['cloudinary_data']['url'] ) ) &amp;&amp; false === strpos( $image, 'c_lfill') ) {\r\n      $src = preg_match( '\/src=\"([^\"]+)\"\/', $image, $match_src ) ? $match_src[1] : '';\r\n      $width  = preg_match( '\/ width=\"([0-9]+)\"\/',  $image, $match_width  ) ? (int) $match_width[1]  : 0;\r\n      $height = preg_match( '\/ height=\"([0-9]+)\"\/', $image, $match_height ) ? (int) $match_height[1] : 0;\r\n\r\n      $srcset = '';\r\n\r\n      foreach( $image_meta['cloudinary_data']['sizes'] as $s ) {\r\n        $srcset .= $s['secure_url'] . ' ' . $s['width'] .  'w, ';\r\n      }\r\n\r\n      if ( ! empty( $srcset ) ) {\r\n        $srcset = rtrim( $srcset, ', ' );\r\n        $sizes = sprintf( '(max-width: %1$dpx) 100vw, %1$dpx', $width );\r\n\r\n        \/\/ Convert named size to dimension array.\r\n        $size = array($width, $height);\r\n        $sizes = apply_filters( 'wp_calculate_image_sizes', $sizes, $size, $src, $image_meta, $attachment_id );\r\n      }\r\n\r\n      $image = preg_replace( '\/src=\"([^\"]+)\"\/', 'src=\"$1\" srcset=\"' . $srcset . '\" sizes=\"' . $sizes .'\"', $image );\r\n    }\r\n  }\r\n\r\n  return $image;\r\n}<\/code><\/pre>\n<p>Here, I again make sure that my attachment metadata includes size data from Cloudinary. Then, I make sure that the image markup includes the same file name as the image I uploaded to Cloudinary, just in case the image markup hasn't been edited after it was inserted into the content. Finally, I include <code>false === strpos( $image, 'c_lfill')<\/code> to determine whether the URL indicates that Cloudinary is hard-cropping the image, similar to how I checked for hard cropping in <code>wp_get_attachment_image_attributes()<\/code>. If all checks pass, I can loop through the breakpoint sizes that were created when I originally uploaded the image to Cloudinary and use those data to build out my <code>srcset<\/code> and <code>sizes<\/code> attributes.<\/p>\n<p>With this functionality, you can now successfully offload all your responsive image processing to <a href=\"http:\/\/synd.co\/2l93ek1\">Cloudinary<\/a> and serve optimized images from the Cloudinary CDN instead of your local web server.<\/p>\n<h3>Wrap\u2011Up<\/h3>\n<p>I hope this gives you a better understanding of how WordPress handles resizing images and shows how you can extend WordPress to take advantage of Cloudinary to dynamically generate and serve images that are optimized for different device types and sizes. To try this code out on your site, <a href=\"http:\/\/synd.co\/2l11AUh\">download the plug\u2011in from GitHub<\/a>, and be sure to leave feedback about anything that you think could be improved.<\/p>\n<hr>\n<p><em>This post (and the plugin!) was written by <a href=\"https:\/\/joemcgill.net\/\">Joe McGill<\/a>.<\/em><\/p>\n","protected":false},"excerpt":{"rendered":"<p>In Part\u00a01 of this series, I provided some background on responsive images, describing how you can add srcset and sizes attributes to an img element to serve appropriately sized image files to users of a website based on the size and capabilities of their browser and device. I also shared how WordPress used its native [&hellip;]<\/p>\n","protected":false},"author":247816,"featured_media":251896,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4,508],"tags":[806,521,264],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251741"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/247816"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251741"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251741\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/251896"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251741"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251741"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251741"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251891,"date":"2017-02-27T04:47:13","date_gmt":"2017-02-27T11:47:13","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251891"},"modified":"2017-02-27T04:47:13","modified_gmt":"2017-02-27T11:47:13","slug":"touch-devices-not-judged-size","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/touch-devices-not-judged-size\/","title":{"rendered":"Touch Devices Should Not Be Judged By Their Size"},"content":{"rendered":"<p>Front-end developers and web designers live in an insane multi-device reality.<\/p>\n<p>A few months ago, <a href=\"https:\/\/twitter.com\/RedHatUXD\">the Red Hat UXD team<\/a> discussed how to design enterprise applications for mobile environments. <a href=\"https:\/\/github.com\/srambach\">Sarah<\/a> and <a href=\"https:\/\/github.com\/jgiardino\">Jenn<\/a>, my talented colleagues, pointed out that touch devices should not be judged by their size alone.<\/p>\n<p><!--more--><\/p>\n<blockquote><p>Assumptions are beguiling. If only we could agree on certain boundaries, then wouldn't web design be so much easier to\u00a0control?\" - <a href=\"https:\/\/adactio.com\/\">Jeremy Keith<\/a>, <a href=\"https:\/\/resilientwebdesign.com\">Resilient Web Design<\/a><\/p><\/blockquote>\n<p>Today, there is a new layer of complexity to the already complicated world of interaction design and front-end development.<\/p>\n<p>The hardware industry has created massive touchscreen TVs, really large tablets (like the iPad Pro), and even huge touch desktop PCs (like the new, jaw-dropping Surface Studio). This means we can no longer assume that a small viewport is a touch screen and a large viewport isn't. Sometimes large screens are touch, requiring the user to use their finger, and small screens have a stylus. <\/p>\n<p>Responsive viewport media queries are great but they're not enough. <\/p>\n<p>We can detect a touch screen with JS tools like <a href=\"https:\/\/modernizr.com\/\">Modernizr<\/a>, but CSS has a hidden gem that is smarter and more flexible.<\/p>\n<h3>Interaction Media Features<\/h3>\n<p>Thanks to the <a href=\"https:\/\/www.w3.org\/Style\/CSS\/members.en.php3\">W3C CSS Working Group<\/a> and the CSS community, we have a cleaner solution.<\/p>\n<p>On the <a href=\"https:\/\/drafts.csswg.org\/mediaqueries\/\">Media Queries Level 4 Working Draft<\/a>, there is a spec for <a href=\"https:\/\/drafts.csswg.org\/mediaqueries\/#mf-interaction\">Interaction Media Features<\/a> that includes three definitions: <\/p>\n<ul>\n<li><a href=\"https:\/\/drafts.csswg.org\/mediaqueries\/#pointer\">Pointing Device Quality<\/a><\/li>\n<li><a href=\"https:\/\/drafts.csswg.org\/mediaqueries\/#hover\">Hover Capability<\/a><\/li>\n<li><a href=\"https:\/\/drafts.csswg.org\/mediaqueries\/#any-input\">Rare Interaction Capabilities<\/a><\/li>\n<\/ul>\n<p>These provide the capability to query a document based on the presence and accuracy of the user's pointing device and whether it has the ability to hover over elements.<\/p>\n<p>Let's take a closer look at each one:<\/p>\n<h3>Pointing Device Quality: The pointer Feature<\/h3>\n<blockquote><p>The pointer media feature is used to query about the presence and accuracy of a pointing device such as a mouse. If a device has multiple input mechanisms, the pointer media feature must reflect the characteristics of the \"primary\" input mechanism, as determined by the user agent.\" - <a href=\"https:\/\/drafts.csswg.org\/mediaqueries\/#pointer\">W3C<\/a><\/p><\/blockquote>\n<p>The key word here is \"accuracy\" of the pointing device.<\/p>\n<ul>\n<li>A mouse or a drawing stylus is very accurate and defines the value of <code>fine<\/code>.<\/li>\n<li>A finger or a Kinect peripheral isn't, and takes the value of <code>coarse<\/code>.<\/li>\n<\/ul>\n<p>Therefore, we can adapt our UI elements to the user's pointer capabilities. This is useful for making hit areas larger, if the user's main input mechanism is a finger.<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">\/* The primary input mechanism of the device includes a pointing device of limited accuracy. *\/\r\n@media (pointer: coarse) { ... }\r\n\r\n\/* The primary input mechanism of the device includes an accurate pointing device. *\/\r\n@media (pointer: fine) { ... }\r\n\r\n\/* The primary input mechanism of the device does not include a pointing device. *\/\r\n@media (pointer: none) { ... }<\/code><\/pre>\n<p>An example use case for this query is to size the click area of a checkbox or radio.<\/p>\n<h3>Hover Capability: The hover Feature<\/h3>\n<blockquote><p>The hover media feature is used to query the user's ability to hover over elements on the page. If a device has multiple input mechanisms, the hover media feature must reflect the characteristics of the \"primary\" input mechanism, as determined by the user agent.\" - <a href=\"https:\/\/drafts.csswg.org\/mediaqueries\/#hover\">W3C<\/a><\/p><\/blockquote>\n<p>It's important to notice that it only evaluates the primary input mechanism. If the primary input mechanism is not able to hover, but the secondary input can, then the query will resolve to <code>none<\/code>:<\/p>\n<blockquote><p>For example, a touchscreen where a long press is treated as hovering would match hover: none.\" - <a href=\"https:\/\/drafts.csswg.org\/mediaqueries\/#hover\">W3C<\/a><\/p><\/blockquote>\n<ul>\n<li>A touch screen device, where the primary pointer system is the finger and can't hover, will take the value of <code>none<\/code>.<\/li>\n<li>A device where the primary input is a mouse and can easily hover parts of the page takes the value of <code>hover<\/code>.<\/li>\n<\/ul>\n<pre rel=\"CSS\"><code class=\"language-css\">\/* Primary input mechanism system can \r\n   hover over elements with ease *\/\r\n@media (hover: hover) { ... }\r\n\r\n\/* Primary input mechanism cannot hover \r\n   at all or cannot conveniently hover \r\n   (e.g., many mobile devices emulate hovering\r\n   when the user performs an inconvenient long tap), \r\n   or there is no primary pointing input mechanism *\/\r\n@media (hover: none) { ... }<\/code><\/pre>\n<p>A good use of this query is a drop-down menu.<\/p>\n<h3>Rare Interaction Capabilities: The any-pointer and any-hover Features<\/h3>\n<p>On devices that are both touch and have a mouse or a stylus, like the Microsoft Surface, the <code>hover<\/code> and <code>pointer<\/code> media query will evaluate the primary input mechanism only. <\/p>\n<p>As <a href=\"https:\/\/twitter.com\/WebReflection\">Andrea Giammarc<\/a> pointed out, his Dell XPS 13\" touch takes the value of <code>fine<\/code>, even though it does have a touch screen because the primary input mechanism is a mouse.<\/p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\"><a href=\"https:\/\/twitter.com\/Real_CSS_Tricks\">@Real_CSS_Tricks<\/a> FYI I have a touch screen and that method fails like a charm in Chrome. &#x1f615;<\/p>\n<p>&mdash; Andrea Giammarchi (@WebReflection) <a href=\"https:\/\/twitter.com\/WebReflection\/status\/828246042231595008\">February 5, 2017<\/a><\/p><\/blockquote>\n<p><script async src=\"\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"><\/script><\/p>\n<p>If we want a device like that to take the value of <code>coarse<\/code> or <code>hover<\/code>, we can use the Rare Interaction Capabilities.<\/p>\n<blockquote><p>The any-pointer and any-hover media features are identical to the pointer and hover media features, but they correspond to the union of capabilities of all the pointing devices available to the user. More than one of their values can match, if different pointing devices have different characteristics. They must only match none if all of the pointing devices would match none for the corresponding query, or there are no pointing devices at all.\" - <a href=\"https:\/\/drafts.csswg.org\/mediaqueries\/#any-input\">W3C<\/a><\/p><\/blockquote>\n<pre rel=\"CSS\"><code class=\"language-css\">\/* One or more available input mechanism(s) \r\n   can hover over elements with ease *\/\r\n@media (any-hover: hover) { ... }\r\n\r\n\/* One or more available input mechanism(s) can hover, \r\n   but not easily (e.g., many mobile devices emulate \r\n   hovering when the user performs a long tap) *\/\r\n@media (any-hover: on-demand) { ... }\r\n\r\n\/* One or more available input mechanism(s) cannot \r\n   hover (or there are no pointing input mechanisms) *\/\r\n@media (any-hover: none) { ... }\r\n\r\n\r\n\/* At least one input mechanism of the device \r\n   includes a pointing device of limited accuracy. *\/\r\n@media (any-pointer: coarse) { ... }\r\n\r\n\/* At least one input mechanism of the device \r\n   includes an accurate pointing device. *\/\r\n@media (any-pointer: fine) { ... }\r\n\r\n\/* The device does not include any pointing device. *\/\r\n@media (any-pointer: none) { ... }<\/code><\/pre>\n<h3>Device Examples<\/h3>\n<p>Typical examples of devices matching combinations of pointer and hover:<\/p>\n<table>\n<tr>\n<td><\/td>\n<th><code>pointer: coarse<\/code><\/th>\n<th><code>pointer: fine<\/code><\/th>\n<\/tr>\n<tr>\n<th><code>hover: none<\/code><\/th>\n<td>smartphones, touch screens<\/td>\n<td>stylus-based screens (Cintiq, Wacom, etc)<\/td>\n<\/tr>\n<tr>\n<th><code>hover: hover<\/code><\/th>\n<td>Nintendo Wii controller, Kinect<\/td>\n<td>mouse, touch pad<\/td>\n<\/tr>\n<\/table>\n<p><a href=\"https:\/\/www.w3.org\/TR\/mediaqueries-4\/#mf-interaction\">W3C<\/a><\/p>\n<p><a href=\"https:\/\/dev.opera.com\/authors\/patrick-lauke\/\">Patrick H. Lauke<\/a> has written <a href=\"https:\/\/dev.opera.com\/articles\/media-features\/\">a great guide<\/a> about  how each device type evaluates interaction media queries. <\/p>\n<p>This is really cool, right? I hear you shouting: what about browser support?<\/p>\n<h3>Browser Support Isn't Bad at All!<\/h3>\n<p>Even though this is a working draft, it has <a href=\"http:\/\/caniuse.com\/#feat=css-media-interaction\">pretty good support<\/a>.<\/p>\n<p><a href=\"http:\/\/codepen.io\/andresgalante\/pen\/bBEJKg?editors=0100\">My simple test<\/a> proved successful on Chrome, Chrome for Android, Safari, Edge, Opera, Samsung browser, and Android Browser, but it didn't work on FireFox, Opera Mini or IE.<\/p>\n<p data-height=\"350\" data-theme-id=\"1\" data-slug-hash=\"bBEJKg\" data-default-tab=\"css,result\" data-user=\"andresgalante\" data-embed-version=\"2\" data-pen-title=\"Touch screen test\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/andresgalante\/pen\/bBEJKg\/\">Touch screen test<\/a> by Andres Galante (<a href=\"http:\/\/codepen.io\/andresgalante\">@andresgalante<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>FireFox and IE <a href=\"https:\/\/www.netmarketshare.com\/browser-market-share.aspx?qprid=0&qpcustomd=1\">represent only a bit more than 2% mobile\/tablet browser market share<\/a>. I couldn't find information about touch TVs or other touch screen devices that are not mobile or tablets.<\/p>\n<p>I think we are ready to use this feature, and as FireFox adds support for it and <a href=\"https:\/\/www.microsoft.com\/en-us\/WindowsForBusiness\/End-of-IE-support\">IE dies<\/a> once and for all, we will have full support.<\/p>\n<h3>The \"Cards Selection\" Use Case<\/h3>\n<p>A month ago, we worked on implementing a <a href=\"http:\/\/www.patternfly.org\/pattern-library\/content-views\/card-view\/#\/api\">multi-select cards component<\/a> for the new version of <a href=\"https:\/\/www.patternfly.org\/\">PatternFly<\/a>, an open source design system to which I contribute. It was a perfect case to use the hover and pointer media query.<\/p>\n<p>To select a card, when the user hovers over it, a checkbox is displayed. If the user is not able to hover over elements, then we show the checkbox at all times.<\/p>\n<p>To improve this interaction, we increased the hit area of the checkbox if the primary input mechanism is coarse.<\/p>\n<p data-height=\"385\" data-theme-id=\"1\" data-slug-hash=\"vgbLyq\" data-default-tab=\"css,result\" data-user=\"andresgalante\" data-embed-version=\"2\" data-pen-title=\"Multi select cards\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/andresgalante\/pen\/vgbLyq\/\">Multi select cards<\/a> by Andres Galante (<a href=\"http:\/\/codepen.io\/andresgalante\">@andresgalante<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Firefox and IE will display default checkboxes at all times.<\/p>\n<h3>Size Isn't Everything<\/h3>\n<p>Devices should be judged by their capabilities since, in the end, it is those capabilities that define them.<\/p>\n<p>This is an underused feature, and it opens the door to exciting new challenges. I can't wait to see what we, as a community, can do with it.<\/p>\n<h3>References<\/h3>\n<p>All the descriptions commented on the code are from <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/CSS\/@media\">Mozilla Developer Network<\/a>.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Front-end developers and web designers live in an insane multi-device reality. A few months ago, the Red Hat UXD team discussed how to design enterprise applications for mobile environments. Sarah and Jenn, my talented colleagues, pointed out that touch devices should not be judged by their size alone.<\/p>\n","protected":false},"author":247892,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[685,886],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251891"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/247892"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251891"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251891\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251891"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251891"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251891"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251918,"date":"2017-02-26T06:39:04","date_gmt":"2017-02-26T13:39:04","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251918"},"modified":"2017-02-26T06:39:04","modified_gmt":"2017-02-26T13:39:04","slug":"google-analytics-data-studio","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/google-analytics-data-studio\/","title":{"rendered":"Google Analytics Data Studio"},"content":{"rendered":"<p>I've said a number of times in the past:<\/p>\n<blockquote><p>I wish I could just check a checkbox and make certain Google Analytics data public.<\/p><\/blockquote>\n<p>I get that analytics can be a very private thing for some sites. I think there are just as many sites where that data just doesn't need to be private. Not only would it be interesting, but insight might be gleaned from having more eyeballs on the data, and it could contribute to a wider data set of analytic trends.<\/p>\n<p>Anyway, there is no such checkbox. <!--more--> But Zach Aten <a href=\"https:\/\/twitter.com\/ConsultAtlas\/status\/834860904722395138\">pointed out to me<\/a> there is a thing called <a href=\"https:\/\/www.google.com\/analytics\/data-studio\/\">Data Studio<\/a> that allows you to build custom <em>visual<\/em> reports, and you can make them public with the same kind of sharing controls you find in other Google products (like Google Docs). <\/p>\n<p>I slapped together a quick dashboard for just raw traffic data. Not the most useful thing to look at, but sometimes the most fun. I'd embed it here, but...<\/p>\n<blockquote>\n<p><strong>Can I embed charts on other sites?<\/strong><\/p>\n<p>No. Data Studio is currently a stand alone product. <\/p>\n<p>Embedding a Data Studio report in an iframe is blocked by Chrome as a potential security risk.<\/p>\n<\/blockquote>\n<p>So here's <a href=\"https:\/\/datastudio.google.com\/open\/0B10lI17fOl9Dd0Z2THdaUk95dFE\">a link to it<\/a> and a picture:<\/p>\n<figure id=\"post-251919\" class=\"align-none media-251919\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/analytics.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/analytics.png 1196w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/analytics-300x225.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/analytics-768x575.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/analytics-1024x767.png 1024w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/analytics-399x300.png 399w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Sorry about the awful design. It just, you know, proves it's authentic. Their templates are much nicer, and all the tools are there to do as good of a job as you'd like.<\/figcaption><\/figure>\n<p>Of course, you can do a way better job of not only building more beautiful and useful charts but also of collecting more useful data. If you're using Google Analytics, doing a <em>little bit more<\/em> than using the default snippet goes a long way. Remember we have <a href=\"https:\/\/css-tricks.com\/learning-use-google-analytics-effectively-codepen\/\">an article<\/a> and <a href=\"https:\/\/css-tricks.com\/video-screencasts\/146-getting-google-analytics-philip-walton\/\">video<\/a> on that subject. <\/p>\n","protected":false},"excerpt":{"rendered":"<p>I&#8217;ve said a number of times in the past: I wish I could just check a checkbox and make certain Google Analytics data public. I get that analytics can be a very private thing for some sites. I think there are just as many sites where that data just doesn&#8217;t need to be private. Not [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":251920,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[759,958],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251918"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251918"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251918\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/251920"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251918"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251918"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251918"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251869,"date":"2017-02-25T05:46:23","date_gmt":"2017-02-25T12:46:23","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251869"},"modified":"2017-02-25T05:46:23","modified_gmt":"2017-02-25T12:46:23","slug":"html-apis-design-good-one","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/html-apis-design-good-one\/","title":{"rendered":"HTML APIs: What They Are And How To Design A Good One"},"content":{"rendered":"<p>Lea Verou writes about the design of HTML APIs and how we might write better documentation for web designers. An <em>HTML API<\/em> is term for a JavaScript library that is configured and controlled through HTML rather than through JavaScript. For example <code>&lt;div data-open-modal=\"#modal\"&gt;&lt;\/div&gt;<\/code> might tell a library that this element is in charge of opening a modal. There is no configuration or initting other than loading the library itself.<\/p>\n<p>My favorite part of this piece is where Lea confronts what might generally be seen as a simple plug-n-play JavaScript library:<\/p>\n<blockquote><p>Even this tiny snippet of code requires people to understand object literals, arrays, variables, strings, how to get a reference to a DOM element, events, when the DOM is ready and much more. Things that seem trivial to programmers can be an uphill battle to HTML authors with no JavaScript knowledge<\/p><\/blockquote>\n<p>By giving folks an HTML API we can avoid potential headache.<\/p>\n<blockquote><p>...remember that many of these people do not speak any programming language, not just JavaScript. Do not talk about models, views, controllers or other software engineering concepts in text that you expect them to read and understand. All you will achieve is confusing them and turning them away.<\/p><\/blockquote>\n<p>Lea's made <a href=\"http:\/\/markapp.io\/\">a collection<\/a> of libraries that have HTML APIs.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Lea Verou writes about the design of HTML APIs and how we might write better documentation for web designers. An HTML API is term for a JavaScript library that is configured and controlled through HTML rather than through JavaScript. For example &lt;div data-open-modal=&#8221;#modal&#8221;&gt;&lt;\/div&gt; might tell a library that this element is in charge of opening [&hellip;]<\/p>\n","protected":false},"author":223806,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[1156,432],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251869"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/223806"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251869"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251869\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251869"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251869"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251869"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251846,"date":"2017-02-24T04:38:01","date_gmt":"2017-02-24T11:38:01","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251846"},"modified":"2017-02-24T04:38:01","modified_gmt":"2017-02-24T11:38:01","slug":"animated-intro-rxjs","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/animated-intro-rxjs\/","title":{"rendered":"An Animated Intro to RxJS"},"content":{"rendered":"<p>You might have heard of RxJS, or ReactiveX, or reactive programming, or even just functional programming before. These are terms that are becoming more and more prominent when talking about the latest-and-greatest front-end technologies. And if you're anything like me, you were completely bewildered when you first tried learning about it.<\/p>\n<p><!--more--><\/p>\n<p>According to <a href=\"http:\/\/reactivex.io\/\">ReactiveX.io<\/a>:<\/p>\n<blockquote><p>ReactiveX is a library for composing asynchronous and event-based programs by using observable sequences.<\/p><\/blockquote>\n<p>That's a lot to digest in a single sentence. In this article, we're going to take a different approach to learning about RxJS (the JavaScript implementation of ReactiveX) and Observables, by creating <strong>reactive animations<\/strong>.<\/p>\n<h3>Understanding Observables<\/h3>\n<p>An array is a collection of elements, such as <code>[1, 2, 3, 4, 5]<\/code>. You get all the elements immediately, and you can do things like <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/map\">map<\/a>, <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/filter\">filter<\/a> and <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/map\">map<\/a> them. This allows you to transform the collection of elements any way you'd like.<\/p>\n<p>Now suppose that each element in the array occurred <em>over time<\/em>; that is, you don't get all elements immediately, but rather one at a time. You might get the first element at 1 second, the next at 3 seconds, and so on. Here's how that might be represented:<\/p>\n<figure id=\"post-251847\" class=\"align-none media-251847\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/rx-article-1.svg\" alt=\"\" \/><\/figure>\n<p>This can be described as a stream of values, or a sequence of events, or more relevantly, an <strong>observable<\/strong>. <\/p>\n<div class=\"explanation\">An <strong>observable<\/strong> is a collection of values over time.<\/div>\n<p>Just like with an array, you can map, filter, and more over these values to create and compose new observables. Finally, you can subscribe to these observables and do whatever you want with the final stream of values. This is where RxJS comes in.<\/p>\n<h3>Getting Started with RxJS<\/h3>\n<p>The easiest way to start using <a href=\"http:\/\/reactivex.io\/rxjs\/\">RxJS<\/a> is to use a CDN, although there are <a href=\"http:\/\/reactivex.io\/rxjs\/manual\/installation.html\">many ways to install it<\/a> depending on your project's needs.<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;!-- the latest, minified version of RxJS --&gt;\r\n&lt;script src=\"https:\/\/unpkg.com\/@reactivex\/rxjs@latest\/dist\/global\/Rx.min.js\"&gt;&lt;\/script&gt;<\/code><\/pre>\n<p>Once you have RxJS in your project, you can create an observable from <em>just about anything<\/em>:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">const aboutAnything = 42;\r\n\r\n\/\/ From just about anything (single value).\r\n\/\/ The observable emits that value, then completes.\r\nconst meaningOfLife$ = Rx.Observable.just(aboutAnything);\r\n\r\n\/\/ From an array or iterable.\r\n\/\/ The observable emits each item from the array, then completes.\r\nconst myNumber$ = Rx.Observable.from([1, 2, 3, 4, 5]);\r\n\r\n\/\/ From a promise.\r\n\/\/ The observable emits the result eventually, then completes (or errors).\r\nconst myData$ = Rx.Observable.fromPromise(fetch('http:\/\/example.com\/users'));\r\n\r\n\/\/ From an event.\r\n\/\/ The observable continuously emits events from the event listener.\r\nconst mouseMove$ = Rx.Observable\r\n  .fromEvent(document.documentElement, 'mousemove');<\/code><\/pre>\n<p><em>Note: the dollar sign (<code>$<\/code>) at the end of the variable is just a convention to indicate that the variable is an observable.<\/em> Observables can be used to model anything that can be represented as a stream of values over time, such as events, Promises, timers, intervals, and animations.<\/p>\n<p>As is, these observables don't do much of anything, at least until you actually <em>observe<\/em> them. A <strong>subscription<\/strong> will do just that, which is created using <code>.subscribe()<\/code>:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">\/\/ Whenever we receive a number from the observable,\r\n\/\/ log it to the console.\r\nmyNumber$.subscribe(number =&gt; console.log(number));\r\n\r\n\/\/ Result:\r\n\/\/ &gt; 1\r\n\/\/ &gt; 2\r\n\/\/ &gt; 3\r\n\/\/ &gt; 4\r\n\/\/ &gt; 5<\/code><\/pre>\n<p>Let's see this in practice:<\/p>\n<p data-height=\"400\" data-theme-id=\"1\" data-slug-hash=\"d6f5fa72a9b7b6c2c9141de6fa1ab93f\" data-default-tab=\"js,result\" data-user=\"davidkpiano\" data-embed-version=\"2\" data-pen-title=\"\" class=\"codepen\"><a href=\"http:\/\/codepen.io\/kh-davidkpiano\/pen\/d6f5fa72a9b7b6c2c9141de6fa1ab93f\">See the Pen<\/a><\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">const docElm = document.documentElement;\r\nconst cardElm = document.querySelector('#card');\r\nconst titleElm = document.querySelector('#title');\r\n\r\nconst mouseMove$ = Rx.Observable\r\n  .fromEvent(docElm, 'mousemove');\r\n\r\nmouseMove$.subscribe(event =&gt; {\r\n  titleElm.innerHTML = `${event.clientX}, ${event.clientY}`\r\n});<\/code><\/pre>\n<p>From the <code>mouseMove$<\/code> observable, every time a <code>mousemove<\/code> event occurs, the subscription changes the <code>.innerHTML<\/code> of the <code>titleElm<\/code> to the position of the mouse. The <a href=\"http:\/\/reactivex.io\/rxjs\/class\/es6\/Observable.js%7EObservable.html#instance-method-map\"><code>.map<\/code><\/a> operator (which works similar to the <code>Array.prototype.map<\/code> method) can help simplify things:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">\/\/ Produces e.g., {x: 42, y: 100} instead of the entire event\r\nconst mouseMove$ = Rx.Observable\r\n  .fromEvent(docElm, 'mousemove')\r\n  .map(event =&gt; ({ x: event.clientX, y: event.clientY }));<\/code><\/pre>\n<p>With a little math and inline styles, you can make the card rotate towards the mouse. Both <code>pos.y \/ clientHeight<\/code> and <code>pos.x \/ clientWidth<\/code> evaluate to values between 0 and 1, so multiplying that by 50 and subtracting half (25) produces values from -25 to 25, which is just what we need for our rotation values:<\/p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"55cb38a26b9166c41017c6512ea00209\" data-default-tab=\"js,result\" data-user=\"davidkpiano\" data-embed-version=\"2\" data-pen-title=\"\" class=\"codepen\"><a href=\"http:\/\/codepen.io\/kh-davidkpiano\/pen\/55cb38a26b9166c41017c6512ea00209\">See the Pen<\/a><\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">const docElm = document.documentElement;\r\nconst cardElm = document.querySelector('#card');\r\nconst titleElm = document.querySelector('#title');\r\n\r\nconst { clientWidth, clientHeight } = docElm;\r\n\r\nconst mouseMove$ = Rx.Observable\r\n  .fromEvent(docElm, 'mousemove')\r\n  .map(event =&gt; ({ x: event.clientX, y: event.clientY }))\r\n\r\nmouseMove$.subscribe(pos =&gt; {\r\n  const rotX = (pos.y \/ clientHeight * -50) - 25;\r\n  const rotY = (pos.x \/ clientWidth * 50) - 25;\r\n\r\n  cardElm.style = `\r\n    transform: rotateX(${rotX}deg) rotateY(${rotY}deg);\r\n  `;\r\n});<\/code><\/pre>\n<h3>Combining with <code>.merge<\/code><\/h3>\n<p>Now let's say you wanted this to respond to either mouse moves or touch moves, on touch devices. Without any callback mess, you can use RxJS to combine observables in many ways. In this example, the <a href=\"http:\/\/reactivex.io\/documentation\/operators\/merge.html\"><code>.merge<\/code><\/a> operator can be used. Just like multiple lanes of traffic merging into a single lane, this returns a single observable containing all of the data merged from multiple observables.<\/p>\n<figure id=\"post-251848\" class=\"align-none media-251848\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/merge.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/merge.png 1468w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/merge-300x149.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/merge-768x382.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/merge-1024x509.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Source: <a href=\"http:\/\/rxmarbles.com\/#merge\">http:\/\/rxmarbles.com\/#merge<\/a><\/figcaption><\/figure>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">const touchMove$ = Rx.Observable\r\n  .fromEvent(docElm, 'touchmove')\r\n  .map(event =&gt; ({\r\n    x: event.touches[0].clientX,\r\n    y: event.touches[0].clientY\r\n  }));\r\n\r\nconst move$ = Rx.Observable.merge(mouseMove$, touchMove$);\r\n\r\nmove$.subscribe(pos =&gt; {\r\n  \/\/ ...\r\n});<\/code><\/pre>\n<p>Go ahead, try panning around on a touch device:<\/p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"4a430c13f4faae099e5a34cb2a82ce6d\" data-default-tab=\"js,result\" data-user=\"davidkpiano\" data-embed-version=\"2\" data-pen-title=\"\" class=\"codepen\"><a href=\"http:\/\/codepen.io\/kh-davidkpiano\/pen\/4a430c13f4faae099e5a34cb2a82ce6d\">See the Pen<\/a><\/p>\n<p>There are other <a href=\"http:\/\/reactivex.io\/documentation\/operators.html#combining\">useful operators for combining observables<\/a>, such as <code>.switch()<\/code>, <code>.combineLatest()<\/code>, and <code>.withLatestFrom()<\/code>, which we'll be looking at next.<\/p>\n<h3>Adding Smooth Motion<\/h3>\n<p>As neat as the rotating card is, the motion a bit too rigid. Whenever the mouse (or finger) stops, the rotation instantly stops. To remedy this, linear interpolation (LERP) can be used. The general technique is described in <a href=\"https:\/\/codepen.io\/rachsmith\/post\/animation-tip-lerp\">this great tutorial<\/a> by Rachel Smith. Essentially, instead of jumping from point A to B, LERP will go a fraction of the way on every animation tick. This produces a smooth transition, even when mouse\/touch motion has stopped.<\/p>\n<p>Let's create a function that has one job: to calculate the next value given a start value and an end value, using LERP:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">function lerp(start, end) {\r\n  const dx = end.x - start.x;\r\n  const dy = end.y - start.y;\r\n\r\n  return {\r\n    x: start.x + dx * 0.1,\r\n    y: start.y + dy * 0.1,\r\n  };\r\n}<\/code><\/pre>\n<p>Short and sweet. We have a <em>pure<\/em> function that returns a new, linearly interpolated position value every time, by moving a current (start) position 10% closer to the next (end) position on each animation frame.<\/p>\n<h4>Schedulers and <code>.interval<\/code><\/h4>\n<p>The question is, how do we represent animation frames in RxJS? Turns out, RxJS has something called <strong>Schedulers<\/strong> which control <em>when<\/em> data is emitted from an observable, among other things like when subscriptions should start receiving values.<\/p>\n<p>Using <a href=\"http:\/\/reactivex.io\/documentation\/operators\/interval.html\"><code>Rx.Observable.interval()<\/code><\/a>, you can create an observable that emits values on a regularly scheduled interval, such as every one second (<code>Rx.Observable.interval(1000)<\/code>). If you create a tiny interval, such as <code>Rx.Observable.interval(0)<\/code> and schedule it to emit values only on every animation frame using <code>Rx.Scheduler.animationFrame<\/code>, a value will be emitted about every 16 to 17ms, within the animation frame, as expected:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">const animationFrame$ = Rx.Observable.interval(0, Rx.Scheduler.animationFrame);<\/code><\/pre>\n<h4>Combining with <code>.withLatestFrom<\/code><\/h4>\n<p>To create a smooth linear interpolation, you just need to care about the latest mouse\/touch position on <em>every animation tick<\/em>. To do that, there is an operator called <a href=\"http:\/\/reactivex.io\/rxjs\/class\/es6\/Observable.js%7EObservable.html#instance-method-withLatestFrom\"><code>.withLatestFrom()<\/code><\/a>:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">const smoothMove$ = animationFrame$\r\n  .withLatestFrom(move$, (frame, move) =&gt; move);<\/code><\/pre>\n<p>Now, <code>smoothMove$<\/code> is a new observable that emits the latest values from <code>move$<\/code> <em>only<\/em> whenever <code>animationFrame$<\/code> emits a value. This is desired -- you don't want values emitted outside animation frames (unless you really like jank). The second argument is a function that describes what to do when combining the latest values from each observable. In this case, the only important value is the <code>move<\/code> value, which is all that's returned.<\/p>\n<figure id=\"post-251849\" class=\"align-none media-251849\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/with-latest-from.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/with-latest-from.png 1602w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/with-latest-from-300x131.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/with-latest-from-768x337.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/with-latest-from-1024x449.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Source: <a href=\"http:\/\/rxmarbles.com\/#withLatestFrom\">http:\/\/rxmarbles.com\/#withLatestFrom<\/a><\/figcaption><\/figure>\n<h4>Transitioning with <code>.scan<\/code><\/h4>\n<p>Now that you have an observable emitting the latest values from <code>move$<\/code> on every animation frame, it's time to add linear interpolation. The <a href=\"http:\/\/reactivex.io\/documentation\/operators\/scan.html\"><code>.scan()<\/code><\/a> operator \"accumulates\" the current value and next value from an observable, given a function that takes those values.<\/p>\n<figure id=\"post-251850\" class=\"align-none media-251850\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/scan.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/scan.png 1604w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/scan-300x100.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/scan-768x257.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/scan-1024x342.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Source: <a href=\"http:\/\/rxmarbles.com\/#scan\">http:\/\/rxmarbles.com\/#scan<\/a><\/figcaption><\/figure>\n<p>This is perfect for our linear interpolation use-case. Remember that our <code>lerp(start, end)<\/code> function takes two arguments: the <code>start<\/code> (current) value and the <code>end<\/code> (next) value.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">const smoothMove$ = animationFrame$\r\n  .withLatestFrom(move$, (frame, move) =&gt; move)\r\n  .scan((current, next) =&gt; lerp(current, next));\r\n  \/\/ or simplified: .scan(lerp)<\/code><\/pre>\n<p>Now, you can subscribe to <code>smoothMove$<\/code> instead of <code>move$<\/code> to see the linear interpolation in action:<\/p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"127ee82ad742b4dddd657703e2259852\" data-default-tab=\"js,result\" data-user=\"davidkpiano\" data-embed-version=\"2\" data-pen-title=\"\" class=\"codepen\"><a href=\"http:\/\/codepen.io\/kh-davidkpiano\/pen\/127ee82ad742b4dddd657703e2259852\">See the Pen<\/a><\/p>\n<h3>Conclusion<\/h3>\n<p>RxJS is <em>not<\/em> an animation library, of course, but handling values over time in a composable, declarative way is such a core concept to ReactiveX that animation serves as a great way to demonstrate the technology. Reactive Programming is a different way of thinking about programming, with many advantages:<\/p>\n<ul>\n<li>It is declarative, composable, and immutable, which avoids callback hell and makes your code more terse, reusable, and modular.<\/li>\n<li>It is very useful in dealing with all types of async data, whether it's fetching data, communicating via WebSockets, listening to external events from multiple sources, or even animations<\/li>\n<li>\"Separation of concerns\" - you declaratively represent the data that you expect using Observables and operators, and then deal with side effects in a single <code>.subscribe()<\/code> instead of sprinkling them around your code base.<\/li>\n<li>There are implementations in <em>so many languages<\/em> - Java, PHP, Python, Ruby, C#, Swift, and others you might not have even heard of.<\/li>\n<li>It is <em>not a framework<\/em>, and many popular frameworks (such as React, Angular, and Vue) work very well with RxJS.<\/li>\n<li>You can get hipster points if you want, but ReactiveX was first implemented nearly a decade ago (2009), stemming from ideas by <a href=\"http:\/\/conal.net\/papers\/icfp97\/\">Conal Elliott and Paul Hudak<\/a> <em>two<\/em> decades ago (1997), in describing functional reactive animations (surprise surprise). Needless to say, it's battle-tested.<\/li>\n<\/ul>\n<p>This article explored a number of useful parts and concepts of RxJS - creating Observables with <code>.fromEvent()<\/code> and <code>.interval()<\/code>, operating on observables with <code>.map()<\/code> and <code>.scan()<\/code>, combining multiple observables with <code>.merge()<\/code> and <code>.withLatestFrom()<\/code>, and introducing Schedulers with <code>Rx.Scheduler.animationFrame<\/code>. There are many other useful resources for learning RxJS:<\/p>\n<ul>\n<li><a href=\"http:\/\/reactivex.io\/rxjs\/\">ReactiveX: RxJS<\/a> - the official documentation<\/li>\n<li><a href=\"http:\/\/rxmarbles.com\/\">RxMarbles<\/a> - for visualizing observables<\/li>\n<li><a href=\"https:\/\/gist.github.com\/staltz\/868e7e9bc2a7b8c1f754\">The introduction to Reactive Programming you've been missing<\/a> by Andre Staltz<\/li>\n<\/ul>\n<p>If you want to dive further into animating with RxJS (and getting even more declarative with CSS variables), check out <a href=\"http:\/\/slides.com\/davidkhourshid\/reactanim#\/\">my slides from CSS Dev Conf 2016<\/a> and <a href=\"https:\/\/www.youtube.com\/watch?v=lTCukb6Zn3g\">my talk from JSConf Iceland 2016<\/a> on Reactive Animations with CSS Variables. For inspiration, here's some Pens that use RxJS for animation:<\/p>\n<ul>\n<li><a href=\"http:\/\/codepen.io\/davidkpiano\/pen\/Vmyyzd\">3D Digital Clock<\/a><\/li>\n<li><a href=\"http:\/\/codepen.io\/davidkpiano\/pen\/mAoaxP\">Heart App Concept<\/a><\/li>\n<li><a href=\"http:\/\/codepen.io\/Enki\/pen\/eBwKgO\">Perspective Drag with RxJS<\/a><\/li>\n<\/ul>\n","protected":false},"excerpt":{"rendered":"<p>You might have heard of RxJS, or ReactiveX, or reactive programming, or even just functional programming before. These are terms that are becoming more and more prominent when talking about the latest-and-greatest front-end technologies. And if you&#8217;re anything like me, you were completely bewildered when you first tried learning about it.<\/p>\n","protected":false},"author":247888,"featured_media":251849,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[612,1149],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251846"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/247888"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251846"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251846\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/251849"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251846"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251846"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251846"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251863,"date":"2017-02-24T04:34:06","date_gmt":"2017-02-24T11:34:06","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251863"},"modified":"2017-02-24T04:34:06","modified_gmt":"2017-02-24T11:34:06","slug":"deep-dive-css-font-metrics-line-height-vertical-align","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/deep-dive-css-font-metrics-line-height-vertical-align\/","title":{"rendered":"Deep dive CSS: font metrics, line-height and vertical-align"},"content":{"rendered":"<p>Vincent De Oliveira has written an epic post that details pretty much everything you might ever want to know about the <code>line-height<\/code> and <code>vertical-align<\/code> properties. If you\u2019ve ever had trouble aligning things next to text or wondered why two fonts look so wildly different from one another then this post is certainly for you.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Vincent De Oliveira has written an epic post that details pretty much everything you might ever want to know about the line-height and vertical-align properties. If you\u2019ve ever had trouble aligning things next to text or wondered why two fonts look so wildly different from one another then this post is certainly for you.<\/p>\n","protected":false},"author":223806,"featured_media":251880,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[746,587,1152],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251863"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/223806"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251863"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251863\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/251880"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251863"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251863"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251863"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251832,"date":"2017-02-23T09:43:20","date_gmt":"2017-02-23T16:43:20","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251832"},"modified":"2017-02-23T09:43:20","modified_gmt":"2017-02-23T16:43:20","slug":"individual-css-transform-functions","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/individual-css-transform-functions\/","title":{"rendered":"Individual CSS Transform Functions"},"content":{"rendered":"<p>Dan Wilson documents a classic annoyance with transforms:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">button {\r\n  transform: translateY(-150%);\r\n}\r\nbutton:hover {\r\n  \/* will (perhaps unintentionally) override the original translate *\/\r\n  transform: scale(.8);\r\n}<\/code><\/pre>\n<p>The native (and WET) solution is list the original transform again:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">button:hover {\r\n  transform: translateY(-150%) scale(.8);\r\n}<\/code><\/pre>\n<p>Dan's trick is to use custom properties instead. Set them all on the element right up front, then re-set them the <code>:hover<\/code> state:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">:root {\r\n  --tx: 150%;\r\n  --scale: 1;\r\n}\r\nbutton {\r\n  transform: \r\n    translateY(var(--tx))\r\n    scale(var(--scale));\r\n}\r\nbutton:hover {\r\n  --scale: 0.8;\r\n}<\/code><\/pre>\n<p>Cascading custom properties FTW.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Dan Wilson documents a classic annoyance with transforms: button { transform: translateY(-150%); } button:hover { \/* will (perhaps unintentionally) override the original translate *\/ transform: scale(.8); } The native (and WET) solution is list the original transform again: button:hover { transform: translateY(-150%) scale(.8); } Dan&#8217;s trick is to use custom properties instead. Set them all [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[1036,1147],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251832"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251832"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251832\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251832"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251832"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251832"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251387,"date":"2017-02-23T07:51:02","date_gmt":"2017-02-23T14:51:02","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251387"},"modified":"2017-02-23T07:51:02","modified_gmt":"2017-02-23T14:51:02","slug":"%e2%80%8bthe-best-tech-jobs-world","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/%e2%80%8bthe-best-tech-jobs-world\/","title":{"rendered":"\u200bThe Best Tech Jobs in the World"},"content":{"rendered":"<p>Over 6,000 companies use Hired to find their next team member and with transparency into each company, you're empowered to make the right decision about what opportunities you'd like to pursue. Say goodbye to pushy recruiters trying to sell you on roles you don't actually want. Life's too short to waste time with companies that are a bad fit, or to find out after months of interviewing that the offer is no good. <a href=\"http:\/\/synd.co\/2lwCxpq\">Try Hired<\/a> and let companies apply to you.<\/p>\n<p>The best part: it's always free.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Over 6,000 companies use Hired to find their next team member and with transparency into each company, you&#8217;re empowered to make the right decision about what opportunities you&#8217;d like to pursue. Say goodbye to pushy recruiters trying to sell you on roles you don&#8217;t actually want. Life&#8217;s too short to waste time with companies that [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17,508],"tags":[],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251387"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251387"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251387\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251387"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251387"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251387"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251795,"date":"2017-02-22T11:22:37","date_gmt":"2017-02-22T18:22:37","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251795"},"modified":"2017-02-22T11:22:37","modified_gmt":"2017-02-22T18:22:37","slug":"responsive-sites-tall-mobile","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/responsive-sites-tall-mobile\/","title":{"rendered":"Do responsive sites have to be so tall on mobile?"},"content":{"rendered":"<p>Kevin Vigneault:<\/p>\n<blockquote><p>I don't believe that the overall page length itself is inherently problematic. I have noticed though that in many responsive designs, purposeful groupings of content are easy to spot on larger screens, but get muddled when things start to stack on mobile screens.<\/p><\/blockquote>\n<p>This is probably mostly a problem on \"content\" sites in which you smash things down into the ol' <em>tube of content<\/em>. I don't mind the tube, but I think Kevin is doing some smart thinking here. There are plenty of different patterns that can happen while tubizing, and it's probably not thought about enough. <\/p>\n<p>This site is particularly guilty. A quick <code>document.documentElement.offsetHeight<\/code> test showed 14749px, more than double the height of an example Kevin pointed out that was a bit excessive. <\/p>\n","protected":false},"excerpt":{"rendered":"<p>Kevin Vigneault: I don&#8217;t believe that the overall page length itself is inherently problematic. I have noticed though that in many responsive designs, purposeful groupings of content are easy to spot on larger screens, but get muddled when things start to stack on mobile screens. This is probably mostly a problem on &#8220;content&#8221; sites in [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[643],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251795"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251795"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251795\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251795"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251795"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251795"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251777,"date":"2017-02-22T09:02:32","date_gmt":"2017-02-22T16:02:32","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251777"},"modified":"2017-02-22T09:02:32","modified_gmt":"2017-02-22T16:02:32","slug":"set-timed-debugger-web-inspect-hard-grab-elements","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/set-timed-debugger-web-inspect-hard-grab-elements\/","title":{"rendered":"Set a Timed Debugger To Web Inspect Hard-To-Grab Elements"},"content":{"rendered":"<p>The DevTools (in any browser) are an invaluable development tool for CSS developers. If you need to see (and play with) the styles on any given element, a quick inspection is only a few clicks away. <\/p>\n<p>Right click on something and \"Inspect Element\", or, open DevTools and use its selection tools to grab what you need. <\/p>\n<figure id=\"post-251779\" class=\"align-none media-251779\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/simple-inspect.gif\" alt=\"\" \/><\/figure>\n<p>But... sometimes it can be difficult or impossible to target the element you need to target in the DevTools. The DOM events needed to work with the DevTools themselves can interfere. <\/p>\n<p>Say I inserted an element on the <code>mouseenter<\/code> event of a certain other element, then removed it on <code>mouseleave<\/code>.<\/p>\n<figure id=\"post-251780\" class=\"align-none media-251780\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/disappearing-element.gif\" alt=\"\" \/><\/figure>\n<p>Try as I might, I just can't target that newly-added element for inspection. <\/p>\n<p>Chrome DevTools can simulate a <code>:hover<\/code> style, but that doesn't really help us here. It doesn't fire the DOM event, it just simulates the CSS state.<\/p>\n<figure id=\"post-251781\" class=\"align-none media-251781\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/hover-style.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/hover-style.png 540w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/hover-style-300x254.png 300w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>This is very useful, but won't help us here.<\/figcaption><\/figure>\n<h3>The trick is to fire a debugger; right when you need it<\/h3>\n<p>A <code>debugger;<\/code> statement, when the DevTools are open, kinda <em>freezes<\/em> the DOM. No more events are fired and script excecution is completely paused. <\/p>\n<p>But... you can still use DevTools! <\/p>\n<p>This is your opportunity to select that otherwise-impossible thing to select and do what you need to do. You can put that debugger; statement right in your code where you need it (remember DevTools has to be open for it to work). Or (Tim Holman taught me the trick) you can trigger it with a <code>setTimeout()<\/code> right from the console.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">setTimeout(function() {\r\n  debugger;\r\n}, 3000);<\/code><\/pre>\n<figure id=\"post-251784\" class=\"align-none media-251784\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/debugger.gif\" alt=\"\" \/><figcaption>Give yourself a few seconds to get the DOM how you need it, then the debugger; will fire and you can inspect as needed.<\/figcaption><\/figure>\n<p>I tried this, and it works, in Chrome, Firefox, Edge, and Safari, so it's a pretty cross-browser DevTools friendly trick. Only Chrome and Safari let you do mouse selection of elements while in debugger mode though, so in Edge or Firefox, you might have to do the drilling through the Elements tab to find what you need manually.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Triggering a debugger; statement at just the right moment can help you select a DOM element that is really hard (or impossible) to get selected in DevTools. You can do that directly in your code, or, through a setTimeout right in the console, so you can get the DOM just how you want it right before it&#8217;s frozen.<\/p>\n","protected":false},"author":3,"featured_media":251787,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1145,1144],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251777"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251777"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251777\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/251787"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251777"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251777"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251777"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251505,"date":"2017-02-22T05:47:43","date_gmt":"2017-02-22T12:47:43","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251505"},"modified":"2017-03-16T09:52:50","modified_gmt":"2017-03-16T16:52:50","slug":"gitftp-deploy","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/gitftp-deploy\/","title":{"rendered":"GitFTP-Deploy"},"content":{"rendered":"<div class=\"explanation\">Jan is the creator of the <a href=\"https:\/\/a.paddle.com\/click?said=135&aaid=954&link_id=179&chk=713ea5adbea2db43f37c82fdb42ef546&redir=aHR0cHM6Ly9lYXN0d2VzdC5zZS9hcHBzL2dpdGZ0cGRlcGxveQ==\">GitFTP-Deploy<\/a>, now at v2.0. He wrote to me about GitFTP-Deploy, and I thought it was pretty cool. As you'll learn in this post, it's macOS Git-based deployment software. I think it's worth knowing about as it sits nicely between free (and usually a bit more complex) roll-your-own solutions, and solutions with monthly or yearly subscription costs. GitFTP-Deply is a flat cost. This is slightly tricky territory, as it's advertorial in nature. So <strong>full disclosure:<\/strong> Jan didn't pay for this, but I opted to use affiliate links.<\/div>\n<p><!--more--><\/p>\n<p>Let's set the scene. Say you are a web freelancer and are almost finished with a client's new website. Over the years, you have learned the hard way not to edit the files directly over FTP. It's too easy to make breaking changes with no record of what changed and who did what. Nowadays you are using Git to manage the version of the files. <\/p>\n<h3>Why use version control?<\/h3>\n<p>There are many benefits of using a version control system for your projects.  Even if you're a very organized person, you still might get confused with a naming system like `index-2017-01-12.html` or `header_image_final_final_v2.svg`. Is it really final? How do you know what exactly is different between these versions and the last?<\/p>\n<p>A version control system (VCS, like Git) enforce that there is only one version of your files at any given time. All past versions of files are neatly packed up inside the VCS. When you need it, you can request any version at any time, and you'll have a snapshot of the complete project at hand.<\/p>\n<p>Every time you save a new version of your project, your VCS requires you to provide a short description of the changes. Additionally (if it's a code\/text file), you can see exactly what has been modified in the file's content. The VCS helps you understand how your project evolved between versions.<\/p>\n<h3>Deployment \/ Uploading<\/h3>\n<p>As useful as a VCS is, it doesn't directly help with uploading files to a live website. (We'll refer to that as <em>deployment<\/em>.)<\/p>\n<p>Deploying files can be very easy. Use an FTP client (e.g. Transmit) to upload files via FTP or SFTP straight to your server. The initial release of a site is especially easy: just upload all the files. <\/p>\n<p>When you make changes to a site, you also need to upload files. But... which ones? Do you always remember which files you have changed? If your panicked client calls to tell you that the site is broken, do you know what changed the last few times you uploaded files? <\/p>\n<p>If you are using Git, it's easy to see. But still, Git doesn't do deployment, and manually checking which files have changed and moving those is error prone and tedious. You still need a smart way to upload and deploy your changed files only. <\/p>\n<p>So what other options do you have for deploying files? One option is also installing Git on the server. Then just like you push and pull from your Git repository locally, you can pull from that repository on the server and the server will pull down the latest changes. This isn't an option for everyone, though. It will require shell access to the server and that just isn't possible on many shared hosting solutions.<\/p>\n<p>Another possibility is to rely on third-party cloud services like <a href=\"https:\/\/deploybot.com\/\">DeployBot<\/a>, <a href=\"https:\/\/www.springloops.io\/\">Springloops<\/a>, or <a href=\"http:\/\/beanstalkapp.com\/\">Beanstalk<\/a>. None of these choices are bad, but there are potential downsides:<\/p>\n<ul>\n<li>There are monthly or annual costs to these services, whether you are actively using them at the moment or not.<\/li>\n<li>Setting up external Git repositories may take some time and can be complicated.<\/li>\n<li>There is also the increased risk of relying on a third party service. The deployment service can be down at the moment you want to deploy.<\/li>\n<li>The speed of the deployment is dependent on that service. There may be a long queue of other deployments before yours.<\/li>\n<\/ul>\n<h3>A Look at GitFTP-Deploy<\/h3>\n<p>Let's take a look at my alternative: <a href=\"https:\/\/a.paddle.com\/click?said=135&aaid=954&link_id=179&chk=713ea5adbea2db43f37c82fdb42ef546&redir=aHR0cHM6Ly9lYXN0d2VzdC5zZS9hcHBzL2dpdGZ0cGRlcGxveQ==\">GitFTP-Deploy<\/a>. GitFTP-Deploy is a native macOS app that only uploads the changed files (through SFTP, FTP or FTPS) since the last deployment. You don't have to remember which files you have changed, added, or deleted. <\/p>\n<p>Since GitFTP-Deploy reads what have changed from your local Git repository, you also get in the habit of using a Git for your project: once a file is committed, it's also ready for deployment. <\/p>\n<p>Another feature which could ease up your deployment is GitFTP-Deploy's ability to run pre- and post-deployment scripts. Are you using a JavaScript compiler (like Babel) or CSS preprocessor (like Stylus)? Are you concatenating and compressing assets? Running these tasks can be make automatic by the app. <\/p>\n<p>Other times it can be a real time saver just to commit the last changes, and it's automatically pushed onto the server, just with a single Git commit command. <\/p>\n<h3>Getting started<\/h3>\n<p>In less than two minutes you can start to deploy your files.<\/p>\n<h4>1) Create a new site<\/h4>\n<figure id=\"post-251717\" class=\"align-none media-251717\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/1-CreateNewSite.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/1-CreateNewSite.png 912w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/1-CreateNewSite-300x161.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/1-CreateNewSite-768x413.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<h4>2) Point to your local repository and select which commit you want to start deploying from<\/h4>\n<figure id=\"post-251718\" class=\"align-none media-251718\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/2-PointToLocalRepo.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/2-PointToLocalRepo.png 972w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/2-PointToLocalRepo-300x279.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/2-PointToLocalRepo-768x714.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<h4>3) Setup your server connection<\/h4>\n<figure id=\"post-251719\" class=\"align-none media-251719\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/3-ServerConnection.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/3-ServerConnection.png 972w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/3-ServerConnection-300x279.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/3-ServerConnection-768x714.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<h4>4) Click Deploy<\/h4>\n<figure id=\"post-251720\" class=\"align-none media-251720\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/4-Deploy.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/4-Deploy.png 1626w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/4-Deploy-300x81.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/4-Deploy-768x207.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/4-Deploy-1024x276.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Maybe your workflow is a bit more complicated? You need more power?<\/p>\n<p>You can specify scripts to be run both locally and on your server, before and after uploads. For example, before uploading, you may want to run your favorite JavaScript compiler or a Gulp script that concatenates and optimizes your JavaScript files for production.<\/p>\n<p>Or perhaps you are using a workflow with another task runner like Grunt? Grunt can also be configured to help you with optimizing images, compressing scripts, compiling preprocessors, and countless other things.<\/p>\n<figure id=\"post-251721\" class=\"align-none media-251721\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/5-GulpProduction.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/5-GulpProduction.png 1096w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/5-GulpProduction-300x272.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/5-GulpProduction-768x697.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/5-GulpProduction-1024x929.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Running <code>gulp --production<\/code><\/figcaption><\/figure>\n<p>The ability to run tasks can be quite powerful. For example, even WordPress has <a href=\"http:\/\/wp-cli.org\/\">WP-CLI<\/a>, meaning you could script out things like database syncing and settings updates with your deployment.<\/p>\n<h3>Other Notes on Usage<\/h3>\n<p>If you prefer not to have build files under version control, you can add this folder to \"always upload\". <\/p>\n<figure id=\"post-251722\" class=\"align-none media-251722\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/6-AlwaysUpload.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/6-AlwaysUpload.png 972w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/6-AlwaysUpload-300x279.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/6-AlwaysUpload-768x714.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Using GitFTP\u2013Deploy does not mean that you cannot use GitHub or another third-party hosted Git repository service. Just make sure to pull the changes from there before deploying. <\/p>\n<figure id=\"post-251723\" class=\"align-none media-251723\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/7-GitPull.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/7-GitPull.png 1096w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/7-GitPull-300x272.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/7-GitPull-768x697.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/7-GitPull-1024x929.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<h3>Team Usage<\/h3>\n<p>While <a href=\"https:\/\/a.paddle.com\/click?said=135&aaid=954&link_id=179&chk=713ea5adbea2db43f37c82fdb42ef546&redir=aHR0cHM6Ly9lYXN0d2VzdC5zZS9hcHBzL2dpdGZ0cGRlcGxveQ==\">GitFTP\u2013Deploy<\/a> is not exactly built for teams, you can still use it. The easiest way it that one person handles the deployments. Another more advanced option is to run GitFTP-Deploy on a server. <\/p>\n<p>This way may not work for large teams, and commits are done through many different individuals. However, GitFTP-Deploy will attempt to check which branch and commit that which was last deployed.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Let&#8217;s set the scene. Say you are a web freelancer and are almost finished with a client&#8217;s new website. Over the years, you have learned the hard way not to edit the files directly over FTP. It&#8217;s too easy to make breaking changes with no record of what changed and who did what. Nowadays you are using Git to manage the version of the files. Let&#8217;s cover that, and also the last mile: deploying only the files known to be changed to the server.<\/p>\n","protected":false},"author":248079,"featured_media":251775,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1047,766],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251505"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/248079"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251505"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251505\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/251775"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251505"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251505"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251505"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251495,"date":"2017-02-21T06:24:31","date_gmt":"2017-02-21T13:24:31","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251495"},"modified":"2017-02-22T09:15:33","modified_gmt":"2017-02-22T16:15:33","slug":"http2-real-world-performance-test-analysis","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/http2-real-world-performance-test-analysis\/","title":{"rendered":"HTTP\/2 &#8211; A Real-World Performance Test and Analysis"},"content":{"rendered":"<p>Perhaps you've heard of HTTP\/2? It's not just an idea, it's a real technology and slowly but surely, hosting companies and CDN services have been releasing it to their servers. Much has been said about the benefits of using HTTP\/2 instead of HTTP1.x, but the proof the the pudding is in the eating.<\/p>\n<p>Today we're going to perform a few real-world tests, perform some timings and see what results we can extract out of all this.<\/p>\n<p><!--more--><\/p>\n<h3>Why HTTP\/2?<\/h3>\n<p>If you haven't read about HTTP\/2, may I suggest you have a look at a few articles. There's <a href=\"https:\/\/http2.github.io\/faq\/\">the HTTP\/2 faq<\/a> which gives you all the nitty gritty technical details whilst I've also <a href=\"https:\/\/www.dart-creations.com\/wordpress\/wordpress-tutorials\/wordpress-http2.html\">written a few articles about HTTP\/2<\/a> myself where I try to tone-down the tech and focus mostly on the why and the how of HTTP\/2.<\/p>\n<p>In a nutshell, HTTP\/2 has been released to address the inherent problems of HTTP1.x<\/p>\n<ol>\n<li><strong>HTTP\/2 is binary<\/strong> instead of textual like HTTP1.x - this makes it transfer and parsing of data over HTTP\/2 inherently more machine-friendly, thus faster, more efficient and less error prone.<\/li>\n<li><strong>HTTP\/2 is fully multiplexed<\/strong> allowing multiple files and requests to be transferred at the same time, as opposed to HTTP1.x which only accepted one single request \/ connection at a time.<\/li>\n<li><strong>HTTP\/2 uses the same connection<\/strong> for transferring different files and requests, avoiding the heavy operation of opening a new connection for every file which needs to be transferred between a client and a server.<\/li>\n<li><strong>HTTP\/2 has header compression<\/strong> built-in which is another way of removing several of the overheads associated with HTTP1.x having to retrieve several different resources from the same or multiple web servers.<\/li>\n<li><strong>HTTP\/2 allows servers to push<\/strong> required resources proactively rather than waiting for the client browser to request files when it thinks it need them.<\/li>\n<\/ol>\n<p>These things are the best (if simplistic) depiction of how HTTP\/2 is better than HTTP1.x. Rather than the browser having to go back to the server to fetch every single resource, it's picking up all the resources and transferring them at once.<\/p>\n<figure id=\"post-251496\" class=\"align-none media-251496\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image02.gif\" alt=\"\" \/><\/figure>\n<h3>An semi-scientific test of HTTP\/2 performance<\/h3>\n<p>Theory is great, but it's more convincing if we can see some real-data and real performance improvements of HTTP\/2 over HTTP1.x We're going to run a few tests to determine whether we see a marked improvement in performance.<\/p>\n<p>Why are we calling this a semi-scientific test?<\/p>\n<p>If this were a lab, or even a development environment where we wanted to demonstrate exact results, we'd be eliminating all variables and just test the performance of the same HTML content, one using HTTP1.x and one using HTTP\/2.<\/p>\n<p>Yet (most of us) don't live in a development environment. Our web applications and sites operate in the real world, in environments where fluctuations occur for all sorts of valid reasons. So while lab testing is great and is definitely required, for this test we're going out in the real-world and running some tests on a (simulated) real website and compare their performance.<\/p>\n<p>We're going to be using a default one-page Bootstrap template (<a href=\"https:\/\/themeforest.net\/item\/zebre-minimal-agency-porfolio-wp-theme\/12528341\">Zebre<\/a>) for several reasons:<\/p>\n<ol>\n<li>It's a very real-world example of what modern website looks like today<\/li>\n<li>It's got quite a varied set of resources which are typical of sites today and which would typically go through a number of optimizations for performance under HTTP1.x circumstances\n<ul>\n<li>25 images<\/li>\n<li>6 JS scripts<\/li>\n<li>7 CSS files<\/li>\n<\/ul>\n<\/li>\n<li>It's based on WordPress so we\u2019ll be able to perform a number of HTTP1.x based optimizations to push its performance as far as it can go<\/li>\n<li>It was given out for free in January by ThemeForest. This was great timing, what better real-world test than using a premium theme by an elite author on ThemeForest?<\/li>\n<\/ol>\n<p>We'll be running these tests on a brand new account powered by <a href=\"https:\/\/kinsta.com\/\">Kinsta<\/a> managed WordPress hosting who we've discovered lately, and whose performance we really find great. We do this because we want to avoid the stressed environments of shared hosting accounts. To reduce the external influence of other sites operating on the same account at the same time, this environment will be used solely for the purpose of this test.<\/p>\n<p>We ran the tests on the lowest plan because we just need to test a single WordPress site. In reality, unlike most hosting services, there is no difference in speed\/performance of the plans. The larger plans just have the capacity for more sites. We then set up one of the domains we hoard (iwantovisit.com) and installed WordPress on it.<\/p>\n<p>We've also chosen to run these tests on WordPress. <\/p>\n<p>The reason for doing that is for a bit of convenience rather than anything else. Doing all of these tests on manual HTML would require quite a lot of time to complete. We'd rather use that time to do more extensive and constructive tests.<\/p>\n<p>Using WordPress, we can enable such plugins as: <\/p>\n<ul>\n<li>A caching plugin (to remove generation time discrepancies as much as possible)<\/li>\n<li>Combination and minification plugin to perform optimizations based on HTTP1.x<\/li>\n<li>CDN plugin to easily integrate with a CDN whilst performing HTTP\/2 tests integrated with a CDN<\/li>\n<\/ul>\n<p>We setup the Zebre theme and installed several plugins. Once again, this makes the test very realistic. You're hardly going to find any WordPress sites without a bunch of plugins installed. We installed the following:<\/p>\n<figure id=\"post-251497\" class=\"align-none media-251497\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image04-1.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image04-1.png 668w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image04-1-282x300.png 282w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>We also imported the Zebre theme demo data to have a nicely populated theme with plenty of images, making this site an ideal candidate for HTTP\/2 testing.<\/p>\n<p>The final thing we did was to make sure there is page caching in place.  We just want to make sure we were not suffering from drastic fluctuations due to page generation times. The great thing is that with Kinsta there's no needed for any kind of caching plugin as page caching is fully built into the service at the server-level.<\/p>\n<p>The final page looked a little like this:<\/p>\n<figure id=\"post-251498\" class=\"align-none media-251498\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image03-1.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image03-1.png 1421w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image03-1-300x157.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image03-1-768x402.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image03-1-1024x536.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>That\u2019s a Zebra!<\/figcaption><\/figure>\n<p>And this is the below the fold:<\/p>\n<figure id=\"post-251499\" class=\"align-none media-251499\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image08-1.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image08-1.png 1409w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image08-1-300x136.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image08-1-768x347.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image08-1-1024x463.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>We're ready for the first tests.<\/p>\n<h3>Test 1 - HTTP1 - caching but no other optimizations<\/h3>\n<p>Let's start running some tests to make sure we have a good test bed and get some baseline results. <\/p>\n<p>We\u2019re running these tests with only WordPress caching - no other optimizations.<\/p>\n<table>\n<tr>\n<th>Testing Site<\/th>\n<th>Location<\/th>\n<th>Page Load time<\/th>\n<th>Total Page Size<\/th>\n<th>Requests<\/th>\n<\/tr>\n<tr>\n<td>GTMetrix<\/td>\n<td>Vancouver<\/td>\n<td>3.3s<\/td>\n<td>7.3MB<\/td>\n<td>82<\/td>\n<\/tr>\n<tr>\n<td>Pingdom tools<\/td>\n<td>New York<\/td>\n<td>1.25s<\/td>\n<td>7.3MB<\/td>\n<td>82<\/td>\n<\/tr>\n<\/table>\n<p>There's clearly something fishy going on. The load times are much too different. Oh yes: Google Cloud platform, Central US servers east are located in Iowa, making the test location of Pingdom tools New York much closer than Vancouver, skewing the results in favor of New York. <\/p>\n<p>You probably know that if you want to improve the performance of your site, there is one very simple solution: host your site or application as physically close as possible to the location of your visitors. That's the same concept CDNs use to boost performance. The closer the visitors to the server location of the site, the better the loading time.<\/p>\n<p>For that reason, we\u2019re going to run two types of tests. One is going to have a very close location between the hosting service and the test location. For the other, we\u2019re going to choose to amplify the problem of distance. We're thus going to perform a trans-atlantic trip with our testing, from the US to Europe, and see whether the HTTP\/2 optimizations results in better performance or not.<\/p>\n<p>Let's try to find a similar testing location on both test services. Dallas, Texas is a common testing ground, so we'll use that for the physically close location. For the second location, we're going to use London and Stockholm, since there isn' a shared European location.<\/p>\n<table>\n<tr>\n<th>Testing Site<\/th>\n<th>Location<\/th>\n<th>Page Load time<\/th>\n<th>Total Page Size<\/th>\n<th>Requests<\/th>\n<\/tr>\n<tr>\n<td>Pingdom tools<\/td>\n<td>Dallas<\/td>\n<td>2.15s<\/td>\n<td>7.3MB<\/td>\n<td>82<\/td>\n<\/tr>\n<\/table>\n<p>That's better. Let's run another couple of tests.<\/p>\n<table>\n<tr>\n<th>Testing Site<\/th>\n<th>Location<\/th>\n<th>Page Load time<\/th>\n<th>Total Page Size<\/th>\n<th>Requests<\/th>\n<\/tr>\n<tr>\n<td>GTMetrix<\/td>\n<td>Dallas<\/td>\n<td>1.6s<\/td>\n<td>7.3MB<\/td>\n<td>83<\/td>\n<\/tr>\n<tr>\n<td>Pingdom tools<\/td>\n<td>Dallas<\/td>\n<td>1.74s<\/td>\n<td>7.3MB<\/td>\n<td>82<\/td>\n<\/tr>\n<tr>\n<td>GTMetrix<\/td>\n<td>London<\/td>\n<td>2.6s<\/td>\n<td>7.3MB<\/td>\n<td>82<\/td>\n<\/tr>\n<tr>\n<td>Pingdom tools<\/td>\n<td>Stockholm<\/td>\n<td>2.4s<\/td>\n<td>7.3MB<\/td>\n<td>82<\/td>\n<\/tr>\n<\/table>\n<p>You might notice there are a few fluctuations in the requests. We believe these are coming from external scripts being called, which sometimes differ in the number of requests they generate. In fact, although the loading times seem to vary by about a second, by taking a look at the waterfall graph, we can see that the assets on the site are delivered pretty consistently. It's the external assets (specifically: fonts) which fluctuate widely.<\/p>\n<figure id=\"post-251531\" class=\"align-none media-251531\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image05-1.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image05-1.png 607w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image05-1-150x150.png 150w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image05-1-300x300.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image05-1-90x90.png 90w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>We can see clearly also how the distance affects the loading time significantly by about a second.<\/p>\n<p>Before we continue, you'll also notice that our speed optimization score is miserable. That's why for our second round of tests we're going to perform a number of speed optimizations.<\/p>\n<figure id=\"post-251532\" class=\"align-none media-251532\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image06-1.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image06-1.png 1176w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image06-1-300x46.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image06-1-768x118.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image06-1-1024x158.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<h3>Test 2 - HTTP1 with performance optimizations and caching<\/h3>\n<p>Now, given that we know that HTTP1.x is very inefficient in the handling of requests, we're going to do a round of performance optimizations.<\/p>\n<p>We're going to install <a href=\"https:\/\/premium.wpmudev.org\/project\/wp-hummingbird\/?mkpp=b&utm_expid=3606929-97.J2zL7V7mQbSNQDPrXwvBgQ.1\">HummingBird<\/a> from WPMUDEV on the WordPress installation. This is a plugin which handles page load optimizations without caching. Exactly what we need.<\/p>\n<p>We'll be enabling most of the optimizations which focus on reducing requests and combining files as much as possible.<\/p>\n<ul>\n<li>Minification of CSS and JS files<\/li>\n<li>Combining of CSS and JS files<\/li>\n<li>Enabling of GZIP compression<\/li>\n<li>Enabling of browser caching<\/li>\n<\/ul>\n<p>We're not going to optimize the images because this would totally skew the results. <\/p>\n<p>As you can see below, following our optimization, we have a near perfect score for everything except images. We\u2019re going to leave the images unoptimized on purpose so that we retain their large size and have a good \"load\" to carry.<\/p>\n<figure id=\"post-251534\" class=\"align-none media-251534\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image01-2.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image01-2.png 578w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image01-2-247x300.png 247w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Let's flush the caches and perform a second run of tests. Immediately we can see a drastic improvement.<\/p>\n<figure id=\"post-251535\" class=\"align-none media-251535\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image00-1.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image00-1.png 1168w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image00-1-300x44.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image00-1-768x113.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image00-1-1024x151.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Never mind the C on YSlow. It's because we're not using a CDN and some of the external resources (the fonts) cannot be browser cached.<\/p>\n<table>\n<tr>\n<th>Testing Site<\/th>\n<th>Location<\/th>\n<th>Page Load time<\/th>\n<th>Total Page Size<\/th>\n<th>Requests<\/th>\n<\/tr>\n<tr>\n<td>GTMetrix<\/td>\n<td>Dallas<\/td>\n<td>1.9s<\/td>\n<td>7.25MB<\/td>\n<td>56<\/td>\n<\/tr>\n<tr>\n<td>Pingdom tools<\/td>\n<td>Dallas<\/td>\n<td>1.6s<\/td>\n<td>7.2MB<\/td>\n<td>56<\/td>\n<\/tr>\n<tr>\n<td>GTMetrix<\/td>\n<td>London<\/td>\n<td>2.7s<\/td>\n<td>7.25MB<\/td>\n<td>56<\/td>\n<\/tr>\n<tr>\n<td>Pingdom tools<\/td>\n<td>Stockholm<\/td>\n<td>2.28s<\/td>\n<td>7.3MB<\/td>\n<td>56<\/td>\n<\/tr>\n<\/table>\n<p>We can see quite a nice improvement on the site. Next up, we're going to enable HTTPS on the site. This is a prerequisite for setting up HTTP\/2.<\/p>\n<h3>Test 3 - HTTP\/2 without optimizations and caching<\/h3>\n<p>We'll be using the <a href=\"https:\/\/letsencrypt.org\/\">Let's Encrypt<\/a> functionality to create a free SSL certificate. This is built into Kinsta, which means setting up HTTPS should be pretty straightforward.<\/p>\n<figure id=\"post-251536\" class=\"align-none media-251536\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image11.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image11.png 563w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image11-300x144.png 300w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Once we've generated an HTTPS certificate, we'll be using the <a href=\"https:\/\/wordpress.org\/plugins\/really-simple-ssl\/\">Really Simple SSL WordPress plugin<\/a> to force HTTPS across the site.<\/p>\n<figure id=\"post-251537\" class=\"align-none media-251537\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image10.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image10.png 623w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image10-300x131.png 300w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>This plugin checks whether a secure certificate for the domain exists on your server, if it does, it forces HTTPS across your WordPress site. Really and truly, this plugin makes implementing HTTPS on your site a breeze. If you're performing a migration from HTTP to HTTPS, do not forget to <a href=\"https:\/\/www.dart-creations.com\/wordpress\/wordpress-tutorials\/wordpress-ssl.html\">perform a full 301 redirection from HTTP to HTTPS<\/a>, so that you don't lose any traffic or search engine rankings whilst forcing HTTPS on your site.<\/p>\n<figure id=\"post-251538\" class=\"align-none media-251538\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image12.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image12.png 706w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image12-300x93.png 300w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<figure id=\"post-251539\" class=\"align-none media-251539\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image09.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image09.png 697w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image09-300x150.png 300w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Once we've fully enabled and tested HTTPS on our website, you might need to do a little magic to start serving resources over HTTP\/2, although most servers today will switch you directly to HTTP\/2 if you are running an SSL site.<\/p>\n<p>Kinsta runs on <a href=\"https:\/\/www.nginx.com\/\">Nginx<\/a>, and enables HTTP\/2 by default on SSL sites, so enabling SSL is enough to switch the whole site to HTTP\/2.<\/p>\n<p>Once we\u2019ve performed the configuration our site should now be served on HTTP\/2. To confirm that the site is running on HTTP\/2, we've installed this <a href=\"https:\/\/chrome.google.com\/webstore\/detail\/http2-and-spdy-indicator\/mpbpobfflnpcgagjijhmgnchggcjblin?hl=en\">nifty chrome extension<\/a> which checks which protocols are supported by our site.<\/p>\n<figure id=\"post-251540\" class=\"align-none media-251540\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image07-3.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image07-3.png 385w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image07-3-300x239.png 300w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Once we\u2019ve confirmed that HTTP\/2 is up and running nicely on the site, we can run another batch of tests.<\/p>\n<table>\n<tr>\n<th>Testing Site<\/th>\n<th>Location<\/th>\n<th>Page Load time<\/th>\n<th>Total Page Size<\/th>\n<th>Requests<\/th>\n<\/tr>\n<tr>\n<td>GTMetrix<\/td>\n<td>Dallas<\/td>\n<td>2.7s<\/td>\n<td>7.24MB<\/td>\n<td>82<\/td>\n<\/tr>\n<tr>\n<td>Pingdom tools*<\/td>\n<td>Dallas<\/td>\n<td>2.04s<\/td>\n<td>7.3MB<\/td>\n<td>82<\/td>\n<\/tr>\n<tr>\n<td>GTMetrix<\/td>\n<td>London<\/td>\n<td>2.4s<\/td>\n<td>7.24MB<\/td>\n<td>82<\/td>\n<\/tr>\n<tr>\n<td>Pingdom tools*<\/td>\n<td>Stockholm<\/td>\n<td>2.69s<\/td>\n<td>7.3MB<\/td>\n<td>82<\/td>\n<\/tr>\n<\/table>\n<p>*Unfortunately, Pingdom tools uses Chrome 39 to perform the tests. This version of Chrome does not have HTTP\/2 support so we won't be able to realistically calculate the speed improvements. We'll run the tests regardless because we can have a benchmark to compare with.<\/p>\n<h3>Test 4 - HTTP\/2 with performance optimizations and caching<\/h3>\n<p>Now that we\u2019ve seen HTTP\/2 without any performance optimizations, it\u2019s also a good idea to actually check whether HTTP1 based performance optimizations can and will make any difference when we have HTTP\/2 enabled.<\/p>\n<p>There are two ways of thinking about this:<\/p>\n<ul>\n<li><strong>Against:<\/strong> To perform optimizations aimed at reducing connections and size, we are adding performance overhead to the site (whilst the server performs minification and combination of files), therefore there is a negative effect on the performance.<\/li>\n<li><strong>In favor:<\/strong> Performing such minification and combination of files and other optimizations will have a performance improvement regardless of protocol, particularly minification which is essentially reducing the size of resources which need to be delivered. Any performance overhead can be mitigated using caching.<\/li>\n<\/ul>\n<table>\n<tr>\n<th>Testing Site<\/th>\n<th>Location<\/th>\n<th>Page Load time<\/th>\n<th>Total Page Size<\/th>\n<th>Requests<\/th>\n<\/tr>\n<tr>\n<td>GTMetrix<\/td>\n<td>Dallas<\/td>\n<td>1.0s<\/td>\n<td>6.94MB<\/td>\n<td>42<\/td>\n<\/tr>\n<tr>\n<td>Pingdom tools**<\/td>\n<td>Dallas<\/td>\n<td>1.45s<\/td>\n<td>7.3MB<\/td>\n<td>56<\/td>\n<\/tr>\n<tr>\n<td>GTMetrix<\/td>\n<td>London<\/td>\n<td>2.5s<\/td>\n<td>7.21MB<\/td>\n<td>56<\/td>\n<\/tr>\n<tr>\n<td>Pingdom tools**<\/td>\n<td>Stockholm<\/td>\n<td>2.46s<\/td>\n<td>7.3MB<\/td>\n<td>56<\/td>\n<\/tr>\n<\/table>\n<p>**HTTP\/2 not supported<\/p>\n<h3>Test 5 - CDN with performance optimizations and caching (no HTTP\/2)<\/h3>\n<p>You\u2019ve probably seen over and over again how one of the main ways to improve the performance of a site is to implement a CDN (Content Delivery Network).<\/p>\n<p>But why should a CDN <em>still<\/em> be required if we are now using HTTP\/2?<\/p>\n<p>There is still going to be a need for a CDN, even with HTTP\/2 in place. The reason is that besides a CDN improving performance from an infrastructure point of view (more powerful servers to handle the load of traffic), a CDN actually reduces the distance that the heaviest resources of your website need to travel. <\/p>\n<p>By using a CDN, resources such as images, CSS and JS files are going to be served from a location which is (typically) physically closer to your end user that your website\u2019s hosting server.<\/p>\n<p>This has an implicit performance advantage: the less content needs to travel, the faster your website will load. This is something which we\u2019ve already encountered in our initial tests above. Physically closer test locations perform much better in loading times.<\/p>\n<p>For our tests, we're going to run our website on an <a href=\"https:\/\/www.incapsula.com\/cdn-content-delivery-network\/\">Incapsula CDN server<\/a>, one of the CDN services which we\u2019ve been using for our sites lately. Of course, any CDN will have the same or similar benefits.<\/p>\n<p>There are a couple of ways that your typical CDN will work:<\/p>\n<ul>\n<li><strong>URL rewrite:<\/strong> You install a plugin or write code such that the address of <a href=\"https:\/\/css-tricks.com\/adding-a-cdn-to-your-website\/\">resources are rewritten<\/a> such that they are served from the CDN rather than your site\u2019s URL<\/li>\n<li><strong>Reverse proxy:<\/strong> you make DNS changes such that the CDN handles the bulk of your traffic. The CDN service then sends the requests for dynamic content to your web server.<\/li>\n<\/ul>\n<table>\n<tr>\n<th>Testing Site<\/th>\n<th>Location<\/th>\n<th>Page Load time<\/th>\n<th>Total Page Size<\/th>\n<th>Requests<\/th>\n<\/tr>\n<tr>\n<td>GTMetrix<\/td>\n<td>Dallas<\/td>\n<td>1.5s<\/td>\n<td>7.21MB<\/td>\n<td>61<\/td>\n<\/tr>\n<tr>\n<td>Pingdom tools<\/td>\n<td>Dallas<\/td>\n<td>1.65s<\/td>\n<td>7.3MB<\/td>\n<td>61<\/td>\n<\/tr>\n<tr>\n<td>GTMetrix<\/td>\n<td>London<\/td>\n<td>2.2s<\/td>\n<td>7.21MB<\/td>\n<td>61<\/td>\n<\/tr>\n<tr>\n<td>Pingdom tools<\/td>\n<td>Stockholm<\/td>\n<td>1.24s<\/td>\n<td>7.3MB<\/td>\n<td>61<\/td>\n<\/tr>\n<\/table>\n<h3>Test 6 - CDN with performance optimizations and caching and HTTP\/2<\/h3>\n<p>The final test which we're going to perform is implementing all possible optimizations we can. That means we're running a CDN using HTTP\/2 on a site running HTTP\/2, where all page-load optimizations have been performed.<\/p>\n<table>\n<tr>\n<th>Testing Site<\/th>\n<th>Location<\/th>\n<th>Page Load time<\/th>\n<th>Total Page Size<\/th>\n<th>Requests<\/th>\n<\/tr>\n<tr>\n<td>GTMetrix<\/td>\n<td>Dallas<\/td>\n<td>0.9s<\/td>\n<td>6.91MB<\/td>\n<td>44<\/td>\n<\/tr>\n<tr>\n<td>Pingdom tools**<\/td>\n<td>Dallas<\/td>\n<td>1.6s<\/td>\n<td>7.3MB<\/td>\n<td>61<\/td>\n<\/tr>\n<tr>\n<td>GTMetrix<\/td>\n<td>London<\/td>\n<td>1.9s<\/td>\n<td>6.90MB<\/td>\n<td>44<\/td>\n<\/tr>\n<tr>\n<td>Pingdom tools**<\/td>\n<td>Stockholm<\/td>\n<td>1.41s<\/td>\n<td>7.3MB<\/td>\n<td>61<\/td>\n<\/tr>\n<\/table>\n<p>**HTTP\/2 not supported<\/p>\n<p>Nice! We've got a sub-second loading time for a 7Mb sized website! That's an impressive result if you ask me!<\/p>\n<p>We can clearly see what a positive effect HTTP\/2 is having on the site - when comparing the loading times, you can see that there is a 0.5 second difference on the loading times. Given that we're operating in an environment which loads in less than 2 seconds in the worst-case scenario, a 0.5 second difference is a HUGE improvement.<\/p>\n<p>This is the result which we were actually hoping for.<\/p>\n<p>Yes, HTTP\/2 does make a real difference. <\/p>\n<h3>Conclusion - Analysis of HTTP\/2 performance<\/h3>\n<p>Although we tried as much as possible to eliminate fluctuations, there are going to be quite a few inaccuracies in our setup, but there is a very clear trend. HTTP\/2 is faster and is the recommended way forward. It does make up for the performance overhead which is introduced with HTTPS sites.<\/p>\n<p>Our conclusions are therefore:<\/p>\n<ol>\n<li>HTTP\/2 is faster in terms of performance and site loading time than HTTP1.x.<\/li>\n<li>Minification and other ways of reducing the size of the web page being served is always going to provide more benefits than the overhead required to perform this \"minification\".<\/li>\n<li>Reducing the distance between the server and the client will always provide page loading time performance benefits so using a CDN is still a necessity if you want to push the performance envelope of your site, whether you\u2019ve enabled HTTP\/2 or not.<\/li>\n<\/ol>\n<p>What do you think of our results? Have you already implemented HTTP\/2? Have you seen better loading times too?<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Perhaps you&#8217;ve heard of HTTP\/2? It&#8217;s not just an idea, it&#8217;s a real technology and slowly but surely, hosting companies and CDN services have been releasing it to their servers. Much has been said about the benefits of using HTTP\/2 instead of HTTP1.x, but the proof the the pudding is in the eating. Today we&#8217;re [&hellip;]<\/p>\n","protected":false},"author":246079,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[633,910,592],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251495"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/246079"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251495"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251495\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251495"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251495"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251495"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251715,"date":"2017-02-20T08:52:28","date_gmt":"2017-02-20T15:52:28","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251715"},"modified":"2017-02-20T08:52:28","modified_gmt":"2017-02-20T15:52:28","slug":"squeezy-stretchy-flexbox-nav","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/squeezy-stretchy-flexbox-nav\/","title":{"rendered":"Squeezy Stretchy Flexbox Nav"},"content":{"rendered":"<p>I saw an interesting take on off-canvas navigation the other day over on <a href=\"https:\/\/thenewtropic.com\/\">The New Tropic<\/a>. It wasn't the off-canvas part so much. It was how the elements within the nav took up space. They stretched out to take up all the space, when available, but never squished too far. Those are concepts that flexbox makes pretty easy to express! Let's dig in a little.<\/p>\n<p><!--more--><\/p>\n<p>Here's the nav, a video showing what I mean:<\/p>\n<figure><video src=\"https:\/\/css-tricks.com\/videos\/new_tropic_nav.mov\" controls><\/video><\/figure>\n<p>My favorite part is how there are <em>submenus<\/em>. When a submenu is toggled open, the same rules apply. If some stretching has happened, the nav items will shrink in height, making room for the submenu. But never shrink too far. If there isn't room, the menu will just scroll.<\/p>\n<h3>Standard Two-Level Nav HTML<\/h3>\n<p>Pretty easy to <a href=\"https:\/\/css-tricks.com\/need-lorem-ipsum-inside-html\/\">mock out with Emmet<\/a>:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;nav class=\"main-nav\"&gt;\r\n  &lt;ul class=\"nav-list\"&gt;\r\n    &lt;li&gt;&lt;a href=\"\"&gt;Lorem ipsum.&lt;\/a&gt;&lt;\/li&gt;\r\n    &lt;li&gt;\r\n      &lt;button class=\"submenu-toggle-button\"&gt;+&lt;\/button&gt;\r\n      &lt;a href=\"\"&gt;Explicabo, perspiciatis.&lt;\/a&gt;\r\n      &lt;ul class=\"submenu nav-list\"&gt;\r\n        &lt;li&gt;&lt;a href=\"\"&gt;Lorem ipsum.&lt;\/a&gt;&lt;\/li&gt;\r\n        &lt;li&gt;&lt;a href=\"\"&gt;Culpa, qui!&lt;\/a&gt;&lt;\/li&gt;\r\n        &lt;li&gt;&lt;a href=\"\"&gt;Repudiandae, eaque.&lt;\/a&gt;&lt;\/li&gt;\r\n      &lt;\/ul&gt;\r\n    &lt;\/li&gt;\r\n    &lt;li&gt;&lt;a href=\"\"&gt;Sit, dolor.&lt;\/a&gt;&lt;\/li&gt;\r\n    &lt;li&gt;&lt;a href=\"\"&gt;Dicta, possimus?&lt;\/a&gt;&lt;\/li&gt;\r\n    \r\n    &lt;!-- etc --&gt;\r\n\r\n  &lt;\/ul&gt;\r\n&lt;\/nav&gt;<\/code><\/pre>\n<h3>Flexbox the Column<\/h3>\n<p>Let's make sure that list is as tall as the browser window, which is easy with viewport units. Then make sure each of the list items stretch to fill the space:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.main-nav &gt; ul {\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.main-nav &gt; ul &gt; li {\r\n  flex: 1;\r\n}<\/code><\/pre>\n<p>We've already gotten almost all the way there! Stretching works great, only when there is room, like we want:<\/p>\n<figure><video src=\"https:\/\/css-tricks.com\/videos\/stretchy-nav.mov\" controls><\/video><\/figure>\n<h3>Quick Toggles<\/h3>\n<p>We have a <code>&lt;button&gt;<\/code> in place to toggle the submenus (arguably, we should probably <em>place<\/em> those buttons with JavaScript, since they don't do anything without). Here's how they could work. The submenus are hidden by default:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.submenu {\r\n  max-height: 0;\r\n  transition: 0.5s;\r\n  overflow: hidden;\r\n}<\/code><\/pre>\n<p>We can open it with a class:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.submenu.open {\r\n  max-height: 200px; \/* non-ideal magic number *\/\r\n}<\/code><\/pre>\n<p>We're animating to an unknown height here, which is tricky. We hope to have a good article addressing this out soon (there are options). <\/p>\n<p><a href=\"https:\/\/css-tricks.com\/video-screencasts\/150-hey-designers-know-one-thing-javascript-recommend\/\">Toggling classes is plenty easy<\/a>:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var buttons = document.querySelectorAll('.submenu-toggle-button');\r\n\r\n[].forEach.call(buttons, function(button) {\r\n  button.addEventListener('click', function() {\r\n    var submenu = button.parentNode.querySelector('.submenu');\r\n    submenu.classList.toggle('open');\r\n  });\r\n});<\/code><\/pre>\n<p>That gets those submenus behaving like we want:<\/p>\n<figure><video src=\"https:\/\/css-tricks.com\/videos\/squeezy_submenus.mov\" controls><\/video><\/figure>\n<h3>Demo<\/h3>\n<p>You'll probably need to <a href=\"https:\/\/codepen.io\/chriscoyier\/pen\/oBraBM\">pop over to the Pen<\/a> to play with the vertical stretching stuff.<\/p>\n<p data-height=\"700\" data-theme-id=\"1\" data-slug-hash=\"oBraBM\" data-default-tab=\"result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Squeezy Stretchy Nav\" class=\"codepen\">See the Pen <a href=\"https:\/\/codepen.io\/chriscoyier\/pen\/oBraBM\/\">Squeezy Stretchy Nav<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>I saw an interesting take on off-canvas navigation the other day over on The New Tropic. It wasn&#8217;t the off-canvas part so much. It was how the elements within the nav took up space. They stretched out to take up all the space, when available, but never squished too far. Those are concepts that flexbox [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":251731,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[532,880,1143],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251715"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251715"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251715\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/251731"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251715"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251715"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251715"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251694,"date":"2017-02-19T06:51:14","date_gmt":"2017-02-19T13:51:14","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251694"},"modified":"2017-02-19T06:51:14","modified_gmt":"2017-02-19T13:51:14","slug":"lives-sort-purgatory","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/lives-sort-purgatory\/","title":{"rendered":"&#8220;lives in a sort of purgatory&#8221;"},"content":{"rendered":"<p>Brad Frost:<\/p>\n<blockquote>\n<p>A front-end designer ... lives in a sort of purgatory between worlds:<\/p>\n<ul>\n<li>They understand UX principles and best practices, but may not spend their time conducting research, creating flows, and planning scenarios<\/li>\n<li>They have a keen eye for aesthetics, but may not spend their time pouring over font pairings, comparing color palettes, or creating illustrations and icons.<\/li>\n<li>They can write JavaScript, but may not spend their time writing application-level code, wiring up middleware, or debugging.<\/li>\n<li>They understand the importance of backend development, but may not spend their time writing backend logic, spinning up servers, load testing, etc.<\/li>\n<\/ul>\n<\/blockquote>\n<p><a href=\"https:\/\/css-tricks.com\/front-end-developer-aware\/\">A front-end developer is aware.<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Brad Frost: A front-end designer &#8230; lives in a sort of purgatory between worlds: They understand UX principles and best practices, but may not spend their time conducting research, creating flows, and planning scenarios They have a keen eye for aesthetics, but may not spend their time pouring over font pairings, comparing color palettes, or [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[1142],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251694"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251694"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251694\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251694"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251694"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251694"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251658,"date":"2017-02-18T08:42:19","date_gmt":"2017-02-18T15:42:19","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251658"},"modified":"2017-02-18T12:34:53","modified_gmt":"2017-02-18T19:34:53","slug":"write-a-script","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/write-a-script\/","title":{"rendered":"&#8220;Write a script&#8221;"},"content":{"rendered":"<p>Jeremy Keith, on teaching people JavaScript for the first time:<\/p>\n<blockquote>\n<p>A lot of that boils down to this pattern:<\/p>\n<blockquote><p>When (some event happens), then (take this action).<\/p><\/blockquote>\n<p>We brainstormed some examples of this e.g. \"When the user submits a form, then show a modal dialogue with an acknowledgment.\" I then encouraged them to write a script \u2026but I don't mean a script in the JavaScript sense; I mean a script in the screenwriting or theater sense. Line by line, write out each step that you want to accomplish. Once you've done that, translate each line of your English (or Portuguese) script into JavaScript.<\/p><\/blockquote>\n<p>Pseudo code. I'm a big fan.<\/p>\n<p>Writing a code flow out in plain English works great for beginners, and in my experience remains useful forever. I find myself regularly writing pseudo code in Slack and in bug\/idea tickets, although I've perhaps graduated from plain English to my own weird non-language:<\/p>\n<pre><code>IF (user_is_pro? AND has_zero_posts)\n  OR (signed_up_less_than_three_days_ago) {\n    \/\/ ajax for stuff\n    \/\/ show thing\n}<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>Jeremy Keith, on teaching people JavaScript for the first time: A lot of that boils down to this pattern: When (some event happens), then (take this action). We brainstormed some examples of this e.g. &#8220;When the user submits a form, then show a modal dialogue with an acknowledgment.&#8221; I then encouraged them to write a [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[1141],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251658"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251658"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251658\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251658"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251658"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251658"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251606,"date":"2017-02-18T08:10:27","date_gmt":"2017-02-18T15:10:27","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251606"},"modified":"2017-02-18T08:10:27","modified_gmt":"2017-02-18T15:10:27","slug":"optimizing-gifs-web","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/optimizing-gifs-web\/","title":{"rendered":"Optimizing GIFs for the Web"},"content":{"rendered":"<p>Ire Aderinokun describes a frustrating problem that we\u2019ve probably all noticed at one point or another:<\/p>\n<blockquote>\n<p>Recently, I\u2019ve found that some of my articles that are GIF-heavy tend to get incredibly slow. The reason for this is that each frame in a GIF is stored as a GIF image, which uses a lossless compression algorithm. This means that, during compression, no information is lost in the image at all, which of course results in a larger file size.<\/p>\n<p>To solve the performance problem of GIFs on the web, there are a couple of things we can do.<\/p>\n<\/blockquote>\n<p>Switching to the <code>&lt;video&gt;<\/code> element seems to have the biggest impact on file size but there are other optimization tools if you have to stick with the GIF format.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Ire Aderinokun describes a frustrating problem that we\u2019ve probably all noticed at one point or another: Recently, I\u2019ve found that some of my articles that are GIF-heavy tend to get incredibly slow. The reason for this is that each frame in a GIF is stored as a GIF image, which uses a lossless compression algorithm. [&hellip;]<\/p>\n","protected":false},"author":223806,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[799,592,672],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251606"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/223806"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251606"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251606\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251606"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251606"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251606"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251281,"date":"2017-02-17T11:20:43","date_gmt":"2017-02-17T18:20:43","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251281"},"modified":"2017-02-18T17:07:08","modified_gmt":"2017-02-19T00:07:08","slug":"css-grid-one-layout-multiple-ways","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/css-grid-one-layout-multiple-ways\/","title":{"rendered":"CSS Grid: One Layout, Multiple Ways"},"content":{"rendered":"<p>I've really been enjoying getting acquainted with <a href=\"https:\/\/css-tricks.com\/snippets\/css\/complete-guide-grid\/\">CSS Grid<\/a>. The feature is starting to ship in many browsers and it looks like we'll be able to start using it in production in due time.<\/p>\n<p><!--more--><\/p>\n<p>One of the things that stands out most to me about CSS Grid is the fact that the syntax is so flexible. To demonstrate this point, we're going to look at how we can create the same layout in three different ways, all using CSS Grid properties. In particular, we're going to use the <a href=\"https:\/\/en.wikipedia.org\/wiki\/Holy_Grail_(web_design)\">Holy Grail layout<\/a> as our example:<\/p>\n<figure id=\"post-251294\" class=\"align-none media-251294\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/holy-grail-example.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/holy-grail-example.jpg 1200w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/holy-grail-example-300x208.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/holy-grail-example-768x532.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/holy-grail-example-1024x710.jpg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>The Holy Grail Layout<\/figcaption><\/figure>\n<p>To get started, we're going to define a parent element called, creatively, <code>.grid<\/code> and set up three columns and three rows set the stage for our different layout methods:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.grid {\r\n  display: grid;\r\n  grid-template-columns: 150px auto 150px;\r\n  grid-template-rows: repeat(3, 100px);\r\n  grid-gap: 1em;\r\n}<\/code><\/pre>\n<p>This says that our <code>.grid<\/code> element has three columns (two set to 150px and one that flexibly occupies the remaining space) and three row (all set to 100px for demonstration purposes).<\/p>\n<p>We will also be playing with the following child elements in each example: <code>&lt;header&gt;<\/code>, <code>&lt;footer&gt;<\/code> <code>.sidebar-left<\/code>, <code>sidebar-right<\/code> and <code>&lt;article&gt;<\/code>. These will be the building blocks for our layout and will be represented in the HTML as follows:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;div class=\"grid\"&gt;\r\n  &lt;header&gt;\r\n    Header\r\n  &lt;\/header&gt;\r\n\r\n  &lt;aside class=\"sidebar-left\"&gt;\r\n    Left Sidebar\r\n  &lt;\/aside&gt;\r\n\r\n  &lt;article&gt;\r\n    Article\r\n  &lt;\/article&gt;\r\n\r\n  &lt;aside class=\"sidebar-right\"&gt;\r\n    Right Sidebar\r\n  &lt;\/aside&gt;\r\n  \r\n  &lt;footer&gt;\r\n    Footer\r\n  &lt;\/footer&gt;\r\n&lt;\/div&gt;<\/code><\/pre>\n<p>Alright, let's re-create this in three ways using CSS Grid!<\/p>\n<h3>Method 1: Specifying Grid Columns<\/h3>\n<p>We can define which cells of the grid each child element occupies directly on the elements themselves:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">header {\r\n  \/* Start on Row 1 *\/\r\n  grid-row: 1;\r\n  \/* Start on the first column line and extend all the to the last column line *\/\r\n  grid-column: 1 \/ 4;\r\n}\r\n\r\n.sidebar-left {\r\n  \/* Start on Row 2 *\/\r\n  grid-row: 2;\r\n  \/* Start on the first column line and stop at the next column line *\/\r\n  grid-column: 1 \/ 2;\r\n}\r\n\r\narticle {\r\n  \/* Start on Row 2 *\/\r\n  grid-row: 2;\r\n  \/* Start on the second column line and stop at the third column line *\/\r\n  grid-column: 2 \/ 3;\r\n}\r\n\r\n.sidebar-right {\r\n  \/* Start on Row 2 *\/\r\n  grid-row: 2;\r\n  \/* Start on the third column line and stop at the last column line *\/\r\n  grid-column: 3 \/ 4;\r\n}\r\n\r\nfooter {\r\n  \/* Start on Row 3, the last row *\/\r\n  grid-row: 3;\r\n  \/* Start on the first column line and extend all the to the last column line *\/\r\n  grid-column: 1 \/ 4;\r\n}<\/code><\/pre>\n<p data-height=\"391\" data-theme-id=\"1\" data-slug-hash=\"GrYgex\" data-default-tab=\"result\" data-user=\"geoffgraham\" data-embed-version=\"2\" data-pen-title=\"CSS Grid - Holy Grail 1\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/geoffgraham\/pen\/GrYgex\/\">CSS Grid - Holy Grail 1<\/a> by Geoff Graham (<a href=\"http:\/\/codepen.io\/geoffgraham\">@geoffgraham<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>That gives us everything we need to create the layout! We can do better, though, so let's move right along.<\/p>\n<h3>Method 2: Condense the Markup from the First Method<\/h3>\n<p>CSS Grid is smart enough to calculate where our sidebars and article go if all we do is specify where the <code>&lt;header&gt;<\/code> and <code>&lt;footer&gt;<\/code> go:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">header, footer {\r\n  grid-column: 1 \/ 4;\r\n}<\/code><\/pre>\n<p>That's it! since we've identified that both the <code>&lt;header&gt;<\/code> and <code>&lt;footer&gt;<\/code> should take up the full width of the <code>.grid<\/code> element, CSS Grid will flow the rest of the elements into their place without us having to tell it anything else. Nice!<\/p>\n<p data-height=\"389\" data-theme-id=\"1\" data-slug-hash=\"rjrLXB\" data-default-tab=\"result\" data-user=\"geoffgraham\" data-embed-version=\"2\" data-pen-title=\"CSS Grid - Holy Grail 2\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/geoffgraham\/pen\/rjrLXB\/\">CSS Grid - Holy Grail 2<\/a> by Geoff Graham (<a href=\"http:\/\/codepen.io\/geoffgraham\">@geoffgraham<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3>Method 3: Defining Grid Template Areas<\/h3>\n<p>CSS Grid also allows us to name our elements using the <code>grid-area<\/code> property and place them on the parent element using the <code>grid-template-areas<\/code> property.<\/p>\n<p>Let's name our child elements using <code>grid-area<\/code>:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">header {\r\n  grid-area: header;\r\n}\r\n\r\nfooter {\r\n  grid-area: footer;\r\n}\r\n\r\n.sidebar-left {\r\n  grid-area: sidebar-1;\r\n}\r\n\r\narticle {\r\n  grid-area: article;\r\n}\r\n\r\n.sidebar-right {\r\n  grid-area: sidebar-2;\r\n}<\/code><\/pre>\n<p>Now, let's name those areas on the parent <code>.grid<\/code> element using <code>grid-template-areas<\/code>:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.grid {\r\n  display: grid;\r\n  grid-template-columns: 150px auto 150px;\r\n  grid-template-rows: repeat(3, 100px);\r\n  grid-gap: 1em;\r\n  grid-template-areas: \"header header header\"\r\n                       \"sidebar-1 article sidebar-2\"\r\n                       \"footer footer footer\";\r\n}<\/code><\/pre>\n<p>See how we can create the layout by adding the named areas on the property? That's almost like having a visual editor right in our code! <\/p>\n<p data-height=\"389\" data-theme-id=\"1\" data-slug-hash=\"ggBbqe\" data-default-tab=\"result\" data-user=\"geoffgraham\" data-embed-version=\"2\" data-pen-title=\"CSS Grid - Holy Grail 3\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/geoffgraham\/pen\/ggBbqe\/\">CSS Grid - Holy Grail 3<\/a> by Geoff Graham (<a href=\"http:\/\/codepen.io\/geoffgraham\">@geoffgraham<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3>Wrapping Up<\/h3>\n<p>We could definitely go much deeper into the greatness that is CSS Grid, but I wanted to dig specifically into how flexible the syntax is when it comes to creating layouts, particularly one that used to be such a pain to create in the days of floats.<\/p>\n<p>Are there other ways we could achieve the Holy Grail layout using CSS Grid that we haven't covered here? Submit a comment and let us know and we'd be happy to add it in.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>I&#8217;ve really been enjoying getting acquainted with CSS Grid. The feature is starting to ship in many browsers and it looks like we&#8217;ll be able to start using it in production in due time.<\/p>\n","protected":false},"author":2508,"featured_media":251294,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[686,1140],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251281"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/2508"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251281"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251281\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/251294"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251281"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251281"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251281"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251460,"date":"2017-02-16T09:04:26","date_gmt":"2017-02-16T16:04:26","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251460"},"modified":"2017-02-27T05:39:16","modified_gmt":"2017-02-27T12:39:16","slug":"responsive-images-wordpress-cloudinary-part-1","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/responsive-images-wordpress-cloudinary-part-1\/","title":{"rendered":"Responsive Images in WordPress with Cloudinary, Part\u00a01"},"content":{"rendered":"<p>If you're reading this, you're probably already familiar with responsive images. Even so, it may be helpful to have a little background. (Then we'll get to the WordPress part, and how to make them even better with Cloudinary.) For most of the Web's existence, any time you wanted to include an image on a web page, you would create markup that looked like this:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;img src=\"\/path\/to\/my\/image.jpg\" alt=\"a very nice image\"&gt;<\/code><\/pre>\n<p>In this example, the <code>&lt;img&gt;<\/code> element references a single image file named `image.jpg` located on a server at `\/path\/to\/my`. This markup is straightforward in that it tells the browser to download and render a specific image file, referenced by the <code>src<\/code> element, onto the web page.<\/p>\n<p>This arrangement was fine until 2010, when Ethan Marcotte published his seminal article, <a href=\"http:\/\/synd.co\/2lz8gHa\">Responsive Web Design<\/a>, which popularized the technique of using Cascading Style Sheet media queries to modify the layout of web pages to fit whatever size device a person is using. Responsive web design also increased interest in optimizing the performance of websites based on screen size. This focus made clear just how big a pain point images are for performance, accounting for <a href=\"http:\/\/synd.co\/2kuymu0\">most of the bytes included on each web page<\/a>. With responsive design, developers began to send images that look beautiful on large desktop displays to all users, which resulted in sending extra bytes to smaller mobile devices, making the mobile browsing experience much slower than necessary.<\/p>\n<figure id=\"post-251570\" class=\"align-none media-251570\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/bad.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/bad.png 4000w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/bad-150x150.png 150w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/bad-300x300.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/bad-768x768.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/bad-1024x1024.png 1024w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/bad-90x90.png 90w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Not good.<\/figcaption><\/figure>\n<p>An intrepid group of web developers, known as the <a href=\"http:\/\/synd.co\/2kbGMKY\">Responsive Issues Community Group<\/a> (RICG), set out to fix this problem by <a href=\"http:\/\/synd.co\/2kAZTwr\">introducing new HTML<\/a> so that developers could identify different image sources for a web page based on contextual information like screen size. Here\u2019s an example of one of the new markup patterns:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;img src=\"small.jpg\"\r\n     srcset=\"large.jpg 1024w, medium.jpg 640w, small.jpg 320w\"\r\n     sizes=\"(min-width: 36em) 33.3vw, 100vw\"\r\n     alt=\"A rad wolf\"&gt;<\/code><\/pre>\n<p>In this example, the <code>&lt;img&gt;<\/code> markup now includes two new attributes: a <code>srcset<\/code>, which contains a list of image files and their corresponding pixel widths, and <code>sizes<\/code>, which gives the browser an estimate of the image\u2019s intended layout size, depending on certain media query conditions. The src attribute is included to serve as a fallback for older browsers that don't support the new <code>srcset<\/code> and <code>sizes<\/code> attributes.<\/p>\n<figure id=\"post-251571\" class=\"align-none media-251571\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/good.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/good.png 4000w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/good-150x150.png 150w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/good-300x300.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/good-768x768.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/good-1024x1024.png 1024w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/good-90x90.png 90w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Much better.<\/figcaption><\/figure>\n<p>This new markup allows browsers to determine and download the image that\u2019s most appropriate, saving bytes (and time) for users. For a deeper dive into this and other responsive image markup patterns, I strongly recommend reading Jason Grigsby\u2019s <a href=\"http:\/\/synd.co\/2kQAdKA\">Responsive Images\u00a0101<\/a> series.<\/p>\n<h3>Responsive Images in WordPress<\/h3>\n<p>At the end of 2015, in partnership with members of the RICG, WordPress shipped version\u00a04.4, which included <a href=\"http:\/\/synd.co\/2kXzWIc\">native support for responsive images<\/a>. WordPress\u00a04.4+ automatically generates <code>srcset<\/code> and <code>sizes<\/code> attributes for images included in a post or page. The WordPress implementation uses already-available image resizing functionality to accomplish this task. Before version\u00a04.4, WordPress already created several smaller versions of any image uploaded to your media library. Since version\u00a04.4, WordPress uses those additional sizes to create <code>srcset<\/code> attributes so that people visiting your site can benefit by downloading an image file that is no larger than what they need.<\/p>\n<p>This implementation works well out of the box but has a few limitations. For instance, WordPress creates image size variations at the time the original is uploaded, which means that only image sizes that are defined at that point will be available in <code>srcset<\/code> attributes. In addition, image processing can overtax the resources available on many shared hosting plans, so WordPress has to be conservative about how many variations of each image it creates by default.<\/p>\n<p>Ideally, you could dynamically create image sizes when they're needed for your layouts and offload the processing to an external image service. Fortunately, services like <a href=\"http:\/\/synd.co\/2l22OyH\">Cloudinary<\/a> exist, which do exactly this. I've been impressed with the work Cloudinary has been doing in the image management space, so I was wanted to see how I could use the service to extend the default responsive image implementation in WordPress.<\/p>\n<h3>Using Cloudinary to Extend WordPress<\/h3>\n<p><a href=\"http:\/\/synd.co\/2l22OyH\">Cloudinary<\/a> provides <a href=\"http:\/\/synd.co\/2kQAPjm\">tools to perform several image transformations<\/a> besides simple resizing, and it has published <a href=\"http:\/\/synd.co\/2kAWFcl\">its own WordPress plug-in<\/a> to the WordPress.org plug\u2011in repository. The plug\u2011in doesn't yet support responsive images out of the box, so I wanted to see if I could make a slimmed-down plug\u2011in using its Image Upload application programming interface. My goal was to sync images from my media library to <a href=\"http:\/\/synd.co\/2l22OyH\">Cloudinary's<\/a> service and have Cloudinary automatically create the image sizes needed to serve responsive images from its content delivery network (CDN).<\/p>\n<p>I've created a demo plug\u2011in, <a href=\"http:\/\/synd.co\/2l11AUh\">which I have published to GitHub<\/a>, so that you can check it out. In a follow-up article, I'll explain more of the technical details and design decisions of the plug\u2011in, but for now I\u2019ll describe what the plug\u2011in does at a high level.<\/p>\n<figure id=\"post-251572\" class=\"align-none media-251572\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/upload-path.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/upload-path.png 4000w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/upload-path-300x225.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/upload-path-768x576.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/upload-path-1024x768.png 1024w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/upload-path-399x300.png 399w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>First, when you add an image to your WordPress media library, WordPress uses <a href=\"http:\/\/synd.co\/2lsj2Cf\">Cloudinary's PHP integration library<\/a> to upload that image to Cloudinary and task its service with creating alternative image sizes to be used in the <code>srcset<\/code> attribute. Where this gets interesting is that Cloudinary has developed a unique <a href=\"http:\/\/synd.co\/2kANb0t\">responsive image breakpoint solution<\/a> that automatically calculates the optimal image sizes needed based on the content of your image.<\/p>\n<figure id=\"post-251573\" class=\"align-none media-251573\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/annotated-code.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/annotated-code.png 3700w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/annotated-code-300x122.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/annotated-code-768x311.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/annotated-code-1024x415.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Once the image is uploaded to Cloudinary, the service returns data associated with the newly created image sizes to your WordPress site. By making use of WordPress filters, we can use that data to build <code>srcset<\/code> attributes for our images that reference the files from the <a href=\"http:\/\/synd.co\/2l22OyH\">Cloudinary<\/a> CDN rather than locally hosted images.<\/p>\n<h3>Wrap-Up<\/h3>\n<p>By combining the simplicity of the WordPress native responsive image functionality with the image management tools that <a href=\"http:\/\/synd.co\/2l22OyH\">Cloudinary<\/a> provides, you can manage your content exactly how you want while providing visitors to you site with images that are automatically optimized for the capabilities of their device, without having to worry about each image added to your site individually. In my next article, I'll dive into the specifics of the code I developed for my plug\u2011in. For now, I hope you can see how powerful combining WordPress with services like Cloudinary can be.<\/p>\n<hr>\n<p><em>This post (and the plugin!) was written by <a href=\"https:\/\/joemcgill.net\/\">Joe McGill<\/a>.<\/em><\/p>\n<div class=\"article-series\">\n<h4>Article Series:<\/h4>\n<ol>\n<li>An Intro to Responsive Images and WordPress (you are here!)<\/li>\n<li><a href=\"https:\/\/css-tricks.com\/responsive-images-wordpress-cloudinary-part-2\/\">A WordPress Plugin integrating Cloudinary and Responsive Images<\/a><\/li>\n<\/ol>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this post we&#8217;ll look at a brief history of responsive images and why they are so important for performant websites. Then we&#8217;ll look at how WordPress helps automate that, and ultimately how the whole situation gets a lot better by leveraging Cloudinary.<\/p>\n","protected":false},"author":247816,"featured_media":251569,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[508],"tags":[806,521],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251460"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/247816"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251460"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251460\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/251569"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251460"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251460"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251460"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251557,"date":"2017-02-16T08:44:33","date_gmt":"2017-02-16T15:44:33","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251557"},"modified":"2017-02-16T10:37:17","modified_gmt":"2017-02-16T17:37:17","slug":"transparent-jpg-svg","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/transparent-jpg-svg\/","title":{"rendered":"Transparent JPG (With SVG)"},"content":{"rendered":"<p>Let's say you have a photographic image that really should be a JPG or WebP, for the best file size and quality. But what if I need transparency too? Don't I need PNG for that? Won't that make for either huge file sizes (PNG-24) or weird quality (PNG-8)? Let's look at another way that ends up best-of-both-worlds.<\/p>\n<p><!--more--><\/p>\n<figure id=\"post-251558\" class=\"align-none media-251558\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/orig.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/orig.jpg 1378w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/orig-300x212.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/orig-768x542.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/orig-1024x722.jpg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>The original photographic image.<\/figcaption><\/figure>\n<p>The goal is to clip myself out of the image, removing the background. My technique for that is usually to use Photoshop and <a href=\"https:\/\/css-tricks.com\/video-screencasts\/22-cutting-clipping-paths\/\">cut a clipping path manually<\/a> with the Pen tool. <\/p>\n<figure id=\"post-251559\" class=\"align-none media-251559\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/clip-path.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/clip-path.jpg 1020w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/clip-path-300x279.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/clip-path-768x715.jpg 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Now I can select the inverse of that clipping path to easily remove the background. <\/p>\n<p>Attempting to save this as a 1200px wide image as PNG-24 out of Photoshop ends up as about a 1MB image! <\/p>\n<figure id=\"post-251560\" class=\"align-none media-251560\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/too-big.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/too-big.jpg 1500w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/too-big-300x198.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/too-big-768x507.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/too-big-1024x676.jpg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>1MB is huge :(<\/figcaption><\/figure>\n<p>We could cut that by 75% using PNG-8, but then we 1) get that weird Giffy look (less photographic) and 2) have to pick a matte color for the edges because we aren't getting nice alpha transparency here, just binary transparency.<\/p>\n<figure id=\"post-251561\" class=\"align-none media-251561\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/png8.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/png8.jpg 884w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/png8-284x300.jpg 284w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/png8-768x811.jpg 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Much better file size, but quality is weird.<\/figcaption><\/figure>\n<p>Gosh what if we could just use JPG? The quality and file size is <strong>way<\/strong> better. <\/p>\n<figure id=\"post-251562\" class=\"align-none media-251562\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/jpg.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/jpg.jpg 776w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/jpg-267x300.jpg 267w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/jpg-768x863.jpg 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>No transparency though.<\/p>\n<p>But wait! Can't we just clip this thing out? We have <a href=\"https:\/\/css-tricks.com\/almanac\/properties\/c\/clip\/\">clip-path<\/a> now. Well... yeah. We do have clip-path. It <a href=\"https:\/\/css-tricks.com\/basic-shapes-path-never-twain-shall-meet\/\">can't take<\/a> a <code>path()<\/code>, though, and what we've created for vector points in Photoshop is path data. It could take a <code>polygon()<\/code> though, if we made all the lines straight. That's probably not ideal (I'm curvy!). Or we could make a <code>&lt;clipPath&gt;<\/code> element in some inline SVG and use <code>clip-path: url(#id_of_clipPath);<\/code>, which does support a <code>&lt;path&gt;<\/code> inside.<\/p>\n<p>There is <a href=\"https:\/\/css-tricks.com\/clipping-masking-css\/#article-header-id-5\">masking<\/a> as well, which is another possibility. <\/p>\n<p>Let's look at a third possibility though: put everything into <code>&lt;svg&gt;<\/code>. That made some logical sense to me, so all this stays together and scales together.<\/p>\n<p>The trick is to make two things:<\/p>\n<ol>\n<li>The JPG<\/li>\n<li>The clipping <code>&lt;path&gt;<\/code><\/li>\n<\/ol>\n<p>The JPG is easy enough. Output that right from Photoshop. <a href=\"https:\/\/css-tricks.com\/automatic-image-optimization-hazel-imageoptim\/\">Optimize<\/a>.<\/p>\n<p>Now we can set up the SVG. SVG is happy to take a raster graphic. SVG is known for vector graphics, but it's a very flexible image format. <\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;svg&gt;\r\n  &lt;image xlink:href=\"\/images\/chris.jpg\" x=\"0\" y=\"0\"&gt;\r\n&lt;svg&gt;<\/code><\/pre>\n<p>To get the path, we export the path we created with the Pen tool over to Illustrator. <\/p>\n<figure id=\"post-251563\" class=\"align-none media-251563\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/paths-to-illustrator.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/paths-to-illustrator.jpg 1064w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/paths-to-illustrator-262x300.jpg 262w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/paths-to-illustrator-768x879.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/paths-to-illustrator-895x1024.jpg 895w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Now we have the path over there, and it's easy to export as SVG:<\/p>\n<figure id=\"post-251564\" class=\"align-none media-251564\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/clip-from-ai.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/clip-from-ai.jpg 1582w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/clip-from-ai-300x284.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/clip-from-ai-768x727.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/clip-from-ai-1024x970.jpg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Now we have the path data we need:<\/p>\n<figure id=\"post-251565\" class=\"align-none media-251565\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/path-data.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/path-data.jpg 1672w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/path-data-300x117.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/path-data-768x299.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/path-data-1024x399.jpg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Even with all those points, this was 1.5K unoptimzed and ungzipped. Not much overhead.<\/figcaption><\/figure>\n<p>Let's use that <code>&lt;path&gt;<\/code> within a <code>&lt;clipPath&gt;<\/code> in the SVG we've started. Then also apply that clip path to the <code>&lt;image&gt;<\/code>:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;svg viewBox=\"0 0 921.17 1409.71\"&gt;\r\n  &lt;defs&gt;\r\n    &lt;clipPath id=\"chris-clip\"&gt;\r\n      &lt;path d=\" ... \" \/&gt;\r\n    &lt;\/clipPath&gt;\r\n  &lt;\/defs&gt;\r\n  &lt;image xlink:href=\"\/images\/chris.jpg\" clip-path=\"url(#chris-clip)\" x=\"0\" y=\"0\" width=\"921\" height=\"1409\"&gt;\r\n&lt;svg&gt;<\/code><\/pre>\n<p>Tada!<\/p>\n<figure class=\"align-none\"><img src=\"https:\/\/css-tricks.com\/images\/done.gif\" alt=\"\" \/><\/figure>\n<p>A transparent JPG, essentially.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Let&#8217;s say you have a photographic image that really should be a JPG or WebP, for the best file size and quality. But what if I need transparency too? Don&#8217;t I need PNG for that? Won&#8217;t that make for either huge file sizes (PNG-24) or weird quality (PNG-8)? Let&#8217;s look at another way that ends [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":251566,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1138,469,1139],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251557"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251557"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251557\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/251566"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251557"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251557"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251557"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251555,"date":"2017-02-16T07:40:26","date_gmt":"2017-02-16T14:40:26","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251555"},"modified":"2017-02-16T07:40:26","modified_gmt":"2017-02-16T14:40:26","slug":"coding-css-context","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/coding-css-context\/","title":{"rendered":"Coding CSS for Context"},"content":{"rendered":"<p>Snook on naming a class:<\/p>\n<blockquote><p>Here's what's important:<\/p>\n<ul>\n<li>We want to identify that this is a variation on our button.<\/li>\n<li>We want to indicate the purpose of this button style.<\/li>\n<li>We want to avoid tying the code to a particular context that could change.<\/li>\n<\/ul>\n<\/blockquote>\n","protected":false},"excerpt":{"rendered":"<p>Snook on naming a class: Here&#8217;s what&#8217;s important: We want to identify that this is a variation on our button. We want to indicate the purpose of this button style. We want to avoid tying the code to a particular context that could change.<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[588],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251555"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251555"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251555\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251555"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251555"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251555"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251083,"date":"2017-02-15T07:19:22","date_gmt":"2017-02-15T14:19:22","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251083"},"modified":"2017-02-15T07:19:22","modified_gmt":"2017-02-15T14:19:22","slug":"websites-like-february-2017","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/websites-like-february-2017\/","title":{"rendered":"Websites We Like: February 2017"},"content":{"rendered":"<p>It has been a while since we've taken stock of all the beautiful websites out there. Here's our favorites from the past couple of weeks!<\/p>\n<p><!--more--><\/p>\n<h3><a href=\"http:\/\/fuzzco.com\/\">Fuzzco<\/a><\/h3>\n<p>Who says the web should scroll in one direction? Not the creative agency <a href=\"http:\/\/fuzzco.com\/\">Fuzzco<\/a> which on their homepage lets you navigate the page in a very interesting way and this compliments the visual design, too:<\/p>\n<figure><video src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/fuzzco.mp4\" autoplay=\"true\" autostart=\"true\" loop=\"true\" controls><\/video><\/figure>\n<h3><a href=\"http:\/\/tuna-typeface.com\/\">Tuna<\/a><\/h3>\n<p><a href=\"http:\/\/tuna-typeface.com\/\">Tuna<\/a> is a specimen for the typeface of the same name by Felix Braden and Alex R\u00fctten. This serif is designed specifically for on-screen reading and so it looks beautiful even at small sizes:<\/p>\n<figure id=\"post-251088\" class=\"align-none media-251088\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Screenshot-2017-02-06-21.24.10.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Screenshot-2017-02-06-21.24.10.png 2388w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Screenshot-2017-02-06-21.24.10-300x175.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Screenshot-2017-02-06-21.24.10-768x447.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Screenshot-2017-02-06-21.24.10-1024x596.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<h3><a href=\"http:\/\/webfieldmanual.com\/design.html\">Web Field Manual<\/a><\/h3>\n<p><a href=\"http:\/\/webfieldmanual.com\/design.html\">The Web Field Manual<\/a> is a collection of articles about UX, UI and all-round general web design advice:<\/p>\n<figure id=\"post-251089\" class=\"align-none media-251089\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Screenshot-2017-02-06-21.28.59.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Screenshot-2017-02-06-21.28.59.png 2392w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Screenshot-2017-02-06-21.28.59-300x175.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Screenshot-2017-02-06-21.28.59-768x448.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Screenshot-2017-02-06-21.28.59-1024x597.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>But one of my favorite parts of this site is all the teeny tiny and subtle animations that you might miss if you happen to rush through it. Here\u2019s one example where the title will animate upwards on load (I especially like the background triangles that animate in, too):<\/p>\n<figure id=\"post-251090\" class=\"align-none media-251090\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/fieldmanual.gif\" alt=\"\" \/><\/figure>\n<h3><a href=\"http:\/\/newacton.com.au\/\">New Acton<\/a><\/h3>\n<p>I\u2019m not entirely sure what this website for <a href=\"http:\/\/newacton.com.au\/\">New Acton<\/a> is advertising (is it like a mall? Or an art space or something?) but either way the website is undeniably beautiful with illustrations that break up and shiver as you hover the cursor over them:<\/p>\n<figure id=\"post-251093\" class=\"align-none media-251093\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/acton.gif\" alt=\"\" \/><\/figure>\n<h3><a href=\"https:\/\/bumpers.fm\/\">Bumpers<\/a><\/h3>\n<p><a href=\"https:\/\/bumpers.fm\/\">Bumpers<\/a> is an app that lets you record audio and the website is pretty darn snazzy; there\u2019s lots of inline SVG and peculiar full-screen illustrations to look at here. <\/p>\n<figure id=\"post-251095\" class=\"align-none media-251095\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Screenshot-2017-02-06-22.05.47.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Screenshot-2017-02-06-22.05.47.png 2378w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Screenshot-2017-02-06-22.05.47-300x162.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Screenshot-2017-02-06-22.05.47-768x415.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Screenshot-2017-02-06-22.05.47-1024x553.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<h3><a href=\"https:\/\/mailchimp.com\/2016\/\">MailChimp\u2019s 2016 Annual Report<\/a><\/h3>\n<p>A while back MailChimp made <a href=\"https:\/\/mailchimp.com\/2016\/\">a beautiful annual report<\/a> with statistics about what the company has been up to over the past twelve months. What really stands out here are the animations and illustrations which perfectly compliment the humour and wit in the writing:<\/p>\n<figure id=\"post-251098\" class=\"align-none media-251098\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Screenshot-2017-02-06-22.17.03.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Screenshot-2017-02-06-22.17.03.png 2514w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Screenshot-2017-02-06-22.17.03-300x152.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Screenshot-2017-02-06-22.17.03-768x389.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Screenshot-2017-02-06-22.17.03-1024x518.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<figure id=\"post-251099\" class=\"align-none media-251099\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Screenshot-2017-02-06-22.15.20.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Screenshot-2017-02-06-22.15.20.png 2532w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Screenshot-2017-02-06-22.15.20-300x153.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Screenshot-2017-02-06-22.15.20-768x391.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/Screenshot-2017-02-06-22.15.20-1024x521.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<hr>\n<p>OK, so that's it until next time! Oh and make sure to add a comment below if there's any delightful websites that you think we should take a look at.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>It has been a while since we&#8217;ve taken stock of all the beautiful websites out there. Here&#8217;s our favorites from the past couple of weeks!<\/p>\n","protected":false},"author":223806,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4,752],"tags":[],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251083"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/223806"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251083"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251083\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251083"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251083"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251083"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250823,"date":"2017-02-14T07:56:24","date_gmt":"2017-02-14T14:56:24","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250823"},"modified":"2017-02-17T11:49:20","modified_gmt":"2017-02-17T18:49:20","slug":"creating-non-rectangular-headers","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/creating-non-rectangular-headers\/","title":{"rendered":"Creating Non-Rectangular Headers"},"content":{"rendered":"<p>Over at Medium, Jon Moore recently identified \"non-rectangular headers\" as a <a href=\"https:\/\/medium.com\/ux-power-tools\/tiny-trends-1-non-rectangular-headers-e8d2d4ee578f\">tiny trend<\/a>. A la: it's not crazy popular yet, but just you wait, kiddo.<\/p>\n<p><!--more--><\/p>\n<p>We're talking about headers (or, more generally, any container element) that have a non-rectangular shape.<\/p>\n<p>Such as <strong>trapezoids<\/strong>:<\/p>\n<figure id=\"post-250826\" class=\"align-none media-250826\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/artboard_hero_banner.jpg\" alt=\"\" width=\"400\" \/><figcaption><a href=\"https:\/\/dribbble.com\/shots\/3192923-Hero-Banner-Mobile-First-Concept\">By Patrick Kantor<\/a><br \/>\n<\/figcaption><\/figure>\n<p>Or more <strong>complex geometric shapes<\/strong>:<\/p>\n<figure id=\"post-251490\" class=\"align-none media-251490\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/movies.png\" alt=\"\" width=\"400\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/movies.png 800w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/movies-300x225.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/movies-768x576.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/movies-399x300.png 399w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption><a href=\"https:\/\/dribbble.com\/shots\/3192224-Robin-Movies\">Robin Movies by Asar Morris<\/a><\/figcaption><\/figure>\n<figure id=\"post-250828\" class=\"align-none media-250828\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/artboard_hero_banner.jpg\" alt=\"\" width=\"400\" \/><figcaption>By Marc Clancy<\/figcaption><\/figure>\n<p>Or <strong>rounded\/elliptical<\/strong>:<\/p>\n<figure id=\"post-250830\" class=\"align-none media-250830\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/artboard_hero_banner.jpg\" alt=\"\" width=\"400\" \/><figcaption><a href=\"https:\/\/dribbble.com\/shots\/3189803-Music-Streaming-Apps-Landing-Page\">Music app landing page by Ibnu Mas'ud<\/a><\/figcaption><\/figure>\n<p>Or even <strong>butt-cheek shaped<\/strong>:<\/p>\n<figure id=\"post-250831\" class=\"align-none media-250831\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/artboard_hero_banner.jpg\" alt=\"\" width=\"400\" \/><figcaption><a href=\"https:\/\/dribbble.com\/shots\/3206688-Plutio-landing-page\">Plutio by Leo Bassam.<\/a> Sorry Leo, I can't unsee it. And now, dear reader, you can't either.<\/figcaption><\/figure>\n<p>My money is on these gaining popularity too. So let's beat the crowd, and talk about a few ways of coding these up. Because let's face it: they do look pretty awesome.<\/p>\n<h3>Image<\/h3>\n<p>Perhaps the simplest way to create any of the non-rectangular headers pictured above is to slap an image on top of your header.<\/p>\n<p data-height=\"434\" data-theme-id=\"1\" data-slug-hash=\"pRVbzx\" data-default-tab=\"result\" data-user=\"erikdkennedy\" data-embed-version=\"2\" data-pen-title=\"Image file-based non-rectangular header\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/erikdkennedy\/pen\/pRVbzx\/\">Image file-based non-rectangular header<\/a> by Erik Kennedy (<a href=\"http:\/\/codepen.io\/erikdkennedy\">@erikdkennedy<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>But there are a few issues here:<\/p>\n<ul>\n<li>Responsive behavior? These masks tend to be full-width, and it becomes tedious to define multiple widths of the shape (e.g. srcset) or risk pixelation of raster assets.<\/li>\n<li>It's a totally separate file that needs to be fetched from the server \u2013 seems wasteful for simple shapes.<\/li>\n<li>It's slow to iterate in-browser if you have to re-export an image file(s) from your design program.<\/li>\n<\/ul>\n<p>We can solve all of these problems at once. You might already know where <em>this<\/em> one is going.<\/p>\n<h3>SVG<\/h3>\n<p>Compared to exporting a JPG from Sketch, using an inline SVG is more performant, easy to make responsive, and easy to iterate the design of. In fact, for most cases, this is the way I'd recommend using. Versatile, cross-browser, vector, and fabulous.<\/p>\n<p data-height=\"434\" data-theme-id=\"1\" data-slug-hash=\"ygpwZg\" data-default-tab=\"result\" data-user=\"erikdkennedy\" data-embed-version=\"2\" data-pen-title=\"SVG trapezoidal header\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/erikdkennedy\/pen\/ygpwZg\/\">SVG trapezoidal header<\/a> by Erik Kennedy (<a href=\"http:\/\/codepen.io\/erikdkennedy\">@erikdkennedy<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>With an angled background one like, one choice you have to make is: what should remain constant as the screen-width changes, the angle or the height differential between the two sides?<\/p>\n<p>If you want the <em>angle<\/em> to remain constant, set the height of the SVG in vw:<\/p>\n<figure id=\"post-250832\" class=\"align-none media-250832\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image06.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image06.png 725w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image06-300x108.png 300w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>If you want the height differential to remain constant, set the height of the SVG in pixels:<\/p>\n<figure id=\"post-250833\" class=\"align-none media-250833\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image04.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image04.png 728w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/image04-300x110.png 300w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>And you need not pick just one \u2013 we can style this responsively, since SVG elements are subject to media queries. Check out this geometric style header at widths below and above 700px.<\/p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"zNpXee\" data-default-tab=\"result\" data-user=\"erikdkennedy\" data-embed-version=\"2\" data-pen-title=\"Responsive SVG header\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/erikdkennedy\/pen\/zNpXee\/\">Responsive SVG header<\/a> by Erik Kennedy (<a href=\"http:\/\/codepen.io\/erikdkennedy\">@erikdkennedy<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Shoot, son. What's not to love? Oh, and we can even do the butt-cheeks style.<\/p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"xgpevv\" data-default-tab=\"result\" data-user=\"erikdkennedy\" data-embed-version=\"2\" data-pen-title=\"SVG \"butt-cheeks\" header\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/erikdkennedy\/pen\/xgpevv\/\">SVG \"butt-cheeks\" header<\/a> by Erik Kennedy (<a href=\"http:\/\/codepen.io\/erikdkennedy\">@erikdkennedy<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>(Perhaps that's more properly done with beziers, but you get the idea!)<\/p>\n<p>One more thing worth nothing, and that is if you want to do an SVG background <em>entirely<\/em> in CSS, you could save the SVG and reference its URL in a pseudo element.<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">header::after {\r\n  content: \"\";\r\n  position: absolute;\r\n  bottom: 0;\r\n  width: 100%;\r\n  height: 100px;\r\n  background: url(divider.svg);\r\n}<\/code><\/pre>\n<p>And if you use `divider.svg` as a repeating element in different scenarios, you can also color it different as you need:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">header::after polygon {\r\n  fill: white;\r\n}<\/code><\/pre>\n<p>But here's an issue: what if the section below the header has a complicated background? In all these examples so far, we've just assumed a plain white background. What if there's a fancy gradient, or another background image or something? Then what?<\/p>\n<h3>clip-path<\/h3>\n<p>This property comes to the rescue if you have a moderately complex background below the header, and therefore want the masking to be done from <em>within<\/em> the non-rectangular header, as opposed to by an element <em>after<\/em> it.<\/p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"KaZLwe\" data-default-tab=\"result\" data-user=\"erikdkennedy\" data-embed-version=\"2\" data-pen-title=\"Non-Rectangular Header Using Clip-Path \" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/erikdkennedy\/pen\/KaZLwe\/\">Non-Rectangular Header Using Clip-Path <\/a> by Erik Kennedy (<a href=\"http:\/\/codepen.io\/erikdkennedy\">@erikdkennedy<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>And like the similar SVG syntax, if you want to change the responsive behavior of the above from <em>angle-is-held-constant<\/em> to <em>height-differential-is-held-constant<\/em>, you can change the calculated height to a simple percentage.<\/p>\n<p>Clip-path's biggest downside? Browser support is <a href=\"http:\/\/caniuse.com\/#feat=css-clip-path\">not that great<\/a>. However, depending on how important your non-rectangular header or div is, it might qualify as a progressive enhancement. In which case, clip-path away!<\/p>\n<h3>border-radius<\/h3>\n<p>Now, up to now, we've only mentioned methods that work for generating all the shapes I called out above. However, if we know what particular shape we want our header to have, we might have access to an easier way.<\/p>\n<p>For instance, a <em>convex<\/em> elliptical header is a perfect fit for <code>border-radius<\/code>.<\/p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"NdXVdM\" data-default-tab=\"result\" data-user=\"erikdkennedy\" data-embed-version=\"2\" data-pen-title=\"Convex elliptical header\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/erikdkennedy\/pen\/NdXVdM\/\">Convex elliptical header<\/a> by Erik Kennedy (<a href=\"http:\/\/codepen.io\/erikdkennedy\">@erikdkennedy<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>And a concave elliptical header could simply have the border-radius on the element after the header.<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">section {\r\n  border-bottom-left-radius: 50% 20%;\r\n  border-bottom-right-radius: 50% 20%;\r\n}<\/code><\/pre>\n<p>Another benefit to this method is that the background of the section below the header could still have background images.<\/p>\n<h3>transform: skew<\/h3>\n<p>If we know that we want to create do a trapezoidal header, we can use a CSS transform to skew the whole thing.<\/p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"EZozpV\" data-default-tab=\"result\" data-user=\"erikdkennedy\" data-embed-version=\"2\" data-pen-title=\"Trapezoid Header Using Transform: SkewY\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/erikdkennedy\/pen\/EZozpV\/\">Trapezoid Header Using Transform: SkewY<\/a> by Erik Kennedy (<a href=\"http:\/\/codepen.io\/erikdkennedy\">@erikdkennedy<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>This has the side effect of skewing any child elements of the skewed element, so you\u2019ll want to add a child element in the header that gets skewed, and everything else will go in sibling elements.<\/p>\n<figure id=\"post-250834\" class=\"align-none media-250834\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/skewed.png\" alt=\"\" \/><figcaption>Skewed.<\/figcaption><\/figure>\n<figure id=\"post-250835\" class=\"align-none media-250835\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/skewed.png\" alt=\"\" \/><figcaption>And unskewed.<\/figcaption><\/figure>\n<p>Stripe's homepage design uses this method, and even more brilliantly, they include a few children spans (each is a block of color) that get skewed with the parent element, creating a more complex and colorful effect.<\/p>\n<h3>Which is best?<\/h3>\n<p>As far as I'm concerned, SVG is generally the way to go. However, if you have a more complex background below the header, then the best choice depends on the shape. In that case, I'd investigate if <code>skew<\/code> or <code>border-radius<\/code> could meet the art direction needed, or if browser support was enough of a non-issue to go with <code>clip-path<\/code>.<\/p>\n<table>\n<thead>\n<tr>\n<td><\/td>\n<th>Allows complex BG below<\/th>\n<th>Browser support<\/th>\n<th>Shapes creatable<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr>\n<th>Image<\/th>\n<td>No<\/td>\n<td>Yes<\/td>\n<td>All<\/td>\n<\/tr>\n<tr>\n<th>SVG<\/th>\n<td>No<\/td>\n<td>Yes<\/td>\n<td>All<\/td>\n<\/tr>\n<tr>\n<th>Clip-path<\/th>\n<td>Yes<\/td>\n<td>No<\/td>\n<td>All<\/td>\n<\/tr>\n<tr>\n<th>Border-radius<\/th>\n<td>Yes<\/td>\n<td>Yes<\/td>\n<td>Elliptical only<\/td>\n<\/tr>\n<tr>\n<th>Transform: skew<\/th>\n<td>Yes<\/td>\n<td>Yes<\/td>\n<td>Trapezoidal only<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<hr>\n<div id=\"erik-course-promo\">\n<div class=\"erik-course-promo-img\"><a href=\"http:\/\/learnui.design\/\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/learn-ui-design-css-tricks-promo-img.png\" alt=\"\" \/><\/a><\/div>\n<p>Erik Kennedy is an independent UX\/UI designer and the creator of <a href=\"http:\/\/learnui.design\/\">Learn UI Design<\/a>, a practical online video course about visual design for screens. Includes color, typography, process, and more. Over 16 hours of video across 30+ lessons.<\/p>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Over at Medium, Jon Moore recently identified &#8220;non-rectangular headers&#8221; as a <a href=\"https:\/\/medium.com\/ux-power-tools\/tiny-trends-1-non-rectangular-headers-e8d2d4ee578f\">tiny trend<\/a>. A la: it&#8217;s not crazy popular yet, but just you wait, kiddo.<\/p>\n<p>We&#8217;re talking about headers (or, more generally, any container element) that have a non-rectangular shape. Such as <strong>trapezoids<\/strong>, <strong>complex geometric shapes<\/strong>, <strong>rounded\/elliptical<\/strong>, or even <strong>butt-cheek shaped<\/strong>.<\/p>\n","protected":false},"author":247609,"featured_media":251485,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[692,1113,469],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250823"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/247609"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250823"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250823\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/251485"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250823"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250823"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250823"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251477,"date":"2017-02-14T07:19:51","date_gmt":"2017-02-14T14:19:51","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251477"},"modified":"2017-02-14T07:19:51","modified_gmt":"2017-02-14T14:19:51","slug":"web-really-sucks-slow-connection","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/web-really-sucks-slow-connection\/","title":{"rendered":"Most of the web really sucks if you have a slow connection"},"content":{"rendered":"<p>Dan Luu on the sorry state of web performance:<\/p>\n<blockquote><p>...it\u2019s not just nerds like me who care about web performance. In the U.S., AOL alone had over 2 million dialup users in 2015. Outside of the U.S., there are even more people with slow connections.<\/p><\/blockquote>\n<p>This other note is also interesting, and I think that Dan is talking about <a href=\"http:\/\/blog.chriszacharias.com\/page-weight-matters\">Youtube\u2019s project \u201cFeather\u201d<\/a> here:<\/p>\n<blockquote><p>When I was at Google, someone told me a story about a time that \u201cthey\u201d completed a big optimization push only to find that measured page load times increased. When they dug into the data, they found that the reason load times had increased was that they got a lot more traffic from Africa after doing the optimizations. The team\u2019s product went from being unusable for people with slow connections to usable, which caused so many users with slow connections to start using the product that load times actually increased.<\/p><\/blockquote>\n","protected":false},"excerpt":{"rendered":"<p>Dan Luu on the sorry state of web performance: &#8230;it\u2019s not just nerds like me who care about web performance. In the U.S., AOL alone had over 2 million dialup users in 2015. Outside of the U.S., there are even more people with slow connections. This other note is also interesting, and I think that [&hellip;]<\/p>\n","protected":false},"author":223806,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[592],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251477"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/223806"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251477"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251477\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251477"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251477"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251477"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251474,"date":"2017-02-13T19:29:50","date_gmt":"2017-02-14T02:29:50","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251474"},"modified":"2017-02-13T19:29:50","modified_gmt":"2017-02-14T02:29:50","slug":"svg-squircle","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/svg-squircle\/","title":{"rendered":"SVG Squircle"},"content":{"rendered":"<p>Amelia Bellamy-Royds:<\/p>\n<blockquote>\n<p>I wondered if I could come up with an easy formula to create a \"squircle\" type curve with SVG bezier curves. It wouldn't be the exact shape, but it could be close. The idea:<\/p>\n<p><p>The \"end points\" of the curve segments are the mid-points of each side of the rectangle, where everything should be perfectly straight. The control points then stretch out along the edges until the curvature at the corners is about right.<\/p>\n<\/blockquote>\n<p>Rogie <a href=\"https:\/\/codepen.io\/rogie\/pen\/alBcH\/\">took a crack at it with CSS<\/a> a few years ago, as well.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Amelia Bellamy-Royds: I wondered if I could come up with an easy formula to create a &#8220;squircle&#8221; type curve with SVG bezier curves. It wouldn&#8217;t be the exact shape, but it could be close. The idea: The &#8220;end points&#8221; of the curve segments are the mid-points of each side of the rectangle, where everything should [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":251475,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[1136,469],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251474"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251474"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251474\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/251475"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251474"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251474"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251474"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251470,"date":"2017-02-13T19:20:53","date_gmt":"2017-02-14T02:20:53","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251470"},"modified":"2017-02-13T19:23:04","modified_gmt":"2017-02-14T02:23:04","slug":"shoptalk-250-web-security","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/shoptalk-250-web-security\/","title":{"rendered":"ShopTalk 250: Web Security"},"content":{"rendered":"<p>For all y'all that want to understand the potential attacks, and potential defenses, of front-end web development.<\/p>\n<p>It's pretty wild. The dangers are big, real, and many. But the tools we have to fight back are up to the job, we just need to know about them and use them.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>For all y&#8217;all that want to understand the potential attacks, and potential defenses, of front-end web development. It&#8217;s pretty wild. The dangers are big, real, and many. But the tools we have to fight back are up to the job, we just need to know about them and use them.<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17,132],"tags":[779],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251470"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251470"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251470\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251470"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251470"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251470"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250820,"date":"2017-02-13T15:58:55","date_gmt":"2017-02-13T22:58:55","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250820"},"modified":"2017-02-13T17:31:28","modified_gmt":"2017-02-14T00:31:28","slug":"build-custom-styled-online-forms-wufoo","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/build-custom-styled-online-forms-wufoo\/","title":{"rendered":"Build (Custom Styled) Online Forms with Wufoo"},"content":{"rendered":"<p>Need to put a form on a website? I've been using <a href=\"https:\/\/ad.doubleclick.net\/ddm\/clk\/303181152;128762502;s\">Wufoo<\/a> to do that for <em>a decade<\/em>. It's so simple. Just drag and drop the fields you need and select the options you want. Even things that could be complex aren't, like adding logic (e.g. if they select this, show that) or pagination. Never worry about spam. Never worry about losing data, since it's all stored right in Wufoo itself (with API access!).<\/p>\n<p>There are too many features to explain right here (OK two more: payments! reports!). One of my favorites, though, which might appeal to all y'all CSS people: you have complete CSS control over the forms you build. Let's take a look at how that works. <\/p>\n<p><!--more--><\/p>\n<p>There are <em>themes<\/em> in Wufoo. You create them any then apply to as many different forms as you like. There are lots of options in here for things like changing fonts, colors, borders, etc.<\/p>\n<figure id=\"post-251284\" class=\"align-none media-251284\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/wufoo-theme-builder.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/wufoo-theme-builder.png 1972w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/wufoo-theme-builder-300x175.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/wufoo-theme-builder-768x448.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/wufoo-theme-builder-1024x597.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>There is even a good amount of custom fonts available. But here on CSS-Tricks, right now we're using <a href=\"https:\/\/codepen.io\/chriscoyier\/pen\/1cf9bccef112b4ccb61f2c8d5c9c958b.css\">Source Sans Pro<\/a> from Google Fonts, and that doesn't happen to be one of the options. <\/p>\n<p>No big deal though! Since we have complete CSS control, we'll just link up some CSS that can set that font throughout the form. <\/p>\n<figure id=\"post-251285\" class=\"align-none media-251285\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/link-to-css.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/link-to-css.png 1490w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/link-to-css-300x116.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/link-to-css-768x296.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/link-to-css-1024x394.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Under Advanced, I just put a URL to a CSS file that links up my custom CSS. I can do that super quickly, easily, and for free on CodePen. By appending \".css\" to any Pen URL, I can link directly to that CSS:<\/p>\n<figure id=\"post-251286\" class=\"align-none media-251286\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/direct-to-css.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/direct-to-css.png 1332w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/direct-to-css-300x214.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/direct-to-css-768x548.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/direct-to-css-1024x730.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>With the correct selector and rules applied there, I've just changed the font!<\/p>\n<figure id=\"post-251287\" class=\"align-none media-251287\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/selector.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/selector.png 1754w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/selector-300x141.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/selector-768x360.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/selector-1024x480.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>That's what I mean by total CSS control. The stylesheet we linked up is added inside the form no matter where you use the Wufoo form, directly on wufoo.com or embedded elsewhere. It's linked up after Wufoo's own stylesheets, so it's easy to override existing styling. Go wild!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Need to put a form on a website? I&#8217;ve been using Wufoo to do that for a decade. It&#8217;s so simple. Just drag and drop the fields you need and select the options you want. Even things that could be complex aren&#8217;t, like adding logic (e.g. if they select this, show that) or pagination. Never [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[508],"tags":[595,664],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250820"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250820"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250820\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250820"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250820"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250820"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251263,"date":"2017-02-13T08:10:23","date_gmt":"2017-02-13T15:10:23","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251263"},"modified":"2017-02-13T08:10:23","modified_gmt":"2017-02-13T15:10:23","slug":"design-content-typography-first-look-type-nugget","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/design-content-typography-first-look-type-nugget\/","title":{"rendered":"Design Your Content Typography First (and a Look at Type Nugget)"},"content":{"rendered":"<p>How often have you seen a \"completed\" site that still has <em>lorem ipsum<\/em> text lurking in the quiet corners? While we often strive for perfection in our designs and code, I am reminded every time I stumble across a garbled bit of <em>lorem ipsum<\/em> that not all aspects of web development process are given the attention they deserve.<\/p>\n<p>Developing a complete and detailed suite of typographic elements is an often-overlooked aspect of the process. While not always as prominent or exciting as other graphic elements, typography is an essential part of every site and does most of the heavy lifting to fulfill each page's purpose: transferring information.<\/p>\n<p>While I can't do anything about lazy <em>lorem ipsum<\/em> use, I've been working on <a href=\"http:\/\/www.typenugget.com\/\">a tool<\/a> that helps develop beautiful and robust online typography.<\/p>\n<p><!--more--><\/p>\n<h3>Why I Care So Much About Typography<\/h3>\n<p>A little bit about me will help set the scene. I'm a full-stack developer working alongside designers in a digital agency. I studied graphic design before moving into development, so I understand layout and typography. Although I started out in design, I want to stress that I do not consider myself a designer. For this reason, this post will not explain how to <em>design<\/em> a type system. I will talk about how to implement one in development.<\/p>\n<p>Throughout my career as a developer, I have frequently noticed sites that miss the finer details of typography. Although not glaring problems, these little mistakes whittle away at the overall user experience. <\/p>\n<p>I'm not entirely sure why typographic mistakes happen so often. Perhaps it's due to time constraints, oversights during development, or something completely different.<\/p>\n<p>I've been on a mission to solve this issue, which has lead me to writing this article and also the development of my current side project: <a href=\"http:\/\/www.typenugget.com\/\">Type Nugget<\/a>. It's a tool that I hope allows users to easily create robust type systems.<\/p>\n<figure id=\"post-251265\" class=\"align-none media-251265\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/screen-1.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/screen-1.png 1916w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/screen-1-300x147.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/screen-1-768x376.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/screen-1-1024x501.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Screenshot of the Type Nugget Dashboard<\/figcaption><\/figure>\n<h3>Why You Should Care About Typography, Too<\/h3>\n<p>The benefits of having a robust type system in place are many. It ensures consistency across your project and allows you to write less code. Most importantly, though, a robust type system makes sure the content communicates what it's supposed to.<\/p>\n<p>A workmate recently sent me <a href=\"http:\/\/pitchfork.com\/reviews\/albums\/22716-as-was\/\">an article<\/a> on <a href=\"http:\/\/pitchfork.com\/\">Pitchfork<\/a>. As soon as I landed on the page I fell in love with their type system and structure. Reading the copy was smooth; an absolute pleasure. Their typographic system is simple and beautiful. I'll be making references to this website as I continue talking about type systems!<\/p>\n<figure id=\"post-251266\" class=\"align-none media-251266\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/screen-2.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/screen-2.png 1903w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/screen-2-300x195.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/screen-2-768x500.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/screen-2-1024x666.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Screenshot of a Pitchfork article<\/figcaption><\/figure>\n<p>(Look at that drop cap &#x1f495;)<\/p>\n<p>One of the most important requirements of a type system in today's web climate is that it works perfectly across all possible existing viewports. We never know what's going to come next in the world of devices! This is doable, but first, let's get into the world of responsive units.<\/p>\n<h3>Looking at Responsive Units with Heart Eyes &#x1f60d;<\/h3>\n<p>In my opinion, you can't master web typography until you understand responsive units. Wrapping your brain around responsive units takes a little bit of math, but it really changes your world once you've figured it out. Soon, the sight of <code>px<\/code> will make you cringe!<\/p>\n<p>There are already articles on this particular topic, so I won't delve too deep, but here's a brief explanation of the units I tend to use with type:<\/p>\n<ul>\n<li><strong>em:<\/strong> Relative to the current (inherited) <code>font-size<\/code>. If I set an element inside this article to <code>font-size:2em<\/code>, it would be twice the <code>font-size<\/code> of the rest of the article.<\/li>\n<li><strong>rem:<\/strong> Relative to the <code>font-size<\/code> of the root element (which is a fancy way of saying the <code>html<\/code> element). If I added another element inside of the element used in the previous example, and then set it to <code>font-size:1rem<\/code>, it would now be the original size, regardless of it's parent being set in ems (I set up a pen <a href=\"http:\/\/codepen.io\/treechime\/pen\/bwdZBO\">here<\/a> that shows how ems and rems work together).<\/li>\n<li><strong>vw & vh:<\/strong> Relative to 1% of the viewport width & height, respectively. So <code>5vw<\/code> means the <code>font-size<\/code> is 5% of the browser width, and <code>5vh<\/code> is 5% of the browser height.<\/li>\n<\/ul>\n<p>I tend to set a <code>px<\/code> <code>font-size<\/code> on the root element of the document, and set the rest of the typographical elements using ems for <code>font-size<\/code> and rems for margins to keep a consistent type grid. I often like to set headings in <code>vw<\/code> (or even on occasion, <code>vh<\/code>) and use a media query to transition them to an <code>em<\/code> size after a certain viewport <code>max-width<\/code> has been reached. This avoids blown out headings on even the smallest of mobile devices. There's a great Sass mixin by Eduardo Bou\u00e7as <a href=\"https:\/\/css-tricks.com\/snippets\/sass\/viewport-sized-typography-minimum-maximum-sizes\/\">here<\/a> for making viewport relative text with minimum and maximum sizes.<\/p>\n<h3>Responsive Units in Action<\/h3>\n<p>Let's take a look at how Pitchfork has used responsive units. <\/p>\n<p>The <code>font-size<\/code> on their <code>html<\/code> and <code>body<\/code> elements is set to <code>10px<\/code>. They then have a <code>.contents<\/code> div that wraps all of their article content. It's set to <code>1.8rem<\/code> and changes to <code>1.6rem<\/code> once the viewport is less than <code>992px<\/code> wide (I would have done this mobile-first instead of desktop-first, but I think that's just a matter of preference). This means that the main content <code>font-size<\/code> is <code>18px<\/code> on desktop and <code>16px<\/code> on smaller devices (<code>10px * 1.8 = 18px<\/code>, <code>10px * 1.6 = 16px<\/code>), both very comfortable font sizes for the given viewports. <\/p>\n<p>The headings styles vary appropriately depending on what kind of article you are reading, but seem to scale in a similar way. The <code>h1<\/code> on a <a href=\"http:\/\/pitchfork.com\/features\/lists-and-guides\/9991-the-best-music-memes-of-2016\/\">Features page<\/a> starts at <code>4.8rem<\/code>, scales to <code>4rem<\/code> when the viewport is less than <code>992px<\/code> wide, then <code>3rem<\/code> when the viewport is less than <code>767px<\/code> wide (<code>48px<\/code>,<code>40px<\/code> & <code>30px<\/code> respectively). The <code>.contents<\/code> div also always prevents the copy from exceeding the optimal measure (line length) of the text which, as a general rule of typography, is somewhere between 40 and 80 characters long depending on context.<\/p>\n<p>Pitchfork have done well, but this is really the bare minimum required for a great type system to flourish.<\/p>\n<p>Building on that minimum, it's important to realize that typography is more than just text. There is a whole suite of elements (h1-h6, p, span, em, strong, a, ul, ol, li, blockquote, caption, and a whole bunch more) that contribute to the typographical flow and appearance of content. It's important that they're not forgotten, especially when working on content heavy websites like blogs or news sites. Using a CSS reset like <a href=\"https:\/\/necolas.github.io\/normalize.css\/\">Normalize.css<\/a> or a framework like Bootstrap normally means you have this covered already. However, it's always a nice touch to stray a little from the default. I often find it helpful to set a global margin on all of these elements within a content context that is equal to the main <code>line-height<\/code>. This maintains a nice, consistent grid. For example, if my main copy within <code>.content<\/code> is 1em with a <code>line-height<\/code> of <code>1.6em<\/code>, then the top and bottom margins on all my headings, paragraphs and other elements within <code>.content<\/code> are also set to <code>1.6em<\/code>. This is not a strict rule, just a good starting point.<\/p>\n<p>As a side note, while the above elements are fantastic for dictating the visual aspect of a website, they're also incredibly important for making sure a website is accessible. Using semantic HTML elements makes sure your website makes sense to machines, such as screen readers for the visually impaired, or web crawlers like Google. <\/p>\n<p>I was trawling through Pitchfork trying to find examples of some of these elements. When I couldn't find an example of a list, I entered one into the page through dev tools out of curiosity. Sure enough, they were styled nicely even though I couldn't find examples of where\/if they were used on the site. &#x1f44f;&#x1f3fe;<\/p>\n<figure id=\"post-251267\" class=\"align-none media-251267\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/screen-4.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/screen-4.png 599w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/screen-4-300x254.png 300w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Screenshot of pretty Pitchfork ul & ol styles<\/figcaption><\/figure>\n<p>While not technically falling directly under the umbrella of typography, I believe states and transitions are a big deal for the overall feel of a website. Unfortunately, they too are often forgotten. I assume the first thing that comes to many developers' minds when I say \"states and transitions\" are link styles. That's not all of it though and it's not all hover styles either. Hover styles <em>are<\/em> important for links, but focus is also important. <\/p>\n<p>Have you ever tried navigating through a website using tab and shift+tab? I certainly have, and on some websites it's almost impossible. The browser has a default method of displaying this but I've often seen this removed because it's not aesthetically pleasing. Please, if you're going to remove it, replace it with something prettier! <\/p>\n<p>Form inputs can also be <a href=\"http:\/\/tympanus.net\/Development\/TextInputEffects\/\">greatly enhanced<\/a> by <code>:focus<\/code> styles and really add that extra <em>something<\/em> to your site. Another thing I've noticed on this topic is either a lack of transitions or transitions with odd timing, both of which makes moving between different states feel really jerky or unnatural. In my experience, I've found transitions between 1.5s-2.5s plenty. Anything more than that makes me uncomfortable (again this is a general rule that can be broken when necessary). <\/p>\n<p>While we're talking about transitions, try to avoid transitioning all properties of an element. This will probably come to bite you either performance-wise, or down the line when trying to style a child element.<\/p>\n<h3>Additional Reading on Architecture<\/h3>\n<p>Here's a few things that I've learned that have made my development life significantly better:<\/p>\n<ul>\n<li>Avoid specificity issues by staying clear of unnecessary styling directly on elements <em>e.g.<\/em> styling <code>.nav a<\/code> when you could have styled <code>.nav__item<\/code>. I found this most crucial when styling headings. I used to style the h1-h6 tags directly, until I realized that h1-h6 are semantic elements that mark different stages of a document. Not all h1 tags need to look the same! I now style headings using classes such as <code>.heading--xl<\/code>, <code>.heading--sm<\/code>.<\/li>\n<li>Use global text modifier classes instead of adding random CSS to change small parts of a project. <em>e.g.<\/em> I use classes like <code>.text--xl<\/code>, <code>.text--sm<\/code>.<\/li>\n<li>Avoid unnecessary nesting of selectors <em>e.g.<\/em> <code>.nav &gt; .nav__item<\/code> when you could have just styled <code>.nav__item<\/code>. This avoids specificity issues and can also improve performance as the browser doesn't have to do as many lookups on elements. Take a look at <a href=\"http:\/\/thesassway.com\/intermediate\/avoid-nested-selectors-for-more-modular-css\">this article about Modular CSS<\/a> for more information on why this is good to avoid.<\/li>\n<li>Adopt a CSS \"architecture\". It doesn't need to be an existing one. Make one up if you wish. Just have one. I use something very similar to <a href=\"https:\/\/en.bem.info\/methodology\/quick-start\/\">BEM<\/a> coupled with the methodology in the Modular CSS article linked above. <a href=\"https:\/\/github.com\/ikkou\/awesome-css#architecture\">Here's a great list<\/a> of some different architectures (and various other great things). A great CSS-Tricks article was written on this very recently, also. <a href=\"https:\/\/css-tricks.com\/developing-extensible-html-css-components\/\">Go give that a read if you're interested!<\/a><\/li>\n<\/ul>\n<h3>Check Out Type Nugget<\/h3>\n<p>The agency I work for has an innovation program that gives us time to work on our own products and ideas. I've gathered a small team that shares my passion for these topics. For the last few months we've been building <a href=\"http:\/\/www.typenugget.com\/\">Type Nugget<\/a>.<\/p>\n<figure id=\"post-251268\" class=\"align-none media-251268\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/screen-3.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/screen-3.png 1902w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/screen-3-300x148.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/screen-3-768x380.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/screen-3-1024x506.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Screenshot of the Type Nugget homepage<\/figcaption><\/figure>\n<p>Type Nugget is a tool that makes it easier for developers to build a solid type system based off the principles I've discussed. It still has a fair way to go before it's where I want it to be, but we have eyes on it becoming the go-to app for setting up web type systems, as well as building a great community for web type enthusiasts.<\/p>\n<p>We're super excited to make it a reality, so check it out and let us know what features you'd love to see!<\/p>\n<h3>Wrapping Up<\/h3>\n<p>The internet is all about content. As web developers, our job is to make sure users can understand that content. To me, that's a good enough reason for any web dev to know type systems inside and out. The case gets even stronger when responsive units are added to the mix. So take an hour or two to brush up on these integral elements of web development. Or, take the easy way out and use Type Nugget &#x1f609;<\/p>\n","protected":false},"excerpt":{"rendered":"<p>How often have you seen a &#8220;completed&#8221; site that still has lorem ipsum text lurking in the quiet corners? While we often strive for perfection in our designs and code, I am reminded every time I stumble across a garbled bit of lorem ipsum that not all aspects of web development process are given the [&hellip;]<\/p>\n","protected":false},"author":247677,"featured_media":251268,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1117,587],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251263"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/247677"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251263"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251263\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/251268"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251263"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251263"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251263"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251392,"date":"2017-02-12T06:29:27","date_gmt":"2017-02-12T13:29:27","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251392"},"modified":"2017-02-12T06:29:27","modified_gmt":"2017-02-12T13:29:27","slug":"performance-under-pressure","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/performance-under-pressure\/","title":{"rendered":"Performance Under Pressure"},"content":{"rendered":"<p>Here's a neat transcript of a talk by Mat Marquis where he details how he made the Bocoup website lightning fast, particularly with snazzy font loading tricks and performance tools to help monitor those improvements over time. <\/p>\n<p>Although, my favorite part of the talk is when Mat goes into <em>why<\/em> he wants to make websites:<\/p>\n<blockquote>\n<p>I don't get excited about frameworks or languages\u2014I get excited about potential; about playing my part in building a more inclusive web.<\/p>\n<p>I care about making something that works well for someone that has only ever known the web by way of a five-year-old Android device, because that's what they have\u2014someone who might feel like they're being left behind by the web a little more every day. I want to build something better for them.<\/p>\n<\/blockquote>\n","protected":false},"excerpt":{"rendered":"<p>Here&#8217;s a neat transcript of a talk by Mat Marquis where he details how he made the Bocoup website lightning fast, particularly with snazzy font loading tricks and performance tools to help monitor those improvements over time. Although, my favorite part of the talk is when Mat goes into why he wants to make websites: [&hellip;]<\/p>\n","protected":false},"author":223806,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[592,553],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251392"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/223806"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251392"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251392\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251392"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251392"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251392"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251407,"date":"2017-02-11T08:46:56","date_gmt":"2017-02-11T15:46:56","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251407"},"modified":"2017-02-11T08:46:56","modified_gmt":"2017-02-11T15:46:56","slug":"javascript-start-performance","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/javascript-start-performance\/","title":{"rendered":"JavaScript Start-Up Performance"},"content":{"rendered":"<p>Addy Osmani:<\/p>\n<blockquote><p>Smaller JavaScript bundles generally do result in a faster load time (regardless of our browser, device & network connection) but 200KB of our JS !== 200KB of someone else's and can have wildly different parse and compile numbers.<\/p><\/blockquote>\n<p>Using file size as a metric isn't an awful crime, because it does matter, but it's only part of the JavaScript performance story.<\/p>\n<p>I also found the overview of the discussion of bytecode interesting. Browsers download JavaScript, parse it, turn it into an abstract syntax tree, then turn that into bytecode. What if we could do that during our build steps and ship bytecode?<\/p>\n<blockquote><p>My opinion is shipping bytecode can increase your load-time (it's larger) and you would likely need to sign the code and process it for security. V8's position is, for now, we think exploring avoiding reparsing internally will help see a decent enough boost that precompilation may not offer too much more, but are always open to discussing ideas that can lead to faster startup times.<\/p><\/blockquote>\n","protected":false},"excerpt":{"rendered":"<p>Addy Osmani: Smaller JavaScript bundles generally do result in a faster load time (regardless of our browser, device &#038; network connection) but 200KB of our JS !== 200KB of someone else&#8217;s and can have wildly different parse and compile numbers. Using file size as a metric isn&#8217;t an awful crime, because it does matter, but [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[432],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251407"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251407"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251407\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251407"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251407"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251407"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251404,"date":"2017-02-11T08:33:11","date_gmt":"2017-02-11T15:33:11","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251404"},"modified":"2017-02-11T08:33:11","modified_gmt":"2017-02-11T15:33:11","slug":"preparing-exporting-svg-icons-sketch","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/preparing-exporting-svg-icons-sketch\/","title":{"rendered":"Preparing and Exporting SVG Icons in Sketch"},"content":{"rendered":"<p>There is an interesting <em>gotcha<\/em> about the <code>fill-rule<\/code> attribute of SVG, detailed here by Anthony Collurafici.<\/p>\n<blockquote><p>Fill-Rule is an SVG property that basically defines how to determine what shapes are filled or subtracted from the shape. The default SVG value is \"nonzero\", and this is what Android requires. Unfortunately, Sketch uses \"evenodd\". Luckily Sketch provides all the features we need to convert our shapes from \"evenodd\" to \"nonzero\". And its now even easier in Sketch 42.<\/p><\/blockquote>\n<figure id=\"post-251405\" class=\"align-none media-251405\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/1-dVQNfz24H0T70PadfTJWIQ.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/1-dVQNfz24H0T70PadfTJWIQ.png 432w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/1-dVQNfz24H0T70PadfTJWIQ-150x150.png 150w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/1-dVQNfz24H0T70PadfTJWIQ-300x300.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/1-dVQNfz24H0T70PadfTJWIQ-90x90.png 90w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>The <em>direction<\/em> you draw the points in nested shapes affects the fill.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>There is an interesting gotcha about the fill-rule attribute of SVG, detailed here by Anthony Collurafici. Fill-Rule is an SVG property that basically defines how to determine what shapes are filled or subtracted from the shape. The default SVG value is &#8220;nonzero&#8221;, and this is what Android requires. Unfortunately, Sketch uses &#8220;evenodd&#8221;. Luckily Sketch provides [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[983,660],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251404"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251404"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251404\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251404"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251404"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251404"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251400,"date":"2017-02-11T08:09:25","date_gmt":"2017-02-11T15:09:25","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251400"},"modified":"2017-02-11T08:09:25","modified_gmt":"2017-02-11T15:09:25","slug":"maintaining-accessibility-responsive-world","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/maintaining-accessibility-responsive-world\/","title":{"rendered":"Maintaining Accessibility in a Responsive World"},"content":{"rendered":"<p>There a bit of a CSS trick is Scott Jehl's latest article. Perhaps you've used an \"accessible hiding\" technique? That's where you are deliberately avoiding <code>display: none;<\/code> because you want the element to be focusable, but not seen visually. <\/p>\n<p>But... that can be awkward for anyone who uses the keyboard to navigate the site and also looks at the screen. <\/p>\n<blockquote><p>To avoid this, we try to remember that any accessibly-hidden content should be visible when it gains focus. For example, this CSS would place a focused element at the top of the viewport<\/p><\/blockquote>\n<pre rel=\"CSS\"><code class=\"language-css\">.accessible-hidden {\r\n  position: absolute;\r\n  top: 0;\r\n  left: -999px;\r\n  height: 1px;\r\n  width: 1px;\r\n  clip: rect(1px, 1px, 1px, 1px);\r\n  white-space: nowrap;\r\n}\r\n.accessible-hidden:focus {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  background: #fff;\r\n  padding: 10px;\r\n  \/* etc etc... *\/\r\n}<\/code><\/pre>\n<p>Scott credits Joe Watkins <a href=\"http:\/\/codepen.io\/joe-watkins\/pen\/rjhiK\">for the idea<\/a>.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>There a bit of a CSS trick is Scott Jehl&#8217;s latest article. Perhaps you&#8217;ve used an &#8220;accessible hiding&#8221; technique? That&#8217;s where you are deliberately avoiding display: none; because you want the element to be focusable, but not seen visually. But&#8230; that can be awkward for anyone who uses the keyboard to navigate the site and [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[850],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251400"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251400"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251400\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251400"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251400"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251400"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250791,"date":"2017-02-10T08:08:00","date_gmt":"2017-02-10T15:08:00","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250791"},"modified":"2017-02-10T08:08:00","modified_gmt":"2017-02-10T15:08:00","slug":"introduction-reduced-motion-media-query","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/introduction-reduced-motion-media-query\/","title":{"rendered":"An Introduction to the Reduced Motion Media Query"},"content":{"rendered":"<p>The open web's success is built on interoperable technologies. The ability to control animation now exists alongside important features such as zooming content, installing extensions, enabling high contrast display, loading custom stylesheets, or disabling JavaScript.<\/p>\n<p>Sites all too often inundate their audiences with automatically playing, battery-draining, resource-hogging animations. The need for people being able to take back control of animations might be more prevalent than you may initially think. <\/p>\n<p><!--more--><\/p>\n<h3>A brief history of Reduced Motion<\/h3>\n<p>When it was released in 2013, iOS 7 featured a dramatic reworking of the operating system's visuals. Changes included translucency and blurring, a more simplified \"flat\" user interface, and dramatic motion effects such as full-screen zooming and panning.<\/p>\n<p>While the new look was generally accepted, many people using the updated operating system <a href=\"http:\/\/simplyaccessible.com\/article\/balance-awareness\/\">reported experiencing motion sickness and vertigo<\/a>. User interface movement didn\u2019t correspond with users' feeling of movement or spatial orientation, triggering the reported effects. <\/p>\n<p>Although technology inflicting adverse effects existed before this, the popularity of iOS gave the issue prominence. Apple has great support for accessibility, so <a href=\"https:\/\/support.apple.com\/en-us\/HT202655\">an option in the operating system preferences<\/a> to disable motion effects for those with vestibular disorders was added in response.<\/p>\n<h3>Vestibu-what?<\/h3>\n<p>Your vestibular system provides an internal sensor to communicate your body's physical position and orientation in the world, and is key to controlling balance and eye movement. <a href=\"http:\/\/a11yproject.com\/posts\/understanding-vestibular-disorders\/\">Vestibular disorders<\/a> can cause your vestibular system to struggle to make sense of what is happening, resulting in loss of balance and vertigo, migraines, nausea, and hearing loss. Anyone who has spun around too quickly is familiar with a confused vestibular system. <\/p>\n<p>Vestibular disorders can be caused by both genetic and environmental factors. It\u2019s part of the larger <a href=\"http:\/\/webaim.org\/intro\/\">spectrum of conditions<\/a> that make up accessibility concerns and it affects more than <a href=\"http:\/\/vestibular.org\/understanding-vestibular-disorder\">70 million people<\/a>.<\/p>\n<h3>Pssh! I feel fine! This'll never happen to me<\/h3>\n<p>Remember: <a href=\"https:\/\/uxmag.com\/articles\/we-re-just-temporarily-abled\">we're all just temporarily-abled<\/a>. Feeling a little dizzy might not seem like that big a deal, but that moment of nausea might be a critical one: losing balance and falling down, a migraine during an interview, nausea-triggered vomiting while working a food service job, passing out while operating a car UI, etc. <\/p>\n<p>So what can we do about it?<\/p>\n<h3>Enter a new Media Query<\/h3>\n<p>Safari 10.1 <a href=\"https:\/\/developer.apple.com\/library\/prerelease\/content\/releasenotes\/General\/WhatsNewInSafari\/Articles\/Safari_10_1.html#\/\/apple_ref\/doc\/uid\/TP40014305-CH12-DontLinkElementID_60\">introduces the Reduced Motion Media Query<\/a>. It is a non-vendor-prefixed declaration that allows developers to \u201ccreate styles that avoid large areas of motion for users that specify a preference for reduced motion in System Preferences.\u201d <\/p>\n<p>The syntax is pretty straightforward:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">@media (prefers-reduced-motion) {\r\n  .background {\r\n    animation: none;\r\n  }\r\n}<\/code><\/pre>\n<p>Safari will parse this code and apply it to your site, letting you provide an alternative experience for users who have the Reduced Motion option enabled. Think of this new Media Query <a href=\"https:\/\/www.lottejackson.com\/learning\/supports-will-change-your-life\">like <code>@supports<\/code><\/a>: describe the initial appearance, then modify the styles based on capability.<\/p>\n<h3>How to test<\/h3>\n<p>So, how do we check this bad boy out? Provided you\u2019re up to date with MacOS, you should be able to check it out in <a href=\"https:\/\/developer.apple.com\/safari\/technology-preview\/\">Safari Technical Preview<\/a>. <\/p>\n<p>Go to System Preferences, select the Accessibility options, click the Display tab, and check the <b>Reduce Motion<\/b> option. You'll see that the example animation in the CodePen example below updates when the checkbox is toggled. The pulsing circle is changed to an inert square:<\/p>\n<p data-height=\"265\" data-theme-id=\"1\" data-slug-hash=\"f61f20f8d7826c8411ea6c9eecb2caff\" data-default-tab=\"css,result\" data-user=\"ericwbailey\" data-embed-version=\"2\" data-pen-title=\"Reduce Motion Media Query Example\" data-preview=\"true\" data-editable=\"true\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/ericwbailey\/pen\/f61f20f8d7826c8411ea6c9eecb2caff\/\">Reduce Motion Media Query Example<\/a> by Eric Bailey (<a href=\"http:\/\/codepen.io\/ericwbailey\">@ericwbailey<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Here\u2019s a quick video if you don\u2019t have access to this:<\/p>\n<p><iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/uANmA7korfs?rel=0\" frameborder=\"0\" allowfullscreen><\/iframe><\/p>\n<p>Need a more practical example of how the media query could be applied? <\/p>\n<p><a href=\"https:\/\/www.nytimes.com\/interactive\/2016\/09\/30\/opinion\/penn-station-reborn.html?_r=1\">This feature from the New York Times<\/a> opens with full-screen autoplaying video that simulates falling from a great height. <\/p>\n<figure id=\"post-250795\" class=\"align-none media-250795\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/falling.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/falling.jpg 2000w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/falling-300x272.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/falling-768x697.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/falling-1024x930.jpg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>It's sudden and unexpected, and a strong candidate to trigger vertigo. <\/figcaption><\/figure>\n<p>The Reduced Motion Media Query, could provide an alternative that replaces the falling animation with a screenshot of the final frame of the animation. The content of the article is still communicated thematically. A beautiful rendering of the proposed Gateway project draws the reader in. The other less-dramatic animations in the feature remain unchanged, as they are both subtle with their transitions and activated by the reader deliberately browsing the page. <\/p>\n<p>The impact of the story is preserved while not having the potential to inflict harm on the person trying to read it. It's a win-win!<\/p>\n<h3>Hmph! Seems like a lot of work<\/h3>\n<p>Even if you ignore all the benefits of building accessible sites, it's probably a good idea to get <a href=\"https:\/\/decadecity.net\/blog\/2015\/06\/28\/user-queries\">comfortable working with User Queries<\/a>. <\/p>\n<p>As capabilities traditionally controlled by the operating system are <a href=\"https:\/\/whatwebcando.today\/\">integrated into the browser<\/a>, crafting experiences that gracefully adapt to a person's preferences will become increasingly important. Reduced motion is likely to be supported by other browsers soon as part of a wave of new User Queries. <\/p>\n<p>The browser's opinion needs to also be considered. Without a designed alternative, the browser's fallback settings for reduced motion or may not create a desirable experience. In fact, if animation alone communicates important information about your site, it may be lost.<\/p>\n<h3>So, should I get just play it safe and get rid of all my animation?<\/h3>\n<p>Doing so would be a dramatic and not necessarily valid option. Animation, when used with discretion and restraint, can be a great way to communicate relationships between parts of your site or transitions between states, direct a person\u2019s attention, simplify the understanding of complicated concepts, or to simply add some fun. Used properly, animations can aid in accessibility by helping <a href=\"http:\/\/webaim.org\/articles\/cognitive\/\">address cognitive accessibility concerns<\/a>.<\/p>\n<p>If you would like more information on what kinds of animation are more likely to trigger vestibular issues, Val Head has written <a href=\"http:\/\/alistapart.com\/article\/designing-safer-web-animation-for-motion-sensitivity\">an excellent post on A List Apart<\/a> on the subject.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>The open web&#8217;s success is built on interoperable technologies. The ability to control animation now exists alongside important features such as zooming content, installing extensions, enabling high contrast display, loading custom stylesheets, or disabling JavaScript. Sites all too often inundate their audiences with automatically playing, battery-draining, resource-hogging animations. The need for people being able to [&hellip;]<\/p>\n","protected":false},"author":230513,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[850,612,469],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250791"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/230513"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250791"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250791\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250791"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250791"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250791"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251366,"date":"2017-02-10T08:06:32","date_gmt":"2017-02-10T15:06:32","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251366"},"modified":"2017-02-10T08:07:17","modified_gmt":"2017-02-10T15:07:17","slug":"css-rooster","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/css-rooster\/","title":{"rendered":"CSS Rooster"},"content":{"rendered":"<blockquote><p>A Bot that Writes CSS Classes for HTML with Deep Learning<\/p><\/blockquote>\n<p>I played with it for a bit to see if I could get it to do anything impressively analytic. I took some semantic HTML and removed all the class names from it with the RegEx <code>class=\"[a-zA-Z0-9:;\\.\\s\\(\\)\\-\\,]*\"<\/code>. I dropped the class-free HTML into the Rooster, and it did generate new classes:<\/p>\n<figure id=\"post-251367\" class=\"align-none media-251367\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/removing-classes.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/removing-classes.png 2140w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/removing-classes-300x239.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/removing-classes-768x611.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/removing-classes-1024x814.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>But the new classes seemed entirely based on what the tag is. <code>&lt;ul class=\"list\"&gt;<\/code>, <code>&lt;a class=\"link\"&gt;<\/code> and such. That was without feeding it any CSS at all though. After I dropped in my whole stylesheet in a style block, I think I confused it. I got some new weird classes that weren't in my styles and stuff like <code>&lt;br class=\"desc\" \/&gt;<\/code>. Oh well, it's just a fun experiment I think. Naming is hard, but we should probably still be doing it for ourselves.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>A Bot that Writes CSS Classes for HTML with Deep Learning I played with it for a bit to see if I could get it to do anything impressively analytic. I took some semantic HTML and removed all the class names from it with the RegEx class=&#8221;[a-zA-Z0-9:;\\.\\s\\(\\)\\-\\,]*&#8221;. I dropped the class-free HTML into the Rooster, [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[588],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251366"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251366"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251366\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251366"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251366"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251366"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}]