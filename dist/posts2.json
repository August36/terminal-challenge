[{"id":251361,"date":"2017-02-10T06:17:59","date_gmt":"2017-02-10T13:17:59","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251361"},"modified":"2017-02-10T06:17:59","modified_gmt":"2017-02-10T13:17:59","slug":"month-hello-world-learning-30-new-languages-30-days","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/month-hello-world-learning-30-new-languages-30-days\/","title":{"rendered":"A Month of \u201cHello, World!\u201d Learning 30 new languages in 30 days."},"content":{"rendered":"<p>Genki Hagata:<\/p>\n<blockquote><p>My \"aha moment\" came around day 16, when I came to the perhaps obvious realization that every Javascript framework is just someone's organized, opinionated way of writing code.<\/p><\/blockquote>\n","protected":false},"excerpt":{"rendered":"<p>Genki Hagata: My &#8220;aha moment&#8221; came around day 16, when I came to the perhaps obvious realization that every Javascript framework is just someone&#8217;s organized, opinionated way of writing code.<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[1131,1132],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251361"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251361"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251361\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251361"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251361"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251361"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250282,"date":"2017-02-09T07:22:10","date_gmt":"2017-02-09T14:22:10","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250282"},"modified":"2017-02-09T07:22:10","modified_gmt":"2017-02-09T14:22:10","slug":"come-event-apart","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/come-event-apart\/","title":{"rendered":"You Should Come To An Event Apart"},"content":{"rendered":"<figure id=\"post-250309\" class=\"align-none media-250309\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/an_event_apart_seattle_2013_banner.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/an_event_apart_seattle_2013_banner.jpg 1500w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/an_event_apart_seattle_2013_banner-300x114.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/an_event_apart_seattle_2013_banner-768x291.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/an_event_apart_seattle_2013_banner-1024x388.jpg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Hey there CSS-Tricks readers and friends! This year I have the great privilege to be giving talks and workshops at the wonderful <a href=\"https:\/\/aneventapart.com\/\">An Event Apart<\/a> series of conferences. Conference for people who make websites, as they say. <\/p>\n<p>You should come to one that works out well with your work and life. <\/p>\n<p>Here's the schedule for 2017 (all cities in the United States):<\/p>\n<ul>\n<li>April 3-5 <a href=\"https:\/\/aneventapart.com\/event\/seattle-2017\">Seattle<\/a>*<\/li>\n<li>May 15-17 <a href=\"https:\/\/aneventapart.com\/event\/boston-2017\">Boston<\/a><\/li>\n<li>July 10-12 <a href=\"https:\/\/aneventapart.com\/event\/washington-dc-2017\">Washington DC<\/a><\/li>\n<li>August 28-30 <a href=\"https:\/\/aneventapart.com\/event\/chicago-2017\">Chicago<\/a>*<\/li>\n<li>October 30-November 1 <a href=\"https:\/\/aneventapart.com\/event\/san-francisco-2017\">San Francisco<\/a><\/li>\n<li>Denver 11-13 <a href=\"https:\/\/aneventapart.com\/event\/denver-2017\">Denver<\/a><\/li>\n<\/ul>\n<figure id=\"post-250306\" class=\"align-none media-250306\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/aea-dates.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/aea-dates.jpg 1400w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/aea-dates-300x158.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/aea-dates-768x404.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/aea-dates-1024x539.jpg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>The final day of each event (e.g. April 5 of Seattle) is \"A Day Apart\", which is a full-day workshop. The dates with an *asterisk (Seattle and Chicago) it will be <em>me<\/em> giving that workshop. <\/p>\n<p>I'm excited about all the events, but particularly the workshops, as that's a little bit of new territory for me. I've been enjoying putting all the material together. It feels very much like <em>me<\/em>. We'll be talking about building websites and what exactly that <em>means<\/em> these days as a front-end web designer and developer.<\/p>\n<figure id=\"post-250308\" class=\"align-none media-250308\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/chris-at-aea.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/chris-at-aea.jpg 1280w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/chris-at-aea-300x199.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/chris-at-aea-768x509.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/chris-at-aea-1024x678.jpg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>If you wanna come hang out with me, that's cool, but of course, An Event Apart is a conglomeration of incredibly smart people talking about a huge range of web-related topics. Just look at <a href=\"https:\/\/aneventapart.com\/event\/seattle-2017\">the lineup for Seattle<\/a>! <\/p>\n<ul>\n<li><strong>Jeffrey Zeldman<\/strong>: The Codependent\u2019s Guide to Design Collaboration<\/li>\n<li><strong>Sarah Parmenter<\/strong>: Practical Branding<\/li>\n<li><strong>Krystal Higgins<\/strong>: Onboarding for Any Situation<\/li>\n<li><strong>Luke Wroblewski<\/strong>: Obvious Always Wins<\/li>\n<li><strong>Val Head<\/strong>: Motion In Design Systems: Animation, Style Guides, and the Design Process<\/li>\n<li><strong>Ethan Marcotte<\/strong>: Design Beyond Our Devices<\/li>\n<li><strong>Jeremy Keith<\/strong>: Evaluating Technology<\/li>\n<li><strong>Rachel Andrew<\/strong>: New CSS Layout Meets the Real World<\/li>\n<li><strong>Jen Simmons<\/strong>: Designing with Grid<\/li>\n<li><strong>Eric Meyer<\/strong>: Design for Real Life<\/li>\n<li><strong>Una Kravets<\/strong>: The Joy of Optimizing<\/li>\n<\/ul>\n<p>And then me closing up the show on Tuesday, and doing the workshop all day Wednesday. Hot damn. I have a $100 bucks off for ya, too: <b>AEACOY<\/b><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Hey there CSS-Tricks readers and friends! This year I have the great privilege to be giving talks and workshops at the wonderful <a href=\"https:\/\/aneventapart.com\/\">An Event Apart<\/a> series of conferences. Conference for people who make websites, as they say.<\/p>\n<p>You should come to one that works out well with your work and life.<\/p>\n","protected":false},"author":3,"featured_media":250307,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17,508],"tags":[812],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250282"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250282"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250282\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/250307"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250282"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250282"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250282"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251328,"date":"2017-02-09T07:15:18","date_gmt":"2017-02-09T14:15:18","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251328"},"modified":"2017-02-09T07:15:18","modified_gmt":"2017-02-09T14:15:18","slug":"built-pwa-scratch-learned","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/built-pwa-scratch-learned\/","title":{"rendered":"We built a PWA from scratch &#8211; This is what we learned"},"content":{"rendered":"<p>I hadn't considered the fact that if you're fingerprinting your assets (e.g. style.987987090897.css) to take advantage of browser cache, you'll need to update your Service Worker every time you do that. But I guess you've got a build step anyway, so it can be updated in both places:<\/p>\n<blockquote><p>... we used a NodeJS module called <a href=\"https:\/\/github.com\/errorception\/staticify\">Stacify<\/a> to automatically create new version numbers in all the places when a file is changed.<\/p><\/blockquote>\n","protected":false},"excerpt":{"rendered":"<p>I hadn&#8217;t considered the fact that if you&#8217;re fingerprinting your assets (e.g. style.987987090897.css) to take advantage of browser cache, you&#8217;ll need to update your Service Worker every time you do that. But I guess you&#8217;ve got a build step anyway, so it can be updated in both places: &#8230; we used a NodeJS module called [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[1130,949],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251328"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251328"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251328\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251328"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251328"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251328"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251324,"date":"2017-02-09T07:04:54","date_gmt":"2017-02-09T14:04:54","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251324"},"modified":"2017-02-09T07:04:54","modified_gmt":"2017-02-09T14:04:54","slug":"code-smells-css","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/code-smells-css\/","title":{"rendered":"Code Smells in CSS"},"content":{"rendered":"<p>Harry Roberts, Code Smells in CSS, <a href=\"https:\/\/csswizardry.com\/2012\/11\/code-smells-in-css\/\">Part 1<\/a>: <\/p>\n<ul>\n<li>Undoing Styles<\/li>\n<li>Magic Numbers<\/li>\n<li>Qualified Selectors<\/li>\n<li>Absolute Values<\/li>\n<li>Brute Forcing<\/li>\n<li>Dangerous Selectors<\/li>\n<li>Reactive !important<\/li>\n<li>IDs<\/li>\n<li>Loose Class Names<\/li>\n<\/ul>\n<p><a href=\"https:\/\/csswizardry.com\/2017\/02\/code-smells-in-css-revisited\/\">Part 2<\/a>:<\/p>\n<ul>\n<li>@extend<\/li>\n<li>String Concatenation for Classes<\/li>\n<li>Background Shorthand<\/li>\n<li>Duplicated Key Selectors<\/li>\n<li>Classes in Wrong Components<\/li>\n<li>Non BEM<\/li>\n<li>@import<\/li>\n<\/ul>\n","protected":false},"excerpt":{"rendered":"<p>Harry Roberts, Code Smells in CSS, Part 1: Undoing Styles Magic Numbers Qualified Selectors Absolute Values Brute Forcing Dangerous Selectors Reactive !important IDs Loose Class Names Part 2: @extend String Concatenation for Classes Background Shorthand Duplicated Key Selectors Classes in Wrong Components Non BEM @import<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4,17],"tags":[1129],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251324"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251324"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251324\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251324"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251324"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251324"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251280,"date":"2017-02-08T15:34:54","date_gmt":"2017-02-08T22:34:54","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251280"},"modified":"2017-02-08T15:34:54","modified_gmt":"2017-02-08T22:34:54","slug":"unitless-not-unitless","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/unitless-not-unitless\/","title":{"rendered":"Unitless or not unitless?"},"content":{"rendered":"<p><a href=\"http:\/\/allthingssmitty.com\/2017\/01\/30\/nope-nope-nope-line-height-is-unitless\/\">Matt Smith<\/a>:<\/p>\n<blockquote><p>You should always specify line-height as a unitless number (say this into the mirror five times). That way descendent elements that specify a different font size will inherit that number instead of a fixed line height.<\/p><\/blockquote>\n<p>Counterpoint in the comments by David Khourshid:<\/p>\n<blockquote><p>Unitless line heights are fine, but aren't the only way to use it. If I want an exact, perfect vertical rhythm implemented in my stylesheets, I would absolutely use a line-height *with a unit* everywhere I declare a font-size.<\/p><\/blockquote>\n<p>I'm a unitless man myself, only because perfect vertical rhythm always feels like a fool's errand to me. <\/p>\n","protected":false},"excerpt":{"rendered":"<p>Matt Smith: You should always specify line-height as a unitless number (say this into the mirror five times). That way descendent elements that specify a different font size will inherit that number instead of a fixed line height. Counterpoint in the comments by David Khourshid: Unitless line heights are fine, but aren&#8217;t the only way [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[746],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251280"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251280"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251280\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251280"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251280"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251280"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":251242,"date":"2017-02-08T08:06:15","date_gmt":"2017-02-08T15:06:15","guid":{"rendered":"https:\/\/css-tricks.com\/?p=251242"},"modified":"2017-03-24T07:32:26","modified_gmt":"2017-03-24T14:32:26","slug":"elm-get-started","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/elm-get-started\/","title":{"rendered":"Why Elm? (And How To Get Started With It)"},"content":{"rendered":"<p>If any discussion of the biggest problems in web development, there is no doubt <em>complexity<\/em> comes up. Between the use of dozens of tools, dependencies, and complexities inherent in the languages themselves, complexity is part of the job.<\/p>\n<p>Modern web applications require new ways to think about how we handle processes. The problem of executing functions without a strict order or in unexpected moments \u2014 like the click of a button or an incoming network message \u2014 forces us to use different techniques, from callbacks and promises to more sophisticated tools like <a href=\"http:\/\/reactivex.io\/\">Reactive Extensions<\/a>.<\/p>\n<p>It is not surprising to have systems composed of several thousands of lines of code, and things can easily get out of control at that scale. Even the slightest of changes could have unintended consequences. Runtime errors are extremely common with JavaScript, and if we are not careful we can find ourselves trying to make impossible computations, like calling something that doesn't exist or trying to process something that no longer is what you thought. <\/p>\n<p><!--more--><\/p>\n<div class=\"article-series\">\n<h4>Article Series:<\/h4>\n<ol>\n<li>Why Elm? And How To Get Started With It (You are here!)<\/li>\n<li><a href=\"https:\/\/css-tricks.com\/introduction-elm-architecture-build-first-application\/\">Introduction to The Elm Architecture and How to Build our First Application<\/a><\/li>\n<\/ol>\n<\/div>\n<h3>(Some of) The Advantages of Functional Programming<\/h3>\n<h4>Controlled State<\/h4>\n<p>In a language like JavaScript, we can do almost whatever we want with the state of our programs. The lack of control with state is a common precursor to bugs. For example, trying to work with a value that has changed in unexpected ways.<\/p>\n<p>Although state can't disappear, it can be controlled; Functional languages seek to provide tools to work with it in more organized ways. Some of them, like Clojure, provide features like immutable data structures, but others go to the extreme and become pure functional languages, like Haskell, where every single detail about state has to be carefully thought.<\/p>\n<h4>Predictability<\/h4>\n<p>Pure functions are a core concept of functional programming, and they are incredibly useful. We say that a function is pure when it always returns the same result given the same input and it doesn\u2019t cause side-effects.<\/p>\n<p>Because a function can't do anything more than taking a value, processing that value, and returning the result \u2014 we can get more predictable programs.<\/p>\n<h4>Write What, Not How<\/h4>\n<p>Functional languages are declarative languages, it means that we can describe a process without having to worry about all the details of how the process is done. The consequences of having a clear view of the purpose of our code can be very positive because you can understand more easily <em>what the program does<\/em> without the implementation noise of <em>how it is done<\/em>.<\/p>\n<h4>Modularity and Composability<\/h4>\n<p>The principle of \"Divide and conquer\" is a common practice in functional programming.  We split complex problems into several straightforward ones, creating a solution for each one and then combine them to solve the entire problem; By dividing our programs into small functions, we can increase reusability and maintainability.<\/p>\n<h4>Discipline<\/h4>\n<p>Pure functional languages motivate programmers to think better about the programs they are building. From simple <a href=\"https:\/\/en.wikipedia.org\/wiki\/Type_signature\">type annotations<\/a> and mechanisms to control side-effects to complete architectures, like in Elm.<\/p>\n<p>Although the initial development time can increase with such restrictions, the advantages in maintainability can compensate the effort.<\/p>\n<h3>Elm: A Functional Programming Language for the web<\/h3>\n<p>Elm is a relatively new programming language to build web applications created by Evan Czaplicki in 2012 as part of his thesis about <a href=\"http:\/\/elm-lang.org\/assets\/papers\/concurrent-frp.pdf\">Concurrent FRP for Functional GUIs<\/a>. <\/p>\n<p>Because it's targeted to the web\u2014and browsers only understand a limited set of languages\u2014the code that you write in Elm is compiled to HTML, CSS, and JS.<\/p>\n<h4>Immutable by design<\/h4>\n<p>All values on Elm are immutable, which means that once you have <em>something<\/em>, it will stay the same unless you create a new <em>something<\/em> as a copy.<\/p>\n<p>The simplest advantage\u2014because we don\u2019t have to keep mutations in our head\u2014reading code becomes a lot easier; when we see a value we can be sure it will stay the same. Also, you don't have to worry about runtime errors related to unexpected values because of mutation. <\/p>\n<h4>Static Types<\/h4>\n<p>Static types are an excellent way to document systems. You can know quickly what a function does and its domain just by looking at the type definition. Type systems allow us to define exactly the kind of value that a function takes and returns.<\/p>\n<p>But types are not only useful when they are read by developers, they also allow for better tools (like debuggers and testers) that increase the soundness of our code. Also, they prevent us from doing impossible computations, and by consequence, keeping us away from a lot of potential runtime errors.<\/p>\n<p>Elm has an inferred type system. Which means that you don\u2019t have to write types from the beginning and the compiler will try to infer the appropriate type for your functions, so you don\u2019t get any productivity penalties like in other mainstream languages with types.<\/p>\n<pre rel=\"Elm\"><code>-- Function with its type annotation\r\nsquare : Int -&gt; Int\r\nsquare n = n^2\r\n\r\n-- This also works, because types are inferred\r\nsquare n = n^2<\/code><\/pre>\n<h4>Pure functions<\/h4>\n<p>Pure functions are the core concept of functional programming and produce a huge advantage building reliable and easy-to-maintain systems. Elm functions are pure and they receive inputs and produce new values as output, also, they always return the same result for each input without producing side-effects.<\/p>\n<h4>Subscriptions<\/h4>\n<p>Asynchronous systems require a different approach to programming and Elm handles this by using <a href=\"http:\/\/package.elm-lang.org\/packages\/elm-lang\/core\/5.0.0\/Platform-Sub\">Subscriptions<\/a>. Because there are certain things that we don\u2019t know when they are going to happen \u2014 like user interactions or network responses \u2014 we can subscribe to those events allowing us to act as soon as they occur without having to worry about implementation details.<\/p>\n<h4>Controlled side-effects<\/h4>\n<p>Pure functions are good, and we can try to have pure functions everywhere, but at one point or another, we have to handle interactions of our program with the external world, and we can do this in a controlled way using <a href=\"http:\/\/package.elm-lang.org\/packages\/elm-lang\/core\/latest\/Platform-Cmd\">Commands<\/a>.<\/p>\n<p>Because input and output are also side-effects, if we use strictly pure functions everywhere, we won\u2019t be able to do anything at all. Instead, we identify side-effects, and we make them explicit so that Elm can handle them in the right way for us.<\/p>\n<h4>Compatible with Your Existing Project<\/h4>\n<p>You don't have to build or port a complete project to Elm \u2014 though that would be nice \u2014 you can include certain components made with Elm in an existing project.<\/p>\n<p>Also, is possible to use existing Javascript inside your Elm applications, while keeping all the nice things and guarantees of the language.<\/p>\n<h4>Easy to Test<\/h4>\n<p>What do we get with static types? Awesome tools, including random test generators, where functions can be tested against random inputs depending on the domain of the function (defined by the types).<\/p>\n<p>But probably one of the most exciting Elm features in this area is the fact that we can export the complete state of a program, and with it, we can do things like:<\/p>\n<ul>\n<li>Send it to a library developer to reproduce a bug.<\/li>\n<li>Load it in another browser or device to see how things behave.<\/li>\n<\/ul>\n<p>And all this is done in a secure way, including network calls, thanks to the controlled side-effects using Commands.<\/p>\n<h4>A Better Architecture from the Beginning<\/h4>\n<p>When people started to build projects with Elm, they noticed that a pattern was emerging every time. That was the beginning of the Elm Architecture, <a href=\"https:\/\/github.com\/evancz\/elm-architecture-tutorial\">the de facto way to build Elm applications<\/a>.<\/p>\n<p>Having a solid architecture to build our projects will assure us that we will have things under control even if our program increases in complexity. Also, we have the advantage that every time we take a new existing project, we won\u2019t have a big problem understanding how the code is organized.<\/p>\n<h4>A sane package manager<\/h4>\n<p>Have you ever updated a JavaScript package and after starting your application you notice that something is not working as expected or is not working at all? Well, that\u2019s an inexistent problem in Elm; the package manager automatically handles version numbers depending on the changes made, so you will never get breaking changes in a minor version anymore.<\/p>\n<h4>Beginner-friendly Compiler<\/h4>\n<p>We all know that compilers usually produce unreadable messages, but that is not the case with Elm. Every time you make a mistake, it will point out where the problem is, and an explanation of how to fix it.<\/p>\n<figure id=\"post-251249\" class=\"align-none media-251249\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/ZliBm0l.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/ZliBm0l.png 1634w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/ZliBm0l-300x163.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/ZliBm0l-768x418.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/ZliBm0l-1024x558.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Elm Compiler message<\/figcaption><\/figure>\n<p>You can see more examples in the official Elm blog:<\/p>\n<ul>\n<li><a href=\"http:\/\/elm-lang.org\/blog\/compilers-as-assistants\">Compilers as assistants<\/a><\/li>\n<li><a href=\"http:\/\/elm-lang.org\/blog\/compiler-errors-for-humans\">Compiler error for humans<\/a><\/li>\n<\/ul>\n<h3>Setting Up our Development Environment<\/h3>\n<h4>Installing the Elm Platform<\/h4>\n<p>Installing Elm is a quick process. After <a href=\"https:\/\/nodejs.org\/en\/download\/\">installing NodeJS<\/a>, you can install Elm with NPM directly as other NodeJS packages:<\/p>\n<pre rel=\"CLI\"><code>npm install -g elm<\/code><\/pre>\n<p>Optionally, you can also install Elm using the installers for Mac or Windows. The links are available on the <strong>Install<\/strong> section in the <a href=\"https:\/\/guide.elm-lang.org\/get_started.html#install\">An Introduction to Elm website<\/a>.<\/p>\n<h4>Getting a Text Editor<\/h4>\n<p>Although Elm is a relatively new language, great tools to work with it already exist, especially for <a href=\"https:\/\/atom.io\/\">Atom<\/a> using the <a href=\"https:\/\/atom.io\/packages\/elmjutsu\">Elmjutsu<\/a> package.<\/p>\n<p>But Atom is not the only one, the following editors are also supported:<\/p>\n<ul>\n<li><a href=\"http:\/\/brackets.io\/\">Brackets<\/a><\/li>\n<li><a href=\"https:\/\/www.gnu.org\/s\/emacs\">Emacs<\/a><\/li>\n<li><a href=\"https:\/\/www.jetbrains.com\/idea\/\">IntelliJ<\/a><\/li>\n<li><a href=\"http:\/\/lighttable.com\/\">Light Table<\/a><\/li>\n<li><a href=\"https:\/\/www.sublimetext.com\/\">Sublime Text<\/a><\/li>\n<li><a href=\"http:\/\/www.vim.org\/\">Vim<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/sbrink\/vscode-elm\">VS Code<\/a><\/li>\n<\/ul>\n<p>You can pick the one you like the most. The installation process for those editors is outside of the scope of this article; I would recommend to check out their respective website.<\/p>\n<h3>Introduction to the Elm Platform<\/h3>\n<p>The Elm Platform: four tools that will be essential for the development of our Elm projects. A <em>REPL<\/em> to test small fragments of code. <em>Reactor<\/em>, a server that will allow us to see immediately our projects in the browser. <em>Make<\/em>, a tool to build our projects and the <em>package manager<\/em> that will provide us access to modules written by other people. Let\u2019s take a look at these tools to see what we can do with them.<\/p>\n<h4>The Read\u2013Eval\u2013Print Loop<\/h4>\n<p>The <a href=\"https:\/\/github.com\/elm-lang\/elm-repl\">Elm REPL<\/a> is a tool to evaluate simple Elm code within a command line without having to create a file. As the name indicates, it first reads the input, then evaluates it and finally prints the result. This tool can be very useful to explore the language or to quickly execute a small piece of code.<\/p>\n<p>To start using the REPL just open a terminal and execute the following command:<\/p>\n<pre rel=\"CLI\"><code>elm-repl<\/code><\/pre>\n<p>You should get something similar to this:<\/p>\n<pre rel=\"CLI\"><code>---- elm-repl 0.18.0 -----------------------------------------------------------\r\n :help for help, :exit to exit, more at &lt;https:\/\/github.com\/elm-lang\/elm-repl&gt;\r\n--------------------------------------------------------------------------------\r\n&gt;<\/code><\/pre>\n<p>We can write Elm code next to the <code>&gt;<\/code> symbol. As a simple test, let\u2019s try to build a <code>square<\/code> function to get the result of multiplying a number by itself. We can do this by writing the following and pressing Enter.<\/p>\n<pre rel=\"Elm\"><code>square n = n * n<\/code><\/pre>\n<p>Now we have a <code>square<\/code> function available in the current environment that we can use in future evaluations, for example, try typing:<\/p>\n<pre rel=\"Elm\"><code>square 5<\/code><\/pre>\n<p>And it should return <code>25 : number<\/code>. The first part is our result and the rest is the <em>type<\/em> of the result which is a <code>number<\/code>.<\/p>\n<p>You can also write more complex code. Let\u2019s write a simple factorial function:<\/p>\n<pre rel=\"Elm\"><code>factorial number = \\\r\n  if number == 0 then 1 \\\r\n  else number * factorial(number-1)<\/code><\/pre>\n<p>To write multiple lines you have to add a <code>\\<\/code> at the end of each one to tell the interpreter that you want to write more.<\/p>\n<p>After typing the first line and pressing enter, a <code>|<\/code> character will appear, then you can write the next line of your code. Be careful with the indentation, it will return an error if you don\u2019t add it; you have to add at least one space.<\/p>\n<p>There are four commands that you can use directly when the REPL is active:<\/p>\n<ul>\n<li><code>:help<\/code> Will show all the available commands.<\/li>\n<li><code>:flags<\/code> You can modify options for the Elm compiler.<\/li>\n<li><code>:reset<\/code> Restarts your current session without having to close and open the REPL again.<\/li>\n<li><code>:exit<\/code> Closes the REPL without having to close the command line window.<\/li>\n<\/ul>\n<h4>Elm Reactor<\/h4>\n<p><a href=\"https:\/\/github.com\/elm-lang\/elm-reactor\">Elm-reactor<\/a> is an interactive development tool that makes it easier to develop Elm programs. It will create a server that will compile your elm code on the fly, and you will be able to see the result directly on the browser.<\/p>\n<p>Let\u2019s see how we would use Reactor with a sample project. For this, you can clone the <a href=\"https:\/\/github.com\/evancz\/elm-architecture-tutorial\">Elm Architecture Tutorial<\/a> with Git and once you are in the project directory, execute the following command:<\/p>\n<pre rel=\"CLI\"><code>elm-reactor<\/code><\/pre>\n<p>A server will be created, and you will be able to access to it at http:\/\/localhost:8000 in your web browser.<\/p>\n<p>You will see a navigation page that will contain the files in the directory of the project. Go to <code>examples\/01-button.elm<\/code> and wait a moment while the file is compiled. Once if finished, you will be able to see a little widget to increase and reduce a number with two buttons.<\/p>\n<p>That's how we can see our project without producing the final files, very useful for the development process.<\/p>\n<p>Two useful flags can be used with the <code>elm-reactor<\/code> command, to see the complete list you can run <code>elm-reactor --help<\/code>.<\/p>\n<ul>\n<li><code>-a<\/code> Sets a custom address for the server.<\/li>\n<li><code>-p<\/code> Sets a different port for the server (<code>:8000<\/code> by default).<\/li>\n<\/ul>\n<p>For example:<\/p>\n<pre rel=\"CLI\"><code>elm-reactor -a 0.0.0.0 -p 3000<\/code><\/pre>\n<p>Although Reactor is a very useful tool for the development of Elm applications, eventually you will get to the point where you will want to put your project in production, there is a tool for this job included in the Elm Platform: Make.<\/p>\n<h4>Elm Make<\/h4>\n<p>Once your project is ready for the world, you will have to translate the Elm code to something web browsers understand, HTML, CSS and JavaScript. We use a tool called <a href=\"https:\/\/github.com\/elm-lang\/elm-make\">elm-make<\/a> for this task, it will take Elm files and will produce native files for the web.<\/p>\n<p>For example, let\u2019s try to compile the example we used in the previous section. Go to the <code>examples<\/code> directory in the <a href=\"https:\/\/github.com\/evancz\/elm-architecture-tutorial\">Elm Architecture Tutorial<\/a> project and execute the following command:<\/p>\n<pre rel=\"CLI\"><code>elm-make 01-button.elm --output=01-button.html<\/code><\/pre>\n<p>When you execute this command, it will ask you to approve the installation of some packages, write <code>Y<\/code> and hit Enter, now let\u2019s wait until the compilation is completed.<\/p>\n<p>This will build our <code>01-button.elm<\/code> file into a <code>01-button.html<\/code> that can be open directly in the browser. If you go to the directory where <code>01-button.elm<\/code> file is located, you will also find the new HTML file. You can open that file with your browser, and you will see the same result as in the previous section, but this time, we can see it without having to use any Elm tool; it\u2019s plain HTML and Javascript.<\/p>\n<p>Now we can distribute that file in the way we want, and any web browser will be able to open it.<\/p>\n<h4>The Elm Package Manager<\/h4>\n<p>When you start building non-trivial applications, you will soon find that writing everything by yourself is impractical. Usually, for the most common tasks, you will find packages already written by other people that you can use in your projects. For this, we use the <a href=\"https:\/\/github.com\/elm-lang\/elm-package\">Elm package manager<\/a>, a tool to install and publish Elm packages.<\/p>\n<p>As we saw in the previous section when we tried to compile our Elm file, the compiler asks us if we wanted to install the missing packages, that\u2019s the job of the package manager in practice.<\/p>\n<p>This tool is available as <code>elm-package<\/code> in your command line, and to install a package you can execute the following:<\/p>\n<pre rel=\"CLI\"><code>elm-package install &lt;package-name&gt;<\/code><\/pre>\n<p>Other commands include:<\/p>\n<ul>\n<li><code>publish<\/code>: Adds the package to the central catalog.<\/li>\n<li><code>bump<\/code>: Updates de version number of the package depending on changes.<\/li>\n<li><code>diff<\/code>: A utility to view the differences between package versions.<\/li>\n<\/ul>\n<h4>Elm Format<\/h4>\n<p>Elm Format is not part of the Elm Platform but it is an incredibly useful tool worth mentioning. It will format your source code according to the standard style guide, also you can set up your editor to do it automatically every time you save a .elm file.<\/p>\n<p>You can check out Elm format on its <a href=\"https:\/\/github.com\/avh4\/elm-format\">Github repository<\/a>.<\/p>\n<h3>Getting a Taste of Elm<\/h3>\n<p>Create a new folder somewhere on your computer and open it with your IDE or text editor. We will create a <code>first-application.elm<\/code> file, where we are going to include the following code:<\/p>\n<pre rel=\"Elm\"><code>import Html exposing (Html, button, div, text)\r\nimport Html.Events exposing (onClick)\r\n\r\nmain =\r\n  Html.beginnerProgram { model = model, view = view, update = update }\r\n\r\n-- MODEL\r\n\r\ntype alias Model = Int\r\n\r\nmodel : Model\r\nmodel =\r\n  0\r\n\r\n-- UPDATE\r\n\r\ntype Msg = Increment | Decrement\r\n\r\nupdate : Msg -&gt; Model -&gt; Model\r\nupdate msg model =\r\n  case msg of\r\n    Increment -&gt;\r\n      model + 1\r\n\r\n    Decrement -&gt;\r\n      model - 1\r\n\r\n-- VIEW\r\n\r\nview : Model -&gt; Html Msg\r\nview model =\r\n  div []\r\n    [ button [ onClick Decrement ] [ text \"-\" ]\r\n    , div [] [ text (toString model) ]\r\n    , button [ onClick Increment ] [ text \"+\" ]\r\n    ]<\/code><\/pre>\n<p>Don't worry about the meaning of that code just yet; we will use it just to test our setup. <\/p>\n<p>The first thing we should check is that we are getting the syntax highlighting in our editor, if you just see plain text, check the corresponding section of this article again. <\/p>\n<p>Next, we are going to test the compilation of Elm code using Reactor. In the terminal, go to the project directory and execute the following command:<\/p>\n<pre rel=\"CLI\"><code>elm reactor<\/code><\/pre>\n<p>A message should appear with something like this:<\/p>\n<pre rel=\"CLI\"><code>elm-reactor 0.18.0                                                                                                                                                                   \r\nListening on http:\/\/localhost:8000\/  <\/code><\/pre>\n<p>That means that it is working and we have a web server listening on the port <code>8000<\/code> in <em>localhost<\/em>. If we open that address in our web browser we should see a file navigator, click in the <code>first-application.elm<\/code> file and it will build our project. Once it is ready, we will see a page with a little widget with a number and two buttons. That's the result of our code.<\/p>\n<figure id=\"post-251247\" class=\"align-none media-251247\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/u1tO6bo.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/u1tO6bo.png 1528w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/u1tO6bo-300x168.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/u1tO6bo-768x429.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/u1tO6bo-1024x572.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Elm example: Number counter<\/figcaption><\/figure>\n<h3>Conclusion<\/h3>\n<p>We have explored some of the advantages of functional programming and the Elm language, and we are now more familiar with the platform that we will use to build our projects.<\/p>\n<p>To get more detailed information about Elm, you can check out the book <a href=\"https:\/\/www.gitbook.com\/book\/evancz\/an-introduction-to-elm\/details\">An Introduction to Elm<\/a> by Evan Czaplicki.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>This is a guide about the programming language <a href=\"http:\/\/elm-lang.org\/\">Elm<\/a>. But instead of jumping right into the how-to&#8217;s and syntax, it introduces why you might be compelled by functional programming, a philosophy behind Elm.<\/p>\n","protected":false},"author":247747,"featured_media":251244,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1126,1127],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251242"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/247747"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=251242"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/251242\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/251244"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=251242"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=251242"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=251242"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249797,"date":"2017-02-07T10:26:13","date_gmt":"2017-02-07T17:26:13","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249797"},"modified":"2017-02-07T10:26:13","modified_gmt":"2017-02-07T17:26:13","slug":"basic-shapes-path-never-twain-shall-meet","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/basic-shapes-path-never-twain-shall-meet\/","title":{"rendered":"Basic Shapes &#038; Path&#8230; Never the Twain Shall Meet?"},"content":{"rendered":"<p>There are some values available in CSS that allow shapes to be drawn. For example, there is a <code>circle()<\/code> function that is a valid value for a couple of CSS properties. \"Drawn\" might not be the right word, though. It's not like in SVG where you can create a <code>&lt;circle&gt;<\/code> element and it will literally draw a circle. <\/p>\n<p><!--more--><\/p>\n<p>These shapes in CSS are for other things. Namely: <code>clip-path<\/code>, which is for making clipping masks, and <code>shape-outside<\/code>, for flowing text around shapes.<\/p>\n<p>There are some other CSS properties that use SVG-like shapes for doing what they do. For example, <code>offset-path<\/code> is part of animating elements along vector paths, using the <code>path()<\/code> function. Paths are awesome. They are the ultimate drawing element, as they <a href=\"https:\/\/css-tricks.com\/svg-path-syntax-illustrated-guide\/\">can draw anything<\/a>, and all the other shapes are essentially syntactic sugar for paths.<\/p>\n<h3>What are the basic shapes?<\/h3>\n<p>There are four <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/CSS\/basic-shape\">basic shapes<\/a>:<\/p>\n<ul>\n<li><code>polygon()<\/code><\/li>\n<li><code>circle()<\/code><\/li>\n<li><code>ellipse()<\/code><\/li>\n<li><code>inset()<\/code><\/li>\n<\/ul>\n<h3>What are paths?<\/h3>\n<p>Paths come from SVG. They have <a href=\"https:\/\/css-tricks.com\/svg-path-syntax-illustrated-guide\/\">a special syntax<\/a> that allows them to draw anything.<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;path d=\"M 25,100 C 25,150 75,150 75,100 S 100,25 150,75\" \/&gt;<\/code><\/pre>\n<pre rel=\"CSS\"><code class=\"language-css\">path(\"M 25,100 C 25,150 75,150 75,100 S 100,25 150,75\");<\/code><\/pre>\n<h3>This is where things get kinda weird<\/h3>\n<ul>\n<li>The <code>clip-path<\/code> and <code>shape-outside<\/code> properties can take all the \"basic shapes\" like <code>circle()<\/code> and <code>polygon()<\/code>, but not <code>path().<\/code><\/li>\n<li>The <code>offset-path<\/code> properties can take <code>path()<\/code>, but not the \"basic shapes\".<\/li>\n<li>You can control the <code>d<\/code> attribute of a <code>&lt;path&gt;<\/code> through CSS also, but not the attributes of many other SVG elements.<\/li>\n<\/ul>\n<p>I'm not really sure why any of this is, and I'm sure things will change in time, but it's good to know about.<\/p>\n<p>Let's elaborate.<\/p>\n<h3><code>clip-path<\/code> allows Basic Shapes (but not <code>path()<\/code>)<\/h3>\n<p>Say you wanted to clip square avatars into polygons, for a fun design. You can! The image is might be an HTML element like:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;img src=\"avatar.jpg\" alt=\"User Avatar\" class=\"avatar\"&gt;<\/code><\/pre>\n<pre rel=\"CSS\"><code class=\"language-css\">.avatar {\r\n  clip-path: polygon(0% 5%, 100% 0%, 100% 85%, 65% 80%, 75% 100%, 40% 80%, 0% 75%);\r\n}<\/code><\/pre>\n<p data-height=\"411\" data-theme-id=\"1\" data-slug-hash=\"QdBbog\" data-default-tab=\"result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Clipped Avatars\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/QdBbog\/\">Clipped Avatars<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>But let's say you want to clip the avatar like this: <\/p>\n<figure id=\"post-251080\" class=\"align-none media-251080\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/round-clip-path.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/round-clip-path.png 500w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/round-clip-path-300x252.png 300w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Well, you can't. Not directly in CSS anyway. Those curves require a <code>path<\/code>, and clip-path don't do <code>path<\/code>. Fortunatly, clip-path does take a <code>url()<\/code>, which will accept the ID of a <code>&lt;clipPath&gt;<\/code> element.<\/p>\n<p data-height=\"383\" data-theme-id=\"1\" data-slug-hash=\"VPBQKE\" data-default-tab=\"result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Clipped Avatars\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/VPBQKE\/\">Clipped Avatars<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3><code>offset-path<\/code> allows path (but not Basic Shapes)<\/h3>\n<p>Say we want to move an object along the outside of that speech bubble shape we just used. <a href=\"https:\/\/css-tricks.com\/almanac\/properties\/o\/offset-path\/\">The <code>offset-path<\/code> property<\/a> is just for that. <\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;div class=\"move-me\"&gt;&lt;\/div&gt;<\/code><\/pre>\n<pre rel=\"CSS\"><code class=\"language-css\">.move-me {\r\n  offset-path: path(\"M100.5,39.47C100.5,58.3,83.36,74,60.58,77.64l16.85,19.9L33.94,76.25C14.47,70.92.5,56.47.5,39.47c0-21.52,22.39-39,50-39S100.5,17.95,100.5,39.47Z\");\r\n  animation: move 3s linear infinite;\r\n}\r\n@keyframes move {\r\n  100% { motion-offset: 100%;}\r\n}<\/code><\/pre>\n<p data-height=\"242\" data-theme-id=\"1\" data-slug-hash=\"ggjvGV\" data-default-tab=\"result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"offset-path on path\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/ggjvGV\/\">offset-path on path<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>But what if you want to move the element in a circle? The basic shape version of a circle has a super easy syntax, like <code>circle(50% at 50% 50%)<\/code>; But unfortunately, the basic shapes aren't supported. <a href=\"https:\/\/drafts.fxtf.org\/motion-1\/\">The spec<\/a> allows for them, but they don't work. It kinda makes sense, because... how would you define which direction to travel? <\/p>\n<p>You can still animate in a circle, because the all-powerful path can draw a circle, like:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.move-me {\r\n  \/* a circle *\/\r\n  offset-path: path(\"M100,50a50,50,0,1,1-50-50A50,50,0,0,1,100,50Z\");\r\n  animation: move 3s linear infinite;\r\n}\r\n@keyframes move {\r\n  100% { motion-offset: 100%;}\r\n}<\/code><\/pre>\n<p>And those commands dictate a direction naturally. There are also <a href=\"http:\/\/lea.verou.me\/2012\/02\/moving-an-element-along-a-circle\/\">other ways<\/a> to animate in a circle.<\/p>\n<h3><code>shape-outside<\/code> allows Basic Shapes (but not <code>path()<\/code>)<\/h3>\n<p>Say you wanted to wrap some text around an egg shape, because I dunno, you were setting some text of Alice talking to Humpty Dumpty. The egg shape is a good excuse to use the <code>ellipse()<\/code> Basic Shape.<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;div class=\"page-wrap\"&gt;\r\n  &lt;div class=\"egg\"&gt;&lt;\/div&gt;\r\n  &lt;p&gt;\"I don't know what you mean by 'glory,'\" Alice said.&lt;\/p&gt;\r\n  &lt;p&gt;Humpty Dumpty smiled contemptuously. \"Of course you don't\u2014till I tell you. I meant 'there's a nice knock-down argument for you!'\"&lt;\/p&gt;\r\n\r\n ...<\/code><\/pre>\n<pre rel=\"CSS\"><code class=\"language-css\">.egg {\r\n  float: left;\r\n  shape-outside: ellipse(120px 160px at 50% 50%);\r\n  width: 280px;\r\n  height: 320px;\r\n}<\/code><\/pre>\n<p>We'd probably set an identical <code>clip-path<\/code> (to actually make the egg shape) and colorize it:<\/p>\n<p data-height=\"489\" data-theme-id=\"1\" data-slug-hash=\"QdBXyg\" data-default-tab=\"result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Shape Outside Egg\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/QdBXyg\/\">Shape Outside Egg<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>But what if you wanted to make some text wrap around a <em>curved<\/em> shape, like shown here in Illustrator:<\/p>\n<figure><img src=\"https:\/\/css-tricks.com\/images\/wrap-curve.gif\" alt=\"\"><figcaption>Text Wrap in Adobe Illustrator<\/figcaption><\/figure>\n<p>Unfortunately, <code>shape-outside<\/code> doesn't take <code>path()<\/code>, so you can't. But you kinda can. It does take <code>url()<\/code>, in which you can use to link to an image (doesn't even have to be SVG, but SVG makes good sense). The image can have a nice curvy path, like we're shooting for:<\/p>\n<p data-height=\"471\" data-theme-id=\"1\" data-slug-hash=\"OWwKqr\" data-default-tab=\"result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Wrap Text Around Curve\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/OWwKqr\/\">Wrap Text Around Curve<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>The <code>url()<\/code> can even <a href=\"http:\/\/codepen.io\/enxaneta\/pen\/LbdjZR\">be a data URL<\/a>. Also note that any element using <code>shape-outside<\/code> must be <a href=\"https:\/\/css-tricks.com\/all-about-floats\/\">floated<\/a>, a limitation that might be resolved with <a href=\"https:\/\/drafts.csswg.org\/css-exclusions\/\">CSS Exclusions<\/a>.<\/p>\n<h3><code>&lt;path&gt;<\/code> takes <code>path()<\/code><\/h3>\n<p>Here's one that starts out making logical sense. Say you have a path:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;svg&gt;\r\n &lt;path d=\" ... \" \/&gt;\r\n&lt;\/svg&gt;<\/code><\/pre>\n<p>You can change the shape of that path through CSS, say through a hover:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">svg:hover path {\r\n  d: path(\" ... \");\r\n}<\/code><\/pre>\n<p data-height=\"293\" data-theme-id=\"1\" data-slug-hash=\"ggdYLE\" data-default-tab=\"result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Change path on hover\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/ggdYLE\/\">Change path on hover<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>You can even <a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/NRwANp\">transition the shape<\/a>, if it happens to be path data with the same amount of points.<\/p>\n<p>It does get a bit confusing though. Say you have a <code>&lt;polygon&gt;<\/code> instead.<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;svg&gt;\r\n &lt;polygon points=\" ... \" \/&gt;\r\n&lt;\/svg&gt;<\/code><\/pre>\n<p>How do you update it with CSS?<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">polygon {\r\n  \/* Nope *\/\r\n  points: \" ... \";\r\n\r\n  \/* Nope *\/\r\n  points: points(\" ... \");\r\n\r\n  \/* Nope *\/\r\n  points: polygon(\" ... \");\r\n}<\/code><\/pre>\n<p>There isn't a way, that I know of. Which seems weird as polygon is otherwise supported all over the place. I imagine part of problem is that the <code>polygon()<\/code> function is different from the <code>points<\/code> attribute. The <code>polygon()<\/code> function takes percentages and numbers with <em>units<\/em> in CSS, whereas the <code>points<\/code> attribute takes <em>unitless<\/em> numbers (like everything in SVG). They are different beasts, and that overlap is awkward.<\/p>\n<p>It's also not that SVG shapes that overlap with Basic Shapes can't be altered. All of <code>&lt;circle&gt;<\/code>'s attributes, for example, can be altered with CSS:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">svg:hover circle {\r\n  cx: 40;\r\n  cy: 40;\r\n  r: 40;\r\n}<\/code><\/pre>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"ggdORM\" data-default-tab=\"css,result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Altering Circle Attributes\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/ggdORM\/\">Altering Circle Attributes<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Long story short: there is usually a way to get done what you want to get done, but it's confusing what is\/isn't supported where.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>There are some values available in CSS that allow shapes to be drawn. For example, there is a circle() function that is a valid value for a couple of CSS properties. &#8220;Drawn&#8221; might not be the right word, though. It&#8217;s not like in SVG where you can create a &lt;circle&gt;&lt;\/circle&gt; element and it will literally [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":251080,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1123,1122,580,862],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249797"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249797"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249797\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/251080"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249797"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249797"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249797"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250931,"date":"2017-02-06T05:59:38","date_gmt":"2017-02-06T12:59:38","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250931"},"modified":"2017-02-06T05:59:38","modified_gmt":"2017-02-06T12:59:38","slug":"really-makes-static-site-generator","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/really-makes-static-site-generator\/","title":{"rendered":"What Really Makes a Static Site Generator?"},"content":{"rendered":"<p>I talk a lot about static site generators, but always about <em>using<\/em> static site generators. In most cases, it may seem like a black box. I create a template and some Markdown and out comes a fully formed HTML page. Magic!<\/p>\n<p>But what exactly <em>is<\/em> a static site generator? What goes on inside that black box? What kind of voodoo is this?<\/p>\n<p>In this post, I want to explore all of the parts that make up a static site generator. First, we'll discuss these in a general fashion, but then we'll take a closer look at some actual code by delving deep inside <a href=\"https:\/\/harpjs.com\/\">HarpJS<\/a>. So, put your adventurer's cap on and let's start exploring.<\/p>\n<p><!--more--><\/p>\n<p><strong>Why Harp?<\/strong> For two reasons. The first is that HarpJS is, by design, a very simple static site generator. It doesn't have a lot of the features that might cause us to get lost exploring a more comprehensively full-featured static site generator (like <a href=\"http:\/\/jekyllrb.com\/\">Jekyll<\/a> for instance). The second, much more practical, reason is that I know JavaScript and don't know Ruby very well.<\/p>\n<h3>The Basics of a Static Site Generator<\/h3>\n<p>The truth is, a static site generator is a pretty simple concept. The key ingredients to a static site generator are typically:<\/p>\n<ul>\n<li>A template language(s) for creating page\/post templates<\/li>\n<li>A lightweight markup language (typically Markdown) for authoring content<\/li>\n<li>A structure and markup (often YAML) for providing configuration and metadata (e.g. \"<a href=\"https:\/\/jekyllrb.com\/docs\/frontmatter\/\">front matter<\/a>\")<\/li>\n<li>A set of rules or structure for organizing and naming files that are exported\/compiled, files that are not and how these files will be handled (e.g. frequently prefacing a file or folder with an underscore means that it is not exported into the final site files or all posts go in a posts folder)<\/li>\n<li>A means of compiling templates and markup into HTML (frequently support for CSS or JavaScript preprocessors is also included)<\/li>\n<li>A local server for testing.<\/li>\n<\/ul>\n<p>That's it. If you're thinking, \"Hey... I could build that!\" you are probably correct. Things start to get complicated though when you start to expand the functionality, as most static site generators do.<\/p>\n<p>So, let's look at how Harp handles this.<\/p>\n<h3>Getting to the Harp of the Matter<\/h3>\n<p>Let's look at the basics of how Harp handles the key ingredients described above. Harp offers more than this handful of functionality, but, for the sake of our examination, we'll stick to those items.<\/p>\n<p>First, let's discuss the basics of Harp.<\/p>\n<h3>Harp Basics<\/h3>\n<p>Harp supports <a href=\"https:\/\/pugjs.org\">Jade<\/a> and <a href=\"http:\/\/www.embeddedjs.com\/\">EJS<\/a> (for templating) and Markdown as its lightweight markup language (for content). Note that while Jade is now called Pug, Harp has not officially transitioned in their documentation or code, so we'll stick with Jade here. Harp also offers support for other preprocessing such as Less, Sass, and Stylus for CSS and CoffeeScript for JavaScript.<\/p>\n<p>By default Harp does not require much in the way of configuration or metadata. It tends to favor <a href=\"https:\/\/harpjs.com\/docs\/development\/rules\">convention over configuration<\/a>. However, it allows for specific metadata and configuration using JSON. It differs from many other static site generators in that file metadata is contained outside of the actual file within a `_data.json` file.<\/p>\n<p>While it is configurable to a degree, Harp has certain established guidelines for how to structure files. For example, in a typical application, the files that are served fall within a <code>public<\/code> directory. Also, any file or folder prefaced by an underscore will not be served.<\/p>\n<p>Lastly, Harp offers a basic local web server for testing that includes some configurable options. And, of course, it will compile the finished HTML, CSS and JavaScript files for deployment.<\/p>\n<h4>Let's Look at Harp's Actual Source Code<\/h4>\n<p>Since much of what makes a static site generator are rules and conventions, the code centers around the actual serving and compiling (for the most part). Let's dig in.<\/p>\n<h4>The Server Function<\/h4>\n<p>In Harp, serving your project is usually done by executing <code>harp server<\/code> from the command line. Let's look at the <a href=\"https:\/\/github.com\/sintaxi\/harp\/blob\/master\/lib\/index.js\">code for that function<\/a>:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">exports.server = function(dirPath, options, callback){\r\n  var app = connect()\r\n  app.use(middleware.regProjectFinder(dirPath))\r\n  app.use(middleware.setup)\r\n  app.use(middleware.basicAuth)\r\n  app.use(middleware.underscore)\r\n  app.use(middleware.mwl)\r\n  app.use(middleware.static)\r\n  app.use(middleware.poly)\r\n  app.use(middleware.process)\r\n  app.use(middleware.fallback)\r\n\r\n  return app.listen(options.port || 9966, options.ip, function(){\r\n    app.projectPath = dirPath\r\n    callback.apply(app, arguments)\r\n  })\r\n}<\/code><\/pre>\n<p>While the function looks simple, obviously there is a ton going on within <a href=\"https:\/\/github.com\/sintaxi\/harp\/blob\/master\/lib\/middleware.js\">middleware<\/a> that isn't illustrated here.<\/p>\n<p>The rest of this function opens up a server with the options you specify (if any). Those options include a port, an IP to bind to and a directory. By default the port is 9000 (not 9966 as you might guess by the code), the directory is the current one (i.e. the one Harp is running in) and the IP is <code>0.0.0.0<\/code>.<\/p>\n<div class=\"explanation\">The details for these defaults are in the <a href=\"https:\/\/github.com\/sintaxi\/harp\/blob\/master\/bin\/harp\">command line application source<\/a>.<\/div>\n<h4>The Compiler Function<\/h4>\n<p>Staying within <a href=\"https:\/\/github.com\/sintaxi\/harp\/blob\/master\/lib\/index.js\">index.js<\/a>, let's take a look at the <code>compile<\/code> function next.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">exports.compile = function(projectPath, outputPath, callback){\r\n\r\n  \/**\r\n   * Both projectPath and outputPath are optional\r\n   *\/\r\n\r\n  if(!callback){\r\n    callback   = outputPath\r\n    outputPath = \"www\"\r\n  }\r\n\r\n  if(!outputPath){\r\n    outputPath = \"www\"\r\n  }\r\n\r\n\r\n  \/**\r\n   * Setup all the paths and collect all the data\r\n   *\/\r\n\r\n  try{\r\n    outputPath = path.resolve(projectPath, outputPath)\r\n    var setup  = helpers.setup(projectPath, \"production\")\r\n    var terra   = terraform.root(setup.publicPath, setup.config.globals)\r\n  }catch(err){\r\n    return callback(err)\r\n  }\r\n\r\n\r\n  \/**\r\n   * Protect the user (as much as possible) from compiling up the tree\r\n   * resulting in the project deleting its own source code.\r\n   *\/\r\n\r\n  if(!helpers.willAllow(projectPath, outputPath)){\r\n    return callback({\r\n      type: \"Invalid Output Path\",\r\n      message: \"Output path cannot be greater then one level up from project path and must be in directory starting with `_` (underscore).\",\r\n      projectPath: projectPath,\r\n      outputPath: outputPath\r\n    })\r\n  }\r\n\r\n\r\n  \/**\r\n   * Compile and save file\r\n   *\/\r\n\r\n  var compileFile = function(file, done){\r\n    process.nextTick(function () {\r\n      terra.render(file, function(error, body){\r\n        if(error){\r\n          done(error)\r\n        }else{\r\n          if(body){\r\n            var dest = path.resolve(outputPath, terraform.helpers.outputPath(file))\r\n            fs.mkdirp(path.dirname(dest), function(err){\r\n              fs.writeFile(dest, body, done)\r\n            })\r\n          }else{\r\n            done()\r\n          }\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  \/**\r\n   * Copy File\r\n   *\r\n   * TODO: reference ignore extensions from a terraform helper.\r\n   *\/\r\n  var copyFile = function(file, done){\r\n    var ext = path.extname(file)\r\n    if(!terraform.helpers.shouldIgnore(file) &amp;&amp; [\".jade\", \".ejs\", \".md\", \".styl\", \".less\", \".scss\", \".sass\", \".coffee\"].indexOf(ext) === -1){\r\n      var localPath = path.resolve(outputPath, file)\r\n      fs.mkdirp(path.dirname(localPath), function(err){\r\n        fs.copy(path.resolve(setup.publicPath, file), localPath, done)\r\n      })\r\n    }else{\r\n      done()\r\n    }\r\n  }\r\n\r\n  \/**\r\n   * Scan dir, Compile Less and Jade, Copy the others\r\n   *\/\r\n\r\n  helpers.prime(outputPath, { ignore: projectPath }, function(err){\r\n    if(err) console.log(err)\r\n\r\n    helpers.ls(setup.publicPath, function(err, results){\r\n      async.each(results, compileFile, function(err){\r\n        if(err){\r\n          callback(err)\r\n        }else{\r\n          async.each(results, copyFile, function(err){\r\n            setup.config['harp_version'] = pkg.version\r\n            delete setup.config.globals\r\n            callback(null, setup.config)\r\n          })\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n}<\/code><\/pre>\n<p>The first portion defines the output path as specified by the call to <code>harp compile<\/code> via the command line (<a href=\"https:\/\/github.com\/sintaxi\/harp\/blob\/master\/bin\/harp\">source here<\/a>). The default, as you can see, is <code>www<\/code>. The callback is a callback function passed by the command line utility which is not configurable.<\/p>\n<p>The next part starts by calling the <code>setup<\/code> function in the <a href=\"https:\/\/github.com\/sintaxi\/harp\/blob\/master\/lib\/helpers.js\">helpers module<\/a>. For the sake of brevity, we won't go into the specific code of the function (feel free to look for yourself), but essentially it reads the site configuration (i.e. <code>harp.json<\/code>).<\/p>\n<p>You may also notice a call to something called <code>terraform<\/code>. This will come up again within this function. <a href=\"https:\/\/github.com\/sintaxi\/terraform\">Terraform<\/a> is actually a separate project required by Harp that is the basis of its <a href=\"https:\/\/launchschool.com\/blog\/rails-asset-pipeline-best-practices\">asset pipeline<\/a>. The asset pipeline is where the hard work of compiling and building the finished site gets done (we'll look at Terraform code in a little bit).<\/p>\n<p>The next portion of code, as it states, tries to prevent you from specifying an output directory that would inadvertently overwrite your source code (which would be bad as you'd lose any work since your last commit).<\/p>\n<p>The <code>compileFile<\/code> and <code>copyFile<\/code> functions are fairly self-explanatory. The <code>compileFile<\/code> function relies on Terraform to do the actual compilation. Both of these functions drive the <code>prime<\/code> function which uses a helper function (<code>fs<\/code>) to walk the directories, compiling or copying files as necessary in the process.<\/p>\n<h4>Terraform<\/h4>\n<p>As I discussed, Terraform does the grunt work for compiling the Jade, Markdown, Sass and CoffeeScript into HTML, CSS and JavaScript (and assembling these pieces as defined by Harp). Terraform is made up of a number of files that define its processors for JavaScript, CSS\/stylesheets, and templates (which, in this case, includes Markdown).<\/p>\n<figure id=\"post-250967\" class=\"align-none media-250967\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/terraform-1.jpg\" alt=\"\" style=\"width: 250px;\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/terraform-1.jpg 250w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/terraform-1-203x300.jpg 203w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Within each of these folders is a <code>processors<\/code> folder that contains the code for each specific processor that Terraform (i.e. Harp) supports. For example, in the templates folder are files that form the basis for compiling EJS, Jade, and Markdown files.<\/p>\n<figure id=\"post-250936\" class=\"align-none media-250936\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/terraform_processors.png\" alt=\"\" \/><\/figure>\n<p>I won't delve into the code for each of these, but, for the most part, they rely upon external npm modules that handle the supported processor. For example, for Markdown support, it depends upon <a href=\"https:\/\/www.npmjs.com\/package\/marked\">Marked<\/a>.<\/p>\n<p>The core logic of Terraform is contained in its <code>render<\/code> function.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">\/**\r\n    * Render\r\n    *\r\n    * This is the main method to to render a view. This function is\r\n    * responsible to for figuring out the layout to use and sets the\r\n    * `current` object.\r\n    *\r\n    *\/\r\n\r\nrender: function(filePath, locals, callback){\r\n\r\n    \/\/ get rid of leading slash (windows)\r\n    filePath = filePath.replace(\/^\\\\\/g, '')\r\n\r\n    \/\/ locals are optional\r\n    if(!callback){\r\n    callback = locals\r\n    locals   = {}\r\n    }\r\n\r\n\r\n    \/**\r\n    * We ignore files that start with underscore\r\n    *\/\r\n\r\n    if(helpers.shouldIgnore(filePath)) return callback(null, null)\r\n\r\n\r\n    \/**\r\n    * If template file we need to set current and other locals\r\n    *\/\r\n\r\n    if(helpers.isTemplate(filePath)) {\r\n\r\n    \/**\r\n        * Current\r\n        *\/\r\n    locals._ = lodash\r\n    locals.current = helpers.getCurrent(filePath)\r\n\r\n\r\n    \/**\r\n        * Layout Priority:\r\n        *\r\n        *    1. passed into partial() function.\r\n        *    2. in `_data.json` file.\r\n        *    3. default layout.\r\n        *    4. no layout\r\n        *\/\r\n\r\n    \/\/ 1. check for layout passed in\r\n    if(!locals.hasOwnProperty('layout')){\r\n\r\n        \/\/ 2. _data.json layout\r\n        \/\/ TODO: Change this lookup relative to path.\r\n        var templateLocals = helpers.walkData(locals.current.path, data)\r\n\r\n        if(templateLocals &amp;&amp; templateLocals.hasOwnProperty('layout')){\r\n        if(templateLocals['layout'] === false){\r\n            locals['layout'] = null\r\n        } else if(templateLocals['layout'] !== true){\r\n\r\n            \/\/ relative path\r\n            var dirname = path.dirname(filePath)\r\n            var layoutPriorityList = helpers.buildPriorityList(path.join(dirname, templateLocals['layout'] || \"\"))\r\n\r\n            \/\/ absolute path (fallback)\r\n            layoutPriorityList.push(templateLocals['layout'])\r\n\r\n            \/\/ return first existing file\r\n            \/\/ TODO: Throw error if null\r\n            locals['layout'] = helpers.findFirstFile(root, layoutPriorityList)\r\n\r\n        }\r\n        }\r\n\r\n        \/\/ 3. default _layout file\r\n        if(!locals.hasOwnProperty('layout')){\r\n        locals['layout'] = helpers.findDefaultLayout(root, filePath)\r\n        }\r\n\r\n        \/\/ 4. no layout (do nothing)\r\n    }\r\n\r\n    \/**\r\n        * TODO: understand again why we are doing this.\r\n        *\/\r\n\r\n    try{\r\n        var error  = null\r\n        var output = template(root, templateObject).partial(filePath, locals)\r\n    }catch(e){\r\n        var error  = e\r\n        var output = null\r\n    }finally{\r\n        callback(error, output)\r\n    }\r\n\r\n    }else if(helpers.isStylesheet(filePath)){\r\n    stylesheet(root, filePath, callback)\r\n    }else if(helpers.isJavaScript(filePath)){\r\n    javascript(root, filePath, callback)\r\n    }else{\r\n    callback(null, null)\r\n    }\r\n\r\n}<\/code><\/pre>\n<p>(If you were reading all this code closely, you likely noticed TODO's, typos, and even a funny \"understand again why we are doing this\" comment. That's real life coding!)<\/p>\n<p>The majority of the code in the <code>render<\/code> function is about handling templates. Things like CoffeeScript and Sass fundamentally render on a one-to-one basis. For example, <code>style.scss<\/code> will render to <code>style.css<\/code>. Even if it has includes, that is handled by the renderer. The very end of the <code>render<\/code> function deals with these types of files.<\/p>\n<p><a href=\"https:\/\/harpjs.com\/docs\/development\/layout\">Layouts in Harp<\/a>, on the other hand, are nested within each other in a variety of manners that can even depend upon configuration. For example, <code>about.md<\/code> might be rendered within the default <code>_layout.jade<\/code> (where, exactly, is determined by the use of <code>!= yield<\/code> within that layout). However, <code>_layout.jade<\/code> might include multiple other layouts within itself by way of the <a href=\"https:\/\/harpjs.com\/docs\/development\/partial\">partial support<\/a> in Harp.<\/p>\n<p>Partials are a way of splitting up a template into multiple files. They are especially useful for code reuse. For instance, I might put the site header inside a partial. Partials are important for making layouts within a static site generator maintainable but they also add a good deal of complexity to the logic of compiling templates. This complexity is handled within the <code>partial<\/code> function of the <a href=\"https:\/\/github.com\/sintaxi\/terraform\/blob\/master\/lib\/template\/index.js\">templates processor<\/a>.<\/p>\n<p>Finally, you could override the default layout by specifying a specific layout or no layout at all for a particular file within the <code>_data.json<\/code> configuration file. All of these scenarios are handled (and even numbered) within the logic of the <code>render<\/code> function.<\/p>\n<h3>That's Not So Complicated, Is It?<\/h3>\n<p>To make this digestible, I've skipped over a ton of additional detail. At its core, every static site generator I've ever used (and I've used <a href=\"https:\/\/github.com\/remotesynth\/Static-Site-Samples\">a bunch<\/a>) functions similarly: a set of rules, conventions, and configuration that is run through compilers for the various supported markups. Perhaps that is why there are a <a href=\"https:\/\/staticsitegenerators.net\/\">ridiculous number<\/a> of static site generators out there.<\/p>\n<p>That being said, I wouldn't want to build my own!<\/p>\n<h3>My Report & Book<\/h3>\n<p>If you are interested in learning how to build sites using a static site generator, I've authored a report and co-authored a book for O'Reilly that might interest you. My report, simply titled <a href=\"http:\/\/www.oreilly.com\/web-platform\/free\/static-site-generators.csp\">Static Site Generators<\/a> is free and attempts to establish the history, landscape, and basics behind static site generators. <\/p>\n<figure id=\"post-250974\" class=\"align-none media-250974\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/books-1.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/books-1.jpg 1080w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/books-1-300x182.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/books-1-768x466.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/books-1-1024x622.jpg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>The book that I co-authored with <a href=\"https:\/\/twitter.com\/raymondcamden\">Raymond Camden<\/a> is called <a href=\"http:\/\/shop.oreilly.com\/product\/0636920051879.do\">Working with Static Sites<\/a> and is available as an early release, but should be available in print soon.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>I talk a lot about static site generators, but always about using static site generators. In most cases, it may seem like a black box. I create a template and some Markdown and out comes a fully formed HTML page. Magic! But what exactly is a static site generator? What goes on inside that black [&hellip;]<\/p>\n","protected":false},"author":247653,"featured_media":250975,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1116,736],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250931"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/247653"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250931"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250931\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/250975"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250931"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250931"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250931"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250987,"date":"2017-02-06T05:51:28","date_gmt":"2017-02-06T12:51:28","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250987"},"modified":"2017-02-06T05:51:28","modified_gmt":"2017-02-06T12:51:28","slug":"browser-tweak-saved-60-requests-facebook","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/browser-tweak-saved-60-requests-facebook\/","title":{"rendered":"This browser tweak saved 60% of requests to Facebook"},"content":{"rendered":"<p>Ben Maurer & Nate Schloss:<\/p>\n<blockquote><p>The browser's reload button exists to allow the user to get an updated version of the current page. In order to meet this goal, when you reload, browsers revalidate the page that you are currently on, even if that page hasn't expired yet. However, they also go a step further and revalidate all sub-resources on the page \u2014 things like images and JavaScript files.<\/p><\/blockquote>\n<p>So even if you've set proper expires headers for resources, hitting that reload button (which people must do a ton at Facebook) still requires server round trips to revalidate assets (sometimes).<\/p>\n<p>They worked with Chrome:<\/p>\n<blockquote><p>After fixing this, Chrome went from having 63% of its requests being conditional to 24% of them being conditional.<\/p><\/blockquote>\n<p>And Firefox:<\/p>\n<blockquote><p>Firefox implemented a proposal from one of our engineers to add a new cache-control header for some resources in order to tell the browser that this resource should never be revalidated.<\/p><\/blockquote>\n<p>So if you're using URLs for assets that <em>never<\/em> change (if they change, they'll be at a new URL) in Chrome you'll benefit automatically, and in Firefox you should <a href=\"https:\/\/hacks.mozilla.org\/2017\/01\/using-immutable-caching-to-speed-up-the-web\/\">use their new header<\/a>.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Ben Maurer &#038; Nate Schloss: The browser&#8217;s reload button exists to allow the user to get an updated version of the current page. In order to meet this goal, when you reload, browsers revalidate the page that you are currently on, even if that page hasn&#8217;t expired yet. However, they also go a step further [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[1120,1119,592],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250987"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250987"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250987\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250987"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250987"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250987"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250980,"date":"2017-02-05T11:05:06","date_gmt":"2017-02-05T18:05:06","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250980"},"modified":"2017-02-05T11:05:06","modified_gmt":"2017-02-05T18:05:06","slug":"poll-developers-run-wordpress-locally","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/poll-developers-run-wordpress-locally\/","title":{"rendered":"A Poll on How Developers Run WordPress Locally"},"content":{"rendered":"<p>I really have no idea how this will turn out. I suspect a ton of you have run or are currently running WordPress locally, but I have no clear guess on what the most popular way is to do that right now.<\/p>\n<p><!--more--><\/p>\n<div id=\"polls-56\" class=\"wp-polls\">\n\t<form id=\"polls_form_56\" class=\"wp-polls-form\" action=\"\/index.php\" method=\"post\">\n\t\t<p style=\"display: none;\"><input type=\"hidden\" id=\"poll_56_nonce\" name=\"wp-polls-nonce\" value=\"0ec4af33a8\" \/><\/p>\n\t\t<p style=\"display: none;\"><input type=\"hidden\" name=\"poll_id\" value=\"56\" \/><\/p>\n\t\t<h4>If you're running WordPress locally (i.e running PHP, MySQL, and a web server), how are you doing it?<\/h4>\r\n\r\n<div id=\"polls-56-ans\" class=\"wp-polls-ans\">\r\n\r\n<ul class=\"wp-polls-ul group\">\n\t\t<li class=\"group\"><input type=\"radio\" id=\"poll-answer-316\" name=\"poll_56\" value=\"316\" \/> <label for=\"poll-answer-316\">Docker<\/label><\/li>\n\t\t<li class=\"group\"><input type=\"radio\" id=\"poll-answer-317\" name=\"poll_56\" value=\"317\" \/> <label for=\"poll-answer-317\">WAMP \/ MAMP \/ AMPPS \/ Similar software with UI<\/label><\/li>\n\t\t<li class=\"group\"><input type=\"radio\" id=\"poll-answer-318\" name=\"poll_56\" value=\"318\" \/> <label for=\"poll-answer-318\">Vagrant<\/label><\/li>\n\t\t<li class=\"group\"><input type=\"radio\" id=\"poll-answer-319\" name=\"poll_56\" value=\"319\" \/> <label for=\"poll-answer-319\">Install stuff directly \/ manually<\/label><\/li>\n\t\t<li class=\"group\"><input type=\"radio\" id=\"poll-answer-320\" name=\"poll_56\" value=\"320\" \/> <label for=\"poll-answer-320\">Other (feel free to describe in comments)<\/label><\/li>\n\t\t<\/ul>\r\n<p  class=\"voting-buttons\"><input type=\"button\" name=\"vote\" value=\"   Vote   \" class=\"button\" onclick=\"poll_vote(56);\" \/> &nbsp; <a href=\"#ViewPollResults\" onclick=\"poll_result(56); return false;\" class=\"button\" title=\"View Results Of This Poll\">View Results<\/a><\/p>\r\n<\/div>\n\t<\/form>\n<\/div>\n\n<p>Let's limit the poll to how you are <em>actually<\/em> doing it, not how you wish you were doing it. And if you don't work with WordPress, but do work with a project that has similar dependencies (i.e. a server-side language, a database, and a web server), feel free to vote based on that project.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>I really have no idea how this will turn out. I suspect a ton of you have run or are currently running WordPress locally, but I have no clear guess on what the most popular way is to do that right now.<\/p>\n","protected":false},"author":3,"featured_media":250982,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4,117],"tags":[1118,818,264],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250980"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250980"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250980\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/250982"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250980"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250980"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250980"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250426,"date":"2017-02-03T08:18:20","date_gmt":"2017-02-03T15:18:20","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250426"},"modified":"2017-02-03T08:18:20","modified_gmt":"2017-02-03T15:18:20","slug":"intro-to-vue-5-animations","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/intro-to-vue-5-animations\/","title":{"rendered":"Intro to Vue.js: Animations"},"content":{"rendered":"<p>This is the fifth part in a five-part series about the JavaScript framework, Vue.js. In this last part of the series, we'll cover Animations (if you know me at all, you probably knew this was coming). This is not intended to be a complete guide, but rather an overview of the basics to get you up and running so you can get to know Vue.js and understand what the framework has to offer.<\/p>\n<p><!--more--><\/p>\n<figure id=\"post-250563\" class=\"align-none media-250563\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/vue-5.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/vue-5.jpg 800w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/vue-5-300x190.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/vue-5-768x487.jpg 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<div class=\"article-series\">\n<h4>Article Series:<\/h4>\n<ol>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-1-rendering-directives-events\/\">Rendering, Directives, and Events<\/a><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-2-components-props-slots\/\">Components, Props, and Slots<\/a><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-3-vue-cli-lifecycle-hooks\/\">Vue-cli<\/a><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-4-vuex\/\">Vuex<\/a><\/li>\n<li>Animations <strong>(You are here!)<\/strong><\/li>\n<\/ol>\n<\/div>\n<h3>Some background<\/h3>\n<p>There are built-in <code>&lt;transition&gt;<\/code> and <code>&lt;transition-group&gt;<\/code> components that allow for both CSS and JS hooks. If you come from React, the concept behind the transition component will be familiar to you, because it works similarly to <code>ReactCSSTransitionGroup<\/code> in relationship to lifecycle hooks, but it has some notable differences that make nerds like me excited.<\/p>\n<p>We'll start off by talking about CSS Transitions, then move on to CSS Animations, then we'll talk about JS Animation Hooks and then animating with Lifecycle Methods. Transitioning state is out of the scope of this article, but it is possible. <a href=\"http:\/\/codepen.io\/sdras\/pen\/OWZRZL\">Here's a well-commented Pen I made that does just that<\/a>. I could probably be convinced to write that article too, once I take a long nap.<\/p>\n<h4>Transitions vs. Animations<\/h4>\n<p>Just in case you're confused by why Transitions and Animations have different sections in this article, let me explain that though they sound similar, they're a bit different. A transition basically works by interpolating the values from state to another. We can do great things with them, but they are rather simple. Here, to there, and back again. <\/p>\n<p>Animations are a bit different in that you can make multiple states occur within one declaration. For instance, you could set a keyframe 50% into the animation, and then another totally different thing can occur at 70%, and so on. You can even chain many animations with delays for really complex movement. Animations have the ability to <em>behave<\/em> like transitions, where we only interpolate something from here to there, but transitions can't have multiple steps like an animation (not without some crazy hacky development that it's not really supposed to be used for.) <\/p>\n<p>In terms of tools, both are useful. Think of transitions as a saw and animations as a powersaw. Sometimes you just need to saw one thing and it would be silly to go out and buy really expensive equipment. For other more robust projects, it makes more sense to make the powersaw investment.<\/p>\n<p>Now that we have those basics down, let's talk about Vue!<\/p>\n<h3>CSS Transitions<\/h3>\n<p>Let's say we have a simple modal. The modal shows and hides on a click of a button. Based on the previous sections, we already know that we might: make a Vue instance with a button, make a child component from that instance, set the data on the state so that it toggles some sort of boolean and add an event handler to show and hide this child component. We could use <code>v-if<\/code> or <code>v-show<\/code> to toggle the visibility. We might even use a slot to pass the button toggle into the modal as well.<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;div id=\"app\"&gt;\r\n  &lt;h3&gt;Let's trigger this here modal!&lt;\/h3&gt;\r\n  &lt;button @click=\"toggleShow\"&gt;\r\n    &lt;span v-if=\"isShowing\"&gt;Hide child&lt;\/span&gt;\r\n    &lt;span v-else&gt;Show child&lt;\/span&gt;\r\n  &lt;\/button&gt;\r\n  &lt;app-child v-if=\"isShowing\" class=\"modal\"&gt;\r\n    &lt;button @click=\"toggleShow\"&gt;\r\n      Close\r\n    &lt;\/button&gt;\r\n  &lt;\/app-child&gt;\r\n&lt;\/div&gt;\r\n\r\n&lt;script type=\"text\/x-template\" id=\"childarea\"&gt;\r\n  &lt;div&gt;\r\n    &lt;h2&gt;Here I am!&lt;\/h2&gt;\r\n    &lt;slot&gt;&lt;\/slot&gt;\r\n  &lt;\/div&gt;\r\n&lt;\/script&gt;<\/code><\/pre>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">const Child = {\r\n  template: '#childarea'\r\n};\r\n\r\nnew Vue({\r\n  el: '#app',\r\n  data() {\r\n    return {\r\n      isShowing: false\r\n    }\r\n  },\r\n  methods: {\r\n    toggleShow() {\r\n      this.isShowing = !this.isShowing;\r\n    }\r\n  },\r\n  components: {\r\n    appChild: Child\r\n  }\r\n});<\/code><\/pre>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"df955fc6a1f482dcf104f2648746f8b3\" data-default-tab=\"css,result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"Pen\" class=\"codepen\"><a href=\"http:\/\/codepen.io\/sdras\/pen\/df955fc6a1f482dcf104f2648746f8b3\">See the Pen<\/a> by Sarah Drasner.<\/p>\n<p>This works, but it's pretty jarring to have that modal just pop in our faces like that. &#x1f633;<\/p>\n<p>We're already mounting and unmounting that child component with <code>v-if<\/code>, so Vue will let us track changes on that event if we wrap that conditional in a transition component:<\/p>\n<pre rel=\"HTML\" data-line=\"1,7\"><code class=\"language-markup\">&lt;transition name=\"fade\"&gt;\r\n  &lt;app-child v-if=\"isShowing\" class=\"modal\"&gt;\r\n    &lt;button @click=\"toggleShow\"&gt;\r\n      Close\r\n    &lt;\/button&gt;\r\n  &lt;\/app-child&gt;\r\n&lt;\/transition&gt;<\/code><\/pre>\n<p>Now, we could just use <code>&lt;transition&gt;<\/code> out of the box. This will give us a <code>v-<\/code> prefix for some transition hooks we can use in our CSS. It will offer <code>enter\/leave<\/code> which is the position that the animation starts with on the first frame, <code>enter-active\/leave-active<\/code> while the animation is running- <strong>this is the one you\u2019d place the animation properties themselves on<\/strong>, and <code>enter-to\/leave-to<\/code>, which specifies where the element should be on the last frame.<\/p>\n<p>I'm going to use a graphic from the docs to show this because I think it describes the classes as beautifully and clearly as possible:<\/p>\n<figure id=\"post-250565\" class=\"align-right media-250565\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/transition.png\" alt=\"transition classes\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/transition.png 1200w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/transition-300x150.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/transition-768x384.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/transition-1024x512.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Personally, I don't usually work with the default <code>v-<\/code> prefix. I'll always give the transition a name so that there are no collisions if I want to eventually apply another animation. It's not hard to do so, as you can see above, we simply added a <code>name<\/code> attribute to the transition component: <code>name=\"fade\"<\/code>.<\/p>\n<p>Now that we have our hooks, we can create the transition using them:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.fade-enter-active, .fade-leave-active {\r\n  transition: opacity 0.25s ease-out;\r\n}\r\n\r\n.fade-enter, .fade-leave-to {\r\n  opacity: 0;\r\n}<\/code><\/pre>\n<p>The <code>.fade-enter-active<\/code> and <code>.fade-leave-active<\/code> classes will be where we apply the actual transition. This is normal CSS, you can pass in cubic-beziers for eases, delays, or specify other properties to transition. Truthfully, this would also work just as well if you placed the transition in these classes on the component classes themselves as a default. These don't necessarily need to be defined by the transition component hooks. They'll just chill there, and wait until that property changes and use it to transition if it does. (so you would still need the transition component and .fade-enter, .fade-leave-to). The one reason I do use it on the enter-active and leave-active classes is that I can reuse the same transition for other elements as well, and not run around the codebase applying the same default CSS to each instance.<\/p>\n<p>Another thing to note here: I'm using <code>ease-out<\/code> for both active classes. This works and looks fine for something like opacity. But you may find that if you're transitioning properties such as transform, you might want to separate the two and use <code>ease-out<\/code> for the enter-active class and <code>ease-in<\/code> for the enter-leave class (or cubic-beziers that vaguely follow the same curve). I find it makes the animation look more... classy (har har).<\/p>\n<p>You can see we've also set the .fade-enter and the .fade-to to <code>opacity: 0<\/code>. These will be the first and last positions of the animation, the initial state as it mounts, the end state as it unmounts. You may think you need to set <code>opacity: 1<\/code> on <code>.fade-enter-to<\/code>, and <code>.fade-leave<\/code>, but that is unnecessary as it's the default state for the component, so it would be redundant. CSS transitions and animations will always use the default state unless told otherwise.<\/p>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"6ef951b970faf929d8580199fe8ea6ba\" data-default-tab=\"css,result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"Pen\" class=\"codepen\"><a href=\"http:\/\/codepen.io\/sdras\/pen\/6ef951b970faf929d8580199fe8ea6ba\">See the Pen<\/a> by Sarah Drasner.<\/p>\n<p>This works nicely! But what would happen if we wanted to make that background content fade out of view, so that the modal took center stage and the background lost focus? We can't use the <code>&lt;transition&gt;<\/code> component, as that component works based on something being mounted or unmounted, and the background is just sticking around. What we can do is transition classes based on the state, and use the classes to create CSS transitions that alter the background:<\/p>\n<pre rel=\"HTML\" data-line=\"1\"><code class=\"language-markup\">&lt;div v-bind:class=\"[isShowing ? blurClass : '', bkClass]\"&gt;\r\n    &lt;h3&gt;Let's trigger this here modal!&lt;\/h3&gt;\r\n    &lt;button @click=\"toggleShow\"&gt;\r\n      &lt;span v-if=\"isShowing\"&gt;Hide child&lt;\/span&gt;\r\n      &lt;span v-else&gt;Show child&lt;\/span&gt;\r\n    &lt;\/button&gt;\r\n  &lt;\/div&gt;<\/code><\/pre>\n<pre rel=\"CSS\"><code class=\"language-css\">.bk {\r\n  transition: all 0.1s ease-out;\r\n}\r\n\r\n.blur {\r\n  filter: blur(2px);\r\n  opacity: 0.4;\r\n}<\/code><\/pre>\n<pre rel=\"JavaScript\" data-line=\"6,7\"><code class=\"language-javascript\">new Vue({\r\n  el: '#app',\r\n  data() {\r\n    return {\r\n      isShowing: false,\r\n      bkClass: 'bk',\r\n      blurClass: 'blur'\r\n    }\r\n  },\r\n  ...\r\n});<\/code><\/pre>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"4daa105fc18da0e223b6be9a200b349d\" data-default-tab=\"css,result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"Pen\" class=\"codepen\"><a href=\"http:\/\/codepen.io\/sdras\/pen\/4daa105fc18da0e223b6be9a200b349d\">See the Pen<\/a> by Sarah Drasner.<\/p>\n<h3>CSS Animation<\/h3>\n<p>Now that we understand how transitions work, we can build off of those core concepts to create some nice CSS animations. We'll still use the <code>&lt;transition&gt;<\/code> component, and we'll still give it a name, allowing us to have the same class hooks. The difference here will be that instead of just setting the final state and saying how we want it to interpolate between beginning and end, we'll use <code>@keyframes<\/code> in CSS to create fun and lovely effects. <\/p>\n<p>In the last section, we talked a little about how you can designate a special name for the transition component that we can then use as class hooks. But in this section, we'll go a step further, and apply different class hooks to different sections of the animation. You'll recall that enter-active and leave-active is where all the juicy business of animating happens. We can set different properties on each of these class hooks, but we can go one step further and give special classes to each instance:<\/p>\n<p><code>enter-active-class=\"toasty\"<br \/>\nleave-active-class=\"bounceOut\"<\/code><\/p>\n<p>This means we can reuse those classes or even plug into the classes from CSS animation libraries.<\/p>\n<p>Let\u2019s say we want a ball to bounce in and roll out:<\/p>\n<pre rel=\"HTML\" data-line=\"8,9,10\"><code class=\"language-markup\">&lt;div id=\"app\"&gt;\r\n  &lt;h3&gt;Bounce the Ball!&lt;\/h3&gt;\r\n  &lt;button @click=\"toggleShow\"&gt;\r\n    &lt;span v-if=\"isShowing\"&gt;Get it gone!&lt;\/span&gt;\r\n    &lt;span v-else&gt;Here we go!&lt;\/span&gt;\r\n  &lt;\/button&gt;\r\n  &lt;transition\r\n    name=\"ballmove\"\r\n    enter-active-class=\"bouncein\"\r\n    leave-active-class=\"rollout\"&gt;\r\n  &lt;div v-if=\"isShowing\"&gt;\r\n    &lt;app-child class=\"child\"&gt;&lt;\/app-child&gt;\r\n  &lt;\/div&gt;\r\n  &lt;\/transition&gt;\r\n&lt;\/div&gt;<\/code><\/pre>\n<p>For the bounce, we'd need a lot of keyframes if we want to do this in CSS (though in JS this could be one line of code), we also will use a SASS mixin to keep our styles DRY (don't repeat yourself). We've also designated the <code>.ballmove-enter<\/code> class to let the component know that it should start offscreen:<\/p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">@mixin ballb($yaxis: 0) {\r\n  transform: translate3d(0, $yaxis, 0);\r\n}\r\n\r\n@keyframes bouncein { \r\n  1% { @include ballb(-400px); }\r\n  20%, 40%, 60%, 80%, 95%, 99%, 100% { @include ballb() }\r\n  30% { @include ballb(-80px); }\r\n  50% { @include ballb(-40px); }\r\n  70% { @include ballb(-30px); }\r\n  90% { @include ballb(-15px); }\r\n  97% { @include ballb(-10px); }\r\n}\r\n\r\n.bouncein { \r\n  animation: bouncein 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;\r\n}\r\n\r\n.ballmove-enter {\r\n  @include ballb(-400px);\r\n}<\/code><\/pre>\n<p>For rolling the ball out, you can see that we need to nest two different animations. This is because the transform is being applied to the entire child component, and spinning the whole thing would result in a huge rotation. So we'll move the component across the screen with a translation, and spin the ball within with a rotation:<\/p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">@keyframes rollout { \r\n  0% { transform: translate3d(0, 300px, 0); }\r\n  100% { transform: translate3d(1000px, 300px, 0); }\r\n}\r\n\r\n@keyframes ballroll {\r\n  0% { transform: rotate(0); }\r\n  100% { transform: rotate(1000deg); }\r\n}\r\n\r\n.rollout { \r\n  width: 60px;\r\n  height: 60px;\r\n  animation: rollout 2s cubic-bezier(0.55, 0.085, 0.68, 0.53) both; \r\n  div {\r\n    animation: ballroll 2s cubic-bezier(0.55, 0.085, 0.68, 0.53) both; \r\n  }\r\n}<\/code><\/pre>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"pRWxGg\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"Ball Bouncing using Vue transition and CSS Animation\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/sdras\/pen\/pRWxGg\/\">Ball Bouncing using Vue transition and CSS Animation<\/a> by Sarah Drasner (<a href=\"http:\/\/codepen.io\/sdras\">@sdras<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h4>Sweet, Sweet Transition Modes<\/h4>\n<p>Do you recall when I said that Vue offers some really nice sugary bits in transitions that make nerds like me happy? Here's a small one that I really love. If you try to transition one component in while another component is leaving, you'll end up with this really weird moment where both exist at the same time and then snap back into place (this small example from the Vue docs): <\/p>\n<figure id=\"post-250886\" class=\"align-right media-250886\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/02\/pre-transition-mode.gif\" alt=\"\"><\/figure>\n<p>Vue offers transition modes, which will allow you to transition one component out while bringing another component in without any strange position flashing or blocking. It does so by ordering the transitioning instead of having them occur at the same time. There are two modes to choose from:<\/p>\n<p><strong>In-out<\/strong>: The current element waits until the new element is done transitioning in to fire<\/p>\n<p><strong>Out-in<\/strong>: The current element transitions out and then the new element transitions in.<\/p>\n<p>Check out the demo below. You can see the mode- <code>out-in<\/code> on the transition component so that it appears that only one piece is flipping:<\/p>\n<pre rel=\"HTML\" data-line=\"1\"><code class=\"language-markup\">&lt;transition name=\"flip\" mode=\"out-in\"&gt;\r\n  &lt;slot v-if=\"!isShowing\"&gt;&lt;\/slot&gt;\r\n  &lt;img v-else src=\"https:\/\/s3-us-west-2.amazonaws.com\/s.cdpn.io\/28963\/cartoonvideo14.jpeg\" \/&gt;\r\n&lt;\/transition&gt;<\/code><\/pre>\n<p data-height=\"420\" data-theme-id=\"1\" data-slug-hash=\"mRpoOG\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"Vue in-out modes\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/sdras\/pen\/mRpoOG\/\">Vue in-out modes<\/a> by Sarah Drasner (<a href=\"http:\/\/codepen.io\/sdras\">@sdras<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>If we were to take out that mode, you can see that one flip obscures the other, and the animation looks jarring, not at all the effect we want to achieve:<\/p>\n<p data-height=\"296\" data-theme-id=\"1\" data-slug-hash=\"6f42a0203557cfc041c340a1ce44f059\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"Vue in-out modes - no modes contrast\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/sdras\/pen\/6f42a0203557cfc041c340a1ce44f059\/\">Vue in-out modes - no modes contrast<\/a> by Sarah Drasner (<a href=\"http:\/\/codepen.io\/sdras\">@sdras<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3>JS Animation<\/h3>\n<p>We have some nice JS hooks that are very easy to use or not use as we see fit for our animation. All hooks pass in the <code>el<\/code> parameter (short for element) except on the actual animation hooks, enter and leave, which also pass <code>done<\/code> as a parameter, which, you guessed it, is used to tell Vue that the animation is completed. You'll notice we\u2019re also binding CSS to a falsy value to let the component know we'll be using JavaScript instead of CSS.<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;transition \r\n  @before-enter=\"beforeEnter\"\r\n  @enter=\"enter\"\r\n  @after-enter=\"afterEnter\"\r\n  @enter-cancelled=\"enterCancelled\"\r\n\r\n  @before-Leave=\"beforeLeave\"\r\n  @leave=\"leave\"\r\n  @after-leave=\"afterLeave\"\r\n  @leave-cancelled=\"leaveCancelled\"\r\n  :css=\"false\"&gt;\r\n \r\n &lt;\/transition&gt;<\/code><\/pre>\n<p>At the most basic level, this is really what you would need for an entrance and exit animation, including the corresponding methods:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;transition \r\n  @enter=\"enterEl\"\r\n  @leave=\"leaveEl\"\r\n  :css=\"false\"&gt;\r\n &lt;!-- put element here--&gt;\r\n &lt;\/transition&gt;<\/code><\/pre>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">methods: {\r\n   enterEl(el, done) {\r\n     \/\/entrance animation\r\n     done();\r\n  },\r\n  leaveEl(el, done) {\r\n    \/\/exit animation\r\n    done();\r\n  },\r\n}<\/code><\/pre>\n<p>Here's an example of how I would use this to plug into a GreenSock timeline:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">new Vue({\r\n  el: '#app',\r\n  data() {\r\n    return {\r\n      message: 'This is a good place to type things.',\r\n      load: false\r\n    }\r\n  },\r\n  methods: {\r\n    beforeEnter(el) {\r\n      TweenMax.set(el, {\r\n        transformPerspective: 600,\r\n        perspective: 300,\r\n        transformStyle: \"preserve-3d\",\r\n        autoAlpha: 1\r\n      });\r\n    },\r\n    enter(el, done) {\r\n      ...\r\n      \r\n      tl.add(\"drop\");\r\n      for (var i = 0; i &lt; wordCount; i++) {\r\n        tl.from(split.words[i], 1.5, {\r\n          z: Math.floor(Math.random() * (1 + 150 - -150) + -150),\r\n          ease: Bounce.easeOut\r\n        }, \"drop+=0.\" + (i\/ 0.5));\r\n       ...\r\n      \r\n    }\r\n  }\r\n});<\/code><\/pre>\n<p data-height=\"570\" data-theme-id=\"1\" data-slug-hash=\"MJedjd\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"Vue Book Content Typer\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/sdras\/pen\/MJedjd\/\">Vue Book Content Typer<\/a> by Sarah Drasner (<a href=\"http:\/\/codepen.io\/sdras\">@sdras<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Two of the more interesting things to note in the above animation, I\u2019m passing <code>{onComplete:done}<\/code> as a parameter to the Timeline instance, and I\u2019m using the <code>beforeEnter<\/code> hook to place my <code>TweenMax.set<\/code> code, which allows me to set any properties on the words I need for the animation before it happens, in this case, things like <code>transform-style: preserve-3d<\/code>. <\/p>\n<p>It's important to note that you can also set what you want for the animation directly in the CSS as the default state as well. People sometimes ask me how to decide what to set in the CSS and what to set in <code>TweenMax.set<\/code>. As a rule of thumb, I generally put any properties I need specifically for the animation into the <code>TweenMax.set<\/code>. That way if something in the animation changes and I need to update it, it's already part of my workflow. <\/p>\n<h3>Animations in Lifecycle Hooks<\/h3>\n<p>All of this is really nice, but what happens if you need to animate something very complex, something that works with a ton of DOM elements? This is a really nice time to use some lifecycle methods. In the following animation, we have used both the <code>&lt;transition&gt;<\/code> component as well as the <code>mounted()<\/code> method to create some animations.<\/p>\n<p data-height=\"600\" data-theme-id=\"1\" data-slug-hash=\"YNpaoJ\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"Vue Weather Notifier\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/sdras\/pen\/YNpaoJ\/\">Vue Weather Notifier<\/a> by Sarah Drasner (<a href=\"http:\/\/codepen.io\/sdras\">@sdras<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>When we transition a single element, we'll use the transition component, for instance, when the stroke around the phone button shows up:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;transition \r\n  @before-enter=\"beforeEnterStroke\"\r\n  @enter=\"enterStroke\"\r\n  :css=\"false\"\r\n  appear&gt;\r\n  &lt;path class=\"main-button\" d=\"M413,272.2c5.1,1.4,7.2,4.7,4.7,7.4s-8.7,3.8-13.8,2.5-7.2-4.7-4.7-7.4S407.9,270.9,413,272.2Z\" transform=\"translate(0 58)\" fill=\"none\"\/&gt;\r\n&lt;\/transition&gt;<\/code><\/pre>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">beforeEnterStroke(el) {\r\n  el.style.strokeWidth = 0;\r\n  el.style.stroke = 'orange';\r\n},\r\nenterStroke(el, done) {\r\n  const tl = new TimelineMax({\r\n    onComplete: done\r\n  });\r\n\r\n  tl.to(el, 0.75, {\r\n    strokeWidth: 1,\r\n    ease: Circ.easeOut\r\n  }, 1);\r\n\r\n  tl.to(el, 4, {\r\n    strokeWidth: 0,\r\n    opacity: 0,\r\n    ease: Sine.easeOut\r\n  });\r\n},<\/code><\/pre>\n<p>But when a component first shows up and we have 30 elements or more animating, it would not longer be efficient to wrap each one in a separate <code>transition<\/code> component. So, we'll use the lifecycle methods we mentioned in section 3 of this series to hook into the same event that the transition hook is using under the hook: <code>mounted()<\/code><\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">const Tornadoarea = {\r\n  template: '#tornadoarea',\r\n  mounted () {\r\n    let audio = new Audio('https:\/\/s3-us-west-2.amazonaws.com\/s.cdpn.io\/28963\/tornado.mp3'),\r\n        tl = new TimelineMax();\r\n\r\n    audio.play();\r\n    tl.add(\"tornado\");\r\n\r\n    \/\/tornado timeline begins\r\n    tl.staggerFromTo(\".tornado-group ellipse\", 1, {\r\n      opacity: 0\r\n    }, {\r\n      opacity: 1,\r\n      ease: Sine.easeOut\r\n    }, 0.15, \"tornado\");\r\n    ...\r\n    }\r\n};<\/code><\/pre>\n<p>We can really use either depending on what's more efficient and as you can see, you can create really complex effects. Vue offers a really beautiful and flexible API, not just for creating composable front-end architecture, but also for fluid movement and seamless transitions between views.<\/p>\n<h3>Conclusion<\/h3>\n<p>This series of articles is not intended to be documentation. Though we\u2019ve covered a lot of ground, there's still so much more to explore: routing, mixins, server-side rendering, etc. There are so many amazing things to work with. Head over to the <a href=\"https:\/\/vuejs.org\/v2\/api\/\">very excellent docs<\/a> and this repo full of <a href=\"https:\/\/github.com\/vuejs\/awesome-vue\">examples and resources<\/a> to dig in further. There is also a book called <a href=\"https:\/\/leanpub.com\/vuejs2\">The Majesty of Vue.js<\/a>, and courses on <a href=\"https:\/\/egghead.io\/search?q=vue.js\">Egghead.io<\/a> and <a href=\"https:\/\/www.udemy.com\/vuejs-2-the-complete-guide\/\">Udemy<\/a>. <\/p>\n<p>Many thanks to Robin Rendle, Chris Coyier, Blake Newman, and Evan You for proofreading various sections of this series. I hope this series conveys why I\u2019m so excited about Vue and helps you get up and running trying out some of the material! <\/p>\n<div class=\"article-series\">\n<h4>Article Series:<\/h4>\n<ol>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-1-rendering-directives-events\/\">Rendering, Directives, and Events<\/a><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-2-components-props-slots\/\">Components, Props, and Slots<\/a><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-3-vue-cli-lifecycle-hooks\/\">Vue-cli<\/a><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-4-vuex\/\">Vuex<\/a><\/li>\n<li>Animations <strong>(You are here!)<\/strong><\/li>\n<\/ol>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>This is the fifth part in a five-part series about the JavaScript framework, Vue.js. In this last part of the series, we&#8217;ll cover Animations (if you know me at all, you probably knew this was coming). This is not intended to be a complete guide, but rather an overview of the basics to get you [&hellip;]<\/p>\n","protected":false},"author":7699,"featured_media":250563,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[612,432,1073],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250426"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/7699"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250426"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250426\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/250563"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250426"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250426"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250426"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250912,"date":"2017-02-03T08:00:44","date_gmt":"2017-02-03T15:00:44","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250912"},"modified":"2017-02-03T08:00:44","modified_gmt":"2017-02-03T15:00:44","slug":"contest-ill-come-office","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/contest-ill-come-office\/","title":{"rendered":"Contest: I&#8217;ll Come To Your Office"},"content":{"rendered":"<p>I'll fly to you and spend the day! Media Temple is sponsoring it, so it doesn't cost either of us anything. Only one lucky winner, though. All you gotta do is fill out the form (with your email address) and explain why you're interested. Enter by February 28, winners picked March 24. <\/p>\n","protected":false},"excerpt":{"rendered":"<p>I&#8217;ll fly to you and spend the day! Media Temple is sponsoring it, so it doesn&#8217;t cost either of us anything. Only one lucky winner, though. All you gotta do is fill out the form (with your email address) and explain why you&#8217;re interested. Enter by February 28, winners picked March 24.<\/p>\n","protected":false},"author":3,"featured_media":250914,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17,508],"tags":[],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250912"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250912"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250912\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/250914"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250912"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250912"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250912"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250906,"date":"2017-02-03T07:46:57","date_gmt":"2017-02-03T14:46:57","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250906"},"modified":"2017-02-03T07:46:57","modified_gmt":"2017-02-03T14:46:57","slug":"some-math-links","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/some-math-links\/","title":{"rendered":"Some Math Links"},"content":{"rendered":"<p>I read a few stories about math lately. <!--more--> One of them is a story by Kevin Hartnett about Francis Su, who believes math can be a gateway to a better life. <a href=\"https:\/\/www.quantamagazine.org\/20170202-math-and-the-best-life-francis-su-interview\/\">To Live Your Best Life, Do Mathematics.<\/a>:<\/p>\n<blockquote><p>Christopher, an inmate serving a long sentence for armed robbery who had begun to teach himself math from textbooks he had ordered. After seven years in prison, during which he studied algebra, trigonometry, geometry and calculus, he wrote to Su asking for advice on how to continue his work. After Su told this story, he asked the packed ballroom at the Marriott Marquis, his voice breaking: \"When you think of who does mathematics, do you think of Christopher?\"<\/p><\/blockquote>\n<blockquote><p>If I learn mathematics and I become a better thinker, I develop perseverance, because I know what it\u2019s like to wrestle with a hard problem, and I develop hopefulness that I will actually solve these problems. And some people experience a kind of transcendent wonder that they\u2019re seeing something true about the universe. That\u2019s a source of joy and flourishing.<\/p><\/blockquote>\n<p>And another by Jinju Jang, <a href=\"https:\/\/blog.framer.com\/a-story-of-a-designer-conquering-mathematics-d0fd4585f0ba\">The story of a designer conquering mathematics.<\/a>:<\/p>\n<blockquote><p>\u200aI was quite proud of my artwork. It looked interesting, saved so much time compared to creating the same design in Illustrator or Photoshop. However, I realised without understanding geometry, there was no chance for me to reach somewhere near to Marius Watz.<\/p><\/blockquote>\n<p>Jinju slowly leveled up her math skills, applying it to everything she did along the way.<\/p>\n<p>Of course, this all reminds me of <a href=\"https:\/\/css-tricks.com\/author\/thebabydino\/\">Ana Tudor<\/a>, who is an unconventional (and at times self-deprecating) mathematician, who uses her considerable math skills to create art with code.<\/p>\n<p>And also a wonderful recent talk by Natalya Shelburne, <a href=\"https:\/\/www.youtube.com\/watch?v=1x-x7HfSSnU&t=24s&list=WL&index=2\">Color Theory for people who code SVG and CSS<\/a>. Here's a million dollar quote, very slightly paraphrased:<\/p>\n<blockquote><p>If someone says to you, don't you miss doing creative stuff, as an engineer? Don't you miss the creativity of the art world? You can say: I'm working on an infinite canvas capable of any size and shape, that's already glowing every color possible into the eyes of just about everyone on the planet. And I get to decide the kind of experience, feeling, and emotion they are going to have. How is that not creative?<\/p><\/blockquote>\n<p>More on color theory from our own Sarah Drasner: <a href=\"https:\/\/css-tricks.com\/nerds-guide-color-web\/\">A Nerd\u2019s Guide to Color on the Web<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>I read a few stories about math lately.<\/p>\n","protected":false},"author":3,"featured_media":250910,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[837,1115],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250906"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250906"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250906\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/250910"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250906"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250906"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250906"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250280,"date":"2017-02-02T07:36:18","date_gmt":"2017-02-02T14:36:18","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250280"},"modified":"2017-02-02T07:36:18","modified_gmt":"2017-02-02T14:36:18","slug":"%e2%80%8bthe-easiest-way-find-new-job","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/%e2%80%8bthe-easiest-way-find-new-job\/","title":{"rendered":"\u200bThe Easiest Way to Find a New Job"},"content":{"rendered":"<p>As a highly talented developer or designer, <a href=\"http:\/\/synd.co\/2iO8Sq3\u200b\">shouldn't companies apply to you?<\/a> On Hired the traditional process of finding a job is completely reversed. Hired expedites the job search process through an efficient system of:<\/p>\n<ol>\n<li>Companies competing for top talent with visibility into a candidate's traction on Hired, driving rapid turnaround times from interview to final offer.<\/li>\n<li>Free personalized support on your job hunt. On Hired our Talent Advocates have your back, whether it's negotiating compensation or preparing for interviews.<\/li>\n<li>Upfront salary, equity and bonus details in every interview request.<\/li>\n<\/ol>\n<p><a href=\"http:\/\/synd.co\/2iO8Sq3\u200b\">Try Hired<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>As a highly talented developer or designer, shouldn&#8217;t companies apply to you? On Hired the traditional process of finding a job is completely reversed. Hired expedites the job search process through an efficient system of: Companies competing for top talent with visibility into a candidate&#8217;s traction on Hired, driving rapid turnaround times from interview to [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17,508],"tags":[],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250280"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250280"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250280\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250280"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250280"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250280"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250503,"date":"2017-02-02T07:27:54","date_gmt":"2017-02-02T14:27:54","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250503"},"modified":"2017-02-03T08:19:58","modified_gmt":"2017-02-03T15:19:58","slug":"intro-to-vue-4-vuex","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/intro-to-vue-4-vuex\/","title":{"rendered":"Intro to Vue.js: Vuex"},"content":{"rendered":"<p>This is the fourth part in a five-part series about the JavaScript framework, <a href=\"https:\/\/vuejs.org\/\">Vue.js<\/a>. In this part, we'll cover Vuex for state management. This is not intended to be a complete guide, but rather an overview of the basics to get you up and running so you can get to know Vue.js and understand what the framework has to offer.<\/p>\n<p><!--more--><\/p>\n<figure id=\"post-250562\" class=\"align-none media-250562\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/vue-4.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/vue-4.jpg 800w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/vue-4-300x190.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/vue-4-768x487.jpg 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<div class=\"article-series\">\n<h4>Article Series:<\/h4>\n<ol>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-1-rendering-directives-events\/\">Rendering, Directives, and Events<\/a><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-2-components-props-slots\/\">Components, Props, and Slots<\/a><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-3-vue-cli-lifecycle-hooks\/\">Vue-cli<\/a><\/li>\n<li>Vuex <strong>(You are here!)<\/strong><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-5-animations\/\">Animations<\/a><\/li>\n<\/ol>\n<\/div>\n<h3>Vuex<\/h3>\n<p>If you missed the last few sections on components and Vue-cli, you might want to go review those before reading on. Now that we know the very basics about how components and passing state and props around, let's talk about Vuex. It's a useful tool for state management.<\/p>\n<p>Previously, we've passed state from a top level component down, and siblings did not share data. If they needed to talk to each other, we'd have to push the state up in the application. This works! But once your application reaches a certain complexity, this no longer makes sense to do. If you've worked with Redux before, all of these concepts and the implementation will be familiar to you. Vuex is basically Vue's version of Redux. In fact, Redux will work with Vue as well, but with Vuex, you have the benefit of using a tool designed to work specifically with your framework.<\/p>\n<p>First, we\u2019ll install Vuex:<\/p>\n<p><code>npm install vuex<\/code><\/p>\n<p><em>or<\/em><\/p>\n<p><code>yarn add vuex<\/code><\/p>\n<p>I set it up this way: within my `\/src` directory, I create another directory named store (this is a preference, you could also just create a `store.js` file in that same directory), and a file named `store.js`. The initial set up in `store.js` would look something like this (vstore sublime snippet):<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">import Vue from 'vue';\r\nimport Vuex from 'vuex';\r\n\r\nVue.use(Vuex);\r\n\r\nexport const store = new Vuex.Store({\r\n  state: {\r\n    key: value\r\n  }\r\n});<\/code><\/pre>\n<p><code>key: value<\/code> is a placeholder for any kind of state data. In other examples we've used <code>counter: 0<\/code>. <\/p>\n<p>In our `main.js` file, we'd perform the following updates (updated lines highlighted):<\/p>\n<pre rel=\"JavaScript\" data-line=\"4, 8\"><code class=\"language-javascript\">import Vue from 'vue';\r\nimport App from '.\/App.vue';\r\n\r\nimport { store } from '.\/store\/store';\r\n\r\nnew Vue({\r\n  el: '#app',\r\n  store: store,\r\n  template: '&lt;App\/&gt;',\r\n  components: { App }\r\n});<\/code><\/pre>\n<p>After we get it set up, we can place our <code>data()<\/code> in the file as the state as we've previously done with components, and then we'll either use this state or update it with the following three means:<\/p>\n<ul>\n<li><strong>Getters<\/strong> will make values able to show statically in our templates. In other words, getters can read the value, but not mutate the state.<\/li>\n<li><strong>Mutations<\/strong> will allow us to update the state, but they will always be synchronous. Mutations are the only way to change data in the state in the store.<\/li>\n<li><strong>Actions<\/strong> will allow us to update the state, asynchronously, but will use an existing mutation. This can be very helpful if you need to perform a few different mutations at once in a particular order.<\/li>\n<\/ul>\n<p>Sometimes it's difficult to understand why you might work with asynchronous state changes if you haven't before, so let's first go over how that would happen in the abstract and then dive into something real in the next section. Let's say you're Tumblr. You have a ton of heavy gifs on a page that doesn't end for a long time. You only want to load a certain amount at a time, say 20, until the user gets 200px away from the bottom of the original page.<\/p>\n<p>You could have a mutation that displays the next 20. But you don't have the next 20 yet, nor do you know when you hit the bottom of the page. So, in the app itself, you create an event that listens to the scroll position and you trigger an action. <\/p>\n<p>The action then retrieves the URLs from the database for the next 20 images, and wraps the mutation, which adds the 20 images to the state and displays them.<\/p>\n<p>Actions, in essence, create a framework for requesting data. They give you a consistent way to apply the data in an asynchronous manner.<\/p>\n<h3>Most Basic Abstract Example<\/h3>\n<p>In the example below, we're showing the most basic implementation of each, so you get a sense of the setup and how it would work. Payload is an optional parameter. You can define the amount you are updating the component by. Don't worry, we'll use an actual demo in a moment, it's just important to get the base concepts first.<\/p>\n<p>In `store.js`:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">export const store = new Vuex.Store({\r\n  state: {\r\n    counter: 0\r\n  },\r\n  \/\/showing things, not mutating state\r\n  getters: {\r\n    tripleCounter: state =&gt; {\r\n      return state.counter * 3;\r\n    }\r\n  },\r\n  \/\/mutating the state\r\n  \/\/mutations are always synchronous\r\n  mutations: {\r\n    \/\/showing passed with payload, represented as num\r\n    increment: (state, num) =&gt; {\r\n      state.counter += num;\r\n    }\r\n  }, \r\n  \/\/commits the mutation, it's asynchronous\r\n  actions: {\r\n    \/\/ showing passed with payload, represented as asynchNum (an object)\r\n    asyncDecrement: ({ commit }, asyncNum) =&gt; {\r\n      setTimeout(() =&gt; {\r\n        \/\/the asyncNum objects could also just be static amounts\r\n        commit('decrement', asyncNum.by);\r\n      }, asyncNum.duration);\r\n    }\r\n  }\r\n});<\/code><\/pre>\n<p>A really nice feature here is we can return the entire state object in the mutations, but we don't <em>have to<\/em>, we can just use what we need. Time travel debugging (walking through the mutations to find errors) will still work either way. <\/p>\n<p>On the component itself, we would use <code>computed<\/code> for <strong>getters<\/strong> (this makes sense because the value is already computed for us), and <code>methods<\/code> with <code>dispatch<\/code> to access the <strong>mutations and actions<\/strong>:<\/p>\n<p>In `app.vue`:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">computed: {\r\n  value() {\r\n    return this.$store.getters.value;\r\n  }\r\n},\r\nmethods: {\r\n  increment() {\r\n    this.$store.dispatch('increment', 2)\r\n  }\r\n}<\/code><\/pre>\n<p>Or, you can use a spread operator. I find this useful when you have to work with a lot of mutations\/actions:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">export default {\r\n  \/\/ ...\r\n  methods: {\r\n    ...mapActions([\r\n      'increment', \/\/ map this.increment() to this.$store.commit('increment')\r\n      'decrement',\r\n      'asyncIncrement'\r\n    ])\r\n  }\r\n}<\/code><\/pre>\n<h3>Simple Real Example<\/h3>\n<p>Let's look at the Weather Notifier App again, with a very small and simple amount of state in the Vuex store. <a href=\"https:\/\/github.com\/sdras\/vue-weather-notifier\">Here's the repo<\/a>.<\/p>\n<p data-height=\"517\" data-theme-id=\"1\" data-slug-hash=\"YNpaoJ\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"Vue Weather Notifier\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/sdras\/pen\/YNpaoJ\/\">Vue Weather Notifier<\/a> by Sarah Drasner (<a href=\"http:\/\/codepen.io\/sdras\">@sdras<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>In `store.js`:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">import Vue from 'vue';\r\nimport Vuex from 'vuex';\r\n\r\nVue.use(Vuex);\r\n\r\nexport const store = new Vuex.Store({\r\n  state: {\r\n    showWeather: false,\r\n    template: 0\r\n  },\r\n    mutations: {\r\n      toggle: state =&gt; state.showWeather = !state.showWeather,\r\n      updateTemplate: (state) =&gt; {\r\n        state.showWeather = !state.showWeather;\r\n        state.template = (state.template + 1) % 4;\r\n      }\r\n  }\r\n});<\/code><\/pre>\n<p>Here, we're setting the state of <code>showWeather<\/code>, this is set to false at first because we don't want any of the animations firing right away, not until the user hits the phone button. In mutations, we've set up a toggle for the state of <code>showWeather<\/code>.<\/p>\n<p>We're also setting the <code>template<\/code> to 0 in the state. We'll use this number to cycle through each of the weather components one by one. So in mutations, we've created a method called <code>updateTemplate<\/code>. This both toggles the state of <code>showWeather<\/code>, and updates the <code>template<\/code> to the next number, but it will wrap around to zero when it hits the number 4.<\/p>\n<p>In App.vue:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;template&gt;\r\n  &lt;div id=\"app\"&gt;\r\n    ...\r\n    &lt;g id=\"phonebutton\" @click=\"updateTemplate\" v-if=\"!showWeather\"&gt;\r\n       ...\r\n    &lt;\/g&gt;\r\n\r\n    &lt;transition \r\n        @leave=\"leaveDroparea\"\r\n        :css=\"false\"&gt;\r\n      &lt;g v-if=\"showWeather\"&gt;\r\n        &lt;app-droparea v-if=\"template === 1\"&gt;&lt;\/app-droparea&gt;\r\n        &lt;app-windarea v-else-if=\"template === 2\"&gt;&lt;\/app-windarea&gt;\r\n        &lt;app-rainbowarea v-else-if=\"template === 3\"&gt;&lt;\/app-rainbowarea&gt;\r\n        &lt;app-tornadoarea v-else&gt;&lt;\/app-tornadoarea&gt;\r\n      &lt;\/g&gt;\r\n    &lt;\/transition&gt;\r\n    ...\r\n\r\n  &lt;\/div&gt;\r\n&lt;\/template&gt;<\/code><\/pre>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">&lt;script&gt;\r\n  import Dialog from '.\/components\/Dialog.vue';\r\n  ...\r\n  export default {\r\n    computed: {\r\n      showWeather() {\r\n        return this.$store.state.showWeather;\r\n      },\r\n      template() {\r\n        return this.$store.state.template;\r\n      }\r\n    },\r\n    methods: {\r\n      updateTemplate() {\r\n        this.$store.commit('updateTemplate');\r\n      }\r\n    },\r\n    ...\r\n    components: {\r\n      appDialog: Dialog,\r\n      ...\r\n    }\r\n}\r\n&lt;\/script&gt;<\/code><\/pre>\n<p>In `dialog.vue`:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">&lt;script&gt;\r\nexport default {\r\n  computed: {\r\n    template() {\r\n      return this.$store.state.template;\r\n    }\r\n  },\r\n  methods: {\r\n    toggle() {\r\n      this.$store.commit('toggle');\r\n    }\r\n  },\r\n  mounted () {\r\n  \t\/\/enter weather\r\n  \tconst tl = new TimelineMax();\r\n    ...\r\n  }\r\n}\r\n&lt;\/script&gt;<\/code><\/pre>\n<p>In the code above, App uses <code>showWeather<\/code> to advance the template, while Dialog merely toggles the component visibility. You can also see that in App.vue, we are showing and hiding different child components based on the value of template in the App <code>&lt;template&gt;<\/code> with that snazzy conditional rendering we learned in the first article. In App, we're both listening to the changes of state in store with the <code>computed<\/code> values, and using <code>toggle()<\/code> and <code>updateTemplate()<\/code> in the methods to commit to the store's mutations. <\/p>\n<p>This is a basic example, but you can see how with a complex app with tons of state, it would be helpful to manage the state all in one place, rather than moving it up and down our components. Particularly when siblings need to talk to siblings.<\/p>\n<p>If you're interested in digging into Vuex deeper, there are <a href=\"https:\/\/vuex.vuejs.org\/\">great docs here<\/a>. You might have noticed that we used some <code>&lt;transition&gt;<\/code> components in this last demo, as well as lot of animations. Let's talk about that next!<\/p>\n<div class=\"article-series\">\n<h4>Article Series:<\/h4>\n<ol>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-1-rendering-directives-events\/\">Rendering, Directives, and Events<\/a><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-2-components-props-slots\/\">Components, Props, and Slots<\/a><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-3-vue-cli-lifecycle-hooks\/\">Vue-cli<\/a><\/li>\n<li>Vuex <strong>(You are here!)<\/strong><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-5-animations\/\">Animations<\/a><\/li>\n<\/ol>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>This is the fourth part in a five-part series about the JavaScript framework, Vue.js. In this part, we&#8217;ll cover Vuex for state management. This is not intended to be a complete guide, but rather an overview of the basics to get you up and running so you can get to know Vue.js and understand what [&hellip;]<\/p>\n","protected":false},"author":7699,"featured_media":250562,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[432,1114,1094,1073,1079],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250503"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/7699"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250503"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250503\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/250562"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250503"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250503"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250503"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250683,"date":"2017-02-02T07:14:01","date_gmt":"2017-02-02T14:14:01","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250683"},"modified":"2017-02-02T07:14:01","modified_gmt":"2017-02-02T14:14:01","slug":"the-art-of-labeling","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/the-art-of-labeling\/","title":{"rendered":"The Art of Labeling"},"content":{"rendered":"<p>There's a lot of neat tricks in this video by Rob Dodson where he focuses on accessibility tricks in Chrome's DevTools. A few notes:<\/p>\n<ul>\n<li>Chrome DevTools has an experimental feature to help with accessibility testing that you can unlock if you head to <code>chrome:\/\/flags\/<\/code> and turn on in the DevTools settings.<\/li>\n<li>Wrapping an <code>&lt;input type=\"checkbox\"&gt;<\/code> in a <code>&lt;label&gt;<\/code> gives the input a name of the text in the label, even without a <code>for<\/code> attribute.<\/li>\n<li>The <code>aria-labelledby<\/code> attribute overrides the name of the element with the text taken from a different element, referenced by ID. It can even compose a name together from multiple elements, including itself.<\/li>\n<li>Adding <code>tabindex='0'<\/code> to an element will make it focusable.<\/li>\n<\/ul>\n","protected":false},"excerpt":{"rendered":"<p>There&#8217;s a lot of neat tricks in this video by Rob Dodson where he focuses on accessibility tricks in Chrome&#8217;s DevTools. A few notes: Chrome DevTools has an experimental feature to help with accessibility testing that you can unlock if you head to chrome:\/\/flags\/ and turn on in the DevTools settings. Wrapping an &lt;input type=&#8221;checkbox&#8221;&gt; [&hellip;]<\/p>\n","protected":false},"author":223806,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[850,595,672],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250683"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/223806"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250683"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250683\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250683"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250683"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250683"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250861,"date":"2017-02-02T06:54:34","date_gmt":"2017-02-02T13:54:34","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250861"},"modified":"2017-02-02T06:54:34","modified_gmt":"2017-02-02T13:54:34","slug":"couple-svg-icon-links","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/couple-svg-icon-links\/","title":{"rendered":"A Couple SVG Icon Links"},"content":{"rendered":"<ul>\n<li>WordPress' new TwentySeventeen default theme uses an SVG icon system. It was contributed by Sami Keijonen who had <a href=\"https:\/\/foxland.fi\/switch-away-icon-fonts-svg\/\">some prior experience<\/a> in that, and wrote up a bit about it <a href=\"https:\/\/poststatus.com\/contributing-to-twenty-seventeen-theme\/\">here<\/a>. The theme <a href=\"https:\/\/core.trac.wordpress.org\/browser\/trunk\/src\/wp-content\/themes\/twentyseventeen\/inc\/icon-functions.php\">has functions<\/a> that spit out correct\/accessible markup for them.<\/li>\n<li>Webpack now has <a href=\"https:\/\/github.com\/TodayTix\/svg-sprite-webpack-plugin\">a SVG sprite loader<\/a>, which allows you to <code>import myGreatIcon from '.\/my-great-icon.svg';<\/code> like you do with other resources in webpack.<\/li>\n<li>Both aforementioned projects note IE\/Edge's lack of ability to <code>&lt;use&gt;<\/code> from a file path and thus recommend <a href=\"https:\/\/github.com\/Keyamoon\/svgxuse\">svgxuse<\/a> and <a href=\"https:\/\/github.com\/jonathantneal\/svg4everybody\">svg4everybody<\/a> respectively.<\/li>\n<li>I still haven't seen anyone talk about an SVG icon system where they say, screw it, we're running HTTP\/2, we're just going with <code>&lt;img src=\"icon-x.svg\" alt=\"\"&gt;<\/code>. I've also never seen an SVG icon system that utilized <a href=\"https:\/\/css-tricks.com\/svg-fragment-identifiers-work\/\">fragment identifiers<\/a> (Safari and Android are problematic here, so that's not terribly surprising).<\/li>\n<\/ul>\n","protected":false},"excerpt":{"rendered":"<p>WordPress&#8217; new TwentySeventeen default theme uses an SVG icon system. It was contributed by Sami Keijonen who had some prior experience in that, and wrote up a bit about it here. The theme has functions that spit out correct\/accessible markup for them. Webpack now has a SVG sprite loader, which allows you to import myGreatIcon [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[627,469],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250861"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250861"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250861\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250861"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250861"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250861"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250488,"date":"2017-02-01T06:41:50","date_gmt":"2017-02-01T13:41:50","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250488"},"modified":"2017-02-03T08:20:19","modified_gmt":"2017-02-03T15:20:19","slug":"intro-to-vue-3-vue-cli-lifecycle-hooks","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/intro-to-vue-3-vue-cli-lifecycle-hooks\/","title":{"rendered":"Intro to Vue.js: Vue-cli and Lifecycle Hooks"},"content":{"rendered":"<p>This is the third part in a five-part series about the JavaScript framework, <a href=\"https:\/\/vuejs.org\/\">Vue.js<\/a>. We'll cover Vue-cli, and talk a little more about real-life development processes. <!--more--> This is not intended to be a complete guide, but rather an overview of the basics to get you up and running so you can get to know Vue.js and understand what the framework has to offer.<\/p>\n<figure id=\"post-250561\" class=\"align-none media-250561\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/vue-3.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/vue-3.jpg 800w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/vue-3-300x190.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/vue-3-768x487.jpg 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<div class=\"article-series\">\n<h4>Article Series:<\/h4>\n<ol>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-1-rendering-directives-events\/\">Rendering, Directives, and Events<\/a><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-2-components-props-slots\/\">Components, Props, and Slots<\/a><\/li>\n<li>Vue-cli <strong>(You are here!)<\/strong><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-4-vuex\/\">Vuex<\/a><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-5-animations\/\">Animations<\/a><\/li>\n<\/ol>\n<\/div>\n<h3>Vue-cli and build processes<\/h3>\n<p>If you haven't yet read the last section on Vue.js components and props, I highly suggest you do so before reading this section, otherwise, some things we'll cover will lack context.<\/p>\n<p>Vue offers a <a href=\"https:\/\/github.com\/vuejs\/vue-cli\">really nice cli<\/a> that gets you up and running with your choice of a few build tools, and really nice simple starter boilerplate. It's a lovely tool. Before installing vue-cli, you might want to check that your versions of node, and npm or yarn are up-to-date. You\u2019d first want to install vue-cli (the -g helps you install it globally)<\/p>\n<p><code>$ npm install -g vue-cli<\/code><\/p>\n<p>There are many builds available to you, but in our example, we'll use webpack:<\/p>\n<p><code>$ vue init webpack &lt;project-name&gt;<\/code><\/p>\n<p>You can go through the commands that the output will give you, which will help you cd into the directory, install everything, set up your `package.json` file, and then finally serve up a local dev server at localhost:8080 with the command:<\/p>\n<p><code>$ npm run dev<\/code><\/p>\n<p>You're up and running! I love that the setup is so clean. You'll start off with an App file in your `\/src\/` directory with a `Hello.vue` file in the `\/components\/` directory. This is really nice because you can see already how you'd set up these files, and how imports and exports might work. <\/p>\n<p>Let\u2019s go over this new `.vue` file extension for a moment, because if you haven\u2019t worked with vue, you won\u2019t have come across it before.<\/p>\n<p>In your `.vue` file, you can place everything you need for your component. We no longer have to wrap our templates in <code>&lt;script type=\"text\/x-template\"&gt;<\/code>, now we'll more semantically create files that follow this logic:<\/p>\n<pre><code class=\"language-markup\">&lt;template&gt;\r\n  &lt;div&gt;\r\n     &lt;!-- Write your HTML with Vue in here --&gt;\t\r\n  &lt;\/div&gt;\r\n&lt;\/template&gt;\r\n\r\n&lt;script&gt;\r\n  export default {\r\n     \/\/ Write your Vue component logic here\r\n  }\r\n&lt;\/script&gt;\r\n\r\n&lt;style scoped&gt;\r\n  \/* Write your styles for the component in here *\/\r\n&lt;\/style&gt;<\/code><\/pre>\n<p>I've made a repo of <a href=\"https:\/\/github.com\/sdras\/vue-sublime-snippets\">Vue snippets for Sublime Text<\/a> to quickly spin up boilerplate like this for `.vue` files (this is what the snippet <code>vbase<\/code> would output). There's also <a href=\"https:\/\/atom.io\/packages\/vue-snippets\">this one for atom<\/a>, (though it specifies version 1+, and Vue is at v2), and <a href=\"https:\/\/github.com\/OYsun\/vscode-VueHelper\">this for vscode<\/a>.<\/p>\n<p>A few things to note here: just like in React, you have to return exactly one enclosing tag, here I've used a div. I've also used <code>&lt;g&gt;<\/code> elements in SVG. It can be anything, but the entire template must be wrapped in the <em>one<\/em> tag.<\/p>\n<p>You'll see that we'll use <code>export default<\/code> here to write our scripts such as the data function or methods we used previously, but if we were to use components as children in this `.vue` document, we would also have to import them (more on this in a minute). <\/p>\n<p>You can also see that we have a special <code>scoped<\/code> value on the style tag. <strong>This allows us to very easily scope the styles for this component to only this component.<\/strong> We could also use just <code>&lt;style&gt;<\/code> and it would create styles for the whole application. I typically like to create a base stylesheet for the whole application with common styles like fonts and line-heights, which I'll <code>@import<\/code> into the <code>&lt;style&gt;<\/code> tag of the App.vue file with the help of <a href=\"https:\/\/github.com\/vuejs\/vue-style-loader\">vue-style-loader<\/a>. I'll then use the <code>&lt;style scoped&gt;<\/code> tag for very particular styles for the template when it calls for it, but really to each their own on this one! The nice thing is that Vue-cli lets you decide how to organize it, and you don\u2019t have to add any other dependencies or modules to scope our styles this way. *heart eyes*. <\/p>\n<p>We spoke briefly about slots before, when we use slots in Vue components with the scoped style tags, <strong>they apply to the component that has the slots<\/strong>. This is so helpful, because you can switch out components and change the appearance out very easily. *heartier eyes*<\/p>\n<p>I have to say that in terms of development workflow, working within each particular `.vue` file for my HTML, styles, and JS has been extraordinarily helpful. I love that things are separated enough to see each piece clearly, yet close enough together that <strong>I'm not context-shifting<\/strong>. It speeds up my development, and I've noticed that markup stays pretty semantic. <\/p>\n<p>You also might notice that your syntax highlighter doesn\u2019t automatically recognize `.vue` files, so <a href=\"https:\/\/github.com\/BrainBuzzer\/vuejs-sublime-complete\">I\u2019ve installed this<\/a> for Sublime Text.<\/p>\n<p>Here is the most basic way of importing\/exporting components into a file (vimport:c in vue-sublime snippets)<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">import New from '.\/components\/New.vue';\r\n\r\nexport default {\r\n  components: {\r\n    appNew: New\r\n  }\r\n}<\/code><\/pre>\n<p>For more of a real-life example, let's look at a sample of that last wine-label demo we used, with the components separated out into their own templates:<\/p>\n<p><strong>App.vue:<\/strong><\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">&lt;template&gt;\r\n  &lt;div class=\"container\"&gt;\r\n\r\n  &lt;main&gt;\r\n      &lt;component :is=\"selected\"&gt;\r\n        &lt;svg class=\"winebottle\" aria-labelledby=\"title\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" viewBox=\"0 155 140 300\"&gt;\r\n          ...\r\n      &lt;\/svg&gt;\r\n      &lt;\/component&gt;\r\n    &lt;\/main&gt;\r\n\r\n    &lt;aside&gt;\r\n      &lt;h4&gt;Name your Wine&lt;\/h4&gt;\r\n      &lt;input v-model=\"label\" maxlength=\"18\"&gt;\r\n      &lt;div class=\"button-row\"&gt;\r\n        &lt;h4&gt;Color&lt;\/h4&gt;\r\n        &lt;button @click=\"selected ='appBlack', labelColor = '#000000'\"&gt;Black Label&lt;\/button&gt;\r\n        &lt;button @click=\"selected ='appWhite', labelColor = '#ffffff'\"&gt;White Label&lt;\/button&gt;\r\n        &lt;input type=\"color\" v-model=\"labelColor\" defaultValue=\"#ff0000\"&gt;\r\n      &lt;\/div&gt;\r\n    &lt;\/aside&gt;\r\n\r\n  &lt;\/div&gt;\r\n&lt;\/template&gt;\r\n\r\n&lt;script&gt;\r\n  import Black from '.\/components\/Black.vue'\r\n  import White from '.\/components\/White.vue'\r\n  ...\r\n  export default {\r\n      data: function () {\r\n        return {\r\n          selected: 'appBlack',\r\n          label: 'Label Name',\r\n          ...\r\n        };\r\n      },\r\n      components: {\r\n          appBlack: Black,\r\n          appWhite: White,\r\n          ...\r\n      }\r\n  }\r\n&lt;\/script&gt;\r\n\r\n&lt;style&gt;\r\n  @import \".\/assets\/style.css\";\r\n&lt;\/style&gt;<\/code><\/pre>\n<p>Black Component:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">&lt;template&gt;\r\n  &lt;div&gt;\r\n    &lt;slot&gt;&lt;\/slot&gt;\r\n  &lt;\/div&gt;\r\n&lt;\/template&gt;\r\n\r\n&lt;style scoped&gt;\r\n  .label {\r\n    fill: black;\r\n  }\r\n  .bottle, .wine-text {\r\n    fill: white;\r\n  }\r\n  .flor {\r\n    fill: #ccc;\r\n  }\r\n  .bkimg {\r\n    filter:url(#inverse)\r\n  }\r\n&lt;\/style&gt;<\/code><\/pre>\n<p>Note that I'm using the component here to style each slot differently, that's a really nice way of working, but it's only one way. There are endless ways you can compose your application with components, slots, and props. The code here also only shows a piece of what's happening. <a href=\"https:\/\/github.com\/sdras\/vue-wine-label\">I've made a repo<\/a> for you to explore, having used Vue-cli from the start to construct this. I highly recommend using Vue-cli in tandem with reading this and building out some components and passing state with props in a simple manner, just to get accustomed to the workflow. It's very intuitive and quick once you get past the initial setup!<\/p>\n<h3>Lifecycle Hooks<\/h3>\n<p>Before we talk about lifecycle hooks, we need to backtrack a little and talk about the virtual DOM I mentioned in the first article. I noted that Vue.js has a virtual DOM, but not really what it does.<\/p>\n<p>When you work with something like jQuery, in essence you're listening to the DOM, and changing things based on those updates. We end up spending a lot of time checking what the DOM is up to, and storing state there. In contrast, a virtual DOM is an abstract representation of a DOM, sort of like a copy, but in this case it will be our master copy. When we work with state the way we have been with Vue in these articles, we're creating the state ourselves, and then observing when the state changes.<\/p>\n<p>When a Vue instance updates, Vue will check to see if it's different from what we had previously. If it is indeed different, it will call some of these lifecycle methods, and patch the actual DOM with changes. This is for efficiency, this way the DOM is only updating what it absolutely needs to. <\/p>\n<p>The lifecycle hooks provide you a <strong>method<\/strong> so that you might trigger something precisely at different junctures of a component's lifecycle. Components are mounted when we instantiate them, and in turn unmounted, for instance when we toggle them in a v-if\/v-else statement. <\/p>\n<p>Some of the hooks available to you are: <code>beforeCreate, created, beforeMount, mounted, beforeUpdate, updated, activated, deactivated, beforeDestroy<\/code>, and <code>destroyed<\/code>. The API docs do a <a href=\"https:\/\/vuejs.org\/v2\/api\/#beforeCreate\">good job of describing each<\/a> if you'd like to dig in further. Here's a small demo to show how some of them work (check the console):<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">const Child = {\r\n  template: '#childarea',\r\n  beforeCreate() {\r\n    console.log(\"beforeCreate!\");\r\n  }, \r\n ...\r\n};\r\n\r\nnew Vue({\r\n  el: '#app',\r\n  data() {\r\n    return {\r\n      isShowing: false \r\n    }\r\n  },\r\n  methods: {\r\n    toggleShow() {\r\n      this.isShowing = !this.isShowing;\r\n    }\r\n  },\r\n  components: {\r\n    appChild: Child\r\n  }\r\n});<\/code><\/pre>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;div v-if=\"isShowing\"&gt;\r\n  &lt;app-child&gt;&lt;\/app-child&gt;\r\n&lt;\/div&gt;<\/code><\/pre>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"28d3a5b277ada8f9d1b0b34a2d73831c\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"CSS 3D Alternating Text\" class=\"codepen\"><a href=\"http:\/\/codepen.io\/sdras\/pen\/28d3a5b277ada8f9d1b0b34a2d73831c\/\">See the Pen<\/a> by Sarah Dransner.<\/p>\n<figure id=\"post-250510\" class=\"align-right media-250510\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/lifecycle.gif\" alt=\"lifecycle hooks in console\" \/><\/figure>\n<p>Note that we use <code>v-if<\/code> here instead of <code>v-show<\/code>, as <code>v-if<\/code> will actually mount and unmount the component, while <code>v-show<\/code> will only toggle visibility (but it will remain mounted and stay in the DOM). Similarly, <code>&lt;keep-alive&gt;&lt;\/keep-alive&gt;<\/code> will not be mounted or unmounted, but rather become activated and deactivated- as the component remains mounted, but is not in use.<\/p>\n<p>Just as the methods available on the component bind this automatically, lifecycle hooks also auto-bind to the instance so that you can use the component\u2019s state, and methods. Again, you don't have to console.log to find out what <code>this<\/code> refers to! <strong>*heartiest eyes*<\/strong> For this reason though, you shouldn\u2019t use an arrow function on a lifecycle method, as it will return the parent instead of giving you nice binding out of the box. <\/p>\n<p>In the following I\u2019m moving a ton of elements when each component is initially mounted, so I'll use the mounted hook to trigger the corresponding animation for each component. <strong>You may have to hit the rerun button in the bottom left corner to see the starting animation.<\/strong><\/p>\n<p data-height=\"517\" data-theme-id=\"1\" data-slug-hash=\"YNpaoJ\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"Vue Weather Notifier\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/sdras\/pen\/YNpaoJ\/\">Vue Weather Notifier<\/a> by Sarah Drasner (<a href=\"http:\/\/codepen.io\/sdras\">@sdras<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\"> mounted() {\r\n    let audio = new Audio('https:\/\/s3-us-west-2.amazonaws.com\/s.cdpn.io\/28963\/rain.mp3'),\r\n        tl = new TimelineMax();\r\n\r\n    audio.play();\r\n    tl.add(\"drops\");\r\n\r\n    \/\/drops in\r\n    tl.staggerFromTo(\"#droplet-groups g path\", 0.3, {\r\n      drawSVG: \"0% -10%\"\r\n    }, {\r\n      drawSVG: \"100% 110%\",\r\n      repeat: 3,\r\n      repeatDelay: 1,\r\n      ease: Sine.easeIn\r\n    }, 0.5, \"drops\");\r\n \u2026\r\n}<\/code><\/pre>\n<p>There are also beautiful and sophisticated <code>&lt;transition&gt;<\/code> and <code>&lt;transition-group&gt;<\/code> components that Vue offers and we use elsewhere in this demo, and we\u2019ll cover these, and why and when to use each in the last post of the series on Animation.<\/p>\n<div class=\"article-series\">\n<h4>Article Series:<\/h4>\n<ol>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-1-rendering-directives-events\/\">Rendering, Directives, and Events<\/a><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-2-components-props-slots\/\">Components, Props, and Slots<\/a><\/li>\n<li>Vue-cli <strong>(You are here!)<\/strong><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-4-vuex\/\">Vuex<\/a><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-5-animations\/\">Animations<\/a><\/li>\n<\/ol>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>This is the third part in a five-part series about the JavaScript framework, Vue.js. We&#8217;ll cover Vue-cli, and talk a little more about real-life development processes.<\/p>\n","protected":false},"author":7699,"featured_media":250561,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1096,432,1073,1095,680],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250488"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/7699"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250488"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250488\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/250561"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250488"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250488"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250488"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250805,"date":"2017-02-01T06:29:53","date_gmt":"2017-02-01T13:29:53","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250805"},"modified":"2017-02-01T06:29:53","modified_gmt":"2017-02-01T13:29:53","slug":"shoptalk-248-amp","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/shoptalk-248-amp\/","title":{"rendered":"ShopTalk 248: AMP"},"content":{"rendered":"<p><a href=\"https:\/\/www.ampproject.org\/\">AMP<\/a> is wildly polarizing.<\/p>\n<p>Huge tech companies evangelize for it. It has loads of tech partners and loads of publishers using it. Well-respected companies are building things for it. <\/p>\n<p>There is also a ton of backlash. It's too easy to break. It gives Google far too much control. It's not entirely progressive enhancement friendly. Offline development is harder. The caching layer means clicking a link from Google search results shows the site without ever leaving google.com, which is concerning for any number of reasons, a small one being that it makes sharing the URL weird. That's just a few. I've heard quite the laundry list of complaints.<\/p>\n<p>On this episode of ShopTalk we discuss all things AMP with someone on the AMP team (and who's own blog is entirely AMP) and an entrepreneur building a service around AMP. Do they wonder if AMP is helping or hurting the web? They do.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>AMP is wildly polarizing. Huge tech companies evangelize for it. It has loads of tech partners and loads of publishers using it. Well-respected companies are building things for it. There is also a ton of backlash. It&#8217;s too easy to break. It gives Google far too much control. It&#8217;s not entirely progressive enhancement friendly. Offline [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[591,503],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250805"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250805"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250805\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250805"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250805"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250805"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250802,"date":"2017-02-01T06:02:33","date_gmt":"2017-02-01T13:02:33","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250802"},"modified":"2017-02-01T06:09:02","modified_gmt":"2017-02-01T13:09:02","slug":"10-lodash-features-can-replace-es6","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/10-lodash-features-can-replace-es6\/","title":{"rendered":"10 Lodash Features You Can Replace with ES6"},"content":{"rendered":"<p>When learning to write JavaScript without jQuery, I found posts <a href=\"https:\/\/www.sitepoint.com\/jquery-vs-raw-javascript-1-dom-forms\/\">like this<\/a> (also on SitePoint) quite helpful to reference. Now we're going through that again, in a way, with ES6 replacing some of what we used libraries to help with. <\/p>\n","protected":false},"excerpt":{"rendered":"<p>When learning to write JavaScript without jQuery, I found posts like this (also on SitePoint) quite helpful to reference. Now we&#8217;re going through that again, in a way, with ES6 replacing some of what we used libraries to help with.<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[661,432,1112],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250802"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250802"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250802\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250802"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250802"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250802"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250798,"date":"2017-02-01T05:50:33","date_gmt":"2017-02-01T12:50:33","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250798"},"modified":"2017-02-01T05:50:33","modified_gmt":"2017-02-01T12:50:33","slug":"understanding-critical-rendering-path","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/understanding-critical-rendering-path\/","title":{"rendered":"Understanding the Critical Rendering Path"},"content":{"rendered":"<p>Ire Aderinokun:<\/p>\n<blockquote>\n<p>There are 6 stages to the CRP -<\/p>\n<ol>\n<li>Constructing the DOM Tree<\/li>\n<li>Constructing the CSSOM Tree<\/li>\n<li>Running JavaScript<\/li>\n<li>Creating the Render Tree<\/li>\n<li>Generating the Layout<\/li>\n<li>Painting<\/li>\n<\/ol>\n<\/blockquote>\n<p>I imagine if you're really getting into performance work, you'll want a firm understanding of this. There are lots of ways to block\/delay parts of this process. The job of a perf nerd is to understand when and why that's happening, evaluate if it's necessary or not, and tweak things to get to that painting step as soon as possible.<\/p>\n<p>I'm curious if this is generic enough that 100% of all rendering engines work 100% the same way, or if there are significant differences.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Ire Aderinokun: There are 6 stages to the CRP &#8211; Constructing the DOM Tree Constructing the CSSOM Tree Running JavaScript Creating the Render Tree Generating the Layout Painting I imagine if you&#8217;re really getting into performance work, you&#8217;ll want a firm understanding of this. There are lots of ways to block\/delay parts of this process. [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[592,1111],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250798"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250798"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250798\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250798"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250798"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250798"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250363,"date":"2017-01-31T06:19:47","date_gmt":"2017-01-31T13:19:47","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250363"},"modified":"2017-02-03T08:20:40","modified_gmt":"2017-02-03T15:20:40","slug":"intro-to-vue-2-components-props-slots","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/intro-to-vue-2-components-props-slots\/","title":{"rendered":"Intro to Vue.js: Components, Props, and Slots"},"content":{"rendered":"<p>This is the second part in a five-part series about the JavaScript framework, <a href=\"https:\/\/vuejs.org\/\">Vue.js<\/a>. In this part, we'll go over Components, Props, and Slots. This is not intended to be a complete guide, but rather an overview of the basics to get you up and running so you can get to know Vue.js and understand what the framework has to offer.<\/p>\n<p><!--more--><\/p>\n<figure id=\"post-250564\" class=\"align-none media-250564\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/vue-2-1.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/vue-2-1.jpg 800w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/vue-2-1-300x190.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/vue-2-1-768x487.jpg 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<div class=\"article-series\">\n<h4>Article Series:<\/h4>\n<ol>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-1-rendering-directives-events\/\">Rendering, Directives, and Events<\/a><\/li>\n<li>Components, Props, and Slots <strong>(You are here!)<\/strong><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-3-vue-cli-lifecycle-hooks\/\">Vue-cli<\/a><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-4-vuex\/\">Vuex<\/a><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-5-animations\/\">Animations<\/a><\/li>\n<\/ol>\n<\/div>\n<h3>Components and Passing Data<\/h3>\n<p>If you're familiar with React or Angular2, the idea of components and passing state won't be new to you. In case you're not, let's go through some of the main concepts.<\/p>\n<p>Websites large and small are usually composed of different pieces, and abstracting them into smaller pieces makes them easy to structure, reason about, reuse, and makes our code more legible. Instead of digging through all of the markup in long, multi-faceted page, we could comprise it of components like this:<\/p>\n<pre><code class=\"language-markup\">&lt;header&gt;&lt;\/header&gt;\r\n&lt;aside&gt;\r\n  &lt;sidebar-item v-for=\"item in items\"&gt;&lt;\/sidebar-item&gt;\r\n&lt;\/aside&gt;\r\n&lt;main&gt;\r\n  &lt;blogpost v-for=\"post in posts\"&gt;&lt;\/blogpost&gt;\r\n&lt;\/main&gt;\r\n&lt;footer&gt;&lt;\/footer&gt;<\/code><\/pre>\n<p>This is a simplified example, but you can see how useful this type of composition can be as you start to build out the structure of your site. If you were to dive into this code as a maintainer, it wouldn\u2019t take much to understand how the application is structured or where to look for each piece.<\/p>\n<p>Vue lets us create components in a few different ways. Let\u2019s work from simple to complex, keeping in mind that the complex example is truest to form for what an average Vue application would look like.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">app.$mount('#app');\r\n\r\nvar app = new Vue({\r\n  el: 'hello',\r\n  template: '&lt;h1&gt;Hello World!&lt;\/h1&gt;'\r\n});<\/code><\/pre>\n<p>This works, but isn\u2019t terribly useful as it can only be used once and we\u2019re not yet passing the information to different components. One way to pass data from a parent to a child is called <strong>props<\/strong>. <\/p>\n<p>This is as simple an example as I could make, so that it's super clear. Remember that the <code>:text<\/code> in the HTML is a shortcut for Vue binding. We covered this last time in the section on directives. Binding can be used for all kinds of things but in this instance, it keeps us from having to place the state in a mustache template, like this <code>{{ message }}<\/code>.<\/p>\n<p>In the code below, <code>Vue.component<\/code> is the <strong>component<\/strong>, and <code>new Vue<\/code> is called the <strong>instance<\/strong>. You can have more than one instance in an application. Typically, we'll have one instance and several components, as the instance is the main app.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">Vue.component('child', {\r\n  props: ['text'],\r\n  template: `&lt;div&gt;{{ text }}&lt;div&gt;`\r\n});\r\n\r\nnew Vue({\r\n  el: \"#app\",\r\n  data() {\r\n    return {\r\n      message: 'hello mr. magoo'\r\n    }\r\n  }\r\n});<\/code><\/pre>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;div id=\"app\"&gt;\r\n  &lt;child :text=\"message\"&gt;&lt;\/child&gt;\r\n&lt;\/div&gt;<\/code><\/pre>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"788a6a21e95589098af070c321214b78\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"simple props\" class=\"codepen\"><a href=\"http:\/\/codepen.io\/sdras\/pen\/788a6a21e95589098af070c321214b78\">See the Pen<\/a>.<\/p>\n<p>Now we can reuse this component as many times as we like through our application:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;div id=\"app\"&gt;\r\n  &lt;child :text=\"message\"&gt;&lt;\/child&gt;\r\n  &lt;child :text=\"message\"&gt;&lt;\/child&gt;\r\n&lt;\/div&gt;<\/code><\/pre>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"9c04bdcf1a2d0c770d6a1fd4af3c66f3\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"simple props\" class=\"codepen\"><a href=\"http:\/\/codepen.io\/sdras\/pen\/9c04bdcf1a2d0c770d6a1fd4af3c66f3\">See the Pen<\/a>.<\/p>\n<p>We can also add validation to our props, which is similar to <code>PropTypes<\/code> in React. This is nice because it's self-documenting, and will return an error if it's not what we expected, but only in development mode:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">Vue.component('child', {\r\n  props: {\r\n    text: {\r\n      type: String,\r\n      required: true\r\n    }\r\n  },\r\n  template: `&lt;div&gt;{{ text }}&lt;div&gt;`\r\n});<\/code><\/pre>\n<p>In the example below, I'm loading Vue in development mode, and purposefully passing an invalid type into our prop validation. <strong>You can see the error in the console.<\/strong> (It also helpful lets you know you can use Vue's devtools and where to find them).<\/p>\n<pre rel=\"JavaScript\" data-line=\"4\"><code class=\"language-javascript\">Vue.component('child', {\r\n  props: {\r\n    text: {\r\n      type: Boolean,\r\n      required: true\r\n    }\r\n  },\r\n  template: `&lt;div&gt;{{ text }}&lt;div&gt;`\r\n});<\/code><\/pre>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"d6fcaeee50a530d9a5e5832f0aec0773?editors=1111\" data-default-tab=\"js,result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"simple props with validation\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/sdras\/pen\/d6fcaeee50a530d9a5e5832f0aec0773?editors=1111\/\">simple props with validation<\/a> by Sarah Drasner (<a href=\"http:\/\/codepen.io\/sdras\">@sdras<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Objects should be returned as a factory function and you can even pass as a custom validator function, which is really nice because you can check values against business, input, or other logic. There's a nice write-up of how you'd use each type <a href=\"https:\/\/vuejs.org\/v2\/guide\/components.html#Prop-Validation\">in the guide here<\/a>. <\/p>\n<p>You don't need to necessarily pass the data in props to the child, either, you have the option of using state or a static value as you see fit:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">Vue.component('child', {\r\n  props: { \r\n    count: {\r\n      type: Number,\r\n      required: true\r\n    }\r\n  },\r\n  template: `&lt;div class=\"num\"&gt;{{ count }}&lt;\/div&gt;`\r\n})\r\n\r\nnew Vue({\r\n  el: '#app',\r\n  data() {\r\n    return {\r\n      count: 0    \r\n    }\r\n  },\r\n  methods: {\r\n    increment() {\r\n      this.count++;\r\n    },\r\n    decrement() {\r\n      this.count--;\r\n    }\r\n  }\r\n})<\/code><\/pre>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;div id=\"app\"&gt;\r\n  &lt;h3&gt;\r\n    &lt;button @click=\"increment\"&gt;+&lt;\/button&gt;\r\n    Adjust the state\r\n    &lt;button @click=\"decrement\"&gt;-&lt;\/button&gt;\r\n  &lt;\/h3&gt;\r\n  &lt;h2&gt;This is the app state: &lt;span class=\"num\"&gt;{{ count }}&lt;\/span&gt;&lt;\/h2&gt;\r\n  &lt;hr&gt;\r\n  &lt;h4&gt;&lt;child count=\"1\"&gt;&lt;\/child&gt;&lt;\/h4&gt; \r\n  &lt;p&gt;This is a child counter that is using a static integer as props&lt;\/p&gt;\r\n  &lt;hr&gt;\r\n  &lt;h4&gt;&lt;child :count=\"count\"&gt;&lt;\/child&gt;&lt;\/h4&gt;\r\n  &lt;p&gt;This is the same child counter and it is using the state as props&lt;\/p&gt;\r\n&lt;\/div&gt;<\/code><\/pre>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"5a34f6ed12cf954202c6d38f1ceba633\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"child component using and not using props\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/sdras\/pen\/5a34f6ed12cf954202c6d38f1ceba633\/\">child component using and not using props<\/a> by Sarah Drasner (<a href=\"http:\/\/codepen.io\/sdras\">@sdras<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>The difference is whether or not you\u2019re passing a property and binding it:<\/p>\n<p><strong>Not using the state<\/strong><br \/>\n<code>&lt;child count=\"1\"&gt;&lt;\/child&gt;<\/code><\/p>\n<p><em>vs<\/em><\/p>\n<p><strong>Using the state<\/strong><br \/>\n<code>&lt;child :count=\"count\"&gt;&lt;\/child&gt;<\/code><\/p>\n<p>Up until now, we've been creating content in our child component with a string, and of course if you\u2019re using babel so that you can process ES6 in all browsers (which I highly suggest), you could use a <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Template_literals\">template literal<\/a> to avoid potentially hard-to-read string concatenation:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">Vue.component('individual-comment', {\r\n  template: \r\n  `&lt;li&gt; {{ commentpost }} &lt;\/li&gt;`,\r\n  props: ['commentpost']\r\n});\r\n\r\nnew Vue({\r\n  el: '#app',\r\n  data: {\r\n    newComment: '',\r\n    comments: [\r\n      'Looks great Julianne!',\r\n      'I love the sea',\r\n      'Where are you at?'\r\n    ]\r\n  },\r\n  methods: {\r\n    addComment: function () {\r\n      this.comments.push(this.newComment)\r\n      this.newComment = ''\r\n    }\r\n  }\r\n});<\/code><\/pre>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;ul&gt;\r\n    &lt;li\r\n      is=\"individual-comment\"\r\n      v-for=\"comment in comments\"\r\n      v-bind:commentpost=\"comment\"\r\n    &gt;&lt;\/li&gt;\r\n  &lt;\/ul&gt;\r\n  &lt;input\r\n    v-model=\"newComment\"\r\n    v-on:keyup.enter=\"addComment\"\r\n    placeholder=\"Add a comment\"\r\n  &gt;<\/code><\/pre>\n<p data-height=\"700\" data-theme-id=\"1\" data-slug-hash=\"cd81de1463229a9612dca7559dd666e0\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"cd81de1463229a9612dca7559dd666e0\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/sdras\/pen\/cd81de1463229a9612dca7559dd666e0\/\">cd81de1463229a9612dca7559dd666e0<\/a> by Sarah Drasner (<a href=\"http:\/\/codepen.io\/sdras\">@sdras<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>This is a little more useful, but there's still a limit to how much content we probably want to put in that string, even with the help of template literals. Eventually in this comment form we'd want to have photos and the names of the authors, and you can already probably guess how crowded it would get with all that information. We also won't have any useful syntax highlighting within that string. <\/p>\n<p>With all those things in mind, let\u2019s create a template. We'll wrap some regular HTML in special script tags and use an id to reference it to create a component. You can see that this is a lot more legible when we have a lot of text and elements:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;!-- This is the Individual Comment Component --&gt;\r\n&lt;script type=\"text\/x-template\" id=\"comment-template\"&gt;\r\n&lt;li&gt; \r\n  &lt;img class=\"post-img\" :src=\"commentpost.authorImg\" \/&gt; \r\n  &lt;small&gt;{{ commentpost.author }}&lt;\/small&gt;\r\n  &lt;p class=\"post-comment\"&gt;\"{{ commentpost.text }}\"&lt;\/p&gt;\r\n&lt;\/li&gt;\r\n&lt;\/script&gt;<\/code><\/pre>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">Vue.component('individual-comment', {\r\n  template: '#comment-template',\r\n  props: ['commentpost']\r\n});<\/code><\/pre>\n<p data-height=\"750\" data-theme-id=\"1\" data-slug-hash=\"egEgXb\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"Photo App post with Vue.js\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/sdras\/pen\/egEgXb\/\">Photo App post with Vue.js<\/a> by Sarah Drasner (<a href=\"http:\/\/codepen.io\/sdras\">@sdras<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3>Slots<\/h3>\n<p>This is a lot better. But what happens when we have two components with slight variations, either content or style deviations? We could pass all the different content and styles down into the component with props, and switch everything out each time, or we could fork the components themselves and create different versions of them. But it would be really nice if we could reuse the components, and populate them with the same data or functionality. This is where slots come in really handy.<\/p>\n<p>Let's say we have a main app instance using the same <code>&lt;app-child&gt;<\/code> component twice. Inside each child we want some of the same content, and some different content. For the content we want to stay consistent, we would use a standard p tag, and for the content we want to switch out, we'll put an empty <code>&lt;slot&gt;&lt;\/slot&gt;<\/code> tag.<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;script type=\"text\/x-template\" id=\"childarea\"&gt;\r\n  &lt;div class=\"child\"&gt;\r\n    &lt;slot&gt;&lt;\/slot&gt;\r\n    &lt;p&gt;It's a veritable slot machine!&lt;br&gt; \r\n    Ha ha aw&lt;\/p&gt;\r\n  &lt;\/div&gt;\r\n&lt;\/script&gt;<\/code><\/pre>\n<p>Then, in the app instance, we can pass content inside the <code>&lt;app-child&gt;<\/code> component tags and it will automatically fill up the slots:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;div id=\"app\"&gt;\r\n  &lt;h2&gt;We can use slots to populate content&lt;\/h2&gt;\r\n  &lt;app-child&gt;\r\n    &lt;h3&gt;This is slot number one&lt;\/h3&gt;\r\n  &lt;\/app-child&gt;\r\n  &lt;app-child&gt;\r\n    &lt;h3&gt;This is slot number two&lt;\/h3&gt;\r\n    &lt;small&gt;I can put more info in, too!&lt;\/small&gt;\r\n  &lt;\/app-child&gt;\r\n&lt;\/div&gt;<\/code><\/pre>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"e06f9393e73054e7185ff48dfa36e161\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"simple props\" class=\"codepen\"><a href=\"http:\/\/codepen.io\/sdras\/pen\/e06f9393e73054e7185ff48dfa36e161\">See the Pen<\/a>.<\/p>\n<p>You can have default content within slots as well. If, in the slot itself, rather than writing <code>&lt;slot&gt;&lt;\/slot&gt;<\/code>, you can populate it with: <\/p>\n<p><code>&lt;slot&gt;I am some default text&lt;\/slot&gt;<\/code><\/p>\n<p>That default text will be used until you fill the slot with other material, which is so useful! High fives all around.<\/p>\n<p>You can also have named slots. If you were to have two slots in a component, you could differentiate between them by adding a name attribute <code>&lt;slot name=\"headerinfo\"&gt;&lt;\/slot&gt;<\/code> and we could access that particular slot by writing <code>&lt;h1 slot=\"headerinfo\"&gt;I will populate the headerinfo slot!&lt;\/h1&gt;<\/code>. This is extremely useful. If you have multiple slots that are named and one that isn't, Vue will put the named content into the named slots, and whatever is left will be used to fill the remaining unnamed slots.<\/p>\n<p>Here's an example of what I mean:<\/p>\n<p><strong>This is a sample child template<\/strong><\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;div id=\"post\"&gt;\r\n  &lt;main&gt;\r\n    &lt;slot name=\"header\"&gt;&lt;\/slot&gt;\r\n    &lt;slot&gt;&lt;\/slot&gt;\r\n  &lt;\/main&gt;\r\n&lt;\/div&gt;<\/code><\/pre>\n<p><strong>This is a sample of the parent<\/strong><\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;app-post&gt;\r\n  &lt;h1 slot=\"header\"&gt;This is the main title&lt;\/h1&gt;\r\n  &lt;p&gt;I will go in the unnamed slot!&lt;\/p&gt;\r\n&lt;\/app-post&gt;<\/code><\/pre>\n<p><strong>Rendered content<\/strong><\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;main&gt;\r\n  &lt;h1&gt;This is the main title&lt;\/h1&gt;\r\n  &lt;p&gt;I will go in the unnamed slot!&lt;\/p&gt;\r\n&lt;\/main&gt;<\/code><\/pre>\n<p>Personally, if I am using more than one slot at a time, I will name all of so that it's super clear what is going where for other maintainers, but it's nice that Vue provides such a flexible API.<\/p>\n<h4>Slots example<\/h4>\n<p>Alternatively, we can have particular styles assigned for different components, and keep all of the content inside the same, therefore quickly and easily changing out the appearance of something. In the wine label maker below, one of the buttons will toggle the component and color based on what the user selects, and the background of the bottle and label and text will all switch, while keeping the content within stable. <\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">const app = new Vue({\r\n  ...\r\n  components: {\r\n    'appBlack': {\r\n      template: '#black'\r\n    }\r\n  }\r\n});<\/code><\/pre>\n<p>Main Vue App HTML:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">  &lt;component :is=\"selected\"&gt;\r\n    ...\r\n    &lt;path class=\"label\" d=\"M12,295.9s56.5,5,137.6,0V409S78.1,423.6,12,409Z\" transform=\"translate(-12 -13.8)\" :style=\"{ fill: labelColor }\"\/&gt;\r\n    ...\r\n  &lt;\/component&gt;\r\n\r\n&lt;h4&gt;Color&lt;\/h4&gt;\r\n  &lt;button @click=\"selected ='appBlack', labelColor = '#000000'\"&gt;Black Label&lt;\/button&gt;\r\n  &lt;button @click=\"selected ='appWhite', labelColor = '#ffffff'\"&gt;White Label&lt;\/button&gt;\r\n  &lt;input type=\"color\" v-model=\"labelColor\" defaultValue=\"#ff0000\"&gt;<\/code><\/pre>\n<p>White Component HTML:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;script type=\"text\/x-template\" id=\"white\"&gt;\r\n  &lt;div class=\"white\"&gt;\r\n     &lt;slot&gt;&lt;\/slot&gt;\r\n  &lt;\/div&gt;\r\n&lt;\/script&gt;<\/code><\/pre>\n<p>(This is a larger demo, so it might make more sense if you play with it in a separate window\/tab)<\/p>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"BpjQzE\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"simple props\" class=\"codepen\"><a href=\"http:\/\/codepen.io\/sdras\/pen\/BpjQzE\">See the Pen<\/a>.<\/p>\n<figure id=\"post-250533\" class=\"align-right media-250533\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/wine-label1.gif\" alt=\"Wine Label Switching Out\" \/><\/figure>\n<p>Now, we're putting all of the SVG image data in the main app, but it's actually placed inside the <code>&lt;slot&gt;<\/code> in each component. This allows us to switch out pieces of content, or style things differently based on the usage, which is a really nice feature. You can see that we've allowed the user to decide which component they'll be using by creating a button that changes the \"selected\" value of the component.<\/p>\n<p>Right now we have everything in one slot but we could also use multiple slots, and differentiate them through naming if we'd like:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;!-- main vue app instance --&gt;\r\n&lt;app-comment&gt;\r\n  &lt;p slot=\"comment\"&gt;{{ comment.text }}&lt;\/p&gt;\r\n&lt;\/app-comment&gt;\r\n\r\n&lt;!-- individual component --&gt;\r\n&lt;script type=\"text\/x-template\" id=\"comment-template\"&gt;\r\n  &lt;div&gt;\r\n    &lt;slot name=\"comment\"&gt;&lt;\/slot&gt;\r\n  &lt;\/div&gt;\r\n&lt;\/script&gt;<\/code><\/pre>\n<p>We can switch between different components with the same referenced slots easily, but what happens when we want to be able to switch back and forth, but hold on to the individual state of each component? Currently, when we switch between black and white the templates switch out and the content stays the same. But maybe we have a situation where we want the black label to be completely different than the white label. There's a special component you can wrap it in called <code>&lt;keep-alive&gt;&lt;\/keep-alive&gt;<\/code> that will retain the state as you switch.<\/p>\n<p>Check out this deviation of the example above- create a black label, and then a different white label, and switch between them. You will see that the state of each is preserved, and are different from one another:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;keep-alive&gt;\r\n  &lt;component :is=\"selected\"&gt;\r\n    ...\r\n  &lt;\/component&gt;\r\n&lt;\/keep-alive&gt;<\/code><\/pre>\n<figure id=\"post-250534\" class=\"align-right media-250534\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/wine-label2.gif\" alt=\"Wine Label Keep-Alive Demo\" \/><\/figure>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"db71c231f760ee3a53e9d4e65f8745b8\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"Vue Wine Label Maker- with keep-alive\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/sdras\/pen\/db71c231f760ee3a53e9d4e65f8745b8\/\">Vue Wine Label Maker- with keep-alive<\/a> by Sarah Drasner (<a href=\"http:\/\/codepen.io\/sdras\">@sdras<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>I love this feature of the API.<\/p>\n<p>This is all nice, but for simplicity\u2019s sake, we've been sticking everything in one or two files. It would be much better organized while we build out our site if we could separate the components out into different files, and import them as we need them, and truly that's how real development in Vue is typically done, so let's run through that next. Tune in for the next part when we talk about Vue-cli, build processes, and Vuex for state management!<\/p>\n<div class=\"article-series\">\n<h4>Article Series:<\/h4>\n<ol>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-1-rendering-directives-events\/\">Rendering, Directives, and Events<\/a><\/li>\n<li>Components, Props, and Slots <strong>(You are here!)<\/strong><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-3-vue-cli-lifecycle-hooks\/\">Vue-cli<\/a><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-4-vuex\/\">Vuex<\/a><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-5-animations\/\">Animations<\/a><\/li>\n<\/ol>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>This is the second part in a five-part series about the JavaScript framework, Vue.js. In this part, we&#8217;ll go over Components, Props, and Slots. This is not intended to be a complete guide, but rather an overview of the basics to get you up and running so you can get to know Vue.js and understand [&hellip;]<\/p>\n","protected":false},"author":7699,"featured_media":250564,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4,20],"tags":[844,432,1110,1073],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250363"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/7699"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250363"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250363\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/250564"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250363"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250363"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250363"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250731,"date":"2017-01-31T05:55:24","date_gmt":"2017-01-31T12:55:24","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250731"},"modified":"2017-01-31T05:55:24","modified_gmt":"2017-01-31T12:55:24","slug":"promise-burger-party","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/promise-burger-party\/","title":{"rendered":"The Promise of a Burger Party"},"content":{"rendered":"<p>Mariko Kosaka with an elaborate and wonderful metaphor.<\/p>\n<p>What is a Promise in JavaScript? It's like if you go to a restaurant and order a burger and a shake. The restaurant needs to prepare your food, so after you pay, you get a tray with a buzzer on it. The tray is the Promise.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Mariko Kosaka with an elaborate and wonderful metaphor. What is a Promise in JavaScript? It&#8217;s like if you go to a restaurant and order a burger and a shake. The restaurant needs to prepare your food, so after you pay, you get a tray with a buzzer on it. The tray is the Promise.<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[432,1108],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250731"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250731"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250731\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250731"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250731"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250731"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250728,"date":"2017-01-31T05:46:08","date_gmt":"2017-01-31T12:46:08","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250728"},"modified":"2017-01-31T05:46:58","modified_gmt":"2017-01-31T12:46:58","slug":"implementing-save-offline-service-workers","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/implementing-save-offline-service-workers\/","title":{"rendered":"Implementing &#8220;Save For Offline&#8221; with Service Workers"},"content":{"rendered":"<p>A straightforward tutorial by Una Kravets on caching assets and individually requested articles with Service Workers for offline reading.<\/p>\n<p>I'm curious what the best practice will become. It's possible that asking users to click something is it. Also possible: passively caching articles based on recently published, currently viewing, or related to currently viewing.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>A straightforward tutorial by Una Kravets on caching assets and individually requested articles with Service Workers for offline reading. I&#8217;m curious what the best practice will become. It&#8217;s possible that asking users to click something is it. Also possible: passively caching articles based on recently published, currently viewing, or related to currently viewing.<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[649,949],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250728"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250728"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250728\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250728"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250728"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250728"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250336,"date":"2017-01-30T08:14:51","date_gmt":"2017-01-30T15:14:51","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250336"},"modified":"2017-02-03T08:21:03","modified_gmt":"2017-02-03T15:21:03","slug":"intro-to-vue-1-rendering-directives-events","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/intro-to-vue-1-rendering-directives-events\/","title":{"rendered":"Intro to Vue.js: Rendering, Directives, and Events"},"content":{"rendered":"<p>If I was going to sum up my experiences with <a href=\"https:\/\/vuejs.org\/\">Vue<\/a> in a sentence, I'd probably say something like \"it's just so reasonable\" or \"It gives me the tools I want when I want them, and never gets in my way\". Again and again, when learning Vue, I smiled to myself. It just made sense, elegantly.<\/p>\n<p>This is <em>my own<\/em> introductory take on Vue. It's the article I wish I had when I was first learning Vue. If you'd like a more non-partisan approach, please visit Vue's very well thought out and easy to follow <a href=\"https:\/\/vuejs.org\/v2\/guide\/\">Guide<\/a>.<\/p>\n<p><!--more--><\/p>\n<figure id=\"post-250559\" class=\"align-none media-250559\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/vue-1.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/vue-1.jpg 800w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/vue-1-300x190.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/vue-1-768x487.jpg 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<div class=\"article-series\">\n<h4>Article Series:<\/h4>\n<ol>\n<li>Rendering, Directives, and Events <strong>(You are here!)<\/strong><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-2-components-props-slots\/\">Components, Props, and Slots<\/a><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-3-vue-cli-lifecycle-hooks\/\">Vue-cli<\/a><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-4-vuex\/\">Vuex<\/a><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-5-animations\/\">Animations<\/a><\/li>\n<\/ol>\n<\/div>\n<p>One of my favorite things about Vue is that it takes all of the successful things from other frameworks, and incorporates them without getting disorganized. Some examples that stand out for me:<\/p>\n<ul>\n<li>A virtual DOM with reactive components that offer the View layer only, props and a Redux-like store similar to React.<\/li>\n<li>Conditional rendering, and services, similar to Angular.<\/li>\n<li>Inspired by Polymer in part in terms of simplicity and performance, Vue offers a similar development style as HTML, styles, and JavaScript are composed in tandem.<\/li>\n<\/ul>\n<p>Some benefits I've enjoyed over Vue's competitors: cleaner, more semantic API offerings, slightly better performance than React, no use of polyfills like Polymer, and an isolated, less opinionated view than Angular, which is an MVC.<\/p>\n<p>I could go on, but it's probably better if you read their comprehensive and community-driven <a href=\"https:\/\/vuejs.org\/v2\/guide\/comparison.html\">comparison with other frameworks<\/a>. It's worth a read, but you can skip back to it later if you\u2019d like to dive into the code.<\/p>\n<h3>Let\u2019s Get Started!<\/h3>\n<p>We can't kick this off without the obligatory \"Hello, world!\" example. Let's do that so you can get up and running:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;div id=\"app\"&gt;\r\n {{ text }} Nice to meet Vue.\r\n&lt;\/div&gt;<\/code><\/pre>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">new Vue({\r\n el: '#app',\r\n data: {\r\n   text: 'Hello World!'\r\n }\r\n});<\/code><\/pre>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"b52b1252469a353830683aeaccbecd01\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"Vue Hello World\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/sdras\/pen\/b52b1252469a353830683aeaccbecd01\/\">Vue Hello World<\/a> by Sarah Drasner (<a href=\"http:\/\/codepen.io\/sdras\">@sdras<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>If you're familiar with React, this will have some similarities. We've escaped into JavaScript in the middle of the content with the mustache template and used a variable, but one difference is we are working with straight up HTML instead of <a href=\"https:\/\/facebook.github.io\/react\/docs\/introducing-jsx.html\">JSX<\/a>. JSX is pretty easy to work with, but I do think it's nice that I don't have to spend time changing <code>class<\/code> to <code>className<\/code>, etc. You'll also notice that this is pretty lightweight to get up and running. <\/p>\n<p>Now let's try Vue out with something I really love: loops and conditional rendering.<\/p>\n<h3>Conditional Rendering<\/h3>\n<p>Let's say I have a set of items, like navigation, that I know I'm going to reuse. It might make sense to put it in an array to update it in a few places dynamically and consistently. In vanilla JS (with Babel) we might do something like this: create the array, then create an empty string where we add each item wrapped in an <code>&lt;li&gt;<\/code>, and then wrap all of that in a <code>&lt;ul&gt;<\/code> and add it to the DOM with innerHTML:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;div id=\"container\"&gt;&lt;\/div&gt;<\/code><\/pre>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">const items = [\r\n  'thingie',\r\n  'another thingie',\r\n  'lots of stuff',\r\n  'yadda yadda'\r\n];\r\n\r\nfunction listOfStuff() {\r\n  let full_list = '';\r\n  for (let i = 0; i &lt; items.length; i++) {\r\n      full_list = full_list + `&lt;li&gt; ${items[i]} &lt;\/li&gt;`\r\n  }\r\n  const contain = document.querySelector('#container');\r\n  contain.innerHTML = `&lt;ul&gt; ${full_list} &lt;\/ul&gt;`;     \r\n}\r\n\r\nlistOfStuff();<\/code><\/pre>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"e699f60b79b90a35401cc2bcbc588159\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"e699f60b79b90a35401cc2bcbc588159\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/sdras\/pen\/e699f60b79b90a35401cc2bcbc588159\/\">e699f60b79b90a35401cc2bcbc588159<\/a> by Sarah Drasner (<a href=\"http:\/\/codepen.io\/sdras\">@sdras<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>This works fine, but it's a bit messy for something so standard. Now let's implement that same thing with Vue's loop with <code>v-for<\/code>:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;div id=\"app\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li v-for=\"item in items\"&gt;\r\n      {{ item }}\r\n    &lt;\/li&gt;\r\n  &lt;\/ul&gt;\r\n&lt;\/div&gt;<\/code><\/pre>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">const app4 = new Vue({\r\n  el: '#app',\r\n  data: {\r\n    items: [\r\n      'thingie',\r\n      'another thingie',\r\n      'lots of stuff',\r\n      'yadda yadda'\r\n    ]\r\n  }\r\n});<\/code><\/pre>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"af6307c633262350c9642f554ff64b55\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"Conditional Rendering in Vue\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/sdras\/pen\/af6307c633262350c9642f554ff64b55\/\">Conditional Rendering in Vue<\/a> by Sarah Drasner (<a href=\"http:\/\/codepen.io\/sdras\">@sdras<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Pretty clean and declarative. If you're familiar with Angular, this will likely be familiar to you. I find this to be such a clean and legible way to conditionally render. If you jumped into the code and had to update it, you could do so very easily.<\/p>\n<p>Another really nice offering is dynamic binding with v-model. Check this out:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;div id=\"app\"&gt;\r\n  &lt;h3&gt;Type here:&lt;\/h3&gt;\r\n  &lt;textarea v-model=\"message\" class=\"message\" rows=\"5\" maxlength=\"72\"&gt;&lt;\/textarea&gt;&lt;br&gt;\r\n  &lt;p class=\"booktext\"&gt;{{ message }} &lt;\/p&gt;\r\n&lt;\/div&gt;<\/code><\/pre>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">new Vue({\r\n  el: '#app',\r\n  data() {\r\n    return {\r\n      message: 'This is a good place to type things.'  \r\n    }\r\n  }\r\n});<\/code><\/pre>\n<p data-height=\"560\" data-theme-id=\"1\" data-slug-hash=\"fc5a128716814995b888d362a5e1b367\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"Vue Book v-model basic\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/sdras\/pen\/fc5a128716814995b888d362a5e1b367\/\">Vue Book v-model basic<\/a> by Sarah Drasner (<a href=\"http:\/\/codepen.io\/sdras\">@sdras<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>You'll probably notice two things about this demo. First, that it really took nothing at all to type directly into the book and dynamically update the text. Vue enables us to very easily set up two-way binding between the <code>&lt;textarea&gt;<\/code> and the <code>&lt;p&gt;<\/code> with <code>v-model<\/code>.<\/p>\n<p>The other thing you might notice is that we're now putting data in a function. In this example, it would work without doing so. We could have just put it in an object like our earlier examples. But this would only work for the Vue instance and be exactly the same across the application (thus, not so great for individual components). It's OK for one Vue instance, but this will share data across all of the child components as well. It's good practice to start putting data in a function because we'll need to when we start using components and want them to each hold state of their own. <\/p>\n<p>These aren't the only easy input bindings available to you at all, and even <code>v-if<\/code> has an alternate, <code>v-show<\/code>, which won't mount\/unmount the component, but rather, leave it in the DOM and toggle visibility. <\/p>\n<p>There are <a href=\"https:\/\/vuejs.org\/v2\/api\/#Directives\">so many more directives<\/a> available to you, here\u2019s a sampling of some of the ones I use very often. A lot of these offer shortcuts as well, so I\u2019ll show both. From here on, we\u2019ll mostly use the shortcuts, so it's good to at least familiarize yourself with them a little bit in this table.<\/p>\n<div class=\"overflow-table-wrap\">\n<table class=\"overflow-table\">\n<tr>\n<th width=\"20%\">Name<\/th>\n<th width=\"15%\">Shortcut<\/th>\n<th width=\"20%\">Purpose<\/th>\n<th width=\"40%\">Example<\/th>\n<\/tr>\n<tr>\n<td><code>v-if, v-else-if, v-else<\/code><\/td>\n<td>none<\/td>\n<td>Conditional Rendering<\/td>\n<td><code>&lt;g v-if=\"flourish === 'A'\"&gt;&lt;\/g&gt;<br \/>\n     &lt;g v-else-if=\"flourish === 'B'\"&gt;&lt;\/g&gt;<br \/>\n      &lt;g v-else&gt;&lt;\/g&gt;<\/code><\/td>\n<\/tr>\n<tr>\n<td><code>v-bind<\/code><\/td>\n<td>:<\/td>\n<td>Bind attributes dynamically, or pass props<\/td>\n<td><code>&lt;div :style=\"{ background: color }\"&gt;&lt;\/div&gt;<\/code><\/td>\n<\/tr>\n<tr>\n<td><code>v-on<\/code><\/td>\n<td>@<\/td>\n<td>Attaches an event listener to the element<\/td>\n<td><code>&lt;button @click=\"fnName\"&gt;&lt;\/button&gt;<\/code><\/td>\n<\/tr>\n<tr>\n<td><code>v-model<\/code><\/td>\n<td>none<\/td>\n<td>Creates two-way binding<\/td>\n<td><code>&lt;textarea rows=\"5\" v-model=\"message\" maxlength=\"72\"&gt;&lt;\/textarea&gt;<\/code><\/td>\n<\/tr>\n<tr>\n<td><code>v-pre<\/code><\/td>\n<td>none<\/td>\n<td>Skip compiling for raw content, can boost performance<\/td>\n<td><code>&lt;div v-pre&gt;{{ raw content with no methods}}&lt;\/div&gt;<\/code><\/td>\n<\/tr>\n<tr>\n<td><code>v-once<\/code><\/td>\n<td>none<\/td>\n<td>Don\u2019t rerender<\/td>\n<td><code>&lt;div class=\u201dv-once\u201d&gt;Keep me from rerendering&lt;\/div&gt;<\/code><\/td>\n<\/tr>\n<tr>\n<td><code>v-show<\/code><\/td>\n<td>none<\/td>\n<td>Will show or hide a component\/element based on state, but will leave it in the DOM without unmounting (unlike v-if)<\/td>\n<td><code>&lt;child v-show=\u201dshowComponent\u201d&gt;&lt;\/child&gt;<\/code> (toggles visibility when showComponent is true)<\/td>\n<\/tr>\n<\/table>\n<\/div>\n<p>There are also really nice event modifiers and other API offerings to speed up development like:<\/p>\n<ul>\n<li><code>@mousemove.stop<\/code> is comparable to <code>e.stopPropogation()<\/code><\/li>\n<li><code>@mousemove.prevent<\/code> this is like <code>e.preventDefault()<\/code><\/li>\n<li><code>@submit.prevent<\/code> this will no longer reload the page on submission<\/code><\/li>\n<li><code>@click.once<\/code> not to be confused with v-once, this <em>click event<\/em> will be triggered once.<\/li>\n<li><code>v-model.lazy<\/code> won\u2019t populate the content automatically, it will wait to bind until an event happens.<\/li>\n<\/ul>\n<p>You can even <a href=\"https:\/\/vuejs.org\/v2\/api\/#keyCodes\">configure your own keycodes<\/a>. <\/p>\n<p>We'll use these in examples a bit more coming up!<\/p>\n<h3>Event Handling<\/h3>\n<p>Binding that data is all well and good but only gets us so far without event handling, so let's cover that next! This is one of my favorite parts. We'll use the binding and listeners above to listen to DOM events.<\/p>\n<p>There are a few different ways to create usable methods within our application. Just like in vanilla JS, you can pick your function names, but methods are intuitively called, well, methods!<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">new Vue({\r\n  el: '#app',\r\n  data() {\r\n   return {\r\n    counter: 0\r\n   }\r\n  },\r\n  methods: {\r\n   increment() {\r\n     this.counter++;\r\n   }\r\n  }\r\n});<\/code><\/pre>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;div id=\"app\"&gt;\r\n  &lt;p&gt;&lt;button @click=\"increment\"&gt;+&lt;\/button&gt; {{ counter }}&lt;\/p&gt;\r\n&lt;\/div&gt;<\/code><\/pre>\n<p>We're creating a method called <code>increment<\/code>, and you can see that this automatically binds to <code>this<\/code> and will refer to the data in this instance and component. I love this kind of automatic binding, it's so nice to not have to <code>console.log<\/code> to see what <code>this<\/code> is referring to. We're using shorthand <code>@click<\/code> to bind to the click event here.<\/p>\n<p>Methods aren't the only way to create a custom function. You can also use <code>watch<\/code>. The main difference is that methods are good for small, synchronous calculations, while <code>watch<\/code> is helpful with more tasking or asynchronous or expensive operations in response to changing data. I tend to use watch most often with animations.<\/p>\n<p>Let's go a little further and see how we'd pass in the event itself and do some dynamic style bindings. If you recall in the table above, instead of writing <code>v-bind<\/code>, you can use the shortcut <code>:<\/code>, so we can bind pretty easily to style (as well as other attributes) by using <code>:style<\/code> and passing in state, or <code>:class<\/code>. There are truly a lot of uses for this kind of binding. <\/p>\n<p>In the example below, we're using <code>hsl()<\/code>, in which <a href=\"https:\/\/css-tricks.com\/nerds-guide-color-web\/\">hue calculated as a circle of degrees of color<\/a> that wraps all the way around. This is good for our use as it will never fail, so as we track our mouse in pixels across the screen, the background style will update accordingly. We're using <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Template_literals\">ES6 template literals<\/a> here. <\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">new Vue({\r\n  el: '#app',\r\n  data() {\r\n    return {\r\n      counter: 0,\r\n      x: 0\r\n    }\r\n  },\r\n  methods: {\r\n    increment() {\r\n      this.counter++;\r\n   },\r\n   decrement() {\r\n     this.counter--;\r\n   },\r\n   xCoordinate(e) {\r\n     this.x = e.clientX;\r\n   }\r\n  }\r\n});<\/code><\/pre>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;div id=\"app\" :style=\"{ backgroundColor: `hsl(${x}, 80%, 50%)` }\" @mousemove=\"xCoordinate\"&gt;\r\n  &lt;p&gt;&lt;button @click=\"increment\"&gt;+&lt;\/button&gt; {{ counter }} &lt;button @click=\"decrement\"&gt;-&lt;\/button&gt;&lt;\/p&gt;\r\n  &lt;p&gt;Pixels across: {{ x }}&lt;\/p&gt;\r\n&lt;\/div&gt;<\/code><\/pre>\n<p data-height=\"345\" data-theme-id=\"1\" data-slug-hash=\"75205908c2189487ca91f9b49c1c978a\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"Showing simple event handling\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/sdras\/pen\/75205908c2189487ca91f9b49c1c978a\/\">Showing simple event handling<\/a> by Sarah Drasner (<a href=\"http:\/\/codepen.io\/sdras\">@sdras<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>You can see that we didn't even need to pass in the event to the <code>@click<\/code> handler, Vue will automatically pass it for you to be available as a parameter for the method. (shown as <code>e<\/code> here).<\/p>\n<p>Also, native methods can also be used, such as <code>event.clientX<\/code>, and it's simple to pair them with <code>this<\/code> instances. In the style binding on the element there's camel casing for hyphenated CSS properties. In this example, you can see how simple and declarative Vue is to work with.<\/p>\n<p>We don't even actually need to create a method at all, we could also increase the counter directly inline in the component if the event is simple enough:<\/p>\n<pre rel=\"HTML\" data-line=\"5,7\"><code class=\"language-markup\">&lt;div id=\"app\"&gt;\r\n  &lt;div class=\"item\"&gt;\r\n    &lt;img src=\"https:\/\/s3-us-west-2.amazonaws.com\/s.cdpn.io\/28963\/backpack.jpg\" width=\"235\" height=\"300\"\/&gt;\r\n    &lt;div class=\"quantity\"&gt;\r\n      &lt;button class=\"inc\" @click=\"counter &gt; 0 ? counter -= 1 : 0\"&gt;-&lt;\/button&gt;\r\n      &lt;span class=\"quant-text\"&gt;Quantity: {{ counter }}&lt;\/span&gt;\r\n      &lt;button class=\"inc\" @click=\"counter += 1\"&gt;+&lt;\/button&gt;\r\n    &lt;\/div&gt;\r\n    &lt;button class=\"submit\" @click=\"\"&gt;Submit&lt;\/button&gt;\r\n  &lt;\/div&gt;&lt;!--item--&gt;\r\n&lt;\/div&gt;<\/code><\/pre>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">new Vue({\r\n  el: '#app',\r\n  data() {\r\n    return {\r\n      counter: 0\r\n    }\r\n  }\r\n});<\/code><\/pre>\n<p data-height=\"535\" data-theme-id=\"1\" data-slug-hash=\"f979956bee610da7563db67b1358619f\" data-default-tab=\"result\" data-user=\"sdras\" data-embed-version=\"2\" data-pen-title=\"Backpack Shop Counter\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/sdras\/pen\/f979956bee610da7563db67b1358619f\/\">Backpack Shop Counter<\/a> by Sarah Drasner (<a href=\"http:\/\/codepen.io\/sdras\">@sdras<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>You can see that we're updating the state directly in the <code>@click<\/code> handler without a method at all- you can also see that we can add a little bit of logic in there as well (as you wouldn't have lower than zero items on a shopping site). Once this logic gets too complex, though, you sacrifice legibility, so it's good to move it into a method. It's nice to have the option for either, though.<\/p>\n<div class=\"article-series\">\n<h4>Article Series:<\/h4>\n<ol>\n<li>Rendering, Directives, and Events <strong>(You are here!)<\/strong><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-2-components-props-slots\/\">Components, Props, and Slots<\/a><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-3-vue-cli-lifecycle-hooks\/\">Vue-cli<\/a><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-4-vuex\/\">Vuex<\/a><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/intro-to-vue-5-animations\/\">Animations<\/a><\/li>\n<\/ol>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>If I was going to sum up my experiences with Vue in a sentence, I\u2019d probably say something like &#8220;it&#8217;s just so reasonable&#8221; or &#8220;It gives me the tools I want when I want them, and never gets in my way&#8221;. Again and again when learning Vue, I smiled to myself. It just made sense, elegantly.<\/p>\n<p>This is <em>my own<\/em> introductory take on Vue. It&#8217;s the article I wish I had when I was first learning Vue. If you&#8217;d like a more non-partisan approach, please visit Vue&#8217;s very well thought out and easy to follow <a href=\"https:\/\/vuejs.org\/v2\/guide\/\">Guide<\/a>.<\/p>\n","protected":false},"author":7699,"featured_media":250559,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4,20],"tags":[1102,583,432,1073],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250336"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/7699"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250336"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250336\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/250559"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250336"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250336"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250336"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250705,"date":"2017-01-30T06:58:20","date_gmt":"2017-01-30T13:58:20","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250705"},"modified":"2017-01-30T06:58:20","modified_gmt":"2017-01-30T13:58:20","slug":"practical-guide-progressive-web-apps-organisations-dont-know-anything-progressive-web-apps","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/practical-guide-progressive-web-apps-organisations-dont-know-anything-progressive-web-apps\/","title":{"rendered":"A practical guide to Progressive Web Apps for organisations who don\u2019t know anything about Progressive Web Apps"},"content":{"rendered":"<p>Sally Jenkinson:<\/p>\n<blockquote><p>Progressive Web Apps (sometimes referred to as PWAs, because everything in tech needs an acronym) is the encapsulating term for websites following a certain approach, that meet particular technical criteria. The \"app\" involvement in the name isn\u2019t an accident \u2013 these creations share much of the functionality that you\u2019ll find in native experiences \u2013 but really, they're just websites.<\/p><\/blockquote>\n<p>It's like if you build a website that is <em>so damn good<\/em>, you get to have a home screen icon on mobile devices. And <em>good<\/em> is defined by performance and progressive enhancement.<\/p>\n<p>When you hear people say \"I want the web to win\" they typically mean \"I don't want to lose the web to proprietary app development\". PWAs seem like an early step toward making web apps not second-class citizens on mobile devices. Maybe there is a future where native app development <em>is<\/em> web development.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Sally Jenkinson: Progressive Web Apps (sometimes referred to as PWAs, because everything in tech needs an acronym) is the encapsulating term for websites following a certain approach, that meet particular technical criteria. The &#8220;app&#8221; involvement in the name isn\u2019t an accident \u2013 these creations share much of the functionality that you\u2019ll find in native experiences [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[592,620,1106],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250705"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250705"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250705\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250705"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250705"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250705"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250692,"date":"2017-01-29T09:16:33","date_gmt":"2017-01-29T16:16:33","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250692"},"modified":"2017-01-29T09:16:33","modified_gmt":"2017-01-29T16:16:33","slug":"free-faster","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/free-faster\/","title":{"rendered":"Free, faster."},"content":{"rendered":"<p>Ethan Marcotte, on time- and budget-constrained  organizations websites:<\/p>\n<blockquote><p>Between the urgency of their work and the size of their resources, spending months on a full redesign isn\u2019t something they can afford to do. Given that, a free theme for, say, WordPress can yield a considerable amount of value, especially to budget-constrained organizations. They can launch their redesign more quickly, and continue reaching the people who need their information most.<\/p><\/blockquote>\n<p>So Ethan takes a look at a bunch of free themes, so at least a responsible choice can be made there, and finds<\/p>\n<blockquote><p>the results were surprising: on a 3G connection, the slower themes I tested took anywhere from 45-90 seconds for any content to appear. In other words, the pages took roughly a minute before they were <em>usable<\/em>.<\/p><\/blockquote>\n<p>Pretty rough. <\/p>\n<p>What I find particularly scary is that these are just empty themes. I usually attribute the slowness of sites in this category (off the shelf, slap-a-CMS on it) to be what happens on top of the theme. Stuff like uploading too many\/too large of images and installing a million plugins that load their own set of resources.<\/p>\n<p>I think it shows off some recent technology in a new light: saving us from ourselves. HTTP\/2 makes concatenating resources less important, and that's <em>saving us from ourselves<\/em> and those million plugins individual CSS and JavaScript files. WordPress does responsive images <a href=\"https:\/\/css-tricks.com\/responsive-images-in-wordpress-core\/\">by default<\/a> now, that's <em>saving us from ourselves<\/em> and ensuring we aren't loading more image than we need. <a href=\"https:\/\/css-tricks.com\/taking-amp-for-a-spin\/\">AMP<\/a>, as a technology, is saying y'all have lost the plot here and we need to save you from yourselves.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Ethan Marcotte, on time- and budget-constrained organizations websites: Between the urgency of their work and the size of their resources, spending months on a full redesign isn\u2019t something they can afford to do. Given that, a free theme for, say, WordPress can yield a considerable amount of value, especially to budget-constrained organizations. They can launch [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[425,592,1104,264],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250692"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250692"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250692\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250692"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250692"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250692"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250642,"date":"2017-01-28T12:10:49","date_gmt":"2017-01-28T19:10:49","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250642"},"modified":"2017-01-28T12:15:41","modified_gmt":"2017-01-28T19:15:41","slug":"media-object-bunch-ways","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/media-object-bunch-ways\/","title":{"rendered":"The Media Object, A Bunch of Ways"},"content":{"rendered":"<p>The Media Object pattern is: image thingy on the left, heading and text on the right. <\/p>\n<p>That's what Nicole Sullivan <a href=\"http:\/\/www.stubbornella.org\/content\/2010\/06\/25\/the-media-object-saves-hundreds-of-lines-of-code\/\">called it<\/a> and the <a href=\"http:\/\/v4-alpha.getbootstrap.com\/layout\/media-object\/\">name stuck<\/a>. It's a pretty simple pattern, but like all things web design, it can be done many ways.<\/p>\n<p><!--more--><\/p>\n<figure id=\"post-250643\" class=\"align-none media-250643\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/media-object.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/media-object.png 986w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/media-object-300x128.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/media-object-768x329.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Bootstrap's version, which uses table layout in v3 and flexbox in v4.<\/figcaption><\/figure>\n<p>Let's take a crack at a lot of those ways. In these demos, I'm not particularly focusing on naming conventions, semantics, or browser support. Just possibilities.<\/p>\n<h3>With Floats<\/h3>\n<p>Certainly, we could float the image to the left!<\/p>\n<p data-height=\"381\" data-theme-id=\"1\" data-slug-hash=\"QdGQJZ\" data-default-tab=\"css,result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Media Block #1\" class=\"codepen\">See the Pen <a href=\"https:\/\/codepen.io\/chriscoyier\/pen\/QdGQJZ\/\">Media Block #1<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>But just floating means you get wrapping. Wrapping might be perfectly fine, or you might not want it.<\/p>\n<figure id=\"post-250647\" class=\"align-none media-250647\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/wrapping-issue.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/wrapping-issue.png 766w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/wrapping-issue-300x181.png 300w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>I'd say in the typical media object pattern, there is no wrapping.<\/figcaption><\/figure>\n<p>To fix that, we could make sure all the text is wrapped in an element, then make sure that element has padding-left equal to the width of the image and any white space between them.<\/p>\n<p data-height=\"422\" data-theme-id=\"1\" data-slug-hash=\"dNZjvq\" data-default-tab=\"css,result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Media Block #2\" class=\"codepen\">See the Pen <a href=\"https:\/\/codepen.io\/chriscoyier\/pen\/dNZjvq\/\">Media Block #2<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Or, you could float <em>both sides<\/em>:<\/p>\n<p data-height=\"410\" data-theme-id=\"1\" data-slug-hash=\"OWOwmK\" data-default-tab=\"css,result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Media Block #3\" class=\"codepen\">See the Pen <a href=\"https:\/\/codepen.io\/chriscoyier\/pen\/OWOwmK\/\">Media Block #3<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3>With Flexbox<\/h3>\n<p><a href=\"https:\/\/css-tricks.com\/snippets\/css\/a-guide-to-flexbox\/\">Flexbox<\/a> makes quick work of it!<\/p>\n<p data-height=\"357\" data-theme-id=\"1\" data-slug-hash=\"WRXKXr\" data-default-tab=\"css,result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Media Block #4\" class=\"codepen\">See the Pen <a href=\"https:\/\/codepen.io\/chriscoyier\/pen\/WRXKXr\/\">Media Block #4<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Note that we're allowing the <code>&lt;img&gt;<\/code> to become a flex item. We used <code>align-items: flex-start;<\/code> to make sure it doesn't stretch out to the same height as the text.<\/p>\n<h3>With Tables<\/h3>\n<p>The media object could be a two-cell row of a table:<\/p>\n<p data-height=\"338\" data-theme-id=\"1\" data-slug-hash=\"LxOBMM\" data-default-tab=\"html,result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Media Block #5\" class=\"codepen\">See the Pen <a href=\"https:\/\/codepen.io\/chriscoyier\/pen\/LxOBMM\/\">Media Block #5<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>If you wanted to keep non-<code>&lt;table&gt;<\/code> markup, it's still possible to make it behave like a table via <code>display: table;<\/code>:<\/p>\n<p data-height=\"334\" data-theme-id=\"1\" data-slug-hash=\"xgPJBy\" data-default-tab=\"css,result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Media Block #6\" class=\"codepen\">See the Pen <a href=\"https:\/\/codepen.io\/chriscoyier\/pen\/xgPJBy\/\">Media Block #6<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3>With Grid<\/h3>\n<p>Grid layout allows us to define a set of columns. It's quite easy to set up the first column to the fixed width we want, and the second column to take up the rest of the space. <\/p>\n<p data-height=\"349\" data-theme-id=\"1\" data-slug-hash=\"YNEjbo\" data-default-tab=\"css,result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Media Block #7\" class=\"codepen\">See the Pen <a href=\"https:\/\/codepen.io\/chriscoyier\/pen\/YNEjbo\/\">Media Block #7<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Like in flexbox, we can avoid the image stretching itself out by aligning it to the top with <code>align-self: start;<\/code>.<\/p>\n<hr>\n<p>I'm sure y'all can find about a dozen more ways to do it!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>The Media Object pattern is: image thingy on the left, heading and text on the right. That&#8217;s what Nicole Sullivan called it and the name stuck. It&#8217;s a pretty simple pattern, but like all things web design, it can be done many ways.<\/p>\n","protected":false},"author":3,"featured_media":250643,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[532,1101,686,586,594],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250642"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250642"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250642\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/250643"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250642"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250642"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250642"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250623,"date":"2017-01-28T08:17:24","date_gmt":"2017-01-28T15:17:24","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250623"},"modified":"2017-01-28T08:17:24","modified_gmt":"2017-01-28T15:17:24","slug":"align-svg-icons-text-say-goodbye-font-icons","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/align-svg-icons-text-say-goodbye-font-icons\/","title":{"rendered":"Align SVG Icons to Text and Say Goodbye to Font Icons"},"content":{"rendered":"<p>Elliot Dahl:<\/p>\n<blockquote><p>At Pivotal we've created an SVG icon system with React for use on our suite of products. This article is about my approach to styling the SVG icon system with CSS to make it easy and effective to use.<\/p><\/blockquote>\n<p>Alignment and icons (of any sort) will probably always be a bit tricky. It depends on two things that will be different on every site: the font and the icons. Elliot was able to get <a href=\"http:\/\/codepen.io\/elliotdahl\/pen\/ygYrvm\">perfect alignment with Arial<\/a> by pulling the icons down with   <code>bottom: -0.125em;<\/code> because Arial sites right along the baseline and the icons themselves were designed with a 12.5% ring of white space around the edges. It's a fairly common practice to design SVG icons with space along the edges (as annoying as it might be for alignment) because without the space, you might get awkward clipping on the edges with certain browsers\/resolutions\/zooming\/etc (sorry I don't have more detail handy).<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Elliot Dahl: At Pivotal we&#8217;ve created an SVG icon system with React for use on our suite of products. This article is about my approach to styling the SVG icon system with CSS to make it easy and effective to use. Alignment and icons (of any sort) will probably always be a bit tricky. It [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[1100,627,469],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250623"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250623"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250623\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250623"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250623"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250623"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250541,"date":"2017-01-27T07:12:02","date_gmt":"2017-01-27T14:12:02","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250541"},"modified":"2017-01-27T07:12:02","modified_gmt":"2017-01-27T14:12:02","slug":"real-css-tweets-vol","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/real-css-tweets-vol\/","title":{"rendered":"Real CSS Tweets (Vol. I)"},"content":{"rendered":"<p>We be tweetin' all the time about web design and development stuff. In fact, <a href=\"https:\/\/twitter.com\/real_css_tricks\">@Real_CSS_Tricks<\/a>, the official Twitter account for this site, is largely just an outgoing airhorn for the stuff we publish here and interesting things elsewhere. <a href=\"https:\/\/css-tricks.com\/about\/\">The human beings that operate this site<\/a> have their own accounts.  <\/p>\n<p>It's pretty interesting to see which tweets take off! Here's a list of the most popular tweets in the last year or so.<\/p>\n<p><!--more--><\/p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">Wanna see a decent little slider in a handful of lines of code? <a href=\"https:\/\/t.co\/zOsN4mhRFw\">pic.twitter.com\/zOsN4mhRFw<\/a><\/p>\n<p>&mdash; CSS-Tricks (@Real_CSS_Tricks) <a href=\"https:\/\/twitter.com\/Real_CSS_Tricks\/status\/790218623113580544\">October 23, 2016<\/a><\/p><\/blockquote>\n<p>That one turned into <a href=\"http:\/\/mediatemple.net\/blog\/tips\/carousels-dont-have-to-be-complicated\/\">a blog post<\/a> and <a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/QKYvNo\">demo<\/a>.<\/p>\n<hr>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">Loads of icons you can make with a single element (and pseudos)<a href=\"https:\/\/t.co\/s3VyHj2P11\">https:\/\/t.co\/s3VyHj2P11<\/a> <a href=\"https:\/\/t.co\/mlIkyjc86w\">pic.twitter.com\/mlIkyjc86w<\/a><\/p>\n<p>&mdash; CSS-Tricks (@Real_CSS_Tricks) <a href=\"https:\/\/twitter.com\/Real_CSS_Tricks\/status\/787756776825290752\">October 16, 2016<\/a><\/p><\/blockquote>\n<p>I'd say SVG is normally the best fit for this kind of thing, but this is a damn impressive experiment. I like the websites interface in how you can hover over the parts of CSS and it shows you what part of the icon it is.<\/p>\n<hr>\n<p>Some more helpful mini tools:<\/p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">CSS Peeper: <a href=\"https:\/\/t.co\/RRbKhut7Ea\">https:\/\/t.co\/RRbKhut7Ea<\/a><\/p>\n<p>Chrome extension that displays styling information about the current site. <a href=\"https:\/\/t.co\/bs3NtmgI3I\">pic.twitter.com\/bs3NtmgI3I<\/a><\/p>\n<p>&mdash; CSS-Tricks (@Real_CSS_Tricks) <a href=\"https:\/\/twitter.com\/Real_CSS_Tricks\/status\/812416020484857857\">December 23, 2016<\/a><\/p><\/blockquote>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">Always helpful to have a quickie site to snag nice colors.<a href=\"https:\/\/t.co\/h2Ei8syLEU\">https:\/\/t.co\/h2Ei8syLEU<\/a> <a href=\"https:\/\/t.co\/X0GGXyn5dE\">pic.twitter.com\/X0GGXyn5dE<\/a><\/p>\n<p>&mdash; CSS-Tricks (@Real_CSS_Tricks) <a href=\"https:\/\/twitter.com\/Real_CSS_Tricks\/status\/717119003726991360\">April 4, 2016<\/a><\/p><\/blockquote>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">Reminder that Clippy is an *awesomely helpful* little app for clip-path<a href=\"https:\/\/t.co\/SZILcdftSZ\">https:\/\/t.co\/SZILcdftSZ<\/a> <a href=\"https:\/\/t.co\/qcKvcaTO8a\">pic.twitter.com\/qcKvcaTO8a<\/a><\/p>\n<p>&mdash; CSS-Tricks (@Real_CSS_Tricks) <a href=\"https:\/\/twitter.com\/Real_CSS_Tricks\/status\/717793441548083200\">April 6, 2016<\/a><\/p><\/blockquote>\n<hr>\n<p>Demos!<\/p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">ooOOo fancy. &quot;Aquarelle is a watercolor js effect.&quot;<a href=\"https:\/\/t.co\/0ycH8fcyRV\">https:\/\/t.co\/0ycH8fcyRV<\/a> <a href=\"https:\/\/t.co\/NKqj0LKZf0\">pic.twitter.com\/NKqj0LKZf0<\/a><\/p>\n<p>&mdash; CSS-Tricks (@Real_CSS_Tricks) <a href=\"https:\/\/twitter.com\/Real_CSS_Tricks\/status\/821066892446203904\">January 16, 2017<\/a><\/p><\/blockquote>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">What a cool way to show nav with what is current visible: <a href=\"https:\/\/t.co\/u7yHR2QtlP\">https:\/\/t.co\/u7yHR2QtlP<\/a> <a href=\"https:\/\/t.co\/m53rzHD8El\">pic.twitter.com\/m53rzHD8El<\/a><\/p>\n<p>&mdash; CSS-Tricks (@Real_CSS_Tricks) <a href=\"https:\/\/twitter.com\/Real_CSS_Tricks\/status\/819921961069477889\">January 13, 2017<\/a><\/p><\/blockquote>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">The Twitter heart explosion animation by <a href=\"https:\/\/twitter.com\/anatudor\">@anatudor<\/a> with:<\/p>\n<p>1 Element<br \/>0 Images<br \/>0 JavaScript<a href=\"https:\/\/t.co\/9rcDYZwjrY\">https:\/\/t.co\/9rcDYZwjrY<\/a> <a href=\"https:\/\/t.co\/tA7zaMg3xl\">pic.twitter.com\/tA7zaMg3xl<\/a><\/p>\n<p>&mdash; CSS-Tricks (@Real_CSS_Tricks) <a href=\"https:\/\/twitter.com\/Real_CSS_Tricks\/status\/748169246329442304\">June 29, 2016<\/a><\/p><\/blockquote>\n<hr>\n<p>Little bits of code:<\/p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">Always so satisfying centering stuff with flexbox. <a href=\"https:\/\/t.co\/uH8u9EQhaw\">pic.twitter.com\/uH8u9EQhaw<\/a><\/p>\n<p>&mdash; CSS-Tricks (@Real_CSS_Tricks) <a href=\"https:\/\/twitter.com\/Real_CSS_Tricks\/status\/686688044435517440\">January 11, 2016<\/a><\/p><\/blockquote>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">Native (!) smooth scrolling: <\/p>\n<p>window.scroll({ <br \/>  top: 2500, <br \/>  left: 0, <br \/>  behavior: &#39;smooth&#39; <br \/>});<\/p>\n<p>Polyfill: <a href=\"https:\/\/t.co\/I6fHdLzDTT\">https:\/\/t.co\/I6fHdLzDTT<\/a><\/p>\n<p>&mdash; CSS-Tricks (@Real_CSS_Tricks) <a href=\"https:\/\/twitter.com\/Real_CSS_Tricks\/status\/793803763467386881\">November 2, 2016<\/a><\/p><\/blockquote>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">This was confusing me, but I think we have it sorted now.<a href=\"https:\/\/t.co\/uRuiJTA68y\">https:\/\/t.co\/uRuiJTA68y<\/a><a href=\"https:\/\/t.co\/cvYQA1riU4\">https:\/\/t.co\/cvYQA1riU4<\/a> <a href=\"https:\/\/t.co\/lQhba7QEpe\">pic.twitter.com\/lQhba7QEpe<\/a><\/p>\n<p>&mdash; CSS-Tricks (@Real_CSS_Tricks) <a href=\"https:\/\/twitter.com\/Real_CSS_Tricks\/status\/690674230351007745\">January 22, 2016<\/a><\/p><\/blockquote>\n<hr>\n<p>Stuff right here on CSS-Tricks:<\/p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">Input Masking :: <a href=\"https:\/\/t.co\/ee1bRnPPnl\">https:\/\/t.co\/ee1bRnPPnl<\/a> <a href=\"https:\/\/t.co\/xVZUIc8XTr\">pic.twitter.com\/xVZUIc8XTr<\/a><\/p>\n<p>&mdash; CSS-Tricks (@Real_CSS_Tricks) <a href=\"https:\/\/twitter.com\/Real_CSS_Tricks\/status\/803992653805355010\">November 30, 2016<\/a><\/p><\/blockquote>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">Sticky Footer<br \/>\u2776 \u2777 \u2778 \u2779 \u277a  <br \/>Ways!<a href=\"https:\/\/t.co\/4shCFk12UY\">https:\/\/t.co\/4shCFk12UY<\/a> <a href=\"https:\/\/t.co\/VjFmQnK65H\">pic.twitter.com\/VjFmQnK65H<\/a><\/p>\n<p>&mdash; CSS-Tricks (@Real_CSS_Tricks) <a href=\"https:\/\/twitter.com\/Real_CSS_Tricks\/status\/735493351818989570\">May 25, 2016<\/a><\/p><\/blockquote>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">So. Much. Info. on CSS Grid Layout.<a href=\"https:\/\/t.co\/lTmSHGztho\">https:\/\/t.co\/lTmSHGztho<\/a> <a href=\"https:\/\/t.co\/D0lBxQSQxG\">pic.twitter.com\/D0lBxQSQxG<\/a><\/p>\n<p>&mdash; CSS-Tricks (@Real_CSS_Tricks) <a href=\"https:\/\/twitter.com\/Real_CSS_Tricks\/status\/714905078054785024\">March 29, 2016<\/a><\/p><\/blockquote>\n<p>\u2764\ufe0f<\/p>\n<p><script async src=\"\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"><\/script><\/p>\n","protected":false},"excerpt":{"rendered":"<p>We be tweetin&#8217; all the time about web design and development stuff. In fact, @Real_CSS_Tricks, the official Twitter account for this site, is largely just an outgoing airhorn for the stuff we publish here and interesting things elsewhere. The human beings that operate this site have their own accounts. It&#8217;s pretty interesting to see which [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":250592,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250541"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250541"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250541\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/250592"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250541"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250541"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250541"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249435,"date":"2017-01-26T07:51:59","date_gmt":"2017-01-26T14:51:59","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249435"},"modified":"2017-01-26T07:51:59","modified_gmt":"2017-01-26T14:51:59","slug":"build-next-website-squarespace","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/build-next-website-squarespace\/","title":{"rendered":"Build Your Next Website with Squarespace"},"content":{"rendered":"<p>I've been reminded a few times lately how the web is both is a great enabler, allowing people all over the world to share ideas and build businesses, and a pain in the ass.<\/p>\n<p>The other day, I listened to a gentlemen explain to me his unique startup business, a marketplace connecting two groups of people. It will be a real challenge, I thought, reaching all these people on both sides and getting them to understand how his business can help. He was up for the challenge and making great headway. His biggest problem, he said, was his website. ARG! The website should not be the limiting factor here. It should not be the hard part. The website should be the easy part. The hard part is reaching all those people that can make or break this idea.<\/p>\n<p>A few weekends ago I watched a team come together and, highly reluctantly, spend their entire weekend handling frustrating infrastructure work on their website. Migrations gone haywire; upgrades being harder than they should have been. These people work with web tech, but web tech isn't their business. Their time is better spent building their business, and on the weekend, resting their brains.<\/p>\n<p>I'm not that worried about these folks. They have the expertise and resources to get through. I am worried about all the people out there who don't. I'm worried about the people who are entrenched in a website setup that is far too complex for them and actively disrupting their work and business. <\/p>\n<p>I wish more people used <a href=\"http:\/\/synd.co\/2iRd3p1\">Squarespace<\/a>. <\/p>\n<p>With Squarespace, you're getting a beautifully designed responsive site. You don't have to worry about upgrades or security. You control everything - you don't need permission or to call someone to change things on your site. You don't need to worry about how domain names work, or hosting, or SSL. It makes the website the easy part so you can focus on whatever your hard part is. Plus I'll worry about you less.<\/p>\n<p><strong>Use the offer code \"CSS\" at check-out to get 10% off your first purchase.<\/strong><\/p>\n<p><img src=\"https:\/\/ad.atdmt.com\/i\/img;p=11237204692607;idfa=;aaid=;idfa_lat=;aaid_lat=;cache=\" width=\"0px\" height=\"0px\"><\/p>\n","protected":false},"excerpt":{"rendered":"<p>I&#8217;ve been reminded a few times lately how the web is both is a great enabler, allowing people all over the world to share ideas and build businesses, and a pain in the ass. The other day, I listened to a gentlemen explain to me his unique startup business, a marketplace connecting two groups of [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17,508],"tags":[999],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249435"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249435"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249435\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249435"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249435"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249435"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250547,"date":"2017-01-26T07:49:17","date_gmt":"2017-01-26T14:49:17","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250547"},"modified":"2017-01-26T07:50:08","modified_gmt":"2017-01-26T14:50:08","slug":"svg-map-rollovers","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/svg-map-rollovers\/","title":{"rendered":"SVG Map Rollovers"},"content":{"rendered":"<p>Over on the Media Temple blog, I take Wikipedia's SVG map of the United States, add a written list of the state names, and make hover\/tap states. Hover\/tap the name of the state, highlight the state on the map. Hover\/tap the state on the map, highlight the name of the state. <a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/WRwxYO\/\">Demo.<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Over on the Media Temple blog, I take Wikipedia&#8217;s SVG map of the United States, add a written list of the state names, and make hover\/tap states. Hover\/tap the name of the state, highlight the state on the map. Hover\/tap the state on the map, highlight the name of the state. Demo.<\/p>\n","protected":false},"author":3,"featured_media":250549,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4,17],"tags":[1087,469,1088],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250547"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250547"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250547\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/250549"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250547"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250547"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250547"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250233,"date":"2017-01-25T11:51:47","date_gmt":"2017-01-25T18:51:47","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250233"},"modified":"2017-01-29T16:04:42","modified_gmt":"2017-01-29T23:04:42","slug":"lets-look-50-interesting-css-properties-values","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/lets-look-50-interesting-css-properties-values\/","title":{"rendered":"Let&#8217;s Look at 50+ Interesting CSS Properties &#038; Values"},"content":{"rendered":"<p>Can it be done with CSS? Do I need JavaScript? I know a lot of us ask these question when looking at designs and interactions. Recently I decided to dig into CSS and learn all of the properties. I spent a lot of time reading reference material, writing code, and finding new solutions to old problems with my newfound knowledge.<\/p>\n<p>Through my journey, I thought I would document and showcase 50 of the most interesting properties and values I found. I created use-cases for many of them, with simplified code samples you can look at, reference, and play with. I also included a number of properties that are still experimental, but will likely be usable soon. I also included several well-known properties but with lesser-known values, so you can deepen your knowledge of them even if you've already heard of them. There are also some browser-specific things in here.<\/p>\n<p>Let's go!<\/p>\n<p><!--more--><\/p>\n<div class=\"this-columns\">\n<ol>\n<li><a href=\"#all\">all<\/a><\/li>\n<li><a href=\"#angle\">angle<\/a><\/li>\n<li><a href=\"#animation-fill-mode\">animation-fill-mode<\/a><\/li>\n<li><a href=\"#animation-iteration-count\">animation-iteration-count<\/a><\/li>\n<li><a href=\"#backface-visibility\">backface-visibility<\/a><\/li>\n<li><a href=\"#background-attachment\">background-attachment<\/a><\/li>\n<li><a href=\"#background-blend-mode\">background-blend-mode<\/a><\/li>\n<li><a href=\"#background-clip\">background-clip<\/a><\/li>\n<li><a href=\"#background-origin\">background-origin<\/a><\/li>\n<li><a href=\"#box-decoration-break\">box-decoration-break<\/a><\/li>\n<li><a href=\"#calc\">calc<\/a><\/li>\n<li><a href=\"#column\">column<\/a><\/li>\n<li><a href=\"#content\">content<\/a><\/li>\n<li><a href=\"#counters\">counters<\/a><\/li>\n<li><a href=\"#currentcolor\">currentColor<\/a><\/li>\n<li><a href=\"#filter\">filter<\/a><\/li>\n<li><a href=\"#flex\">flex<\/a><\/li>\n<li><a href=\"#flex-basis\">flex-basis<\/a><\/li>\n<li><a href=\"#flex-flow\">flex-flow<\/a><\/li>\n<li><a href=\"#font-kerning\">font-kerning<\/a><\/li>\n<li><a href=\"#font-smoothing\">font-smoothing<\/a><\/li>\n<li><a href=\"#font-variant\">font-variant<\/a><\/li>\n<li><a href=\"#grid\">grid<\/a><\/li>\n<li><a href=\"#hyphens\">hyphens<\/a><\/li>\n<li><a href=\"#image-rendering\">image-rendering<\/a><\/li>\n<li><a href=\"#list-style-image\">list-style-image<\/a><\/li>\n<li><a href=\"#list-style-position\">list-style-position<\/a><\/li>\n<li><a href=\"#object-fit\">object-fit<\/a><\/li>\n<li><a href=\"#orphans\">orphans<\/a><\/li>\n<li><a href=\"#order\">order<\/a><\/li>\n<li><a href=\"#overflow-wrap\">overflow-wrap<\/a><\/li>\n<li><a href=\"#page-break\">page-break<\/a><\/li>\n<li><a href=\"#percentage\">percentage<\/a><\/li>\n<li><a href=\"#perspective\">perspective<\/a><\/li>\n<li><a href=\"#pointer-events\">pointer-events<\/a><\/li>\n<li><a href=\"#position\">position<\/a><\/li>\n<li><a href=\"#resize\">resize<\/a><\/li>\n<li><a href=\"#shape-outside\">shape-outside<\/a><\/li>\n<li><a href=\"#supports\">@supports<\/a><\/li>\n<li><a href=\"#var\">var()<\/a><\/li>\n<li><a href=\"#table-layout\">table-layout<\/a><\/li>\n<li><a href=\"#text-transform\">text-transform<\/a><\/li>\n<li><a href=\"#transition-timing-function\">transition-timing-function<\/a><\/li>\n<li><a href=\"#vh\">vh, vw, vmin, vmax<\/a><\/li>\n<li><a href=\"#white-space\">white-space<\/a><\/li>\n<li><a href=\"#word-break\">word-break<\/a><\/li>\n<li><a href=\"#word-spacing\">word-spacing<\/a><\/li>\n<li><a href=\"#will-change\">will-change<\/a><\/li>\n<li><a href=\"#writing-mode\">writing-mode<\/a><\/li>\n<li><a href=\"#webkit-autofill\">-webkit-autofill<\/a><\/li>\n<li><a href=\"#webkit-overflow-scrolling\">-webkit-overflow-scrolling<\/a><\/li>\n<li><a href=\"#webkit-touch-callout\">-webkit-touch-callout<\/a><\/li>\n<li><a href=\"#webkit-scrollbar\">-webkit-scrollbar<\/a><\/li>\n<li><a href=\"#animatable\">Animatable<\/a><\/li>\n<\/ol>\n<\/div>\n<h3 id=\"all\">all<\/h3>\n<p>The <a href=\"https:\/\/css-tricks.com\/almanac\/properties\/a\/all\/\"><code>all<\/code> property<\/a> resets every other property (apart from unicode-bidi and direction) properties to their initial or inherited state. It accepts these values:<\/p>\n<p><strong>initial:<\/strong> changes all the properties of the element or the element's parent their initial value<br \/>\n<strong>inherit:<\/strong> changes all the properties of the element or the element's parent to their parent value<br \/>\n<strong>unset:<\/strong> changes all the properties of the element or the element's parent to their parent value if they are inheritable or to their own value if not<\/p>\n<p data-height=\"300\" data-theme-id=\"1\" data-preview=\"true\" data-slug-hash=\"MJWpeb\" data-default-tab=\"css,result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"reset: all\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/gregh\/pen\/MJWpeb\/\">reset: all<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3 id=\"angle\">angle<\/h3>\n<p>Angles can be valid CSS values for some properties. We often use something like <code>transform: rotate(180deg)<\/code>, but \"deg\" isn't the only possible unit here. You can also use <code>grad<\/code>, <code>rad<\/code> and <code>turn<\/code> as well. Our <code>transform: rotate(180deg)<\/code>, for example, could be written as <code>transform: rotate(0.5turn)<\/code> as well. Say you want to rotate an element 4 times, it might be the easiest choice to write <code>rotate(4turn)<\/code>. <\/p>\n<p>I tested it in Chrome 54, Opera 41, Firefox 50 and Safari 10.<\/p>\n<p data-height=\"332\" data-theme-id=\"1\" data-preview=\"true\" data-slug-hash=\"zNOKNW\" data-default-tab=\"css,result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"angle~\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/gregh\/pen\/zNOKNW\/\">angle~<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3 id=\"animation-fill-mode\">animation-fill-mode<\/h3>\n<p>This property specifies what styles are applied to the element when the animation is <em>not<\/em> playing. Imagine a <code>@keyframe<\/code> animation that fades an element out (from <code>opacity: 1;<\/code> to <code>opacity 0;<\/code>). By default, after the animation is complete, it will jump back to its initial state.<\/p>\n<p data-height=\"300\" data-theme-id=\"1\" data-preview=\"true\" data-slug-hash=\"xgKRbo\" data-preview=\"true\" data-default-tab=\"css,result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"Fading out animation\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/gregh\/pen\/xgKRbo\/\">Fading out animation<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>By using <code>animation-fill-mode: forwards;<\/code> we can get the element to stay faded out by retaining the styles in the final keyframe:<\/p>\n<p data-height=\"300\" data-theme-id=\"1\" data-preview=\"true\" data-slug-hash=\"EZYNjJ\" data-default-tab=\"css,result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"Fading out and keep styling\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/gregh\/pen\/EZYNjJ\/\">Fading out and keep styling<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>It accepts the following properties:<\/p>\n<p><strong>none:<\/strong> (default) element gets its initial styling when the animation is not executing<br \/>\n<strong>forwards:<\/strong> animation will apply the values set by the last keyframe executed. Note, that it may not be the state of the \"100%\" or \"to\" keyframe. If you set <code>animation-iteration-count<\/code> to 1.5, the last keyframe will be the 50% keyframe. Or, if the <code>animation-direction<\/code> set to reverse, the last keyframe will be the \"0%\" or \"from\" keyframe<br \/>\n<strong>backwards:<\/strong> will apply the property values defined in the keyframe at the beginning of the animation<br \/>\n<strong>both:<\/strong> the animation will follow the rules of both forwards and backwards<br \/>\n<strong>initial:<\/strong> sets <code>animation-fill-mode<\/code> to it's default value<br \/>\n<strong>inherit:<\/strong> element inherits <code>animation-fill-mode<\/code> value from its parent<\/p>\n<p>You can see in the popular library <a href=\"https:\/\/daneden.github.io\/animate.css\/\">Animate.css<\/a>, the <code>.animated<\/code> class uses <code>animation-fill-mode: both<\/code>.<\/p>\n<h3 id=\"animation-iteration-count\">animation-iteration-count<\/h3>\n<p>This property defines the number of times a <code>@keyframe<\/code> animation repeats. It can also be a non-integer value, like <code>animation-iteration-count: 1.5<\/code>, which will play one full animation cycle plus half of the cycle.<\/p>\n<p data-height=\"351\" data-theme-id=\"1\" data-preview=\"true\" data-slug-hash=\"JEPbqR\" data-default-tab=\"css,result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"animation-iteration-count\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/gregh\/pen\/JEPbqR\/\">animation-iteration-count<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3 id=\"backface-visibility\">backface-visibility<\/h3>\n<p>This property specifies whether the \"back\" side of the element is visible when the element is rotated. It is used with 3D transforms. Accepts the following values: <\/p>\n<p><strong>visible:<\/strong> (default) back side of element will be visible, when rotated<br \/>\n<strong>hidden:<\/strong> back side of element is not visible<br \/>\n<strong>initial:<\/strong> sets the property to its default (visible) value<br \/>\n<strong>inherit:<\/strong> get the property value from its parent<\/p>\n<p>These example will illustrate that:<\/p>\n<p data-height=\"307\" data-theme-id=\"1\" data-slug-hash=\"jyOrdO\" data-default-tab=\"css,result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"backface-visibility\" data-preview=\"true\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/gregh\/pen\/jyOrdO\/\">backface-visibility<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p data-height=\"489\" data-theme-id=\"1\" data-slug-hash=\"PWozML\" data-default-tab=\"css,result\" data-user=\"gregh\" data-embed-version=\"2\" data-preview=\"true\" data-pen-title=\"backface-visibility - flipping cards\" class=\"codepen\">See the Pen <a href=\"https:\/\/codepen.io\/gregh\/pen\/PWozML\/\">backface-visibility - flipping cards<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3 id=\"background-attachment\">background-attachment<\/h3>\n<p>This property specifies if the <code>background-image<\/code> stays fixed within the viewport when you scroll the page or scrolls along with the page.<\/p>\n<p><strong>Scroll:<\/strong> (default) background is fixed to the element and does not scroll with the contents<br \/>\n<strong>Fixed:<\/strong> the background stays fixed when you scroll the page (or element)<br \/>\n<strong>Local:<\/strong> scrolls along with the elements contents, if the element is scrollable<\/p>\n<p data-height=\"416\" data-theme-id=\"1\" data-preview=\"true\" data-slug-hash=\"ZLEBNZ\" data-default-tab=\"css,result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"background-attachment\" class=\"codepen\">See the Pen <a href=\"https:\/\/codepen.io\/gregh\/pen\/ZLEBNZ\/\">background-attachment<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3 id=\"background-blend-mode\">background-blend-mode<\/h3>\n<p>This property specifies how element's background images, gradients, and colors blend with each other. For example, you could add a <code>background-image<\/code> and <code>background-color<\/code>, then set the <code>blend-mode<\/code> to \"lighten\". You can also specify several blend modes, one per background.<\/p>\n<p>The following blending modes can be used: <\/p>\n<ul>\n<li>color<\/li>\n<li>color-burn<\/li>\n<li>color-dodge<\/li>\n<li>darken<\/li>\n<li>difference<\/li>\n<li>exclusion<\/li>\n<li>hard-light<\/li>\n<li>hue<\/li>\n<li>lighten<\/li>\n<li>luminosity<\/li>\n<li>multiply<\/li>\n<li>overlay<\/li>\n<li>saturation<\/li>\n<li>screen<\/li>\n<li>soft-light<\/li>\n<\/ul>\n<p data-height=\"551\" data-theme-id=\"1\" data-preview=\"true\" data-slug-hash=\"xgxqWz\" data-default-tab=\"css,result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"background-blend-mode\" class=\"codepen\">See the Pen <a href=\"https:\/\/codepen.io\/gregh\/pen\/xgxqWz\/\">background-blend-mode<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3 id=\"background-clip\">background-clip<\/h3>\n<p>The <code>background-clip<\/code> property defines the area of the element where the background is applied. You can make the background go underneath its border or fill only the area of its contents.<\/p>\n<p><strong>border-box:<\/strong> (default) allows background extent to the outer edge of the border<br \/>\n<strong>content-box:<\/strong> the background is clipped to the content box of the element<br \/>\n<strong>padding-box:<\/strong> the background is clipped to the outer edge of the element's padding, so it's applied to the content and the padding, but not underneath the border<br \/>\n<strong>text:<\/strong> the background is clipped to the foreground text.<\/p>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"dNyWRP\" data-default-tab=\"css,result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"background-clip\" class=\"codepen\">See the Pen <a href=\"https:\/\/codepen.io\/gregh\/pen\/dNyWRP\/\">background-clip<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3 id=\"background-origin\">background-origin<\/h3>\n<p>This property defines if the background is applied to only the element's content area, or padding and border areas as well. The difference between this and <code>background-clip<\/code> is that <code>background-clip<\/code> crops the background, and <code>background-origin<\/code> resizes it.<\/p>\n<h3 id=\"box-decoration-break\">box-decoration-break<\/h3>\n<p>This property specifies how the element's background, padding, border, box-shadow, margin, and clip are applied when it's wrapped onto multiple lines. If we have text wrapped on multiple lines, it would normally increase the element's height, however, <code>box-decoration-break<\/code> can apply the styling to each line separately, instead of the whole element.<\/p>\n<p><strong>clone:<\/strong> every fragment of the element receives styling, box shadows and padding are applied to each fragment individually<br \/>\n<strong>slice:<\/strong> the element is rendered as if the element is not fragmented<\/p>\n<p><strong>Note:<\/strong> you can only use <code>box-decoration-break<\/code> on inline elements. According to <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/CSS\/box-decoration-break\">MDN<\/a> you can only use it on Firefox and Chrome inline elements, but I tested it and current browsers show different results. It works on Firefox and Chrome 54, Opera 41 and Safari 10 with the <code>-webkit-<\/code> prefix.<\/p>\n<p data-height=\"342\" data-theme-id=\"1\" data-slug-hash=\"oBNVzY\" data-default-tab=\"css,result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"box-decoration-break\" class=\"codepen\">See the Pen <a href=\"https:\/\/codepen.io\/gregh\/pen\/oBNVzY\/\">box-decoration-break<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3 id=\"calc\">calc()<\/h3>\n<p>The <code>calc()<\/code> function can be used to create values. For example: <code>width: calc(100% - 32px)<\/code> will make element full width minus 32 pixels. It can be very useful for setting a column width and subtracting the margins. No need for nesting two elements and giving padding to the parent element to achieve the same result.<\/p>\n<p>It accepts an expression with addition, subtraction, multiplication and division operators. Operands can be any syntax length values. You can even do something like <code>calc(var(--someValue) \/ 2 - 2em)<\/code><\/p>\n<p>A fallback would be like this, for browsers that don't support it:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">width: 98%; \/* fallback for browsers without support for calc() *\/    \r\nwidth: calc(100% - 1em);<\/code><\/pre>\n<h3 id=\"column\">column-count<\/h3>\n<p>The <code>column-count<\/code> property specifies the number of columns an element has. <code>column-count: 3<\/code> will spread the elements text (or inline-* elements) into 3 columns. You can apply it to <code>inline-block<\/code> and <code>block<\/code> elements. This will not work on an element with <code>display: table<\/code>, but will work on display: <code>table-cell<\/code>. <\/p>\n<p>There are a number of other column-* properties:<\/p>\n<p><strong>column-gap:<\/strong> property specifies the size of gap between the columns<br \/>\n<strong>column-rule:<\/strong> is a vertical line drawn between the column visually separating them. It's a shorthand for setting this 3 properties (it is very much like border-*)<br \/>\n<strong>column-rule-color:<\/strong> specifies the color of the line. The value can be a named color (red, green, transparent), hex, rgb\/rgba, hsl\/hsla color values<br \/>\n<strong>column-rule-style:<\/strong> specifies the style of the line. It accepts the following values: none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset<br \/>\n<strong>column-rule-width:<\/strong> specifies the width of the line and accepts named values (thin, medium, thick), px, em, initial, inherit and unset<\/p>\n<p data-height=\"571\" data-theme-id=\"1\" data-slug-hash=\"pRoYMv\" data-default-tab=\"css,result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"columns\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/gregh\/pen\/pRoYMv\/\">columns<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3 id=\"content\">content<\/h3>\n<p>The content property is used in conjunction with pseudo elements like <code>::before<\/code> and <code>::after<\/code>. Here's one trick you can do with them. It's a neat way to create a comma-separated <code>&lt;ul&gt;<\/code>.<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">ul &gt; li:not(:last-child):after {\r\n  content: \", \";\r\n}<\/code><\/pre>\n<h3 id=\"counters\">counters<\/h3>\n<p>Counters let us give numbers (indexes) to elements. For example, you have an article, with several topics, each topic has an <code>&lt;h2&gt;<\/code> heading in the beginning, and you have <code>&lt;h3&gt;<\/code> subheadings. You can automatically number them!<\/p>\n<p>There are four properties to work with counters:<\/p>\n<p><strong>counter-reset:<\/strong> resets or creates a counter. the value of this property is the name of the counter that you define<br \/>\n<strong>counter-increment:<\/strong> increments the counter. the value is of this property is the name of the counter that you want to increment<br \/>\n<strong>content()<\/strong> use :before pseudo class and content() to add the index to the elements<br \/>\n<strong>counter()<\/strong> function to retrieve the value of the counter<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">body {\r\n  counter-reset: heading; \/* init the counter for headings (you can give it any other name) *\/\r\n}\r\nh2 {\r\n  counter-increment: heading; \/* increments the counter on every &lt;h1&gt; tag *\/\r\n  counter-reset: subheading;  \/* here we init or reset the subheading *\/\r\n  \/* so that we get 1.1, 1.2, 1.3, then after new heading it will go 2.1, 2.2, 2.3 *\/\r\n}\r\nh2:before {\r\n  content: counter(heading) \" - \"; \/* using :before selector and counter() function we can add the index to the heading *\/\r\n}\r\nh3 {\r\n  counter-increment: subheading; \/* increment the subheading counter on every &lt;h2&gt; tag *\/\r\n}\r\nh3:before {\r\n  content: counter(heading) \".\" counter(subheading) \" - \";\r\n}<\/code><\/pre>\n<p data-height=\"481\" data-theme-id=\"1\" data-preview=\"true\" data-slug-hash=\"MJWRXm\" data-default-tab=\"css,result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"counters\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/gregh\/pen\/MJWRXm\/\">counters<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3 id=\"currentcolor\">currentColor<\/h3>\n<p><a href=\"https:\/\/css-tricks.com\/currentcolor\/\">The <code>currentColor<\/code> keyword<\/a> represents the calculated value of the elements color property.<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.parent {\r\n  color: #ccc;\r\n  border: 1px solid currentColor;\r\n}\r\n.child {\r\n  background: currentColor;\r\n}<\/code><\/pre>\n<p>Another useful trick is allowing SVG icons to follow the color of button text:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">button {\r\n  color: red;\r\n}\r\nbutton svg {\r\n  fill: currentColor;\r\n} <\/code><\/pre>\n<h3 id=\"filter\">filter<\/h3>\n<p>The <code>filter<\/code> property applies visual effects to elements. It comes with predefined functions like blur, brightness, contrast, sepia; and you can also apply custom SVG filters.<\/p>\n<p data-height=\"696\" data-theme-id=\"1\" data-slug-hash=\"GrJNdJ\" data-default-tab=\"css,result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"filters\" data-preview=\"true\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/gregh\/pen\/GrJNdJ\/\">filters<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>You can combine multiple filters to do complex effects. Here's some examples where <a href=\"https:\/\/una.im\/CSSgram\/\">Instagram-like filters have been re-created<\/a> with filters.<\/p>\n<p>Here's a trick: you can convert base color into an entirely differnet color using filters. You do it by manipulating Hue, Saturation, and Lightness. For doing so, you have to convert colors from RGB to HSL, then subtract the H, S, and L values. I've created a simple calculator, that generates a filter that converting base color into approximately the given target color:<\/p>\n<p data-height=\"499\" data-theme-id=\"1\" data-slug-hash=\"ygNVMX\" data-default-tab=\"result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"Converting colors using filters\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/gregh\/pen\/ygNVMX\/\">Converting colors using filters<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3 id=\"flex\">flex<\/h3>\n<p>The <code>flex<\/code> property is a shorthand property as part of <a href=\"https:\/\/css-tricks.com\/snippets\/css\/a-guide-to-flexbox\/\">flexbox layout<\/a>. The most common usage of it is <code>flex: 1;<\/code> which pushes an element to take up as much room as it can, or balances how much space it is using with other elements also using the flex property. The default value for flex is <code>0 1 auto<\/code>.<\/p>\n<h3 id=\"flex-flow\">flex-flow<\/h3>\n<p>The <code>flex-flow<\/code> property is a CSS shorthand for <code>flex-direction<\/code> and <code>flex-wrap<\/code>. It accepts the values of <code>flex-direction<\/code> (<code>row<\/code>, <code>row-reverse<\/code>, <code>column<\/code>, <code>column-reverse<\/code>), values of <code>flex-wrap<\/code> (<code>nowrap<\/code>, <code>wrap<\/code>, <code>wrap-reverse<\/code>). But you can also use it like <code>flex-flow: row nowrap;<\/code><\/p>\n<h3 id=\"flex-basis\">flex-basis<\/h3>\n<p>The <code>flex-basis<\/code> property defines the initial size of a flex element (a bit like <code>width<\/code>, in a horizontal flexbox layout). It accepts width values like px, em, and auto. It also accepts intrinsic sizing keywords: <code>fill<\/code>, <code>max-content<\/code>, <code>min-content<\/code> and <code>fit-content<\/code>, but those work only in Edge right now.<\/p>\n<h3 id=\"font-kerning\">font-kerning<\/h3>\n<p>The <code>font-kerning<\/code> property specifies if the browser shall use kerning information stored in the font or disable it. It accepts the following values:<\/p>\n<p><strong>auto:<\/strong> the browser decides whether to use kerning information stored in font or not<br \/>\n<strong>normal:<\/strong> kerning is applied<br \/>\n<strong>none:<\/strong> prevent browser from using kerning information<\/p>\n<p>You don't actually use this property to manually kern type, which is about manually adjusting the spacing between individual characters. If you need to adjust the space between all letters, there is <code>letter-spacing<\/code> for that, otherwise known as <em>tracking<\/em>. If you're interested in learning more about actually kerning type on the web, here's some articles to explore:<\/p>\n<ul>\n<li><a href=\"http:\/\/www.elliotjaystocks.com\/blog\/kerning\/\">Advanced web typography: Kerning<\/a> by Elliot Jay Stocks<\/li>\n<li><a href=\"https:\/\/blog.typekit.com\/2014\/02\/05\/kerning-on-the-web\/\">Kerning on the Web<\/a> by Bram Stein<\/li>\n<li><a href=\"http:\/\/artequalswork.com\/posts\/manual-kerning\/\">A Manual Kerning Method for the Web<\/a> by Nathan Ford<\/li>\n<\/ul>\n<h3 id=\"font-smoothing\">font-smoothing<\/h3>\n<p>The <code>font-smoothing<\/code> property controls how anti-aliasing is applied to the font. The problem is that after the standard browser anti-aliasing your font may look slightly different from what you see in design software. Here's the situation between Webkit and Firefox:<\/p>\n<p><strong>-webkit-font-smoothing:<\/strong><\/p>\n<p><strong>none:<\/strong> turn off anti-aliasing, display fonts with sharp edges<br \/>\n<strong>antialiased:<\/strong> smooth the font on a pixel level, this make light text look lighter on dark backgrounds<br \/>\n<strong>subpixel-antialiased:<\/strong> smooth the font on a subpixel level for a better look on non-retina displays<\/p>\n<p><strong>-moz-osx-font-smoothing:<\/strong><\/p>\n<p><strong>auto:<\/strong> let browser choose the smoothing method<br \/>\n<strong>grayscale:<\/strong> render text with grayscale antialiasing. this gives similar output as \"antialiased\" on webkit, and makes light text look lighter on dark backgrounds.<\/p>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"PWwoVd\" data-default-tab=\"html,result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"font-smoothing\" data-preview=\"true\" data-editable=\"true\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/gregh\/pen\/PWwoVd\/\">font-smoothing<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3 id=\"font-variant\">font-variant<\/h3>\n<p>The value <code>small-caps<\/code> for <code>font-variant<\/code> will let us display the text in small capital letters. This can be useful when used together with the CSS <code>::first-line<\/code> selector<\/p>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"oBWPGo\" data-default-tab=\"css,result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"font-variant\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/oBWPGo\/\">font-variant<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3 id=\"grid\">grid<\/h3>\n<p><a href=\"https:\/\/css-tricks.com\/snippets\/css\/complete-guide-grid\/\">Grid layout<\/a> in CSS lets us create two-dimensional grids without the problems we used to have with tables and floats. It's a good idea to learn now as widespread support is coming soon.<\/p>\n<p>A grid consists of the container and the items inside it. Then you have to specify how the space is distributed between rows and columns. The values represent column sizes and you can also give names to them. <\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.container {\r\n  display: grid;\r\n  grid-template-columns: 40px 50px auto 50px 40px;\r\n  grid-template-rows: 25% 100px auto;\r\n}<\/code><\/pre>\n<p>Note in the \"grid-template-columns\" the first and fifth columns have 40px width, the second and fourth columns 50px width, and the column in the middle will get the rest of the space. Let's see how to position item inside the container. We have to actually set the starting and ending points to the element. The item would have the following CSS applied to it:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.item {\r\n  grid-column-start: 2; \/\/ will start at the point where the second column starts\r\n  grid-column-end: 5;   \/\/ will end at the point where the second column starts\r\n  grid-row-start: 1;    \/\/ will start at the point where the first row starts\r\n  grid-row-end: 3;      \/\/ will end at the point where the third row starts\r\n}<\/code><\/pre>\n<h3 id=\"hyphens\">hyphens<\/h3>\n<p>The <code>hyphens<\/code> property specifies how the browser hyphenates the text.<\/p>\n<p><strong>none:<\/strong> no hyphens applied, the text will overflow the container<br \/>\n<strong>auto:<\/strong> browser will automatically hyphenate the text<br \/>\n<strong>manual:<\/strong> manually specify potential break points<\/p>\n<p>There are two line break characters you can use: <\/p>\n<p><strong>&ampshy;<\/strong> - will let the browser know that it's a place in text where the hyphenation may be performed if necessary<br \/>\n<strong>&amphyphen;<\/strong> - will render the hyphen even if the line is not broken<\/p>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"QdwwyW\" data-default-tab=\"html,result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"hyphens\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/gregh\/pen\/QdwwyW\/\">hyphens<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3 id=\"image-rendering\">image-rendering<\/h3>\n<p>The <code>image-rendering<\/code> property specifies how the image is rendered when it's scaled. Browsers automatically apply aliasing to resized images, and you can control that with these properties:<\/p>\n<p><strong>auto:<\/strong> (default) the browser automatically applies aliasing<br \/>\n<strong>crisp-edges:<\/strong> the contrast and edges are preserved, so that they are not smoothed or blurred when scaled<br \/>\n<strong>pixelated:<\/strong> this value is applied only to the upsized images and makes the image appear pixelated<\/p>\n<p data-height=\"300\" data-theme-id=\"1\" data-preview=\"true\" data-slug-hash=\"dNPPBr\" data-default-tab=\"css,result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"image-rendering\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/gregh\/pen\/dNPPBr\/\">image-rendering<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3 id=\"list-style-image\">list-style-image<\/h3>\n<p>While most of the time we use <code>list-style-type: none;<\/code> on the <code>&lt;ul&gt;<\/code> and then apply background on the <code>&lt;li&gt;<\/code>, you can still consider applying <code>list-style-image<\/code> property to the <code>&lt;ul&gt;<\/code> element to use an image as a marker in the list.<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">ul {\r\n  list-style-image: url('square.gif');\r\n}<\/code><\/pre>\n<h3 id=\"list-style-position\">list-style-position<\/h3>\n<p>The <code>list-style-position<\/code> property specifies where shall the list marker appear. It accepts two values:<\/p>\n<p><strong>inside:<\/strong> markers appear inside the list item content box<br \/>\n<strong>outside:<\/strong> markers appear outside the list item content box<\/p>\n<h3 id=\"object-fit\">object-fit<\/h3>\n<p>The <code>object-fit<\/code> property specifies how an image (<code>&lt;img&gt;<\/code>) element is fitted into the box established by its height and width. By default, and image will squish or stretch (if it has to) to fit the dimensions of the image box. But with this property, you can choose other options to have it scale while maintaining its proportions internally.<\/p>\n<p><strong>fill:<\/strong> (default) the contents of the element are size to fill the entire content box (without maintaining the aspect ration)<br \/>\n<strong>contain:<\/strong> the contents of the element are fitted inside content box maintaining the aspect ratio<br \/>\n<strong>cover:<\/strong> the contents of the element are fitted inside content box maintaining the aspect ratio, but fill the entire space<br \/>\n<strong>none:<\/strong> the contents are not resized but cropped using the given height and width<br \/>\n<strong>scale-down:<\/strong> automatically chooses between contain and none, selecting the option what would cause the smallest object size<\/p>\n<p data-height=\"917\" data-preview=\"true\" data-theme-id=\"1\" data-slug-hash=\"RKNWNp\" data-default-tab=\"css,result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"object-fit\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/gregh\/pen\/RKNWNp\/\">object-fit<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Without <code>object-fit<\/code> we would have had to use a parent element and absolute positioning (and other properties) to get similar results:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.element {\r\n  width: 400px;\r\n  height: 300px;\r\n  position: relative;\r\n}\r\n.element img {\r\n  position: absolute;\r\n  height: auto;\r\n  width: auto;\r\n  max-height: 100%;\r\n  max-width: 100%;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  margin: auto;\r\n}<\/code><\/pre>\n<p>With <code>object-fit: contain;<\/code> it becomes much simpler:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">img {\r\n  width: 400px;\r\n  height: 300px;\r\n  object-fit: contain;\r\n}<\/code><\/pre>\n<p>Be warned it doesn't work on IE11 and Edge 14 and 15. Opera Mini supports it with the prefix <code>-o-<\/code>. On the rest of the browsers it works great without any prefixes.<\/p>\n<h3 id=\"orphans\">orphans<\/h3>\n<p>This property helps you control how line breaks in text appear. It accepts a numerical value, that indicates the minimum number of lines of the block container (e.g. paragraph) that shall be left at the bottom of the page if the whole container doesn't fit on the page or in the column.<\/p>\n<p>Unfortunately it is <a href=\"http:\/\/caniuse.com\/#search=orphans\">not currently supported<\/a> in Firefox.<\/p>\n<h3 id=\"order\">order<\/h3>\n<p>The <code>order<\/code> property specifies the items within a flex container. the value is a number, which can be negative as well, or \"inherit\", \"initial\", \"unset\".<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;div class=\"flex-container\"&gt;\r\n  &lt;div class=\"item\"&gt;&lt;\/div&gt;\r\n  &lt;div class=\"item\"&gt;&lt;\/div&gt;\r\n  &lt;div class=\"item\"&gt;&lt;\/div&gt;\r\n&lt;\/div&gt;<\/code><\/pre>\n<pre rel=\"CSS\"><code class=\"language-css\">.item:nth-child(1) { order: 3 }\r\n.item:nth-child(2) { order: 1 }\r\n.item:nth-child(3) { order: 2 }<\/code><\/pre>\n<p>This code will display the items in the 2, 3, 1 order.<\/p>\n<h3 id=\"overflow-wrap\">overflow-wrap<\/h3>\n<p>This property specifies if a line break shall occur in long words if they do not fit in the container as one word.<\/p>\n<p><strong>normal:<\/strong> break words at normal break points<br \/>\n<strong>break-word:<\/strong> break normally unbreakable words, if there is no space<\/p>\n<p>It also accepts all the normal global values: <strong>inherit, initial, unset.<\/strong><\/p>\n<h3 id=\"page-break\">page-break-*<\/h3>\n<p>There are three CSS properties that allow you adjust page breaks:<\/p>\n<p><strong>page-break-before:<\/strong> controls page breaks before the element<br \/>\n<strong>page-break-after:<\/strong> controls page breaks after the element<br \/>\n<strong>page-break-inside:<\/strong> controls page breaks inside of the element<\/p>\n<p>These are useful when trying to control how pages print. These are the possible values for them:<\/p>\n<p><strong>auto:<\/strong> automatically break pages<br \/>\n<strong>always:<\/strong> always insert a page break before or after the element (even if there's a lot of space)<br \/>\n<strong>avoid:<\/strong> avoid page break before\/after\/inside of the element if possible<br \/>\n<strong>left:<\/strong> insert page break so that the next page is formatted as a left page<br \/>\n<strong>right:<\/strong> insert page break so that the next page is formatted as a right page<br \/>\n<strong>recto:<\/strong> acts as right if page goes left-to-right, and left if right-to-left<br \/>\n<strong>verso:<\/strong> acts as left if page goes left-to-right, and right it right-to-left<\/p>\n<p>There are several things you should know:<\/p>\n<ol>\n<li>The <code>recto<\/code> and <code>verso<\/code> values are still experimental<\/li>\n<li>The page-break-* property is going to be replaced by more generic break-* property in the near future<\/li>\n<li>Most browsers support <em>only<\/em> page-break-inside (not <code>page-break-before<\/code> or <code>page-break-after<\/code>)<\/li>\n<li>All browsers except Opera Mini, IE and Edge treat \"left\" and \"right\" values like \"always\",<br \/>\n  so it's a good idea to <a href=\"http:\/\/caniuse.com\/#search=break-before\">check if you can use it<\/a> first.<\/li>\n<\/ol>\n<h3 id=\"percentage\">percentage<\/h3>\n<p>Percentage values are like <code>width: 10%<\/code>. In that example, the element it is applied to would be 10% the width of the parent. But there are other properties that are based on the with the parent as well. For example, padding. If we have a container that is 400px wide 300px tall and has <code>padding-top: 10%<\/code> and <code>padding-left: 10%<\/code>, padding on both will be 40px (not 40px and 30px)!<\/p>\n<h3 id=\"perspective\">perspective<\/h3>\n<p>The <code>perspective<\/code> CSS property gives an element perspective in 3D (it's only relevant on 3D transformed elements). Its value is the distance from the viewport to the elements z plane. The value is length, that can be represented in px or em, or the \"none\" keyword.<\/p>\n<p>The property has to be applied to the parent element (the container) or the element that you want the perspective to be applied on.<\/p>\n<p data-height=\"600\" data-theme-id=\"1\" data-slug-hash=\"wgBKJX\" data-default-tab=\"css,result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"perspective\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/gregh\/pen\/wgBKJX\/\">perspective<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3 id=\"pointer-events\">pointer-events<\/h3>\n<p>This property specifies how elements react to mouse events.<\/p>\n<p><strong>auto:<\/strong> the element behaves normally<br \/>\n<strong>none:<\/strong> ignores all clicks, selects, dragging, etc. <\/p>\n<p>It also has special values that are unique to SVG elements:<\/p>\n<p><strong>visiblePainted:<\/strong> the filled and stroked part of the element are a target. The <code>visibility<\/code> has to be set to <code>visible<\/code> and <code>stroke<\/code> value to other than <code>none<\/code>.<br \/>\n<strong>visibleFill:<\/strong> only the filled part of the element is a target. The <code>visibility<\/code> has to be set to <code>visible<\/code>.<br \/>\n<strong>visibleStroke:<\/strong> only the stroked part of the element is a target. The <code>stroke<\/code> value has to be other than <code>none<\/code>.<br \/>\n<strong>visible:<\/strong> the filled and stroked part of the element are a target when the <code>visibility<\/code> of the element is set to <code>visible<\/code>.<br \/>\n<strong>painted:<\/strong> the filled and stroked part of the element are a target. The <code>visibility<\/code> of the element does not affect event processing.<br \/>\n<strong>fill:<\/strong> only the filled part of the element are a target. The <code>visibility<\/code> of the element does not affect event processing.<br \/>\n<strong>stroke:<\/strong> only the stroked part of the element are a target. The <code>visibility<\/code> of the element does not affect event processing.<br \/>\n<strong>all:<\/strong> the whole element is a target. The <code>fill<\/code>, <code>stroke<\/code>, and <code>visibility<\/code> properties of the element do not affect event processing.<\/p>\n<h3 id=\"position\">position<\/h3>\n<p>You're probably familiar with position values like <code>static<\/code>, <code>relative<\/code>, <code>absolute<\/code>, and <code>fixed<\/code>. There is another interesting value: <sticky>sticky<\/code>.<\/p>\n<p>The elements that have <code>position: sticky<\/code> are treated as <code>relative<\/code>, until they get to the certain point, then they become <code>fixed<\/code>. Think: iPhone contacts list letter bookmarks or scroll-then-fix navigation. This is normally something we'd have to use JavaScript for, but now is doable in pure CSS.<\/p>\n<p data-height=\"400\" data-theme-id=\"1\" data-slug-hash=\"BpydOB\" data-default-tab=\"css,result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"position: sticky\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/gregh\/pen\/BpydOB\/\">position: sticky<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3 id=\"resize\">resize<\/h3>\n<p>The <code>resize<\/code> property defines whether the element can be resized by user. You can make an element resizeable vertically, horizontally or both.<\/p>\n<p><strong>none:<\/strong> element is not resizable. This is the default value for most elements, except textarea which is \"both\" by default<br \/>\n<strong>both:<\/strong> resizeable both directions<br \/>\n<strong>horizontal:<\/strong> resizeable horizontally<br \/>\n<strong>vertical:<\/strong> resizeable vertically<\/p>\n<p><strong>Important:<\/strong> in order to make an element resizeable, its <code>overflow<\/code> has to be set to something other than <code>visible<\/code>.<\/p>\n<h3 id=\"shape-outside\">shape-outside<\/h3>\n<p>The <code>shape-outside<\/code> property lets us wrap text in a shape around a floated element. Maybe it's a round image and you want text to wrap around that circle. The property will be applied to the element which you want to wrap the content around. It accepts the following values:<\/p>\n<p><strong>Keyword values:<\/strong> none, margin-box, padding-box, border-box, padding-box<br \/>\n<strong>Function values:<\/strong> circle(), ellipse(), inset(), polygon()<\/p>\n<p>You can also pass a URL to an image around which the content will wrap, and it accepts the global initial, inherit, and unset values.<\/p>\n<p>If you choose to use an image, the <code>shape-image-threshold<\/code> property will define the alpha channel threshold to separate the shape from the image. Firefox and IE still don't have support for this property, and Safari supports it with the <code>-webkit-<\/code> prefix.<\/p>\n<p>More about all this <a href=\"https:\/\/css-tricks.com\/almanac\/properties\/s\/shape-outside\/\">in the Almanac.<\/a><\/p>\n<p data-height=\"445\" data-theme-id=\"1\" data-slug-hash=\"QdwqKp\" data-default-tab=\"css,result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"shape-outside\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/gregh\/pen\/QdwqKp\/\">shape-outside<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3 id=\"supports\">@supports<\/h3>\n<p>This CSS at-rule gives you the ability to check if the browser supports certain properties (or property\/value combinations) before using them.<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">@supports (display: grid) {\r\n  .container {\r\n    display: grid;\r\n  }\r\n}            \r\n\r\n@supports (image-rendering) {\r\n  img {\r\n    image-rendering: pixelated;\r\n  }\r\n}<\/code><\/pre>\n<p>You can multiple properties like this:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">@supports (display: grid) and ((image-rendering: crisp-edges) or (image-rendering: pixelated)) {\r\n\r\n}<\/code><\/pre>\n<h3 id=\"var\">var()<\/h3>\n<p>The <code>var()<\/code> property is part of using CSS custom properties. <\/p>\n<p>CSS variables are defined by authors and represent specific values the can be used multiple times in the document. The <code>var()<\/code> function can be used as the value of any property, but cannot be used as a property or selector. The first value of the function is the name of the custom property; the second is an optional fallback value, which is used if the first argument is invalid.<\/p>\n<p>Let's take a look at the syntax:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">:root {\r\n  --primary-color: #cccccc;\r\n}\r\nbody {\r\n  color: var(--primary-color);\r\n}<\/code><\/pre>\n<p>With a fallback value:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">body {\r\n  color: var(--primary-color, #cccccc);\r\n}<\/code><\/pre>\n<p>In Sass, that would be just like:<\/p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">$primary-color: #ccc;\r\n\r\nbody {\r\n  color: $primary-color;\r\n}<\/code><\/pre>\n<p>But note that custom properties and preprocessor variables <a href=\"https:\/\/css-tricks.com\/difference-between-types-of-css-variables\/\">aren't quite the same<\/a>.<\/p>\n<p>Unfortunately, custom properties <a href=\"http:\/\/caniuse.com\/#search=var\">aren't supported<\/a> in IE11, Edge 14 and Opera mini. Edge 15 will have partial support. <\/p>\n<h3 id=\"table-layout\">table-layout<\/h3>\n<p>Ever need to make all cells in a table be forced to be the same width?<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">table {\r\n  table-layout: fixed;\r\n}<\/code><\/pre>\n<p data-height=\"427\" data-theme-id=\"1\" data-slug-hash=\"qREPYz\" data-default-tab=\"css,result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"table-layout: fixed\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/gregh\/pen\/qREPYz\/\">table-layout: fixed<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p><a href=\"https:\/\/css-tricks.com\/fixing-tables-long-strings\/\">Here's more information<\/a> about all that.<\/p>\n<h3 id=\"text-transform\">text-transform<\/h3>\n<p><a href=\"https:\/\/css-tricks.com\/almanac\/properties\/t\/text-transform\/\">The <code>text-transform<\/code> property<\/a> can change the case of text to <code>lowercase<\/code> or <code>uppercase<\/code>. You can also capitalize the first letter of each word with <code>capitalize<\/code>.<\/p>\n<p>One thing to consider: is it more-correct to use ALL CAPS type right in the HTML, or use normally cased type and use <code>text-transform: uppercase<\/code> in CSS to change it? It's probably better to use CSS. For example, <strong>Contact us<\/strong> vs <strong>CONTACT US<\/strong>. A screen reader might read \"contact U.S.\" with uppercase in the HTML, instead of \"Contact Us\".<\/p>\n<h3 id=\"transition-timing-function\">transition-timing-function<\/h3>\n<p>The <code>transition-timing-function<\/code> property specifies the speed curve of the transition effect, like <code>ease-in<\/code> or <code>ease-out<\/code>. Here are two lesser-known known values:<\/p>\n<p><strong>steps(n, start|end):<\/strong> instead of specifying smooth transiting with such timing functions as <code>ease<\/code>, this completes the animation in number of steps you define. The second parameter is optional and specifies at which point within the interval shall the change occur. The default values for the second parameter is end. You can also use the shorthand functions <code>step-start(n)<\/code> and <code>step-end(n)<\/code>.<br \/>\n<strong>cubic-bezier(n, n, n, n):<\/strong> your own cubic bezier function.<\/p>\n<p data-height=\"395\" data-theme-id=\"1\" data-preview=\"true\" data-slug-hash=\"mRypgY\" data-default-tab=\"css,result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"transition-timing-function\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/gregh\/pen\/mRypgY\/\">transition-timing-function<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Use this <a href=\"http:\/\/cubic-bezier.com\/#.23,.77,.78,.24\">tool<\/a> to create cubic bezier timing functions.<br \/>\nYou can also use Chrome dev tools to modify the bezier curve.<\/p>\n<figure><video src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/bezier.mp4\" controls><\/figure>\n<h3 id=\"vh\">vh, vw, vmin, vmax<\/h3>\n<p>These values are used for sizing things relative to the viewport size. While <code>width<\/code> is alwasys relative to the parent container, <code>vh<\/code> or <code>vw<\/code> always use viewport size as a basis.<\/p>\n<p><strong>vh:<\/strong> 1 vh is equal to 1\/100 of viewport height<br \/>\n<strong>vw:<\/strong> 1 vw is equal to 1\/100 of viewport width<br \/>\n<strong>vmin:<\/strong> it is the least value of vh and vw<br \/>\n<strong>vmax:<\/strong> is the largest value of those two<\/p>\n<p>For a browser window that has a viewport 1280x655px, 1vh is equal to 6.55 pixels, 1vw is equal to 12.8pixels, vmin is 6.55 pixels (smallest of the two values), and vmax is 12.8 pixels (largest of the two values).<\/p>\n<h3 id=\"white-space\">white-space<\/h3>\n<p>This property defines how the white space inside the element is handled.<\/p>\n<p><strong>normal:<\/strong> collapse new lines, collapse spaces and tabs, text wrap<br \/>\n<strong>nowrap:<\/strong> collapse new lines, collapse spaces and tabs, text nowrap<br \/>\n<strong>pre:<\/strong> preserve new lines, preserve spaces and tabs, text nowrap<br \/>\n<strong>pre-wrap:<\/strong> preserve new lines, preserve spaces and tabs, text wrap<br \/>\n<strong>pre-line:<\/strong> preserve new lines, collapse spaces and tabs, text wrap<\/p>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"dNPZpX\" data-default-tab=\"html,result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"dNPZpX\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/gregh\/pen\/dNPZpX\/\">dNPZpX<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3 id=\"word-break\">word-break<\/h3>\n<p>This property specifies the line breaking rules.<\/p>\n<p><strong>normal:<\/strong> uses standard rules to break words<br \/>\n<strong>break-all:<\/strong> lines can be broken between any two letters<br \/>\n<strong>keep-all:<\/strong> break are prohibited between letters<\/p>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"RKNxPJ\" data-default-tab=\"css,result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"word-break\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/gregh\/pen\/RKNxPJ\/\">word-break<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3 id=\"word-spacing\">word-spacing<\/h3>\n<p>The equivalent of <code>letter-spacing<\/code>, but for words! You can increase (or decrease) the amount of space between words. The standard value for this property is<code>normal<\/code>, whiuch uses the default whitespace: 0.25em.<\/p>\n<h3 id=\"will-change\">will-change<\/h3>\n<p>The <code>will-change<\/code> property lets authors tell browsers what changes to expect on an element. Changes, as in, changes to property values, likely as part of an animation. The idea is to give the browser a heads up on animations you intended to perform, as the browser can't always predict this. When you give a hint, it can optimize for performance.<\/p>\n<p><strong>normal:<\/strong> perform standard optimizations<br \/>\n<strong>scroll-position:<\/strong> prepare the browser for scroll position changes<br \/>\n<strong>content:<\/strong> the contents of the element will change<\/p>\n<p>You can also set specific properties that you will be changing, like this:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.will-be-animated {\r\n  will-change: top, left;\r\n}<\/code><\/pre>\n<p>Before the introduction of this property, we used to use tricks like this to trick the browser into animating certain elements with better performance (by \"forcing\" the element \"onto the GPU\"):<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.will-be-animated {\r\n  transform: translate3d(0, 0, 0);\r\n}<\/code><\/pre>\n<p><a href=\"https:\/\/dev.opera.com\/articles\/css-will-change-property\/\">This article<\/a> is a good deep-dive into the subject.<\/p>\n<h3 id=\"writing-mode\">writing-mode<\/h3>\n<p>The <code>writing-mode<\/code> property defines whether the text is laid out horizontally or vertically also the direction.<\/p>\n<p><strong>horizontal-tb:<\/strong> content flows from left to right, from top to bottom<br \/>\n<strong>vertical-rl:<\/strong> content flows from top to bottom, from right to left<br \/>\n<strong>vertical-lr:<\/strong> content flows from top to bottom, from left to right<\/p>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"qREpMY\" data-default-tab=\"css,result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"writing-mode\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/gregh\/pen\/qREpMY\/\">writing-mode<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3 id=\"webkit-autofill\">:-webkit-autofill<\/h3>\n<p>This CSS pseudo-class matches input elements that have been autofilled by the browser. This gives you a chance to change that style. In Chrome, for example, they have yellow background by default.<\/p>\n<h3 id=\"webkit-overflow-scrolling\">-webkit-overflow-scrolling<\/h3>\n<p>This property lets us the the iOS momentum scrolling on elements on touch devices. There are two values:<\/p>\n<p><strong>auto:<\/strong> use normal scrolling, where the scrolling stops the moment when you remove your finger from screen<br \/>\n<strong>touch:<\/strong> use momentum scrolling<\/p>\n<h3 id=\"webkit-touch-callout\">-webkit-touch-callout<\/h3>\n<p>This property lets us hide the default callout on iOS devices. When you touch and hold the target a menu appears with information controls.<\/p>\n<p><strong>none:<\/strong> disables the callout<br \/>\n<strong>default:<\/strong> callout is displayed<\/p>\n<h3 id=\"webkit-scrollbar\">-webkit-scrollbar<\/h3>\n<p>There's a way to hide scrollbar on an element<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">#container::-webkit-scrollbar {\r\n  display: none;\r\n}<\/code><\/pre>\n<p>There's also a way to autohide scrollbars on IE10+ and Edge.<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">html {\r\n  -ms-overflow-style: ms-autohiding-scrollbar;\r\n}<\/code><\/pre>\n<h3 id=\"animatable\">Animatable<\/h3>\n<p><a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/CSS\/CSS_animated_properties\">Here's full list of CSS properties that can be animated.<\/a> We most often apply transitions to opacity, background-color etc, but it's good to know that we can animate other things, like <code>letter-spacing<\/code>, for example.<\/p>\n<p data-height=\"300\" data-theme-id=\"1\" data-preview=\"true\" data-slug-hash=\"ZLYvBO\" data-default-tab=\"css,result\" data-user=\"gregh\" data-embed-version=\"2\" data-pen-title=\"animating letter-spacing\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/gregh\/pen\/ZLYvBO\/\">animating letter-spacing<\/a> by Greg Hovanesyan (<a href=\"http:\/\/codepen.io\/gregh\">@gregh<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Can it be done with CSS? Do I need JavaScript? I know a lot of us ask these question when looking at designs and interactions. Recently I decided to dig into CSS and learn all of the properties. I spent a lot of time reading reference material, writing code, and finding new solutions to old [&hellip;]<\/p>\n","protected":false},"author":247289,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250233"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/247289"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250233"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250233\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250233"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250233"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250233"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250394,"date":"2017-01-25T09:32:08","date_gmt":"2017-01-25T16:32:08","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250394"},"modified":"2017-01-25T15:34:39","modified_gmt":"2017-01-25T22:34:39","slug":"end-clearfix-hack","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/end-clearfix-hack\/","title":{"rendered":"The End of the Clearfix hack?"},"content":{"rendered":"<p>Rachel Andrew with a clear (get it?!) explanation of <code>display: flow-root;<\/code>, including demos comparing old and new techniques. Apparently the name is still a little bit still <a href=\"https:\/\/github.com\/w3c\/csswg-drafts\/issues\/964\">up in the air<\/a>. <\/p>\n<p>The whole point of it is getting rid of <a href=\"https:\/\/css-tricks.com\/snippets\/css\/clear-fix\/\">clearfix<\/a> (although it is <a href=\"http:\/\/codepen.io\/thierry\/pen\/GrvWNM\">a bit different<\/a>), or using a different\/unintended property for float clearning. Every time this is brought up, there is always a <em>well actually<\/em> about how <code>overflow: hidden;<\/code> does the same (or any other property that creates a new block formatting context). Like we <a href=\"https:\/\/css-tricks.com\/display-flow-root\/\">mentioned before<\/a>, overflow has consquences totally unrelated to float clearning, like <a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/NdvEjd\/\">hiding shadows<\/a>. All of the other methods have unrelated consequences.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Rachel Andrew with a clear (get it?!) explanation of display: flow-root;, including demos comparing old and new techniques. Apparently the name is still a little bit still up in the air. The whole point of it is getting rid of clearfix (although it is a bit different), or using a different\/unintended property for float clearning. [&hellip;]<\/p>\n","protected":false},"author":7699,"featured_media":250470,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[1084,1085,995],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250394"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/7699"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250394"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250394\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/250470"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250394"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250394"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250394"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250451,"date":"2017-01-25T05:25:22","date_gmt":"2017-01-25T12:25:22","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250451"},"modified":"2017-01-25T05:25:22","modified_gmt":"2017-01-25T12:25:22","slug":"hero-patterns","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/hero-patterns\/","title":{"rendered":"Hero Patterns"},"content":{"rendered":"<p>A project by Steve Schoger:<\/p>\n<blockquote><p>A collection of repeatable SVG background patterns for you to use on your digital projects.<\/p><\/blockquote>\n<p><em>Customizeable<\/em> patterns. You can even <a href=\"https:\/\/twitter.com\/ChrisGannon\/status\/823708636467830784\">snag the path data<\/a> for your own deeds.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>A project by Steve Schoger: A collection of repeatable SVG background patterns for you to use on your digital projects. Customizeable patterns. You can even snag the path data for your own deeds.<\/p>\n","protected":false},"author":3,"featured_media":250452,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[1083,1082,469],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250451"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250451"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250451\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/250452"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250451"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250451"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250451"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250373,"date":"2017-01-24T07:06:03","date_gmt":"2017-01-24T14:06:03","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250373"},"modified":"2017-03-26T12:05:10","modified_gmt":"2017-03-26T19:05:10","slug":"need-lorem-ipsum-inside-html","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/need-lorem-ipsum-inside-html\/","title":{"rendered":"Need Lorem Ipsum? Inside HTML?"},"content":{"rendered":"<p><a href=\"http:\/\/emmet.io\/\">Emmet<\/a> is great for that. With it installed in the code editor you are using, you can type \"lorem\" and then tab and it will expand into a paragraph of Lorem Ipsum placeholder text. But it can do more! You can control how much you get, place it within HTML structure as it expands, and get different bits of it in repeated elements.<\/p>\n<p><!--more--><\/p>\n<h3>Put lorem ipsum in a paragraph<\/h3><figcaption><video src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/p-lorem.mov\" controls><\/figcaption><h3>A list of lorem ipsum<\/h3><figcaption><video src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/li-lorem.mov\" controls><\/figcaption><h3>Modules with fake content<\/h3><figcaption><video src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/module-lorem.mov\" controls><\/figcaption><h3>A complete document<\/h3><figcaption><video src=\"https:\/\/css-tricks.com\/videos\/doc-lorem.mov\" controls><\/figcaption>\n","protected":false},"excerpt":{"rendered":"<p>Emmet is great for that. With it installed in the code editor you are using, you can type &#8220;lorem&#8221; and then tab and it will expand into a paragraph of Lorem Ipsum placeholder text. But it can do more! You can control how much you get, place it within HTML structure as it expands, and [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":250386,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1198,1199],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250373"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250373"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250373\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/250386"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250373"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250373"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250373"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250106,"date":"2017-01-23T05:18:06","date_gmt":"2017-01-23T12:18:06","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250106"},"modified":"2017-01-23T05:18:06","modified_gmt":"2017-01-23T12:18:06","slug":"using-gsap-animate-game-ui-canvas","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/using-gsap-animate-game-ui-canvas\/","title":{"rendered":"Using GSAP to Animate Game UI with Canvas"},"content":{"rendered":"<p>The year was 1995; Toy Story hit the theaters, kids were obsessively collecting <a href=\"https:\/\/en.wikipedia.org\/wiki\/Milk_caps_(game)\">little cardboard circles<\/a> and Kiss From a Rose was being badly sung by everyone. I was a gangly ten-year-old, and like any other relatively tall kid I was often addressed to by \"you must be so good at basketball!\". So I practiced and practiced spending hours on the court of my elementary school. Eventually, I realized, much to the dismay of aunts and other cheek-pinchers alike, that while occupying vertical real estate might give you an advantage in the art of basketball, it does not ensure it.<\/p>\n<p>Fast forward 21 years later. Now a tall and gangly developer, still bad at basketball, I was faced with a project: Designing and implementing a <a href=\"https:\/\/pistons.palacenet.com\/?publisherID=pistonsCss\">full motion video web basketball game for the NBA\u2019s Detroit Pistons<\/a>. Throwing balls around is one thing; throwing pixels around\u200a\u2014\u200anow that's finally a basketball challenge I can ace!<\/p>\n<p><!--more--><\/p>\n<p>While developing the game I used many neat things like canvas, SVG and CSS animations, gesture recognition and a video stream that\u2019s dynamically constructed on the fly. It\u2019s really amazing what we can do with just a browser these days. Go ahead, <a href=\"https:\/\/pistons.palacenet.com\/?publisherID=pistonsCss\"><strong>give it a spin<\/strong><\/a>.<\/p>\n<p><iframe style=\"width:100%;border:0;height:15em;\" src=\"https:\/\/pistons.palacenet.com\/?noautoplay=true&publisherID=pistonsCss\" allowfullscreen><\/iframe><\/p>\n<p>In this article, I want to focus and show you how I implemented the animation for the Superpower Gauge using vanilla JS in conjunction with GSAP. This is the motion reference I used while implementing the animation, created in After Effects:<\/p>\n<p><iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/9rSdvg050U0\" frameborder=\"0\" allowfullscreen><\/iframe><\/p>\n<p>In 1on1, once the user succeeds making a move, they're awarded combo points. The gauge sits at the top left corner of the screen, and its task is to convey to the user the amount of their combo points as denoted by the number of red segments. At certain times in the game, the Superpower Gauge becomes active, notifying the user they can click it to make their in-game avatar perform a special move.<\/p>\n<p>The basic structure of the Superpower is achieved with one Canvas element and a bit of simple geometry:<\/p>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"yVxoEK\" data-default-tab=\"js,result\" data-user=\"OpherV\" data-embed-version=\"2\" data-pen-title=\"Pistons Superpower: Structure\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/OpherV\/pen\/yVxoEK\/\">Pistons Superpower: Structure<\/a> by Opher Vishnia (<a href=\"http:\/\/codepen.io\/OpherV\">@OpherV<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Essentially, there are two main components here\u200a\u2014\u200athe central image and the gauge segments. The image is the easy part, it's just a trivial use of canvas\u2019 <a href=\"https:\/\/developer.mozilla.org\/en\/docs\/Web\/API\/CanvasRenderingContext2D\/drawImage\">drawImage<\/a>. The gauge segments is where things get interesting. I defined a general <code>options<\/code> defined with some properties to play with later on like the number of segments, radius, width and so on. Then I iterate over an array of <code>segment<\/code> objects and use their properties (<code>strokeStyle<\/code>, <code>lineWidth<\/code>) to draw the actual segments with the canvas arc function. So far so good\u200a\u2014\u200abut where\u2019s the animation?<\/p>\n<p>I was debating whether to use a canvas animation framework but ultimately decided against it. This is because I needed to use several types of animations in the project: Canvas, SVG and CSS\/DOM, and no one framework does it all. In addition, all of the animations had to run smoothly on top of playing video, on both desktop and mobile with varying capabilities and network conditions. This means that performance was nothing if not paramount, and I wanted to know exactly which code powers the animation. Luckily <a href=\"https:\/\/greensock.com\/gsap\">GSAP<\/a> (aka Greensock AKA TweenMax AKA TweenLite) allows me to do just that.<\/p>\n<p>GSAP is cool. It enables you to animate pretty much anything! The trick is that the animation API accepts not only DOM\/SVG objects but also arbitrary JS data structures, whose properties you can then \"animate\".<\/p>\n<figure id=\"post-250107\" class=\"align-right media-250107\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/0-mCYYpMyKUjAoA4d_.png\" alt=\"Animate all the thing! Meme\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/0-mCYYpMyKUjAoA4d_.png 400w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/0-mCYYpMyKUjAoA4d_-300x225.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/0-mCYYpMyKUjAoA4d_-399x300.png 399w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>The basic idea is that you use GSAP to change the properties of these objects over time. These values specify how the UI looks at any given point in time. On each <code>requestAnimationFrame<\/code> you make a draw call to the canvas to draw the state of the UI based on those objects.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">function render() { \r\n \/\/draw the animation state\r\n drawComboGui();\r\n \r\n \/\/draw the image\r\n ctx.drawImage(...);\r\n \/\/render on the next frame as well\r\n window.requestAnimationFrame(render)\r\n}\r\nrender();<\/code><\/pre>\n<p>Here\u2019s a breakdown of the different animations implemented:<\/p>\n<h4>Gauge fills up<\/h4>\n<p data-height=\"329\" data-theme-id=\"1\" data-slug-hash=\"RoYZGb\" data-default-tab=\"js,result\" data-user=\"OpherV\" data-embed-version=\"2\" data-pen-title=\"Pistons Superpower: Gauge fill\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/OpherV\/pen\/RoYZGb\/\">Pistons Superpower: Gauge fill<\/a> by Opher Vishnia (<a href=\"http:\/\/codepen.io\/OpherV\">@OpherV<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Let\u2019s discuss the anatomy of this animation. At idle state, all yet-to-be filled segments of the gauge are gray and thin, and filled segments are red and slightly thicker. Once the next segment of the gauge fills up, all previous active segments change color to white, grow in thickness and start glowing. The following segment is then filled, and lastly, all the segments stop glowing and return to their original, active width.<\/p>\n<p>Remember that array of segment objects? Here\u2019s where they come into play with GSAP. The function <code>addActiveSegment<\/code> is the heart of the magic, where we use <code>TweenMax.fromTo<\/code> to animate properties like <code>lineWidth<\/code> and <code>anglePercent<\/code>. The GSAP colorProps plugin allows us to make smooth transition in color properties like <code>strokeStyle<\/code> and <code>activeStrokeStyle<\/code>. I\u2019m using the <code>delay<\/code> property to time the various components of this animation.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">TweenMax.fromTo(segments[index], expandAnimLength, {\r\n  anglePercent: 0,\r\n  colorProps:{strokeStyle: options.activeStrokeStyle},\r\n}, \r\n{\r\n  anglePercent: 1,\r\n  colorProps:{strokeStyle: options.activeStrokeStyle},\r\n  ease: Power0.easeIn,\r\n  delay: growAnimLength\r\n});<\/code><\/pre>\n<p>Like I mentioned earlier, the <em>render<\/em> function then calls <em>drawComboGui<\/em> on each <code>requestAnimationFrame<\/code>, ideally 60 times a second. In <code>drawComboGui<\/code> first we clear the canvas from any previous data drawn onto it before drawing the current state.<\/p>\n<p>To create the glow effect, I drew two segments on top of each other. The bottom one uses shadowBlur on the canvas path, and the top one has no shadow blur. This makes the blurred element \u201cpeek\u201d behind the non-blurred one, resulting in the glow effect.<\/p>\n<figure id=\"post-250108\" class=\"align-right media-250108\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/1-Yh-6mizbohb1oZV_4lLMGg.gif\" alt=\"\" \/><\/figure>\n<p>There are several extra animations for the Superpower gauge. The Superpower enabled and Superpower disabled are very simple in concept to the gauge fill up discussed here. They are implemented by animating the width of the image and the active segments.<\/p>\n<figure id=\"post-250109\" class=\"media-250109\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/1-sdQvpa-h2ycv4jJLqGPUlw.gif\" alt=\"superpower charged\" \/><figcaption>Superpower charged<\/figcaption><\/figure>\n<figure id=\"post-250110\" class=\"media-250110\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/1-Lk1ZZ8HczhTB22V3v04pJA.gif\" alt=\"Superpower discharged\" \/><figcaption>Superpower discharged<\/figcaption><\/figure>\n<p>The <strong>Superpower charged<\/strong> and <strong>Superpower discharged<\/strong> animation require other techniques like animating image sprites and applying a blur-on-the-fly filter. It's a bit out-of-scope right now, but it will be discussed in a future article!<\/p>\n<p>There\u2019s one major gotcha when it comes to implementing UI for games. Games are extremely stateful. In any given moment the state of the game, and by proxy, its UI can change. In the Superpower Gauge's particular case\u200a \u2014 \u200ait means that at every moment the gauge might fill up, become enabled, be discharged or become disabled. This can happen even while in the middle of an animation! What do you do when that happens, though?<\/p>\n<p>You have two options\u200a\u2014\u200aone is to stop whatever animation is currently playing and abruptly transition to the new animation. The problem with this approach is that the experience for the user is very jarring, detaching them from the game and ultimately conveying more noise than information. This is the exact opposite of what a good interface should do.<\/p>\n<p>The other option is to queue up the animations, so each animation is fired before the last one starts. This gets a little tricky, since an animation might be comprised of smaller sub-animations, but thanks to GSAP's Timeline feature, the task of herding all these states and animations becomes much more manageable. Instead of calling <code>TweenMax.to<\/code>, you initialize a Timeline instance object and use it to make to calls. By default, these to calls define new animations to start at the end of the timeline forming an animation queue, but this is <a href=\"https:\/\/greensock.com\/position-parameter\">highly configurable<\/a>! You could, for example, define an animation to start at an offset relative to the timeline end, or at an absolute position on the timeline. This also allows you avoid having to use the delay property to calculate queuing of animations, which tends to get cumbersome when dealing with multiple animations.<\/p>\n<p>Here's an implementation of the gauge fill up animation using GSAP's Timeline. Try to click the \"Add Segment\" button while an animation is already in progress.<\/p>\n<p data-height=\"415\" data-theme-id=\"1\" data-slug-hash=\"QGVOWX\" data-default-tab=\"js,result\" data-user=\"OpherV\" data-embed-version=\"2\" data-pen-title=\"Pistons Superpower: Gauge fill with Timeline\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/OpherV\/pen\/QGVOWX\/\">Pistons Superpower: Gauge fill with Timeline<\/a> by Opher Vishnia (<a href=\"http:\/\/codepen.io\/OpherV\">@OpherV<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>I hope this helps you tackle some challenges and issues you encounter in your game\/site\/project. If you have any questions or if you\u2019d like to know how I tackled other UI elements in the game feel free to hit me up on <a href=\"https:\/\/twitter.com\/opherv\">Twitter<\/a>!<\/p>\n<h3>Epilogue<\/h3>\n<p>While I still get assaulted once in awhile by low hanging branches and my hoop-shooting skills leave much to be desired, \u200awhen it comes to quickly pressing key combos, Andre Drummond has nothing on me.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>The year was 1995; Toy Story hit the theaters, kids were obsessively collecting little cardboard circles and Kiss From a Rose was being badly sung by everyone. I was a gangly ten-year-old, and like any other relatively tall kid I was often addressed to by &#8220;you must be so good at basketball!&#8221;. So I practiced [&hellip;]<\/p>\n","protected":false},"author":247307,"featured_media":250279,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[707,725,505],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250106"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/247307"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250106"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250106\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/250279"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250106"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250106"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250106"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250283,"date":"2017-01-21T09:56:36","date_gmt":"2017-01-21T16:56:36","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250283"},"modified":"2017-01-22T08:20:04","modified_gmt":"2017-01-22T15:20:04","slug":"table-borders-inside","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/table-borders-inside\/","title":{"rendered":"A Table With Borders Only On The Inside"},"content":{"rendered":"<p>You know, like a tic-tac-toe board. I was just pondering how to do this the other day, as one does. There are three ways I can think of. One involves a good handful of rules and is the way I intuitively think of, one involves a deprecated attribute, and one is very simple and feels kinda like a CSS trick.<\/p>\n<p><!--more--><\/p>\n<h3>Possibility #1) Removing the Borders You Don't Need<\/h3>\n<p>This is the first way I think of. Add a border everywhere, then remove the border on the:<\/p>\n<ol>\n<li>The top of every cell in the first row<\/li>\n<li>The bottom of every cell in the last row<\/li>\n<li>The left of the first cell in every row<\/li>\n<li>The right of last cell in every row<\/li>\n<\/ol>\n<pre rel=\"CSS\"><code class=\"language-css\">table {\r\n  border-collapse: collapse;\r\n}\r\ntable td {\r\n  border: 5px solid black; \r\n}\r\ntable tr:first-child td {\r\n  border-top: 0;\r\n}\r\ntable tr td:first-child {\r\n  border-left: 0;\r\n}\r\ntable tr:last-child td {\r\n  border-bottom: 0;\r\n}\r\ntable tr td:last-child {\r\n  border-right: 0;\r\n}<\/code><\/pre>\n<p data-height=\"387\" data-theme-id=\"1\" data-slug-hash=\"JENXaz\" data-default-tab=\"result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Inside Border on Table #1\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/JENXaz\/\">Inside Border on Table #1<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3>Possibility #2) The `rules` Attribute<\/h3>\n<p>This is <em>not recommended<\/em> as it's a <em>deprecated<\/em> attribute. But, that's what rules was specifically for.<\/p>\n<p data-height=\"379\" data-theme-id=\"1\" data-slug-hash=\"JENXmV\" data-default-tab=\"result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Inside Border on Table #1\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/JENXmV\/\">Inside Border on Table #1<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>You can control the color with <code>border-color<\/code>, but not <code>border-width<\/code> or <code>border-style<\/code>.<\/p>\n<h3>Possibility #3) Using `border-style: hidden;`<\/h3>\n<p>This is the one that feels like a CSS trick to me.<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">table {\r\n  border-collapse: collapse;\r\n  border-style: hidden;\r\n}\r\ntable td {\r\n  border: 5px solid black;\r\n}<\/code><\/pre>\n<p><a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/CSS\/border-style\">MDN<\/a> has an explanation:<\/p>\n<blockquote><p>In case of table cell and border collapsing, the hidden value has the highest priority: it means that if any other conflicting border is set, it won't be displayed.<\/p><\/blockquote>\n<p>By putting <code>border-style: hidden;<\/code> on the table itself, it means that \"hidden\" wins on that outside edge, but only the outside edge, not any of the other borders on the inside cells.<\/p>\n<p data-height=\"398\" data-theme-id=\"1\" data-slug-hash=\"vgmGbO\" data-default-tab=\"result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Inside Border on Table #3\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/vgmGbO\/\">Inside Border on Table #3<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<hr>\n<p>Can you think of other ways?<\/p>\n","protected":false},"excerpt":{"rendered":"<p>You know, like a tic-tac-toe board. I was just pondering how to do this the other day, as one does. There are three ways I can think of. One involves a good handful of rules and is the way I intuitively think of, one involves a deprecated attribute, and one is very simple and feels [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":250291,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[794,594],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250283"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250283"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250283\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/250291"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250283"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250283"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250283"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250277,"date":"2017-01-21T07:59:10","date_gmt":"2017-01-21T14:59:10","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250277"},"modified":"2017-01-21T09:38:32","modified_gmt":"2017-01-21T16:38:32","slug":"video-transcripts","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/video-transcripts\/","title":{"rendered":"Video Transcripts"},"content":{"rendered":"<p>None of the videos in our <a href=\"https:\/\/css-tricks.com\/video-screencasts\/\">entire video screencasts library<\/a> have captions \/ subtitles \/ transcripts. That means all of that content is rather useless to the deaf, as was made quite clear to me in this recent email:<\/p>\n<blockquote><p>I'm a big fan of CSS-Tricks and I make a lot of use of your written content, however the same can't be said for your videos as I'm deaf. It may not be viable for your business but subtitles on your videos would enable access to me - and probably thousands of others - who can't follow your videos via sounds.<\/p><\/blockquote>\n<p><!--more--><\/p>\n<p>I like shooting videos. We have a couple lined up we'll be doing soon. It's true that it's not exactly viable to do subtitles for them. The videos are <em>already<\/em> not really viable, we just do them sometimes for fun. I can't justify the time or money to subtitle them. <\/p>\n<p>But that's where you could come in. If you'd like the sponsor the videos having subtitles, get in touch. I'm sure we can arrange a way such that you could pay for it, and we could have a third-party subtitle the videos, and we'd credit you for the support.<\/p>\n<hr>\n<p>Relevant updates:<\/p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">Cognitive Services + Video = Transcription, speaker recognition, search\/indexing &amp; more. This is friggin\u2019 amazing! <a href=\"https:\/\/t.co\/zC33p7clU8\">https:\/\/t.co\/zC33p7clU8<\/a><\/p>\n<p>&mdash; Aaron Gustafson (@AaronGustafson) <a href=\"https:\/\/twitter.com\/AaronGustafson\/status\/822490277906681858\">January 20, 2017<\/a><\/p><\/blockquote>\n<p><script async src=\"\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"><\/script><\/p>\n<p>Mark H points out the auto-captioning on YouTube:<\/p>\n<figure id=\"post-250286\" class=\"align-none media-250286\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/2mrYRGl.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/2mrYRGl.png 869w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/2mrYRGl-295x300.png 295w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/2mrYRGl-768x782.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n","protected":false},"excerpt":{"rendered":"<p>None of the videos in our entire video screencasts library have captions \/ subtitles \/ transcripts. That means all of that content is rather useless to the deaf, as was made quite clear to me in this recent email: I&#8217;m a big fan of CSS-Tricks and I make a lot of use of your written [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1067,1066,1065,1068],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250277"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250277"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250277\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250277"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250277"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250277"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250167,"date":"2017-01-20T05:34:12","date_gmt":"2017-01-20T12:34:12","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250167"},"modified":"2017-02-07T07:57:26","modified_gmt":"2017-02-07T14:57:26","slug":"animate-different-end-states-using-one-set-css-keyframes","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/animate-different-end-states-using-one-set-css-keyframes\/","title":{"rendered":"Animate to Different End States Using One Set of CSS Keyframes"},"content":{"rendered":"<p>I have recently live coded <a href=\"https:\/\/codepen.io\/thebabydino\/pen\/vgXrZm?editors=1100#0\">a pure CSS random rainbow particle explosion<\/a>. There's a source in the middle of the screen, and rainbow particles shoot out with different speeds at different moments and then fade out. It might seem like the kind of thing that requires a lot of work and code, but it's something I did quite quickly and with only 30 lines of SCSS.<\/p>\n<p><!--more--><\/p>\n<figure id=\"post-250169\" class=\"align-none media-250169\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/particle_explosion.gif\" alt=\"\" \/><figcaption>GIF of the particle explosion animation.<\/figcaption><\/figure>\n<p>This writeup is about showcasing one particularly cool trick: there's <strong>just one set of keyframes<\/strong> used to move all those particles on the screen! There's a second one that's responsible for fading them. But, even though they end up in completely different positions on the screen, only one set of keyframes is in charge of that.<\/p>\n<p>Let's see how it all works!<\/p>\n<h3>Structure<\/h3>\n<p>There's not much going on here. We just drop <code>400<\/code> particles into the <code>body<\/code> element. I used Haml because I feel it provides the simplest way of looping that doesn't even involve a loop variable I'm not going to need anyway. Note that it's all down to personal preference. I tend to go with the preprocessor that gives me the result I want with the least amount of code because the less I need to write, the better. In this particular case, it happens to be Haml. But, at the end of the day, any preprocessor that lets you generate all the <code>.particle<\/code> elements in a loop works just fine.<\/p>\n<pre rel=\"Haml\"><code>- 400.times do\r\n  .particle<\/code><\/pre>\n<h3>Basic styles<\/h3>\n<p>The first thing we do is size our particles and absolutely position. I chose to make them <code>4x4<\/code> squares because I was going for a pixelated look.<\/p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">$d: 4px;\r\n\r\n.particle {\r\n  position: absolute;\r\n  width: $d; height: $d;\r\n}<\/code><\/pre>\n<h3>Random positioning on the screen<\/h3>\n<p>We loop through these <code>400<\/code> particles (note that the number in the <code>@for<\/code> loop in the SCSS needs to be the same number as the one we've used in the Haml loop) and we translate them at random <code>x,y<\/code> points on the screen, where <code>x<\/code> is between <code>1vw<\/code> and <code>100vw<\/code> and <code>y<\/code> is between <code>1vh<\/code> and <code>100vh<\/code>. <code>random(100)<\/code> gives us random integers between <code>1<\/code> and <code>100<\/code>, both inclusive.<\/p>\n<p>At the same time, we also give these particles different random backgrounds so we can see them. We pick the <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/CSS\/color_value#hsl()\"><code>hsl()<\/code><\/a> format because it's the most convenient one here. <code>random(360)<\/code> covers the entire <a href=\"https:\/\/en.wikipedia.org\/wiki\/Color_wheel\">hue wheel<\/a> giving us random values between <code>1<\/code> and <code>360<\/code>.<\/p>\n<figure><img src=\"https:\/\/css-tricks.com\/images\/hue-scale.svg\"><figcaption>Hue scale from 0 to 360.<\/figcaption><\/figure>\n<p>We then max out the saturation (<code>100%<\/code>) and set for a lightness above <code>50%<\/code> (<code>65%<\/code> in this case).<\/p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">.particle {\r\n  \/* same styles as before *\/\r\n\r\n  @for $i from 0 to 400 {\r\n    &amp;:nth-child(#{$i + 1}) {\r\n      transform: translate(random(100)*1vw, random(100)*1vh);\r\n      background: hsl(random(360), 100%, 65%);\r\n    }\r\n  }\r\n}<\/code><\/pre>\n<p>We can now see our particles distributed all over the screen:<\/p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"5c47e0a978926ced3e8d72264e9af527\" data-default-tab=\"result\" data-user=\"thebabydino\" data-embed-version=\"2\" data-pen-title=\"bubble sort\" class=\"codepen\">See the <a href=\"http:\/\/codepen.io\/thebabydino\/pen\/5c47e0a978926ced3e8d72264e9af527\/\">Pen<\/a> by thebabydino (<a href=\"http:\/\/codepen.io\/thebabydino\">@thebabydino<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>They trigger scrollbars, so we set <code>overflow: hidden<\/code> on the root element. We also give it a dark <code>background<\/code> so we can see our light rainbow particles better:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">html {\r\n  overflow: hidden;\r\n  background: #222;\r\n}<\/code><\/pre>\n<p>This way, we get a pretty night sky:<\/p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"4600797161a182c15d33d5dbd9e7bd31\" data-default-tab=\"result\" data-user=\"thebabydino\" data-embed-version=\"2\" data-pen-title=\"bubble sort\" class=\"codepen\">See the <a href=\"http:\/\/codepen.io\/thebabydino\/pen\/4600797161a182c15d33d5dbd9e7bd31\/\">Pen<\/a> by thebabydino (<a href=\"http:\/\/codepen.io\/thebabydino\">@thebabydino<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3>Animation<\/h3>\n<p>The next step is to animate these particles, making them shoot out from the middle of the screen. This means our animation starts at the <code>50vw,50vh<\/code> point:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">@keyframes shoot {\r\n  0% { transform: translate(50vw, 50vh); }\r\n}<\/code><\/pre>\n<p>We don't specify a final (<code>100%<\/code>) keyframe. If this is isn't specified, it gets automatically generated from the styles we have set on the elements we animate - in our case, these are the random translates, different for each and every particle.<\/p>\n<p>We want the motion of the particles to be fast at first and then slow down, which means we need to use an <em>ease out<\/em> type of timing function. We can just go for the plain old <code>ease-out<\/code>, or we can use a more advanced one (I go to <a href=\"http:\/\/easings.net\/\">easings.net<\/a> for this). We then give our <code>animation<\/code> a dummy duration of <code>3s<\/code> and make it repeat infinitely.<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.particle {\r\n  \/* same styles as before *\/\r\n  animation: shoot 3s ease-out infinite;\r\n}<\/code><\/pre>\n<p>We get the following result:<\/p>\n<p data-height=\"500\" data-preview=\"true\" data-theme-id=\"1\" data-slug-hash=\"41ebdbe9ec62f0e43454d8a9425dacdc\" data-default-tab=\"result\" data-user=\"thebabydino\" data-embed-version=\"2\" data-pen-title=\"bubble sort\" class=\"codepen\">See the <a href=\"http:\/\/codepen.io\/thebabydino\/pen\/41ebdbe9ec62f0e43454d8a9425dacdc\/\">Pen<\/a> by thebabydino (<a href=\"http:\/\/codepen.io\/thebabydino\">@thebabydino<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>The particles shoot out to different positions in the plane, just like we wanted. But they all animate at once, which isn't what we want. So the first fix is to give each one of them a different, random animation duration between <code>1s<\/code> and <code>3s<\/code> within the loop:<\/p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">.particle {\r\n  \/* same styles as before *\/\r\n\r\n    @for $i from 0 to 400 {\r\n        $t: (1 + .01*random(200))*1s;\r\n\r\n        &amp;:nth-child(#{$i + 1}) {\r\n            \/* same styles as before *\/\r\n            animation-duration: $t;\r\n        }\r\n    }\r\n}<\/code><\/pre>\n<p>This is much better:<\/p>\n<p data-height=\"500\" data-preview=\"true\" data-theme-id=\"1\" data-slug-hash=\"d58336af987af7fe134b156219eb6fae\" data-default-tab=\"result\" data-user=\"thebabydino\" data-embed-version=\"2\" data-pen-title=\"bubble sort\" class=\"codepen\">See the <a href=\"http:\/\/codepen.io\/thebabydino\/pen\/d58336af987af7fe134b156219eb6fae\/\">Pen<\/a> by thebabydino (<a href=\"http:\/\/codepen.io\/thebabydino\">@thebabydino<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Then we give each particle a random negative delay between <code>0%<\/code> and <code>100%<\/code> of its <code>animation-duration<\/code> (<code>$t<\/code>) in absolute value:<\/p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">.particle {\r\n  \/* same styles as before *\/\r\n\r\n    @for $i from 0 to 400 {\r\n        $t: (1 + .01*random(200))*1s;\r\n\r\n        &amp;:nth-child(#{$i + 1}) {\r\n            \/* same styles as before *\/\r\n            animation-delay: -.01*random(100)*$t;\r\n        }\r\n    }\r\n}<\/code><\/pre>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"cfca2a4e5be388ac8a2bc8a1af7e8ce2\" data-default-tab=\"result\" data-user=\"thebabydino\" data-embed-version=\"2\" data-pen-title=\"bubble sort\" class=\"codepen\">See the <a href=\"http:\/\/codepen.io\/thebabydino\/pen\/cfca2a4e5be388ac8a2bc8a1af7e8ce2\/\">Pen<\/a> by thebabydino (<a href=\"http:\/\/codepen.io\/thebabydino\">@thebabydino<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Finally, we don't want the particles to just disappear, so we add a second animation (with the same duration and the same delay) to fade them out:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.particle {\r\n  \/* same styles as before *\/\r\n  animation: shoot 0s ease-out infinite;\r\n  animation-name: shoot, fade;\r\n}\r\n\r\n@keyframes fade { to { opacity: 0; } }<\/code><\/pre>\n<p>We now have the final result!<\/p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"vgXrZm\" data-default-tab=\"result\" data-user=\"thebabydino\" data-embed-version=\"2\" data-pen-title=\"bubble sort\" class=\"codepen\">See the <a href=\"http:\/\/codepen.io\/thebabydino\/pen\/vgXrZm\/\">Pen<\/a> by thebabydino (<a href=\"http:\/\/codepen.io\/thebabydino\">@thebabydino<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>I have recently live coded a pure CSS random rainbow particle explosion. There&#8217;s a source in the middle of the screen, and rainbow particles shoot out with different speeds at different moments and then fade out. It might seem like the kind of thing that requires a lot of work and code, but it&#8217;s something [&hellip;]<\/p>\n","protected":false},"author":225572,"featured_media":250256,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[795,1059],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250167"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/225572"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250167"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250167\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/250256"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250167"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250167"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250167"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250030,"date":"2017-01-19T05:14:18","date_gmt":"2017-01-19T12:14:18","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250030"},"modified":"2017-01-19T05:14:18","modified_gmt":"2017-01-19T12:14:18","slug":"fully-managed-cloud-hosting","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/fully-managed-cloud-hosting\/","title":{"rendered":"Fully Managed Cloud Hosting"},"content":{"rendered":"<p>Do you have a client that requires <em>absolutely zero downtime<\/em>? <\/p>\n<p>How about any sites that have <em>unpredictable traffic<\/em>? Welcome spikes in visitors that can happen anytime, but can be a big problem for web servers.<\/p>\n<p>You should look at <a href=\"https:\/\/mediatemple.net\/managedcloud\/\">Fully Managed Cloud Hosting<\/a> on Media Temple. It may be the perfect home for these projects. It's Amazon Web Services hosting, with white-glove support from Media Temple's AWS-certified Cloud Architects. This is instant scaling, super high-performance web hosting that you don't have to manage yourself. <\/p>\n","protected":false},"excerpt":{"rendered":"<p>Do you have a client that requires absolutely zero downtime? How about any sites that have unpredictable traffic? Welcome spikes in visitors that can happen anytime, but can be a big problem for web servers. You should look at Fully Managed Cloud Hosting on Media Temple. It may be the perfect home for these projects. [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17,508],"tags":[1023,635],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250030"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250030"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250030\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250030"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250030"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250030"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250219,"date":"2017-01-19T05:13:10","date_gmt":"2017-01-19T12:13:10","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250219"},"modified":"2017-01-19T08:46:07","modified_gmt":"2017-01-19T15:46:07","slug":"peoples-names-break-websites","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/peoples-names-break-websites\/","title":{"rendered":"People&#8217;s Names That Break Websites"},"content":{"rendered":"<p>I heard from Alex Goldman of <a href=\"https:\/\/gimletmedia.com\/reply-all\/\">Reply All<\/a> (a super duper very great podcast with stories loosely originating from the internet):<\/p>\n<blockquote>\n<p>We're doing a story about people that have names that websites and computers don't seem to like - for example, we spoke to a guy named William Test, and a woman named Katie Test, both of whom can't seem to keep a hotel or airplane booking because the name \"test\" is flagged by internal systems.<\/p>\n<p><p>We also spoke to a guy named Christopher Null who had the same problem, and woman named Joan Fread, who can't use paypal because her last name is the same as a PHP command.<\/p>\n<p>I'm curious if there's anyone in the dev community that is thinking about this, and how to deal with it. Is it even considered a problem? Is the population that this affects so small that people don't even think about it?<\/p>\n<\/blockquote>\n<p><!--more--><\/p>\n<p>I wrote back, but that was a few months ago and I haven't heard anything. I figured I'd post my response here since it is really an interesting topic and maybe through the comments here we can stir up some interesting bits he can use.<\/p>\n<p>This is my response:<\/p>\n<hr>\n<p>At the end of the day, it's sloppy programming. No software should accept a name input and at any point treat that as code. If your last name is like <a href=\"https:\/\/xkcd.com\/327\/\">the famous XKCD comic<\/a>, in a well-designed system, that should be fine. <\/p>\n<p>There are some valid reasons to \"flag\" names. At my company (<a href=\"http:\/\/codepen.io\/\">CodePen<\/a>), we flag names for bad language. You can't sign up as \"Sh*tf*cker Dirtyballs\". We do that on purpose, to promote a healthier community.<\/p>\n<p>There is a difference between <em>names<\/em> and <em>usernames<\/em>. It's slightly more legit to have stricter rules around usernames. We have a file called \"username_blacklist.rb\" in our codebase that prevents the usage of lots of words. The reason for this isn't because we're worried about overriding Ruby functions or anything, but 1) We use usernames in URL's, meaning we need to reserve some of those for our own use and 2) again, bad language filter. 3) Spam. If a username has \"watchsocceronline\" (for example) in it, we flag it for a spam review.<\/p>\n<p>The \"real world\" of programming is complicated. It's not terribly surprising that companies write \"band-aid code\" that fixes a problem quickly instead of well. Writing code that blocks\/flags a last name of \"delete\" is easier to write than auditing a whole codebase for situations in which that string causes problems. <\/p>\n<hr>\n<p>What experience to y'all have with this?<\/p>\n","protected":false},"excerpt":{"rendered":"<p>I heard from Alex Goldman of Reply All (a super duper very great podcast with stories loosely originating from the internet): We&#8217;re doing a story about people that have names that websites and computers don&#8217;t seem to like &#8211; for example, we spoke to a guy named William Test, and a woman named Katie Test, [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1061,1060],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250219"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250219"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250219\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250219"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250219"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250219"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250217,"date":"2017-01-19T05:02:55","date_gmt":"2017-01-19T12:02:55","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250217"},"modified":"2017-01-19T05:02:55","modified_gmt":"2017-01-19T12:02:55","slug":"color-ui-design","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/color-ui-design\/","title":{"rendered":"Color in UI Design"},"content":{"rendered":"<p>Erik D. Kennedy:<\/p>\n<blockquote><p>So if color theory doesn\u2019t provide a solid basis for color in UI design, what does? Let me throw an opinion at ya\u2019: <em>color modifications<\/em>. It\u2019s the tweaking of color that counts, not the picking of them from the color theory hat.<\/p><\/blockquote>\n<p>Ahmad Shadeed with <a href=\"https:\/\/css-tricks.com\/the-power-of-rgba\/\">some similar thinking an examples<\/a>.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Erik D. Kennedy: So if color theory doesn\u2019t provide a solid basis for color in UI design, what does? Let me throw an opinion at ya\u2019: color modifications. It\u2019s the tweaking of color that counts, not the picking of them from the color theory hat. Ahmad Shadeed with some similar thinking an examples.<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[837],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250217"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250217"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250217\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250217"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250217"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250217"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250069,"date":"2017-01-18T06:32:07","date_gmt":"2017-01-18T13:32:07","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250069"},"modified":"2017-01-18T06:32:07","modified_gmt":"2017-01-18T13:32:07","slug":"deploying-bitbucket-wordpress","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/deploying-bitbucket-wordpress\/","title":{"rendered":"Deploying From Bitbucket to WordPress"},"content":{"rendered":"<p>Of all the projects I've worked in the last few years, there's one that stands out as my favorite: I wrote a WordPress plugin called Great Eagle (Tolkien reference) that allows my team to install and update themes and plugins from our private Bitbucket repos, via the normal wp-admin updates UI.<\/p>\n<p>This plugin has blasted our dev shop through the roof when it comes to development best practices, in ways we never expected or intended. It forces us to use proper version numbers because now we can't deploy without them.  It forces us to store our work in Bitbucket because now we can't deploy without it. It forces us to use the command line en route to deploying our work (by which I simply mean, <code>git push origin master<\/code>), which then led to us using phpUnit. Now we can't deploy unless our tests pass. We've arrived at the nirvana of test-driven development, all because we started with the unrelated step of deploying from git.<\/p>\n<p>If this all sounds standard and obvious, great. I'd love a chance to learn from you. If this sounds like exotic rigmarole, guess what? This article is for you.<\/p>\n<p><!--more--><\/p>\n<p>Disclaimer: My work in this plugin is heavily influenced by, and in some cases plagiarized from, the excellent <a href='https:\/\/github.com\/afragen\/github-updater'>GitHub Updater<\/a> plugin, by <a href='https:\/\/github.com\/afragen'>Andy Fragen<\/a>. The reason I wrote my own is because we have hundreds of themes and plugins in Bitbucket, and I was having some scale issues when I was auditioning <abbr title=\"GitHub Updater\">GHU<\/abbr>, which <a href='https:\/\/twitter.com\/andyfragen\/status\/817453393459281920'>have since been addressed<\/a>. I probably bailed too early, as that plugin has been under active and expert development for years.  More than anything, we just wanted a version that was totally under our own maintenance. I'll be featuring some gists from my plugin, but ultimately <strong>I recommend that users defer to GHU<\/strong> because it's likely a better fit for most people, and also I don't want to take any momentum from that awesome project.<\/p>\n<h3>Prerequisites<\/h3>\n<p>My examples demonstrate a multisite install, but that's not particularly important.  This works fine on a single-site install as well. I'm on WordPress version 4.8-alpha-39626 at the moment, but that's not terribly important either.<\/p>\n<p>Of chief importance is my assumption that all of the themes and plugins in your workplace are each stored in their own Bitbucket repo. This is quite an assumption! No joke: When embarking on this, we hired a company to manually create a repo for each of our themes and plugins. We were using SVN (poorly!) prior to this migration.<\/p>\n<h3>How does it work?<\/h3>\n<p>There are three(ish) steps:<\/p>\n<p><strong>1)<\/strong> Create a UI for the user to make an <a href='https:\/\/developer.atlassian.com\/bitbucket\/api\/2\/reference\/resource\/repositories\/%7Busername%7D'>API request<\/a> to Bitbucket and mirror all of our repository data into the WordPress database.  Not all the data about each repo, really just the slug name, which we will use as a key for deeper queries.<\/p>\n<figure id=\"post-250075\" class=\"align-none media-250075\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/build_mirror.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/build_mirror.png 2073w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/build_mirror-300x135.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/build_mirror-768x345.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/build_mirror-1024x459.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>A form for the user to mirror our Bitbucket account to the database.<\/figcaption><\/figure>\n<p>An alternative would be to build this automatically whenever it's empty, but for now, I'm happy to have complete control over when such a large series of API requests gets run.<\/p>\n<p><strong>2)<\/strong> Once we have a bit of information mirrored for all of our repos, we can offer a jQuery autocomplete to choose a few repos for data drill-down, where we make several more API calls for each of them, giving us access to deeper information like version number and download url.<\/p>\n<figure id=\"post-250076\" class=\"align-none media-250076\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/auto.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/auto.jpg 1587w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/auto-300x152.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/auto-768x389.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/auto-1024x519.jpg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Now that we have a local mirror of our Bitbucket repos, we can populate an autocomplete for selecting some of them for installing or updating.<\/figcaption><\/figure>\n<p>Why not just gather all of those details for all repos right away?  Because we have hundreds of repos and it takes several calls per repo to grab all of the pertinent information such as, say, the version number.  It would probably take 15-30 minutes and over 1,000 API trips.<\/p>\n<p><strong>3)<\/strong> Once we have detailed information about the handful of repos we want to use at the moment, we can determine two important things about them.  First, is it installed in WordPress?  If not, it will appear in a UI for us to install it.  Second, if it is installed, is it on the latest version?  If not, it will appear in the normal wp-admin updates UI.<\/p>\n<figure id=\"post-250078\" class=\"align-none media-250078\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/which_to_install.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/which_to_install.jpg 1041w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/which_to_install-300x286.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/which_to_install-768x733.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/which_to_install-1024x977.jpg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Some of the plugins in our Bitbucket account are not installed in our WordPress network.<\/figcaption><\/figure>\n<figure id=\"post-250079\" class=\"align-none media-250079\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/installed.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/installed.jpg 1044w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/installed-300x254.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/installed-768x651.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/installed-1024x868.jpg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>We used Great Eagle's UI to install one of them.<\/figcaption><\/figure>\n<figure id=\"post-250080\" class=\"align-none media-250080\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/update.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/update.png 1425w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/update-265x300.png 265w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/update-768x868.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/update-906x1024.png 906w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Our plugin is hosted in a private Bitbucket repo, but here it is in our normal update queue.<\/figcaption><\/figure>\n<p>On the off-chance that a repo is not readable (maybe it lacks proper docblocks or naming conventions), it gets omitted from all of these steps.  This has only happened to us with a small handful of poorly named plugins, but it can be annoying since changing the plugin folder and file names can deactivate the plugin.<\/p>\n<h3>Huh. How does it work, exactly?<\/h3>\n<p>Fair question. I'll explain what the tricky parts were, and share some code from my plugin.<\/p>\n<h4>Building the list of repos<\/h4>\n<p>The maximum number of repos per API call is 100. That's just how the Bitbucket API works. We have far more than that in our account, so we have to call Bitbucket in a loop:<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">&lt;?php\r\n\r\n\/**\r\n * Store a \"shallow\" list of repos.\r\n *\/\r\npublic function set_repo_list() {\r\n\r\n  ...\r\n      \r\n  \/\/ Let's get 100 per page, which is the maximum.\r\n  $max_pagelen = 100;\r\n  \r\n  ....\r\n  \r\n  \/\/ Get the first page of repos.\r\n  $page = 1;\r\n  $call = new LXB_GE_Call( 'api', \"repositories\/$team\", $max_pagelen, $page );\r\n\r\n  $get = $call -&gt; get();\r\n  $out = $get['values'];\r\n\r\n  \/\/ Now we know how many there are in total.\r\n  $total = $get['size'];\r\n\r\n  \/\/ How many pages does that make for?\r\n  $num_pages = ceil( $total \/ $max_pagelen );\r\n\r\n  \/\/ Query each subsequent page.  We already got the first one.\r\n  while( $page &lt; $num_pages ) {\r\n\r\n    $page++;\r\n\r\n    $next_call = new LXB_GE_Call( 'api', \"repositories\/$team\", $max_pagelen, $page );\r\n    $next_get   = $next_call -&gt; get();\r\n    $next_repos = $next_get['values'];\r\n\r\n    $out = array_merge( $out, $next_repos );\r\n\r\n  }\r\n\r\n  \/\/ Sort the list by most recently updated.\r\n  $out = $this -&gt; sort( $out, 'updated_on' );\r\n\r\n  $this -&gt; repo_list = $out;\r\n\r\n}<\/code><\/pre>\n<h4>Determining the \"main\" plugin file<\/h4>\n<p>WordPress is very unopinionated when it comes to naming plugins.  In most cases, a plugin folder does, in fact, contain exactly one plugin, and that plugin will have a \"main\" file of sorts, that contains a docblock to convey the plugin name, description, author, and most importantly, the version number.  Because that file can be named anything, determining which file is the main plugin file is something of an open question.  The approach I've taken is to assume that the plugin will conform to some naming conventions we try to use in our work.<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">&lt;?php\r\n\r\nfunction set_main_file_name() {\r\n\r\n    \/\/ Grab the slug name for this Bitbucket repo.\r\n  $slug = $this -&gt; slug;\r\n  \r\n  \/\/ Grab the list of file names in this repo.\r\n  $file_list = $this -&gt; file_list;\r\n\r\n  \/\/ There's a good chance that there is a file with the same name as the repo.\r\n  if( in_array( \"$slug.php\", $file_list ) ) {\r\n\r\n    $main_file_name = \"$slug.php\";\r\n\r\n  \/\/ If not, there's a good chance there's a plugin.php file.\r\n  } elseif( in_array( 'plugin.php', $file_list ) ) {\r\n\r\n    $main_file_name = 'plugin.php';\r\n\r\n  \/\/ If not, it's probably a theme.\r\n  } elseif( in_array( 'style.css', $file_list ) &amp;&amp; in_array( 'functions.php', $file_list ) ) {\r\n\r\n    $main_file_name = 'style.css';\r\n\r\n  \/\/ Else, oh well, couldn't find it.\r\n  } else {\r\n\r\n    $error          = sprintf( esc_html__( 'Could not identify a main file for repo %s.', 'bucketpress' ), $slug );\r\n    $main_file_name = new BP_Error( __CLASS__, __FUNCTION__, __LINE__, func_get_args(), $error );\r\n\r\n  }\r\n\r\n  $this -&gt; main_file_name = $main_file_name;\r\n\r\n}<\/code><\/pre>\n<h4>Determining the version number<\/h4>\n<p>Given the main plugin or theme file, we can dig into the docblock in that file in order to determine the version number.  Here's how I do it:<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">&lt;?php\r\n\r\n  \/**\r\n   * Get the value for a docblock line.\r\n   * \r\n   * @param  string $key The key for a docblock line.\r\n   * @return string The value for a docblock line.\r\n   *\/\r\n  function get_value_from_docblock( $key ) {\r\n\r\n    \/\/ Grab the contents of the main file.\r\n    $main_file_body = $this -&gt; main_file_body;\r\n\r\n    \/\/ Break the file into lines.\r\n    $lines = $this -&gt; formatting -&gt; get_lines_from_string( $main_file_body );\r\n\r\n    \/\/ Let's save ourselves some looping and assume the docblock is &lt; 30 lines.\r\n    $max_lines = 30;\r\n    $i         = 0;\r\n\r\n    foreach( $lines as $line ) {\r\n        \r\n      $i++;\r\n\r\n      \/\/ If the line does not have the key, skip it.\r\n      if( ! stristr( $line, $key . ':' ) ) { continue; }\r\n\r\n      \/\/ We found the key!\r\n      break;\r\n\r\n      \/\/ Whoops, we made it to the end without finding the key.\r\n      if( $i == $max_lines ) { return FALSE; }\r\n\r\n    }\r\n\r\n    \/\/ Break the line into the key\/value pair.\r\n    $key_value_pair = explode( ':', $line );\r\n\r\n    \/\/ Remove the key from the line.\r\n    array_shift( $key_value_pair );\r\n\r\n    \/\/ Convert the value back into a string.\r\n    $out = implode( ':', $line_arr );\r\n\r\n    $out = trim( $out );\r\n\r\n    return $out;\r\n\r\n  }<\/code><\/pre>\n<p>While I'm at it, allow me to applaud php's helpful <code>version_compare()<\/code> function, which can parse most common version syntaxes:<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">\/**\r\n * Determine if this asset needs to be updated.\r\n * \r\n * @return boolean Returns TRUE of the local version number\r\n * is lower than the remote version number, else FALSE.\r\n *\/\r\nfunction needs_update() {\r\n\r\n  $old_version = $this -&gt; old_version;\r\n\r\n  $new_version = $this -&gt; new_version;\r\n\r\n  $compare = version_compare( $old_version, $new_version );\r\n\r\n  if( $compare == -1 ) { return TRUE; }\r\n\r\n  return FALSE;\r\n\r\n}<\/code><\/pre>\n<h4>Parsing the readme.txt<\/h4>\n<p>We actually don't use the readme.txt for anything in our plugins, and therefore my Great Eagle plugin does not do much parsing of it either.  However, if you wish to incorporate readme information, I'd recommend <a href='https:\/\/github.com\/rmccue\/code-viewer\/blob\/master\/parse-readme.php'>this library from Ryan McCue<\/a> for parsing it.<\/p>\n<h4>The deal with private repos<\/h4>\n<p>Our repos all happen to be private - that's just the way we do business at the moment.  In order to query them, we have to filter in some creds.  In this example, I'm doing so via basic auth:<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">&lt;?php\r\n\r\n\/**\r\n * Authenticate all of our calls to Bitbucket, so that we can access private repos.\r\n * \r\n * @param  array  $args The current args for http requests.\r\n * @param  string $url  The url to which the current http request is going.\r\n * @return array        $args, filtered to include BB basic auth.\r\n *\/\r\npublic function authenticate_http( $args, $url ) {\r\n\r\n  \/\/ Find out the url to Bitbucket.\r\n  $call   = new LXB_GE_Call( 'web', FALSE );\r\n  $bb_url = $call -&gt; get_url();\r\n\r\n  \/\/ If we're not calling a Bitbucket download, don't bother.\r\n  if( ! stristr( $url, $bb_url ) ) { return $args; }\r\n  if( ! stristr( $url, '.zip' ) ) { return $args; }\r\n\r\n  \/\/ Okay, time to append basic auth to the args.\r\n  $creds = $this -&gt; creds;\r\n  $args['headers']['Authorization'] = \"Basic $creds\";\r\n\r\n  return $args;\r\n\r\n}<\/code><\/pre>\n<p>I'm doing this via filtration, rather than passing args to <code>wp_remote_get()<\/code>, because I need WordPress to be prepared with these creds when it makes its calls during its normal theme and plugin update calls, which now happen to be going to Bitbucket.<\/p>\n<p>It would be better to do Oauth instead of basic auth, but after quite a bit of research, I've concluded that there's not a way to do so.  The roadblock is because raw file content is actually not part of the Bitbucket API at this point, it's just hosted on their website like any other static asset, such as this <a href='https:\/\/bitbucket.org\/codeinthecold\/test-theme\/raw\/865f1eecb55b9e2b54b4fb8e18135393d038f16c\/style.css'>public test theme<\/a> for example (it's public for demo purposes, but again, if it were private, you could access it via basic auth). I do have this humble <a href=\"https:\/\/bitbucket.org\/site\/master\/issues\/13690\/customer-request-api-20-to-include\">feature request<\/a> to show for my efforts. As a security measure, I recommend using Bitbucket's new <a href=\"https:\/\/blog.bitbucket.org\/2016\/06\/06\/app-passwords-bitbucket-cloud\/\">application passwords<\/a> feature to create an account specifically and only for scripted calls like this, where that app password only has read access. So, to be clear, with basic auth there is a universe (maybe this one) in which a packet-sniffing foe is reading our plugin files. I'm okay with that, at least for the moment.<\/p>\n<h4>Adding our repos to the update queue<\/h4>\n<p>If there's one key to getting a foothold in this whole process, it's found in the <a href='https:\/\/developer.wordpress.org\/reference\/functions\/wp_update_plugins\/'>wp_update_plugins()<\/a> function.  That's a huge function the core uses to loop through all of the installed plugins, determine which ones have an update available, and save the result to a transient.  The key is that the transient is then exposed for filtering, which is exactly what my plugin does:<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">&lt;?php\r\n\r\nadd_filter( 'pre_set_site_transient_update_plugins', array( $this, 'set_plugin_transient' ) );\r\n\r\n\/**\r\n * Inject our updates into core's list of updates.\r\n * \r\n * @param  array $transient The existing list of assets that need an update.\r\n * @return The list of assets that need an update, filtered.\r\n *\/\r\npublic function set_plugin_transient( $transient ) {\r\n\r\n  if( ! is_array( $this -&gt; assets_to_update ) ) { return $transient; }\r\n\r\n  foreach( $this -&gt; assets_to_update as $asset ) {\r\n\r\n    if( empty( $asset -&gt; transient_key ) ) { continue; }\r\n\r\n    if( ! $asset -&gt; transient_content ) { continue; }\r\n\r\n    $transient -&gt; response[ $asset -&gt; transient_key ] = $asset -&gt; transient_content;\r\n\r\n  }\r\n\r\n  return $transient;\r\n\r\n}<\/code><\/pre>\n<p>It took me forever to break into this, and it took me months and months to write this plugin.  You should probably just use GHU instead.  It's pretty damn similar.  That said, if you want to tweak some things and you don't like running 3rd party plugins, maybe the above code will help you write your own.<\/p>\n<h3>So what's the point, exactly?<\/h3>\n<p>The point is not so much <em>how<\/em> to build your own git deployer plugin, or which existing one you should use. You can figure that stuff out yourself. The really interesting thing is to look at what happened to us when we started deploying from git. Some of the side effects were profoundly surprising and positive.<\/p>\n<h4>So long, FTP<\/h4>\n<p>FTP stinks for so many reasons.<\/p>\n<ul>\n<li>FTP access is an attack vector.<\/li>\n<li>No easy way to track or revert changes.<\/li>\n<li>No easy way to allow multiple people to work on the same project at the same time.<\/li>\n<li>Human error.  It pretty easy to mis-drag-n-drop, leading to a <a href='https:\/\/en.wikipedia.org\/wiki\/Screen_of_death'>WSOD<\/a> or worse.<\/li>\n<li>I never expected this, but it&#039;s apparent when updating a plugin across many installs, that this git method is much faster than FTP.<\/li>\n<\/ul>\n<p>With a git deployment system like the one I'm advocating and explaining in this article, you can go so far as to disable all FTP access to your production environment. Seriously:  ou won't need it.<\/p>\n<h4>Hello proper versioning<\/h4>\n<p>I recommend using a git deploy tool that uses docblocks in order to determine the version number, and uses the version number to determine if the theme or plugin is in need of an update.  This forces your team to use proper version numbers, which is a nice first step down to the road from crankin' out themes to maturely managing a long-living codebase.<\/p>\n<h4>I'm so stoked about unit testing now<\/h4>\n<p>If you're not unit testing, you probably know you should be. With git deployment, it can be both automatic and required.<\/p>\n<p>We use the command line to move our work from our local MAMP to Bitbucket, as in, <code>git push origin master<\/code>. Each of our plugins carries a Grunt task to execute our phpUnit tests upon git pre-commit, and if the tests fail, so does the commit.<\/p>\n<p>We bind Grunt to our commit using <a href='https:\/\/www.npmjs.com\/package\/grunt-githooks'>GitHooks<\/a> and we execute our unit tests via <a href='https:\/\/www.npmjs.com\/package\/grunt-exec'>Exec<\/a>. If the tests fail, so does the deployment.<\/p>\n<p>There's no way to sidestep the tests because there's no way to sidestep git for deploying!<\/p>\n<h4>Rollbacks<\/h4>\n<p>There are no roll<em>backs<\/em> per se with this method. Rather, you only roll forward. Whatever you want to fix or restore, get it in master, boost the version number, push, and deploy.<\/p>\n<h4>Staffing<\/h4>\n<p>This kind of maturation can have business-wide ramifications. Picture this: You have non-dev support folks on the front lines, trying to debug a problem for a client. In the past, they would have had to place this request in a dev ticket queue, while the customer waits hours or days for a resolution. Not anymore. Now, your front-line support agent can navigate to network admin and see that on this environment the plugin in question is outdated. They're free to update the plugin right away via the normal wp-admin interface. The ticket is resolved by front-line support with no dev team involvement.  Perhaps those front-line folks cost less than developers, or perhaps they carry a deep skill set in account management. Either way, you no longer have to open a dev ticket to deploy updates to your in-house plugins.  Pivotal.<\/p>\n<h3>Rise of the machines<\/h3>\n<p>Before this process, we were very much an ordinary dev shop churning out themes and plugins for clients, cowboy-FTPing, not versioning our work. Why? Because we were lazy. Why? Because we were human. We're no longer lazy because we are no longer human, at least when deploying. We're a command line script and a series of API requests, and no matter how lazy we are, we have to follow proper deployment practices because we nuked the FTP creds for our developers!  On top of all that, it's a faster way to deploy, free from any click-n-drag misfires.<\/p>\n<p>Can you get on board with this overnight? Okay, no. It's a long and expensive process, and it <em>might<\/em> not be for you, but honestly it probably is. I think there are about 1,000 dev shops out there that should give careful consideration to this.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Of all the projects I&#8217;ve worked in the last few years, there&#8217;s one that stands out as my favorite: I wrote a WordPress plugin called Great Eagle (Tolkien reference) that allows my team to install and update themes and plugins from our private Bitbucket repos, via the normal wp-admin updates UI. This plugin has blasted [&hellip;]<\/p>\n","protected":false},"author":229300,"featured_media":250164,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[679,1046,677,264],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250069"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/229300"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250069"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250069\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/250164"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250069"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250069"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250069"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250161,"date":"2017-01-18T06:30:34","date_gmt":"2017-01-18T13:30:34","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250161"},"modified":"2017-01-18T06:30:34","modified_gmt":"2017-01-18T13:30:34","slug":"making-magic-websockets-css","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/making-magic-websockets-css\/","title":{"rendered":"Making Magic with WebSockets and CSS"},"content":{"rendered":"<p>Ooo. Ooo. It's a trick, that uses CSS.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Ooo. Ooo. It&#8217;s a trick, that uses CSS.<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[1058,688],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250161"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250161"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250161\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250161"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250161"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250161"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250099,"date":"2017-01-17T09:56:51","date_gmt":"2017-01-17T16:56:51","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250099"},"modified":"2017-01-17T12:25:42","modified_gmt":"2017-01-17T19:25:42","slug":"tinder-for-bananas","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/tinder-for-bananas\/","title":{"rendered":"Tinder for Bananas"},"content":{"rendered":"<p>I saw this little web app (<a href=\"http:\/\/tinderforbananas.com\">live demo<\/a>) by Das Surma going around the other day. It's funny, but it's also a really compelling demo app for a bunch of modern technologies. I'm sure that's the whole point of it.<\/p>\n<ul>\n<li>Minimal build process. Just Gulp to use Babel and PostCSS. It's heavy on ES6+ and CSS custom properties.<\/li>\n<li>Loads of custom elements, like <code>&lt;tinderforbananas-item&gt;<\/code>, with the Polymer polyfill for those.<\/li>\n<li>Icons are super tiny SVG, they look hand-golfed.<\/li>\n<li>ServiceWorker for offline cache.<\/li>\n<li>Mobile and performance-first design and interactions.<\/li>\n<\/ul>\n<p>Maybe it'll be like the HTML5 Boilerplate of the future.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>I saw this little web app (live demo) by Das Surma going around the other day. It&#8217;s funny, but it&#8217;s also a really compelling demo app for a bunch of modern technologies. I&#8217;m sure that&#8217;s the whole point of it. Minimal build process. Just Gulp to use Babel and PostCSS. It&#8217;s heavy on ES6+ and [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4,17],"tags":[1054,661],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250099"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250099"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250099\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250099"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250099"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250099"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250060,"date":"2017-01-16T19:49:22","date_gmt":"2017-01-17T02:49:22","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250060"},"modified":"2017-01-16T19:49:22","modified_gmt":"2017-01-17T02:49:22","slug":"the-line-of-death","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/the-line-of-death\/","title":{"rendered":"The Line of Death"},"content":{"rendered":"<p>Eric Lawrence has written a pretty scary post about browser security and malicious websites that hope to trick us:<\/p>\n<blockquote><p>When building applications that display untrusted content, security designers have a major problem\u2014 if an attacker has full control of a block of pixels, he can make those pixels look like anything he wants, including the UI of the application itself. He can then induce the user to undertake an unsafe action, and a user will be none-the-wiser.<\/p><\/blockquote>\n<p>And the problem is even worse on mobile: <\/p>\n<blockquote><p>Virtually all mobile operating systems suffer from the same issue\u2013 due to UI space constraints, there are no trustworthy pixels, allowing any application to spoof another application or the operating system itself<\/p><\/blockquote>\n","protected":false},"excerpt":{"rendered":"<p>Eric Lawrence has written a pretty scary post about browser security and malicious websites that hope to trick us: When building applications that display untrusted content, security designers have a major problem\u2014 if an attacker has full control of a block of pixels, he can make those pixels look like anything he wants, including the [&hellip;]<\/p>\n","protected":false},"author":223806,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[779],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250060"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/223806"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250060"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250060\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250060"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250060"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250060"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250054,"date":"2017-01-16T07:16:49","date_gmt":"2017-01-16T14:16:49","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250054"},"modified":"2017-01-16T09:59:46","modified_gmt":"2017-01-16T16:59:46","slug":"opera-neon","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/opera-neon\/","title":{"rendered":"Opera Neon"},"content":{"rendered":"<p>Hot takes!<\/p>\n<ul>\n<li>I wanted to give it at least a few days of full-time use, but you can't use extensions (yet?). The web is too hard for me to use without 1Password and Ghostery.<\/li>\n<li>The UI feels fresh and interesting. UI polish seems like an excellent direction for Opera to go. Since moving to Blink they aren't spending (as many) resources on under the hood browser stuff, they might as well polish up the hood itself. It's neat how it uses your desktop background as its background. It's not transparent, though, it's just a duplicate image.<\/li>\n<li>The pop-out videos are pretty sweet. Safari can do it (<a href=\"https:\/\/twitter.com\/chriscoyier\/status\/794996354540048384\">awkwardly<\/a>), but the tray of media in Neon is an upgrade. I don't understand why Chrome and Firefox can't do this... isn't it a macOS level thing?<\/li>\n<li>Weird bug: doesn't seem like you can \u2318V paste into the address bar?<\/li>\n<\/ul>\n","protected":false},"excerpt":{"rendered":"<p>Hot takes! I wanted to give it at least a few days of full-time use, but you can&#8217;t use extensions (yet?). The web is too hard for me to use without 1Password and Ghostery. The UI feels fresh and interesting. UI polish seems like an excellent direction for Opera to go. Since moving to Blink [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[1051,1050],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250054"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250054"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250054\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250054"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250054"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250054"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249985,"date":"2017-01-16T05:54:07","date_gmt":"2017-01-16T12:54:07","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249985"},"modified":"2017-01-16T19:34:53","modified_gmt":"2017-01-17T02:34:53","slug":"create-url-scheme","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/create-url-scheme\/","title":{"rendered":"How To Create Your Own URL Scheme"},"content":{"rendered":"<p>A URL Scheme is like \"http:\/\/...\" or \"ftp:\/\/...\". Those seem like a very low-level concept that you don't have much control over, but actually, you do! What sounds like an exotic topic is not so exotic at all: we are constantly using different URL Schemes, on any given day. For example when we're clicking a link to an iPhone app that launches the AppStore. Or when a friend sends us a link to a playlist and it opens in the Spotify desktop app.<\/p>\n<p>In the following short tutorial, we'll look at how custom URL schemes work on macOS and iOS.<\/p>\n<p><!--more--><\/p>\n<h3>URL Schemes and Document Types<\/h3>\n<p>Any macOS or iOS application can register itself as a handler for any URL scheme (like \"http\" or \"https\") or document type (like \"txt\" files). Apart from those classics, however, an app can also register its own, custom URL scheme or document format.<\/p>\n<p>If an app wants to indicate that it supports a certain document type or URL scheme, its \"Info.plist\" file has to be configured appropriately: the <code>CFBundleDocumentTypes<\/code> key lists the document types that the app supports, while <code>CFBundleURLTypes<\/code> is used for supported URL schemes.<\/p>\n<p>In your own app, you can configure this easily via Xcode's project settings: the \"Info\" tab offers sections for both \"Document Types\" and \"URL Types\". The URL scheme can be any string we like (as long as it remains a valid URL format).<\/p>\n<figure id=\"post-249988\" class=\"align-none media-249988\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/xcode-project-settings.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/xcode-project-settings.png 1920w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/xcode-project-settings-300x138.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/xcode-project-settings-768x354.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/xcode-project-settings-1024x473.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Xcode Project Settings<\/figcaption><\/figure>\n<p>This enables the application to work with the configured types, for example, when opening files from Finder with \"Open With\" or handing off documents from one application to another on iOS.<\/p>\n<h3>Use Cases for Custom URL Schemes<\/h3>\n<p>In general, registering your own custom scheme allows you to route events directly to your application. When the user opens a URL with this scheme. As an example, let's look at <a href=\"https:\/\/www.git-tower.com\">Tower<\/a>, the Git desktop client that my team makes: opening the link \"gittower:\/\/openRepo\/http:\/\/github.com\/jquery\/jquery.git\" on your machine will launch Tower and open the \"Clone\" dialog, with the appropriate clone URL pre-filled:<\/p>\n<figure id=\"post-249989\" class=\"align-none media-249989\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/tower-open-repo.gif\" alt=\"\" \/><figcaption>A custom URL scheme in action in the Tower Git client<\/figcaption><\/figure>\n<p>Another use case for us is to make registering Tower easier for our users. After purchasing a license, our customers receive an email that contains a link like this one: \"gittower:\/\/activateLicense\/CODE\/NAME\"<\/p>\n<p>This will launch Tower (or bring it to front) and open the registration dialog with the license information pre-filled. This is much for comfortable than fumbling with copy and paste (only to notice that you missed a character or included unwanted ones...).<\/p>\n<figure id=\"post-249990\" class=\"align-none media-249990\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/tower-register-license.gif\" alt=\"\" \/><\/figure>\n<p>On iOS, the use cases are very similar: applications also make use of custom URL schemes to launch an application and then display a certain screen inside the app.<\/p>\n<p>To make a long story short: custom URLs are a great way to <strong>deep-link into your application<\/strong>!<\/p>\n<h3>An Example App<\/h3>\n<p>Let's get our hands dirty and create our own application that handles a custom URL scheme. Let's call the app <code>CustomURLScheme<\/code> and have it handle a scheme called (of course!) <code>foo<\/code>.<\/p>\n<p>The sample code for this little tutorial can <a href=\"https:\/\/github.com\/gittower\/custom-url-schemes\">be found here<\/a>.<\/p>\n<h4>Registering Our Custom URL Scheme<\/h4>\n<p>The first step is to register the application as a handler for our custom URL scheme, in our project's Info.plist file:<\/p>\n<pre><code>&lt;key&gt;CFBundleURLTypes&lt;\/key&gt;\r\n&lt;array&gt;\r\n    &lt;dict&gt;\r\n        &lt;key&gt;CFBundleTypeRole&lt;\/key&gt;\r\n        &lt;string&gt;Viewer&lt;\/string&gt;\r\n        &lt;key&gt;CFBundleURLName&lt;\/key&gt;\r\n        &lt;string&gt;com.example.CustomURLScheme&lt;\/string&gt;\r\n        &lt;key&gt;CFBundleURLSchemes&lt;\/key&gt;\r\n        &lt;array&gt;\r\n            &lt;string&gt;foo&lt;\/string&gt;\r\n        &lt;\/array&gt;\r\n    &lt;\/dict&gt;\r\n&lt;\/array&gt;<\/code><\/pre>\n<p>Thereby, we ceremoniously offer to take the role of \"Viewer\" for the URL scheme <code>foo<\/code>.<\/p>\n<p>For more information and a detailed explanation of all the possible configuration keys, you can have a look at <a href=\"https:\/\/developer.apple.com\/library\/content\/documentation\/General\/Reference\/InfoPlistKeyReference\/Articles\/CoreFoundationKeys.html#\/\/apple_ref\/doc\/uid\/20001431-102207\">Apple's Property List Key Reference<\/a>.<\/p>\n<h4>Handling Events from Your URL Scheme<\/h4>\n<p>The next step is to tell our application how to <em>handle<\/em> events that come in via our URL scheme.<br \/>\nFor iOS applications, this is as simple as implementing the following delegate:<\/p>\n<pre><code>func application(_ app: UIApplication, open url: URL, options: [UIApplicationOpenURLOptionsKey : Any] = [:]) -&gt; Bool<\/code><\/pre>\n<p>For macOS applications, we need to tell <a href=\"https:\/\/developer.apple.com\/reference\/foundation\/nsappleeventmanager\"><code>NSAppleEventManager<\/code><\/a> that our application wants to receive events for opening URLs and provide a callback method to handle the event.<\/p>\n<p>We first create an empty method with the expected signature in our <code>AppDelegate<\/code> class:<\/p>\n<pre><code>class AppDelegate: NSObject, NSApplicationDelegate {\r\n\r\n  func applicationDidFinishLaunching(_ aNotification: Notification) {\r\n  }\r\n\r\n  func applicationWillTerminate(_ aNotification: Notification) {\r\n  }\r\n\r\n  func handleAppleEvent(event: NSAppleEventDescriptor, replyEvent: NSAppleEventDescriptor) {\r\n  }\r\n}<\/code><\/pre>\n<p>Then we call <code>NSAppleEventManager<\/code>'s <code>setEventHandler<\/code> method from <code>applicationDidFinishLaunching<\/code> as follows:<\/p>\n<pre><code>func applicationDidFinishLaunching(_ aNotification: Notification) {\r\n  NSAppleEventManager.shared().setEventHandler(self, andSelector: #selector(self.handleAppleEvent(event:replyEvent:)), forEventClass: AEEventClass(kInternetEventClass), andEventID: AEEventID(kAEGetURL))\r\n}<\/code><\/pre>\n<p>Now, if you'd build and run the application, the event would be correctly passed to our callback method - but it's still empty and won't do anything.<\/p>\n<p>The callback methods receive the incoming event as <code>event: NSAppleEventDescriptor<\/code>. <code>NSAppleEventDescriptor<\/code> has lots of properties and methods. If you only care for the URL, the following implementation will do the trick:<\/p>\n<pre><code>func handleAppleEvent(event: NSAppleEventDescriptor, replyEvent: NSAppleEventDescriptor) {\r\n  guard let appleEventDescription = event.paramDescriptor(forKeyword: AEKeyword(keyDirectObject)) else {\r\n      return\r\n  }\r\n\r\n  guard let appleEventURLString = appleEventDescription.stringValue else {\r\n      return\r\n  }\r\n\r\n  let appleEventURL = URL(string: appleEventURLString)\r\n\r\n  print(\"Received Apple Event URL: \\(appleEventURL)\")\r\n}<\/code><\/pre>\n<p>So the final implementation for macOS looks like this:<\/p>\n<pre><code>class AppDelegate: NSObject, NSApplicationDelegate {\r\n\r\n  func applicationDidFinishLaunching(_ aNotification: Notification) {\r\n    NSAppleEventManager.shared().setEventHandler(self, andSelector: #selector(self.handleAppleEvent(event:replyEvent:)), forEventClass: AEEventClass(kInternetEventClass), andEventID: AEEventID(kAEGetURL))\r\n  }\r\n\r\n  func applicationWillTerminate(_ aNotification: Notification) {\r\n  }\r\n\r\n  func handleAppleEvent(event: NSAppleEventDescriptor, replyEvent: NSAppleEventDescriptor) {\r\n    guard let appleEventDescription = event.paramDescriptor(forKeyword: AEKeyword(keyDirectObject)) else {\r\n        return\r\n    }\r\n\r\n    guard let appleEventURLString = appleEventDescription.stringValue else {\r\n        return\r\n    }\r\n\r\n    let appleEventURL = URL(string: appleEventURLString)\r\n\r\n    print(\"Received Apple Event URL: \\(appleEventURL)\")\r\n  }\r\n}<\/code><\/pre>\n<p>Build and run the application and it should print the received URL to the debug console.<\/p>\n<p>Once you have the URL, it's up to you to translate it into an action you want your application to perform. <\/p>\n<h4>Registering an App as the Default Handler<\/h4>\n<p>Apart from our own <code>gittower<\/code> scheme, Tower supports two additional ones: <code>github-mac<\/code> and <code>sourcetree<\/code>, because these schemes are used on github.com and bitbucket.com to open clone URLs in a desktop application. Of course we don't \"blindly\" overwrite other handlers! Users can explicitly <em>choose<\/em> to let Tower handle these URLs from GitHub and Bitbucket.<\/p>\n<figure id=\"post-249991\" class=\"align-none media-249991\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/tower-default-handler.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/tower-default-handler.png 658w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/tower-default-handler-300x140.png 300w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>This is done with an interesting part of the CoreServices framework, the <a href=\"https:\/\/developer.apple.com\/library\/content\/documentation\/Carbon\/Conceptual\/LaunchServicesConcepts\/LSCIntro\/LSCIntro.html\">Launch Services API<\/a>. Although the API is in C, it's quite easy to write a Swift wrapper for the required methods: <\/p>\n<pre><code>import Foundation\r\nimport CoreServices\r\n\r\nclass LaunchServices {\r\n\r\n  class func applicationsForURLScheme(scheme: String) -&gt; Array&lt;String&gt; {\r\n    if let applications = LSCopyAllHandlersForURLScheme(scheme as CFString) {\r\n      return applications.takeUnretainedValue() as Array&lt;AnyObject&gt; as! Array&lt;String&gt;\r\n    }\r\n\r\n    return []\r\n  }\r\n\r\n  class func defaultApplicationForURLScheme(scheme: String) -&gt; String? {\r\n    if let defaultApplication = LSCopyDefaultHandlerForURLScheme(scheme as CFString) {\r\n      return defaultApplication.takeUnretainedValue() as String\r\n    }\r\n\r\n    return nil\r\n  }\r\n\r\n  class func setDefaultApplicationForURLScheme(bundleIdentifier: String, scheme: String) -&gt; Bool {\r\n    let status = LSSetDefaultHandlerForURLScheme(scheme as CFString, bundleIdentifier as CFString)\r\n    return (status == 0)\r\n  }\r\n}<\/code><\/pre>\n<p>This helper class provides the following core functionalities:<\/p>\n<ul>\n<li><code>applicationsForURLScheme<\/code> \u2013 Retrieve a list of application bundle identifiers that have declared support for a particular URL scheme<\/li>\n<li><code>defaultApplicationForURLScheme<\/code> \u2013 Return the application bundle identifier of the current default handler of a particular URL scheme<\/li>\n<li><code>setDefaultApplicationForURLScheme<\/code> \u2013 Set the default handler of a particular URL scheme to a new application bundle identifier<\/li>\n<\/ul>\n<p>The macOS example project demonstrates how to use this class: it displays a list of all applications for a particular URL scheme, with the default application preselected (don't worry: playing with the selection input does <em>not<\/em> change the default; it is read-only in this example).<\/p>\n<h3>Go Ahead, Create Your Own Scheme<\/h3>\n<p>Custom URL schemes are a great way to deep-link into your application and trigger actions. They are easy to set up (especially on iOS) and provide your users with convenient shortcuts when coming from other applications.<\/p>\n<p>Have fun creating your own URL schemes!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>A URL Scheme is like &#8220;http:\/\/&#8230;&#8221; or &#8220;ftp:\/\/&#8230;&#8221;. Those seem like a very low-level concept that you don&#8217;t have much control over, but actually, you do! What sounds like an exotic topic is not so exotic at all: we are constantly using different URL Schemes, on any given day. For example when we&#8217;re clicking a [&hellip;]<\/p>\n","protected":false},"author":247268,"featured_media":250050,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1038,1039],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249985"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/247268"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249985"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249985\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/250050"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249985"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249985"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249985"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250034,"date":"2017-01-15T14:29:29","date_gmt":"2017-01-15T21:29:29","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250034"},"modified":"2017-01-15T14:29:29","modified_gmt":"2017-01-15T21:29:29","slug":"webslides","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/webslides\/","title":{"rendered":"WebSlides"},"content":{"rendered":"<p>Looks like a nicely done little system, by Jos\u00e9 Luis Ant\u00fanez for creating presentation slides.<\/p>\n<blockquote><p>WebSlides makes HTML presentations easy. Just the essentials and using lovely CSS.<\/p><\/blockquote>\n<p>An alternative to <a href=\"https:\/\/github.com\/hakimel\/reveal.js\/\">reveal.js<\/a>. I like how it utilizes other open source projects.<\/p>\n<p>I always feel like I should be using things like this for my presentations, as someone who normally very much likes working in HTML and CSS. But for some reason, I always reach for Keynote or Slides.com. I think it's a brain-modes thing. When I'm in \"I need to work on what I'm going to say at this presentation\" brain-mode, I don't want to be messing with markup, I just want to <em>write<\/em> and maybe pluck at some UI controls.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Looks like a nicely done little system, by Jos\u00e9 Luis Ant\u00fanez for creating presentation slides. WebSlides makes HTML presentations easy. Just the essentials and using lovely CSS. An alternative to reveal.js. I like how it utilizes other open source projects. I always feel like I should be using things like this for my presentations, as [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[1043,1044],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250034"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250034"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250034\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250034"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250034"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250034"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":250028,"date":"2017-01-15T08:29:26","date_gmt":"2017-01-15T15:29:26","guid":{"rendered":"https:\/\/css-tricks.com\/?p=250028"},"modified":"2017-01-15T09:51:47","modified_gmt":"2017-01-15T16:51:47","slug":"modernizing-progressive-enhancement-delivery","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/modernizing-progressive-enhancement-delivery\/","title":{"rendered":"Modernizing our Progressive Enhancement Delivery"},"content":{"rendered":"<p>Scott Jehl, explaining one of the performance improvements he made to the Filament Group site:<\/p>\n<blockquote><p>Inlining is a measurably-worthwhile workaround, but it's still a workaround. Fortunately, HTTP\/2's Server Push feature brings the performance benefits of inlining without sacrificing cacheability for each file. With Server Push, we can respond to requests for a particular file by immediately sending additional files we know that file depends upon. In other words, the server can respond to a request for `index.html` with `index.html`, `css\/site.css`, and `js\/site.js`!<\/p><\/blockquote>\n<p>Server push seems like one of those big-win things that really incentivize the switch to H2. We have an article about <a href=\"https:\/\/css-tricks.com\/cache-aware-server-push\/\">being extra careful about caching and server push<\/a>.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Scott Jehl, explaining one of the performance improvements he made to the Filament Group site: Inlining is a measurably-worthwhile workaround, but it&#8217;s still a workaround. Fortunately, HTTP\/2&#8217;s Server Push feature brings the performance benefits of inlining without sacrificing cacheability for each file. With Server Push, we can respond to requests for a particular file by [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[910,592,926],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250028"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=250028"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/250028\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=250028"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=250028"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=250028"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249995,"date":"2017-01-14T05:40:33","date_gmt":"2017-01-14T12:40:33","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249995"},"modified":"2017-01-14T05:40:33","modified_gmt":"2017-01-14T12:40:33","slug":"event-apart-discount-code","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/event-apart-discount-code\/","title":{"rendered":"An Event Apart Discount Code"},"content":{"rendered":"<p>I'll be at all the 2017 An Event Apart shows. Coupon code <strong>AEACOY<\/strong> will get you $100 off any of them. <\/p>\n","protected":false},"excerpt":{"rendered":"<p>I&#8217;ll be at all the 2017 An Event Apart shows. Coupon code AEACOY will get you $100 off any of them.<\/p>\n","protected":false},"author":3,"featured_media":250022,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[812,533,1040],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249995"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249995"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249995\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/250022"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249995"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249995"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249995"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249869,"date":"2017-01-13T06:22:25","date_gmt":"2017-01-13T13:22:25","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249869"},"modified":"2017-01-15T08:52:39","modified_gmt":"2017-01-15T15:52:39","slug":"clearing-accidentally-learned-words-macos-dictionary","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/clearing-accidentally-learned-words-macos-dictionary\/","title":{"rendered":"Clearing Accidentally &#8220;Learned&#8221; Words from macOS Dictionary"},"content":{"rendered":"<p>Does this little moment strike fear into your heart?<\/p>\n<figure id=\"post-249870\" class=\"align-none media-249870\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/learning-a-word.gif\" alt=\"\" \/><figcaption>Argahghg! Fat fingers! I meant to FIX the spelling, not learn this misspelled word!<\/figcaption><\/figure>\n<p>Now forevermore, the spell checker won't catch that misspelled word. Fear not, you can fix it.<\/p>\n<p><!--more--><\/p>\n<p>When this happened to me recently, fortunately, Dave Bolger told me how to fix it. <\/p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\"><a href=\"https:\/\/twitter.com\/chriscoyier\">@chriscoyier<\/a> If you are on OS X you can easily delete those ~\/Library\/Spelling\/LocalDictionary edit in text editor, log back in to reload.<\/p>\n<p>&mdash; Dave Bolger (@davebolger) <a href=\"https:\/\/twitter.com\/davebolger\/status\/794591938926223360\">November 4, 2016<\/a><\/p><\/blockquote>\n<p>I just popped open that file from the command line quick with:<\/p>\n<pre rel=\"Bash\"><code>$ sublime ~\/Library\/Spelling\/LocalDictionary<\/code><\/pre>\n<p>This is what I found at the time:<\/p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">Ugghkh. Look how many dumb ones I have.<a href=\"https:\/\/t.co\/phMPlYEJpq\">https:\/\/t.co\/phMPlYEJpq<\/a> <a href=\"https:\/\/t.co\/Bt9rWiISuh\">pic.twitter.com\/Bt9rWiISuh<\/a><\/p>\n<p>&mdash; Chris Coyier (@chriscoyier) <a href=\"https:\/\/twitter.com\/chriscoyier\/status\/794592912872861696\">November 4, 2016<\/a><\/p><\/blockquote>\n<p>Another great one!<\/p>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\"><a href=\"https:\/\/twitter.com\/davebolger\">@davebolger<\/a> <a href=\"https:\/\/twitter.com\/chriscoyier\">@chriscoyier<\/a> Good to know. Thanks. All good here, though. <a href=\"https:\/\/t.co\/ponFmalJEK\">pic.twitter.com\/ponFmalJEK<\/a><\/p>\n<p>&mdash; (((terrified))) (@sailcode) <a href=\"https:\/\/twitter.com\/sailcode\/status\/794595060528640001\">November 4, 2016<\/a><\/p><\/blockquote>\n<p><script async src=\"\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"><\/script><\/p>\n<p>If it's not obvious, delete the words from that file you don't want the spell checker to think are spelled correctly anymore, save the file,  and you'll be all set.<\/p>\n<p>If you do it, did you find any weird ones in yours?<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Does this little moment strike fear into your heart? Argahghg! Fat fingers! I meant to FIX the spelling, not learn this misspelled word! Now forevermore, the spell checker won&#8217;t catch that misspelled word. Fear not, you can fix it.<\/p>\n","protected":false},"author":3,"featured_media":249980,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1031,1011],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249869"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249869"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249869\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/249980"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249869"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249869"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249869"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249867,"date":"2017-01-12T09:13:46","date_gmt":"2017-01-12T16:13:46","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249867"},"modified":"2017-01-16T19:47:29","modified_gmt":"2017-01-17T02:47:29","slug":"analytics-lazy-developers","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/analytics-lazy-developers\/","title":{"rendered":"Sponsored: Analytics for Lazy Developers"},"content":{"rendered":"<p>Here's an incomplete list of analytics tools I've personally used: Google Analytics, Alexa, Gauges, FullStory, NewRelic, and Woopra.<\/p>\n<p>Perhaps you've used some others? Mixpanel, Heap, KISSmetrics, Rollbar?<\/p>\n<p>They are all different and do interesting and valuable things for our businesses. Integrating them means integrating their third-party JavaScript into your site. What if you want to add one or remove one? You're back in the code making all those adjustments. And heaven forbid one of them updates its API...you're on the hook for integration maintenance indefinitely. <\/p>\n<p>Enter Segment.<\/p>\n<p><a href=\"http:\/\/synd.co\/2iNkWfg\">Segment<\/a> is the data hub that routes your data directly to these analytics tools (and hundreds of others, for advertising, data warehousing, CRM and others). You're still using your favorite tools, but you only have to integrate Segment into your site or apps. Segment then sends all the appropriate data to the other tools. <\/p>\n","protected":false},"excerpt":{"rendered":"<p>Here&#8217;s an incomplete list of analytics tools I&#8217;ve personally used: Google Analytics, Alexa, Gauges, FullStory, NewRelic, and Woopra. Perhaps you&#8217;ve used some others? Mixpanel, Heap, KISSmetrics, Rollbar? They are all different and do interesting and valuable things for our businesses. Integrating them means integrating their third-party JavaScript into your site. What if you want to [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17,508],"tags":[604,1030],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249867"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249867"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249867\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249867"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249867"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249867"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249958,"date":"2017-01-12T09:11:54","date_gmt":"2017-01-12T16:11:54","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249958"},"modified":"2017-01-12T09:11:54","modified_gmt":"2017-01-12T16:11:54","slug":"the-most-hearted-of-2016","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/the-most-hearted-of-2016\/","title":{"rendered":"The Most Hearted of 2016"},"content":{"rendered":"<p>The 100 most hearted Pens, Posts, and Collections on CodePen from the past year have been calculated and posted! <\/p>\n","protected":false},"excerpt":{"rendered":"<p>The 100 most hearted Pens, Posts, and Collections on CodePen from the past year have been calculated and posted!<\/p>\n","protected":false},"author":3,"featured_media":249960,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[605],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249958"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249958"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249958\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/249960"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249958"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249958"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249958"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249913,"date":"2017-01-12T07:46:20","date_gmt":"2017-01-12T14:46:20","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249913"},"modified":"2017-01-12T07:46:20","modified_gmt":"2017-01-12T14:46:20","slug":"get-started-debugging-javascript-chrome-devtools","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/get-started-debugging-javascript-chrome-devtools\/","title":{"rendered":"Get Started with Debugging JavaScript in Chrome DevTools"},"content":{"rendered":"<p>Kayce Basques wrote an excellent interactive tutorial that explores how to debug JavaScript with DevTools. Kayce looks into a number of techniques and options that I was completely unaware of and, as he notes in the beginning of the tutorial, if you\u2019re still using <code>console.log<\/code> to find bugs in your code (like me) then this article is written just for you (also me).<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Kayce Basques wrote an excellent interactive tutorial that explores how to debug JavaScript with DevTools. Kayce looks into a number of techniques and options that I was completely unaware of and, as he notes in the beginning of the tutorial, if you\u2019re still using console.log to find bugs in your code (like me) then this [&hellip;]<\/p>\n","protected":false},"author":223806,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[951,432],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249913"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/223806"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249913"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249913\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249913"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249913"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249913"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249849,"date":"2017-01-11T08:10:14","date_gmt":"2017-01-11T15:10:14","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249849"},"modified":"2017-01-11T08:10:14","modified_gmt":"2017-01-11T15:10:14","slug":"random-numbers-css","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/random-numbers-css\/","title":{"rendered":"Random Numbers in CSS"},"content":{"rendered":"<p>I stumbled into an interesting problem the other day. I wanted to animate an element with a <em>random<\/em> <code>animation-duration<\/code>. <!--more--> This was the non-randomized starting point:<\/p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"1acd2c123621a542aa223022d402b6eb\" data-default-tab=\"result\" data-user=\"robinrendle\" data-embed-version=\"2\" data-pen-title=\"Random numbers CSS #1\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/robinrendle\/pen\/1acd2c123621a542aa223022d402b6eb\/\">Random numbers CSS #1<\/a> by Robin Rendle (<a href=\"http:\/\/codepen.io\/robinrendle\">@robinrendle<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>This is the CSS I wrote to make the animation:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">@keyframes flicker {\r\n  0% {\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n#red {\r\n  animation: flicker 2s ease alternate infinite;\r\n}<\/code><\/pre>\n<p>So far so good. But no randomization happening there, that's a fixed 2 seconds.<\/p>\n<p>I wanted that animation time of 2 seconds to be random. I wanted to essentially write:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.element {\r\n  animation: flicker $randomNumber alternate infinite;\r\n}<\/code><\/pre>\n<p>Where <code>$randomNumber<\/code> is randomized programatically. <\/p>\n<p>CSS preprocessors like Sass do offer <a href=\"http:\/\/sass-lang.com\/documentation\/Sass\/Script\/Functions.html#random-instance_method\">a random() function<\/a>. <\/p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">$randomNumber: random(5);\r\n\r\n.thing {\r\n  animation-duration: $randomNumber + s;\r\n}<\/code><\/pre>\n<p>That might be perfect for you, it wasn't quite perfect for me. Random numbers generated during preprocessing have a big caveat:<\/p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">random in Sass is like randomly choosing the name of a main character in a story. it&#39;s only random when written. it doesn&#39;t change.<\/p>\n<p>&mdash; jake albaugh (@jake_albaugh) <a href=\"https:\/\/twitter.com\/jake_albaugh\/status\/814510609219911680\">December 29, 2016<\/a><\/p><\/blockquote>\n<p><script async src=\"\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"><\/script><\/p>\n<p>In other words, as soon as the CSS is processed, randomization is over. That number is locked at that value forever (i.e. until the preprocessor runs again).<\/p>\n<p>It's not like a random number in JavaScript (e.g. <code>Math.random()<\/code>) where that random number is generated when the JavaScript runs. <\/p>\n<p>So after sighing as obnoxiously loudly as I could I realized that this would actually be the perfect opportunity to use native CSS variables (custom properties)! By themselves, they can't do random numbers easier, but as we'll see, they can still help us.<\/p>\n<p>If you\u2019re not familiar with them, then not to worry. Effectively they\u2019re native variables built into the CSS language itself, but they\u2019re different from the sort of variables that you might be familiar with from a preprocessor like Sass or Less. <a href=\"https:\/\/css-tricks.com\/difference-between-types-of-css-variables\/\">Chris listed many of the benefits<\/a> a while back:<\/p>\n<ul>\n<li>You can use them <strong>without the need of a preprocessor<\/strong>.<\/li>\n<li><strong>They cascade<\/strong>. You can set a variable inside any selector to set or override its current value.<\/li>\n<li>When their values change (e.g. media query or other state), <strong>the browser repaints as needed<\/strong>.<\/li>\n<li>You can access and <strong>manipulate them in JavaScript<\/strong>.<\/li>\n<\/ul>\n<p>That last bit is what's important to us. We're going to generate the random number in JavaScript, then move it over to CSS via custom properties.<\/p>\n<p>Set one is to create the CSS custom property we need, with a default value (useful in case the JavaScript we write in a moment fails for any reason):<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">\/* set the default transition time *\/\r\n:root {\r\n  --animation-time: 2s; \r\n}<\/code><\/pre>\n<p>Now we can use that variable in our CSS like this:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">#red {\r\n  animation: flicker var(--animation-time) ease alternate infinite;\r\n}<\/code><\/pre>\n<p>Undramatically, we're <a href=\"http:\/\/codepen.io\/robinrendle\/pen\/a7ba832e43d4b3720557ed76fc79b4ae\/\">exactly where we started<\/a>. But although this demo now looks exactly the same as our previously animated SVG, this one is using CSS variables instead. You can test that everything is working by just changing the variable in the CSS and watch as the animation updates.<\/p>\n<p>Now we're all set up to access and manipulate that custom property via JavaScript.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var time = Math.random();<\/code><\/pre>\n<p>From here we can find the red circle in the SVG and change the <code>--animation-time<\/code> CSS variable via the <code>setProperty<\/code> method:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var red = document.querySelector('#red');\r\nred.style.setProperty('--animation-time', time +'s');<\/code><\/pre>\n<p>And here it is! A randomly generated number in CSS which is being applied to an SVG animation:<\/p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"397deea9cfff5c5973d0051765ae7bef\" data-default-tab=\"result\" data-user=\"robinrendle\" data-embed-version=\"2\" data-pen-title=\"Random numbers CSS #3\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/robinrendle\/pen\/397deea9cfff5c5973d0051765ae7bef\/\">Random numbers CSS #3<\/a> by Robin Rendle (<a href=\"http:\/\/codepen.io\/robinrendle\">@robinrendle<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>This is a step forward because the random number is generated when the JavaScript runs, so it's different every time. That's pretty close to what we wanted, but let's make this a little bit more difficult still: let's randomize that <code>animation-duration<\/code> periodically as it's running.<\/p>\n<p>Fortunately, we have JavaScript to work with now, so we can update that custom property whenever we want to. Here's an example where we update the <code>animation-duration<\/code> every second:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var red = document.querySelector('#red');\r\n\r\nfunction setProperty(duration) {\r\n  red.style.setProperty('--animation-time', duration +'s');\r\n}\r\n\r\nfunction changeAnimationTime() {\r\n  var animationDuration = Math.random();\r\n  setProperty(animationDuration);\r\n}\r\n\r\nsetInterval(changeAnimationTime, 1000);<\/code><\/pre>\n<p>That's exactly what I was after:<\/p>\n<p data-height=\"500\" data-theme-id=\"1\" data-slug-hash=\"f3d3c2ff0ab6cd4aef12bed7c59386de\" data-default-tab=\"result\" data-user=\"robinrendle\" data-embed-version=\"2\" data-pen-title=\"Random numbers CSS #4\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/robinrendle\/pen\/f3d3c2ff0ab6cd4aef12bed7c59386de\/\">Random numbers CSS #4<\/a> by Robin Rendle (<a href=\"http:\/\/codepen.io\/robinrendle\">@robinrendle<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>It\u2019s useful to remember that <a href=\"http:\/\/caniuse.com\/#search=css%20variables\">CSS variables (custom properties) support is still a little patchy<\/a>, so beware. Although what we could do is progressively enhance this animation like so: <\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">#red {\r\n  animation: flicker .5s ease alternate infinite;\r\n  animation: flicker var(--animation-time) ease alternate infinite;\r\n}<\/code><\/pre>\n<p>If CSS variables aren\u2019t supported then we\u2019ll still get some kind of animation being shown, even if it isn\u2019t <em>precisely<\/em> what we want.<\/p>\n<hr>\n<p>It's worth noting that CSS variables aren't the only possible way to randomize the animation-duration. We could access the DOM element via JavaScript and apply the random value directly into the <code>style<\/code>:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var red = document.querySelector('#red');\r\nred.style.animationDuration = Math.floor(Math.random() * 5 + 1) + \"s\";<\/code><\/pre>\n<p>We could even wait for the animation to finish before setting a new duration, if we wanted:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var red = document.querySelector('#red');\r\n\r\nfunction setRandomAnimationDuration() {\r\n  red.style.animationDuration = Math.floor(Math.random() * 10 + 1) + \"s\";\r\n}\r\n\r\nred.addEventListener(\"animationiteration\", setRandomAnimationDuration);<\/code><\/pre>\n<hr>\n<p>Just to sprinkle one more possibility in here, you could also <a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/egJaoR\">do this<\/a> with <a href=\"http:\/\/elementqueries.com\/\">EQCSS<\/a>.<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">@element '#animation' {\r\n  .element {\r\n    animation-duration: eval('rand')s;\r\n  }\r\n}<\/code><\/pre>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var rand = Math.random();\r\nEQCSS.apply();<\/code><\/pre>\n<hr>\n<p>Do you wish randomization was available right in CSS itself? I'm not sure if there is any talk of that. Even if there was, we would likely have to wait quite a while to actually use it. Along those lines, Philip Walton recently wrote how difficult it would be to <a href=\"https:\/\/philipwalton.com\/articles\/the-dark-side-of-polyfilling-css\/\">write a true polyfill<\/a> for random numbers in CSS. Much easier to handle in JavaScript! <\/p>\n","protected":false},"excerpt":{"rendered":"<p>I stumbled into an interesting problem the other day. I wanted to animate an element with a random animation-duration.<\/p>\n","protected":false},"author":223806,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1036,432,1035],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249849"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/223806"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249849"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249849\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249849"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249849"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249849"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249904,"date":"2017-01-11T07:01:01","date_gmt":"2017-01-11T14:01:01","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249904"},"modified":"2017-01-11T07:01:01","modified_gmt":"2017-01-11T14:01:01","slug":"clean-code-javascript","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/clean-code-javascript\/","title":{"rendered":"Clean Code JavaScript"},"content":{"rendered":"<p>Inspired by Robert C. Martin's book <a href=\"https:\/\/www.amazon.com\/Clean-Code-Handbook-Software-Craftsmanship\/dp\/0132350882\">Clean Code<\/a>, Ryan McDermott put together a repo with some software engineering best practices as they apply to JavaScript in particular. The repo has tons of great guidelines for beginning programmers, and good reminders for seasoned maintainers.<\/p>\n<p>I'm a particular fan of this style of teaching because it focuses on legibility as much as writing. This ensures that our codebases are friendly to the next developer who comes along, even if it's ourselves.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Inspired by Robert C. Martin&#8217;s book Clean Code, Ryan McDermott put together a repo with some software engineering best practices as they apply to JavaScript in particular. The repo has tons of great guidelines for beginning programmers, and good reminders for seasoned maintainers. I&#8217;m a particular fan of this style of teaching because it focuses [&hellip;]<\/p>\n","protected":false},"author":7699,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[899,1034,432],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249904"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/7699"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249904"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249904\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249904"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249904"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249904"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249896,"date":"2017-01-10T14:16:32","date_gmt":"2017-01-10T21:16:32","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249896"},"modified":"2017-01-10T14:24:10","modified_gmt":"2017-01-10T21:24:10","slug":"lebab","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/lebab\/","title":{"rendered":"Lebab"},"content":{"rendered":"<blockquote><p>Turn your ES5 code into readable ES6 (sugar-syntax). It does the opposite of what Babel does.<\/p><\/blockquote>\n<p>David Walsh <a href=\"https:\/\/davidwalsh.name\/lebab\">has a post on it<\/a>. I'm interested, as I'm still working on my muscle memory for <a href=\"https:\/\/css-tricks.com\/lets-learn-es2015\/\">ES6<\/a>. Even the simple stuff. So blasting some old code through this as a kick start seems appealing.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Turn your ES5 code into readable ES6 (sugar-syntax). It does the opposite of what Babel does. David Walsh has a post on it. I&#8217;m interested, as I&#8217;m still working on my muscle memory for ES6. Even the simple stuff. So blasting some old code through this as a kick start seems appealing.<\/p>\n","protected":false},"author":3,"featured_media":249899,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[830,661,1033],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249896"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249896"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249896\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/249899"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249896"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249896"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249896"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249825,"date":"2017-01-10T06:45:16","date_gmt":"2017-01-10T13:45:16","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249825"},"modified":"2017-01-10T06:45:16","modified_gmt":"2017-01-10T13:45:16","slug":"thing-know-gradients-transparent-black","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/thing-know-gradients-transparent-black\/","title":{"rendered":"A Thing To Know about Gradients and &#8220;Transparent Black&#8221;"},"content":{"rendered":"<p>Say you have a gradient in CSS that goes from red to transparent. Easy, right? Like this:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.element {\r\n  background: linear-gradient(\r\n    to bottom,\r\n    red, \r\n    transparent\r\n  );\r\n}<\/code><\/pre>\n<p>There is a pretty big <em>gotcha<\/em> here, though.<\/p>\n<p><!--more--><\/p>\n<p>In Chrome (also Android), Firefox, and Edge, you'd be all good.<\/p>\n<figure id=\"post-249826\" class=\"align-none media-249826\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/gradient-works.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/gradient-works.png 1850w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/gradient-works-300x124.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/gradient-works-768x316.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/gradient-works-1024x422.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>But in Safari (also iOS), you'd <em>not<\/em> be good.<\/p>\n<figure id=\"post-249827\" class=\"align-none media-249827\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/gradient-bad.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/gradient-bad.png 1410w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/gradient-bad-300x136.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/gradient-bad-768x349.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/gradient-bad-1024x465.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>The element on the left in each browser demonstrates the problem.<\/figcaption><\/figure>\n<p>The problem, the best I understand it, is that transparent is being interpreted (and interpolated) as \"transparent black\". <\/p>\n<p>To fix it, you have to set the color as a fully transparent version of that exact color. Like:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.element {\r\n  background: linear-gradient(\r\n    to bottom,\r\n    red,\r\n    rgba(255, 0, 0, 0)\r\n  )\r\n}<\/code><\/pre>\n<p>That's not always easy with a hex code, since it's not obvious what the RGBa or HSLa equivalent is. It's not hard to find a color converter though, just web search around.<\/p>\n<p>The CSS Level 4 <code>color()<\/code> function will make this easier, Like:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.element {\r\n  background: linear-gradient(\r\n    to bottom,\r\n    #eb8fa9,\r\n    color(#eb8fa9 alpha(0%)) \/* or is it color-mod()? *\/\r\n  )\r\n}<\/code><\/pre>\n<p>But the support for that isn't around yet.<\/p>\n<p>Sass can help out, if you are using that:<\/p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">.element {\r\n  background: linear-gradient(\r\n    to bottom,\r\n    #eb8fa9,\r\n    rgba(#eb8fa9, 0);\r\n  )\r\n}<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>Say you have a gradient in CSS that goes from red to transparent. Easy, right? Like this: .element { background: linear-gradient( to bottom, red, transparent ); } There is a pretty big gotcha here, though.<\/p>\n","protected":false},"author":3,"featured_media":249888,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[837,1027,476],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249825"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249825"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249825\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/249888"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249825"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249825"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249825"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249885,"date":"2017-01-10T05:47:55","date_gmt":"2017-01-10T12:47:55","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249885"},"modified":"2017-01-10T05:47:55","modified_gmt":"2017-01-10T12:47:55","slug":"road-svg-custom-elements-clarity-icons","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/road-svg-custom-elements-clarity-icons\/","title":{"rendered":"The Road to SVG and Custom Elements in Clarity Icons"},"content":{"rendered":"<p>Another day, another design system deciding an SVG icon system is the way to go.<\/p>\n<p>Everybody has their own set of considerations when making a choice like this. Scott Mathis documents the major considerations for Clarity: Opting-out, sizing, multi-colors, interactivity,  scale, and the future. Based on these, they actually ended up on a custom element (<code>&lt;clr-icon&gt;<\/code>, which is inline <code>&lt;svg&gt;<\/code> under the hood), <a href=\"https:\/\/css-tricks.com\/etsys-evolving-icon-system\/\">just like Etsy<\/a>.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Another day, another design system deciding an SVG icon system is the way to go. Everybody has their own set of considerations when making a choice like this. Scott Mathis documents the major considerations for Clarity: Opting-out, sizing, multi-colors, interactivity, scale, and the future. Based on these, they actually ended up on a custom element [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":249886,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[469,660],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249885"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249885"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249885\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/249886"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249885"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249885"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249885"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249876,"date":"2017-01-09T12:20:17","date_gmt":"2017-01-09T19:20:17","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249876"},"modified":"2017-01-09T12:20:17","modified_gmt":"2017-01-09T19:20:17","slug":"non-rectangular-headers","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/non-rectangular-headers\/","title":{"rendered":"Non-Rectangular Headers"},"content":{"rendered":"<p>Jon Moore documents a trend in which designs opt for non-rectangular headers. Slants, rounded bits, image crops, even weird jagged polygons. I mean c'mon, what kinda site would put a weird jagged polygon as a header? <\/p>\n","protected":false},"excerpt":{"rendered":"<p>Jon Moore documents a trend in which designs opt for non-rectangular headers. Slants, rounded bits, image crops, even weird jagged polygons. I mean c&#8217;mon, what kinda site would put a weird jagged polygon as a header?<\/p>\n","protected":false},"author":3,"featured_media":249877,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[1032],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249876"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249876"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249876\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/249877"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249876"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249876"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249876"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249799,"date":"2017-01-09T06:15:51","date_gmt":"2017-01-09T13:15:51","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249799"},"modified":"2017-03-08T05:40:17","modified_gmt":"2017-03-08T12:40:17","slug":"build-custom-cms-serverless-static-site-generator","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/build-custom-cms-serverless-static-site-generator\/","title":{"rendered":"Build a Custom CMS for a Serverless Static Site Generator"},"content":{"rendered":"<p>Static Site Website Generators have been getting increasingly popular within the last 2 years. Much has been written (like <a href=\"https:\/\/css-tricks.com\/zero-configuration-react-static-site-generator\/\">this<\/a> and <a href=\"https:\/\/css-tricks.com\/building-a-jekyll-site-part-1-of-3\/\">this<\/a>) and there have been <a href=\"https:\/\/www.staticgen.com\/\">many great open source projects<\/a> and even <a href=\"https:\/\/www.contentful.com\/\">funded companies<\/a> launched to help you get up and running.<\/p>\n<p><em>What if I told you that you could build a Static Site Generator with your own custom CMS without the need for a database?<\/em> Not just that, but we can get to <em>Hello World!<\/em> in under 100 lines of JavaScript.<\/p>\n<p><!--more--><\/p>\n<div class=\"article-series\">\n<h4>Article Series:<\/h4>\n<ol>\n<li>Build a Custom CMS for a Serverless Static Site Generator (You are here!) + <a href=\"https:\/\/github.com\/johnpolacek\/serverless-cms\">Repo<\/a><\/li>\n<li><a href=\"https:\/\/css-tricks.com\/build-custom-serverless-cms-part-2\/\">Build a Custom Serverless CMS: Part 2<\/a> + <a href=\"https:\/\/github.com\/johnpolacek\/serverless-cms-2\">Repo<\/a><\/li>\n<\/ol>\n<\/div>\n<p>The historic problem with static site generators is that they typically require content to be authored in markdown. This works great for developers but not as well for clients who are used to working in a CMS authoring environment. Creating such an environment has traditionally meant the need to create a database to manage authentication, save content and upload media.<\/p>\n<p>Thanks to the rise of so-called serverless architectures (aka Backend as a Service), this is no longer the case.<\/p>\n<p>In this demo, we will create the bare bones of a static site generator with content authored by an admin user via a standard web form (no database necessary).<\/p>\n<p>To accomplish this, we will use:<\/p>\n<ul>\n<li><a href=\"https:\/\/aws.amazon.com\/lambda\/serverless-architectures-learn-more\/\">A serverless web application architecture<\/a> (AWS SDK for JavaScript, Amazon Cognito, IAM and S3)<\/li>\n<li>A front end template engine (<a href=\"https:\/\/github.com\/BorisMoore\/jsrender\">JSRender<\/a>).<\/li>\n<\/ul>\n<p>View the completed files for this proof-of-concept <a href=\"https:\/\/github.com\/johnpolacek\/serverless-cms\">demo project on GitHub<\/a>.<\/p>\n<h3>Set Up a Static Website on Amazon S3<\/h3>\n<p>First, sign up for an account with <a href=\"https:\/\/aws.amazon.com\/\">Amazon Web Services<\/a> (AWS) if you have not already. Once you have an AWS account it is easy to set up a static site hosted on <a href=\"https:\/\/aws.amazon.com\/s3\/\">AWS Simple Storage Service<\/a> (S3).<\/p>\n<p>First, create a bucket and then under Static Website Hosting in Properties, select Enable website hosting and set the Index Document to point to the homepage of the site (`index.html`).<\/p>\n<p>Next, create a bucket policy to make your site publicly readable. For information on setting up bucket permissions, refer to the AWS S3 documentation. Additionally, we need a policy that will allow an admin to save content edits.<\/p>\n<pre rel=\"Policy\"><code class=\"language-markup\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\r\n  &lt;CORSConfiguration xmlns=\"http:\/\/s3.amazonaws.com\/doc\/2006-03-01\/\"&gt;\r\n    &lt;CORSRule&gt;\r\n      &lt;AllowedOrigin&gt;*&lt;\/AllowedOrigin&gt;\r\n      &lt;AllowedMethod&gt;POST&lt;\/AllowedMethod&gt;\r\n      &lt;AllowedMethod&gt;GET&lt;\/AllowedMethod&gt;\r\n      &lt;AllowedMethod&gt;PUT&lt;\/AllowedMethod&gt;\r\n      &lt;AllowedMethod&gt;DELETE&lt;\/AllowedMethod&gt;\r\n      &lt;AllowedMethod&gt;HEAD&lt;\/AllowedMethod&gt;\r\n      &lt;AllowedHeader&gt;*&lt;\/AllowedHeader&gt;\r\n    &lt;\/CORSRule&gt;\r\n  &lt;\/CORSConfiguration&gt;<\/code><\/pre>\n<p>For more detailed information on how to host a static site on S3, including on one of your own domains, refer to <a href=\"http:\/\/docs.aws.amazon.com\/gettingstarted\/latest\/swh\/website-hosting-intro.html\">Hosting a Static Website on Amazon Web Services<\/a>.<\/p>\n<h3>Create Static Site Files<\/h3>\n<p>Create a new directory for your project. Construct a simple project page or pick a simple example from your front end framework of choice. In our demo, we use <a href=\"https:\/\/getbootstrap.com\/examples\/jumbotron\/\">the Jumbotron example<\/a> from Bootstrap.<\/p>\n<p>Upload the files to the S3 bucket you created. Once the upload is complete, select the S3 bucket and view Properties. Click on the endpoint link and you will be able to view your site.<\/p>\n<h3>Create Admin Login<\/h3>\n<p><a href=\"https:\/\/aws.amazon.com\/cognito\/\">Amazon Cognito<\/a> provides a simple way to add an authentication flow to a website.<\/p>\n<p>The first step in this process is to create a <b>UserPool<\/b>. In the AWS Console, navigate to Amazon Cognito and create a user pool with the default settings. Read more about User Pools in the <a href=\"http:\/\/docs.aws.amazon.com\/cognito\/latest\/developerguide\/cognito-user-identity-pools.html\">AWS Documentation<\/a>.<\/p>\n<p>Once your User Pool is created, you need to add an app with access to the pool. Select your User Pool to edit it, then select the Apps tab. Click the Add an app button and give your app a name. When adding an app, it is very important to uncheck the <b>Generate client secret<\/b> checkbox because the JavaScript in the Browser SDK does not support apps with a client secret.<\/p>\n<figure id=\"post-249800\" class=\"align-none media-249800\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/severless-cms.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/severless-cms.png 2000w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/severless-cms-300x174.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/severless-cms-768x445.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/severless-cms-1024x594.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>We will directly create our admin users in the AWS Console, then provide them with credentials they can use to log in. Only these users will be able to get authenticated to have access to generate the static content for our site. <\/p>\n<p>Go into the User Pool and select <b>Users and Groups<\/b>. Fill in your own information so you can be the first admin user. Select the option to send an invitation to the user via email.<\/p>\n<figure id=\"post-249806\" class=\"align-none media-249806\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/create-user.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/create-user.png 800w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/create-user-300x247.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/create-user-768x633.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Now we need to create a login page for our admins. Make a new admin directory in the project with an index.html with a login form inside it. In our demo, we use <a href=\"https:\/\/v4-alpha.getbootstrap.com\/examples\/signin\/\">the Bootstrap Sign In Page<\/a>.<\/p>\n<p>To connect our form with Cognito, we will need to use the <a href=\"https:\/\/github.com\/aws\/amazon-cognito-identity-js\">Amazon Cognito Identity SDK<\/a> for JavaScript. Follow the installation instructions on the project page to add the scripts to our login page.<\/p>\n<p>Next, use the Amazon Cognito Identity service to authenticate and establish a session for our admin user with the temporary password received via email.<\/p>\n<p>Add a submit event listener to our login form that calls a login function based on the authentication example from the <a href=\"https:\/\/github.com\/aws\/amazon-cognito-identity-js\">Amazon Cognito Identity SDK for JavaScript Project Page<\/a>.<\/p>\n<pre rel=\"jQuery\"><code class=\"language-javascript\">$('.form-signin').on('submit', function(e) {\r\n\r\n  e.preventDefault();\r\n\r\n  var authenticationData = {\r\n    Username : $('#inputUsername').val(),\r\n    Password : $('#inputPassword').val()\r\n  };\r\n  var authenticationDetails = new AWSCognito.CognitoIdentityServiceProvider.AuthenticationDetails(authenticationData);\r\n  var poolData = { \r\n    UserPoolId : '...', \/\/ your user pool id here\r\n    ClientId : '...' \/\/ your client id here\r\n  };\r\n  var userPool = new AWSCognito.CognitoIdentityServiceProvider.CognitoUserPool(poolData);\r\n  var userData = {\r\n    Username : $('#inputUsername').val(),\r\n    Pool : userPool\r\n  };\r\n\r\n  cognitoUser = new AWSCognito.CognitoIdentityServiceProvider.CognitoUser(userData);\r\n  cognitoUser.authenticateUser(authenticationDetails, {\r\n    newPasswordRequired: function(userAttributes, requiredAttributes) {\r\n      $('#form-password').removeAttr('hidden');\r\n      $('#form-login').css('display', 'none');\r\n      if ($('#inputNewPassword').val() !== '') {\r\n        cognitoUser.completeNewPasswordChallenge($('#inputNewPassword').val(), [], this);\r\n      }\r\n    },\r\n    onSuccess: function (result) {\r\n      AWS.config.credentials = new AWS.CognitoIdentityCredentials({\r\n        IdentityPoolId : 'us-east-1:XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX',\r\n        Logins : {\r\n          'cognito-idp.us-east-1.amazonaws.com\/us-east-1_XXXXXXXXX' : result.getIdToken().getJwtToken()\r\n        }\r\n      });\r\n      $.getJSON('index.json', function(data) {\r\n        $('.container').html($('#adminForm').render(data));\r\n      }).fail(function() {\r\n        $('.container').html($('#adminForm').render({}));\r\n      });\r\n      AWS.config.update({\r\n        region: 'us-east-1',\r\n        credentials: new AWS.CognitoIdentityCredentials({\r\n          IdentityPoolId: 'us-east-1:XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX',\r\n          Logins: {\r\n            'cognito-idp.us-east-1.amazonaws.com\/us-east-1_XXXXXXXXX' : result.getIdToken().getJwtToken()\r\n          }\r\n        })\r\n      });\r\n      s3 = new AWS.S3({\r\n        apiVersion: '2006-03-01',\r\n        params: {\r\n          Bucket: YOUR_BUCKET_NAME\r\n        }\r\n      )};\r\n    },\r\n    onFailure: function(err) {\r\n      alert(err);\r\n    }\r\n  });\r\n});<\/code><\/pre>\n<p>We need to create an additional form to allow the admin to create a password. Admin will sign in with their temporary password then set a new password to complete authentication.<\/p>\n<p>For more information on working with Amazon Cognito and User Pools, refer to these articles:<\/p>\n<ul>\n<li><a href=\"http:\/\/docs.aws.amazon.com\/cognito\/latest\/developerguide\/what-is-amazon-cognito.html\">Amazon Cognito Developer Guide<\/a><\/li>\n<li><a href=\"https:\/\/aws.amazon.com\/blogs\/mobile\/accessing-your-user-pools-using-the-amazon-cognito-identity-sdk-for-javascript\/\">Accessing Your User Pools using the Amazon Cognito Identity SDK for JavaScript<\/a><\/li>\n<li><a href=\"https:\/\/aws.amazon.com\/blogs\/mobile\/customizing-your-user-pool-authentication-flow\/\">Customizing Amazon Cognito User Pool Authentication Flow<\/a><\/li>\n<\/ul>\n<h3>Create CMS Admin<\/h3>\n<p>With login complete, we want to allow our admin to edit content on the site. In this demo, we will edit the top jumbotron callout. After admin is authenticated, we display a form with inputs for site info, the callout headline, and text content.<\/p>\n<figure id=\"post-249801\" class=\"align-none media-249801\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/site-info.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/site-info.png 800w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/site-info-286x300.png 286w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/site-info-768x804.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>When the form is submitted, we combine the data from the form with a template to generate static HTML. In this demo, we <a href=\"https:\/\/github.com\/BorisMoore\/jsrender\">JSRender<\/a> as our templating engine.<\/p>\n<p>Create the template for our Jumbotron page by copying the HTML and embed it on our admin page as a <a href=\"https:\/\/facebook.github.io\/jsx\/\">JSX template<\/a>. Replace the content with template tags mapped to the names of the admin edit form fields.<\/p>\n<pre rel=\"JSX\"><code class=\"language-markup\">&lt;script type=\"text\/x-jsrender\" id=\"jumbotronTemplate\"&gt;\r\n  &lt;html lang=\"en\"&gt;\r\n\r\n  &lt;head&gt;\r\n    &lt;meta charset=\"utf-8\"&gt;\r\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\r\n    &lt;meta name=\"description\" content=\"{{&gt;siteDescription}}\"&gt;\r\n    &lt;meta name=\"author\" content=\"\"&gt;\r\n    &lt;title&gt;{{&gt;siteTitle}}&lt;\/title&gt;\r\n    &lt;link href=\"css\/bootstrap.min.css\" rel=\"stylesheet\"&gt;\r\n    &lt;link href=\"css\/jumbotron.css\" rel=\"stylesheet\"&gt;\r\n  &lt;\/head&gt;\r\n\r\n  &lt;body&gt;\r\n    &lt;nav class=\"navbar navbar-static-top navbar-dark bg-inverse\"&gt;\r\n      &lt;a class=\"navbar-brand\" href=\"#\"&gt;{{&gt;siteTitle}}&lt;\/a&gt;\r\n      &lt;ul class=\"nav navbar-nav\"&gt;\r\n        &lt;li class=\"nav-item active\"&gt;\r\n          &lt;a class=\"nav-link\" href=\"#\"&gt;Home &lt;span class=\"sr-only\"&gt;(current)&lt;\/span&gt;&lt;\/a&gt;\r\n        &lt;\/li&gt;\r\n        &lt;li class=\"nav-item\"&gt;\r\n          &lt;a class=\"nav-link\" href=\"#\"&gt;About&lt;\/a&gt;\r\n        &lt;\/li&gt;\r\n        &lt;li class=\"nav-item\"&gt;\r\n          &lt;a class=\"nav-link\" href=\"#\"&gt;Contact&lt;\/a&gt;\r\n        &lt;\/li&gt;\r\n      &lt;\/ul&gt;\r\n    &lt;\/nav&gt;\r\n    &lt;div class=\"jumbotron\"&gt;\r\n      &lt;div class=\"container\"&gt;\r\n        &lt;h1 class=\"display-3\"&gt;{{&gt;calloutHeadline}}&lt;\/h1&gt;\r\n        &lt;p&gt;{{&gt;calloutText}}&lt;\/p&gt;\r\n        &lt;p&gt;\r\n          &lt;a class=\"btn btn-primary btn-lg\" href=\"#\" role=\"button\"&gt;Learn more &amp;raquo;&lt;\/a&gt;\r\n        &lt;\/p&gt;\r\n      &lt;\/div&gt;\r\n    &lt;\/div&gt;\r\n\r\n    ...<\/code><\/pre>\n<p>Add an event listener to the edit form to capture the data entered as a JSON Object, then pass it to the JSRender template to generate HTML for uploading to S3 in the next step.<\/p>\n<pre rel=\"jQuery\"><code class=\"language-javascript\">$('.container')\r\n  .on('submit', '#form-admin',function(e) {\r\n    e.preventDefault();\r\n    var formData = {};\r\n    var $formFields = $('#form-admin').find('input, textarea, select').not(':input[type=button],:input[type=submit],:input[type=reset]');\r\n    $formFields.each(function() {\r\n      formData[$(this).attr('name')] = $(this).val();\r\n    });\r\n    \r\n    var jumbotronHTML = '&lt;!DOCTYPE html&gt;' + $('#jumbotronTemplate').render(formData);\r\n    var file = new File([jumbotronHTML], 'index.html', {type: \"text\/html\", lastModified: new Date()});\r\n    ...<\/code><\/pre>\n<h3>Save Static Site Files<\/h3>\n<p>Next, we grant permission to admin to save edits to S3 by creating an Identity and Access Management (IAM) role with a read\/write policy for our S3 bucket.<\/p>\n<p>Navigate to IAM in the AWS Console, and then select Policies. Create a new policy with the following Policy Document:<\/p>\n<pre rel=\"JSON\"><code class=\"language-javascript\">{ \r\n  \"Version\": \"2012-10-17\", \r\n  \"Statement\": [ { \r\n    \"Effect\": \"Allow\", \r\n    \"Action\": [ \"s3:*\" ], \r\n    \"Resource\": [ \"arn:aws:s3:::BUCKET_NAME\/*\" ] \r\n  } ] \r\n}<\/code><\/pre>\n<p>Next select Roles, then create a new role and give it a name. Select Role for Identity Provider access then select <b>Grant access to web identity providers<\/b>. Use the default Policy Document for Verify Role Trust. <\/p>\n<figure id=\"post-249803\" class=\"align-none media-249803\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/select-role-trust.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/select-role-trust.png 2000w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/select-role-trust-300x109.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/select-role-trust-768x278.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/select-role-trust-1024x371.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>On the next step, attach the policy you just created for accessing the S3 bucket.<\/p>\n<p>Once again select the Roles tab within the IAM section of the AWS Console. Select the role you just created. In Permissions, under Managed Policies you should see your policy for S3. If you do not, attach it now.<\/p>\n<figure id=\"post-249804\" class=\"align-none media-249804\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/auth-role.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/auth-role.png 2000w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/auth-role-300x134.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/auth-role-768x342.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/auth-role-1024x456.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Update the AWS config settings on the admin page to include our S3 service.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">\/\/ Instantiate AWS SDK service objects now that the credentials have been updated. \r\nAWS.config.update({ \r\n  region: 'BUCKET_REGION', \r\n  credentials: new AWS.CognitoIdentityCredentials({ \r\n    IdentityPoolId: 'IDENTITY_POOL_ID' \r\n  }) \r\n}); \r\ns3 = new AWS.S3({ \r\n  apiVersion: '2006-03-01', params: {Bucket: 'BUCKET_NAME'} \r\n});<\/code><\/pre>\n<p>The last step for connecting our admin user to S3 is to create an Identity Pool. Return to Amazon Cognito in the AWS Console and click the <b>Manage Federated Identitites<\/b> button, then the <b>Create new identity pool<\/b> button.<\/p>\n<p>Give your pool a name then expand the Authentication providers section. Select the <b>Amazon Cognito<\/b> tab and enter your <b>User Pool ID<\/b> and <b>App Client ID<\/b>.<\/p>\n<figure id=\"post-249807\" class=\"align-none media-249807\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/wizard.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/wizard.png 2000w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/wizard-300x183.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/wizard-768x468.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/wizard-1024x625.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>As you can see, in addition to Amazon Cognito you can use other authentication providers such as Facebook and Google. For more information, read <a href=\"http:\/\/docs.aws.amazon.com\/cognito\/latest\/developerguide\/amazon-cognito-integrating-user-pools-with-identity-pools.html\">Integrating User Pools with Amazon Cognito Identity<\/a>.<\/p>\n<p>Continue through the rest of the steps then under Sample Code, take note of the <b>Identity Pool Id<\/b>. Back on our admin page, when our form is submitted we will upload our HTML file to S3. <\/p>\n<p>Additionally, once the HTML file has successfully uploaded, we create and upload a JSON file to store our data so when we return to the form it has the newly updated values filled in.<\/p>\n<pre rel=\"jQuery\"><code class=\"language-javascript\">var file = new File([jumbotronHTML], 'index.html', { type: \"text\/html\", lastModified: new Date() });\r\ns3.upload({\r\n  Key: 'index.html',\r\n  Body: file,\r\n  ACL: 'public-read',\r\n  ContentDisposition: 'inline',\r\n  ContentType: 'text\/html'\r\n}, function(err, data) {\r\n  if (err) {\r\n    return alert('There was an error: ', err.message);\r\n  }\r\n  file = new File([JSON.stringify(formData)], 'index.json');\r\n  s3.upload({\r\n    Key: 'admin\/index.json',\r\n    Body: file,\r\n    ACL: 'public-read'\r\n  }, function(err, data) {\r\n    if (err) {\r\n      return alert('There was an error: ', err.message);\r\n    }\r\n    $('#form-admin')\r\n      .remove('#success')\r\n      .prepend('&lt;p id=\"success\"&gt;Update successful! <a href=\"..\/index.html\">View Website<\/a>&lt;\/p&gt;');\r\n  });\r\n});<\/code><\/pre>\n<p>Update Cognito\u2019s <code>authenticateUser<\/code> <code>onSuccess<\/code> event handler to render the form as a template with values from the JSON file if it exists.<\/p>\n<pre rel=\"jQuery\"><code class=\"language-javascript\">$.getJSON('index.json', function(data) {\r\n  $('.container').html($('#adminForm').render(data));\r\n}).fail(function() {\r\n  $('.container').html($('#adminForm').render({}));\r\n});<\/code><\/pre>\n<h3>Next Steps<\/h3>\n<ul>\n<li>Given the ability to generate and save static content to S3, there are many exciting possibilities for web content and admin interfaces that can be built.<\/li>\n<li>Add image and file uploading capabilities<\/li>\n<li>Add a <a href=\"https:\/\/www.tinymce.com\/\">rich text editor<\/a><\/li>\n<li>Improve the login functionality by adding forgot password and MFA.<\/li>\n<li>Build out the admin to edit components and content across multiple pages.<\/li>\n<li>Use <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/HTMLElement\/contentEditable\">contenteditable<\/a> to allow logged in admins to do in-page editing.<\/li>\n<li>Manage different user permissions levels with User Pool groups.<\/li>\n<li>Develop a workflow for building a custom CMS for each of your client projects.<\/li>\n<li>Create your own content management platform.<\/li>\n<\/ul>\n","protected":false},"excerpt":{"rendered":"<p>Static Site Website Generators have been getting increasingly popular within the last 2 years. Much has been written (like this and this) and there have been many great open source projects and even funded companies launched to help you get up and running. What if I told you that you could build a Static Site [&hellip;]<\/p>\n","protected":false},"author":247082,"featured_media":249866,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1023,425,1024,1025],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249799"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/247082"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249799"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249799\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/249866"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249799"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249799"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249799"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249861,"date":"2017-01-09T06:07:09","date_gmt":"2017-01-09T13:07:09","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249861"},"modified":"2017-01-09T06:07:09","modified_gmt":"2017-01-09T13:07:09","slug":"etsys-evolving-icon-system","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/etsys-evolving-icon-system\/","title":{"rendered":"Etsy\u2019s Evolving Icon System"},"content":{"rendered":"<p>Etsy moves away from an icon font in production to using SVG. It's going to be an inline <code>&lt;svg&gt;<\/code> system, but abstracted as a <code>&lt;etsy-icon&gt;<\/code> custom element for ease of use. <\/p>\n<p>Two cents:<\/p>\n<ul>\n<li>I could see the need for that abstraction going away if we had a more convient syntax for <code>&lt;use&gt;<\/code> available, like: <code>&lt;svg use=\"icons.svg#cart\" \/&gt;<\/code><\/li>\n<li>I like how dedicated they are to icon consistency. I struggle with this a lot. An SVG icon process can be so easy to work with, and new icons so easy to find and drop in, that consistency can suffer. That grid, with the examples, is gold.<\/li>\n<li>They are still building an icon font as part of the build process, for the designers to use in design software.<\/li>\n<\/ul>\n<p>That last one is surprising to me, as I would think it would be a pain in the butt to find the right icon to design with when the one you need is assigned to some random character in the font. I would think the concept of \"Symbols\" in Sketch or Illustrator would make the way to make those icons super easy to find and use for designers. Which makes me think what the font actually has to offer is <em>interoperability<\/em> between design software. I wonder if software like <a href=\"https:\/\/www.lingoapp.com\/\">Lingo<\/a> or <a href=\"http:\/\/geticonjar.com\/\">Iconjar<\/a> would be helpful here. <\/p>\n","protected":false},"excerpt":{"rendered":"<p>Etsy moves away from an icon font in production to using SVG. It&#8217;s going to be an inline &lt;svg&gt; system, but abstracted as a &lt;etsy-icon&gt; custom element for ease of use. Two cents: I could see the need for that abstraction going away if we had a more convient syntax for &lt;use&gt; available, like: &lt;svg [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":249863,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[626,469,660],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249861"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249861"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249861\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/249863"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249861"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249861"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249861"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249795,"date":"2017-01-08T06:13:48","date_gmt":"2017-01-08T13:13:48","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249795"},"modified":"2017-01-08T06:13:48","modified_gmt":"2017-01-08T13:13:48","slug":"colorme-css-color-level-4","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/colorme-css-color-level-4\/","title":{"rendered":"ColorMe \/ CSS Color Level 4"},"content":{"rendered":"<p>Does this look weird?<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.element {\r\n  background: color(#eb8fa9 alpha(75%) blackness(20%));\r\n}<\/code><\/pre>\n<p>That's the \"color function\" from <a href=\"https:\/\/drafts.csswg.org\/css-color\/#color-function\">a draft spec<\/a> from the CSS working group. I think it's all about making colors a little easier and more intuitive to work with. Looks awesome to me, as someone who uses Sass color manipulation functions quite a bit.<\/p>\n<p><!--more--><\/p>\n<p>Tyler Gaw made <a href=\"https:\/\/colorme.io\/\">a cool tool<\/a> to play with it:<\/p>\n<figure id=\"post-249843\" class=\"align-none media-249843\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/colorme.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/colorme.png 1934w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/colorme-300x214.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/colorme-768x549.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/colorme-1024x732.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>I notice in the spec that this seems to actually be <a href=\"https:\/\/drafts.csswg.org\/css-color\/#modifying-colors\">color-mod()<\/a> though, not <code>color()<\/code>. It probably changed, as I see there are some <a href=\"https:\/\/cloudfour.com\/thinks\/building-themes-with-css4-color-features\/\">articles<\/a> and <a href=\"https:\/\/github.com\/postcss\/postcss-color-function\">plugins<\/a> that talk about it as <code>color()<\/code>.<\/p>\n<p>That's the danger of trying to polyfill future CSS with the exact names you think it will use. If you're right, hopefully, one day you can remove it and all will be well. If you're wrong, you can never stop using it, because the code that's left won't work (unless you rewrite it). You're also hoping that the polyfill is written in a way that takes advantage of the new syntax instead when it can instead of only processing it down to an older syntax. I think I prefer on-purpose differently-named abstractions.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Does this look weird? .element { background: color(#eb8fa9 alpha(75%) blackness(20%)); } That&#8217;s the &#8220;color function&#8221; from a draft spec from the CSS working group. I think it&#8217;s all about making colors a little easier and more intuitive to work with. Looks awesome to me, as someone who uses Sass color manipulation functions quite a bit.<\/p>\n","protected":false},"author":3,"featured_media":249843,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[837],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249795"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249795"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249795\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/249843"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249795"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249795"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249795"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249821,"date":"2017-01-07T08:00:57","date_gmt":"2017-01-07T15:00:57","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249821"},"modified":"2017-01-07T08:00:57","modified_gmt":"2017-01-07T15:00:57","slug":"web-awards-horizontal-vertical-writings","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/web-awards-horizontal-vertical-writings\/","title":{"rendered":"Web Awards for Horizontal and Vertical Writings"},"content":{"rendered":"<blockquote><p>\"Tate-Yoko Web Award\" is an award given to those who are willing to challenge the web typography of the next generation by designing and utilizing new typesetting standards in the latest CSS codings.<\/p><\/blockquote>\n<figure id=\"post-249822\" class=\"align-none media-249822\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/tategaki.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/tategaki.png 1500w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/tategaki-300x247.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/tategaki-768x633.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/tategaki-1024x844.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Maybe the award site should win the award.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>&#8220;Tate-Yoko Web Award&#8221; is an award given to those who are willing to challenge the web typography of the next generation by designing and utilizing new typesetting standards in the latest CSS codings. Maybe the award site should win the award.<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[1026,993],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249821"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249821"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249821\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249821"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249821"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249821"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249792,"date":"2017-01-07T06:21:28","date_gmt":"2017-01-07T13:21:28","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249792"},"modified":"2017-01-07T06:21:28","modified_gmt":"2017-01-07T13:21:28","slug":"xvg","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/xvg\/","title":{"rendered":"xvg"},"content":{"rendered":"<p>Varun Vachhar:<\/p>\n<blockquote><p>A Chrome extension for debugging SVG paths by converting them to outlines and displaying anchors, control points, handles and arc ellipses.<\/p><\/blockquote>\n<figure id=\"post-249793\" class=\"align-none media-249793\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/xvg.gif\" alt=\"\" \/><\/figure>\n<p>An amazing contribution to this open source project would be to make all those points draggable, and then be able to spit out the newly adjusted code.<\/p>\n<p>Also, weren't browser extensions on their way to being interoperable? Looks like the community group has <a href=\"https:\/\/browserext.github.io\/browserext\/\">significant work done<\/a>. <\/p>\n","protected":false},"excerpt":{"rendered":"<p>Varun Vachhar: A Chrome extension for debugging SVG paths by converting them to outlines and displaying anchors, control points, handles and arc ellipses. An amazing contribution to this open source project would be to make all those points draggable, and then be able to spit out the newly adjusted code. Also, weren&#8217;t browser extensions on [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[1022,1021,469,1020],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249792"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249792"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249792\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249792"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249792"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249792"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249747,"date":"2017-01-06T09:26:16","date_gmt":"2017-01-06T16:26:16","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249747"},"modified":"2017-01-06T13:44:58","modified_gmt":"2017-01-06T20:44:58","slug":"redesign-v15-notes","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/redesign-v15-notes\/","title":{"rendered":"Redesign v15 Notes"},"content":{"rendered":"<p>Little redesign around here. As ever, it's just a start. It will ebb and flow in the weeks, months, and years to come. <\/p>\n<p>There are bugs! There are little differences that might take a tiny bit of getting used to! You're always welcome to <a href=\"https:\/\/css-tricks.com\/contact\/\">contact us<\/a> and report bugs or let us know what you think. You know how a lot of people are all like <em>\"all websites are the same!\"<\/em>, well, some things are different here quite on purpose.<\/p>\n<p><!--more--><\/p>\n<h3>Dedicated Area for the Newsletter<\/h3>\n<p>It feels much better to have <a href=\"https:\/\/css-tricks.com\/newsletters\/\">a web archive<\/a> of the newsletter. Since it's hand-written, I'd hate for that content to be lost in email-only-land. This is just a simple v1, I'm sure we can make these archives even more usable moving forward.<\/p>\n<h3>Card-based Layout with Featured Images<\/h3>\n<p>What I like about card-based layouts is that you can limit the width of the card such that the line-length isn't too wide and images aren't too enormous, then arrange the cards any way you like. Many of the pages use CSS <a href=\"https:\/\/css-tricks.com\/almanac\/properties\/c\/columns\/\">columns<\/a> to lay out the cards. <\/p>\n<figure id=\"post-249748\" class=\"align-none media-249748\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/card-layout.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/card-layout.jpg 1400w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/card-layout-154x300.jpg 154w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/card-layout-768x1498.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/card-layout-525x1024.jpg 525w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>Cards can make for fun browsing.<\/figcaption><\/figure>\n<p>It's already confused a number of people how the next chronological card is <em>below<\/em> the top left one instead of to the right. I understand the confusion, but I'm not particularly concerned. Not all pages are chronological. I'm not sure how much chronology matters, especially when dates are clearly presented and the content is relevant. I like how it gives slightly-older articles a new chance to shine at the top of the next column.<\/p>\n<p>On mobile, the cards stack on top of each other.<\/p>\n<figure id=\"post-249762\" class=\"align-none media-249762\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/stacked-cards.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/stacked-cards.png 432w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/stacked-cards-185x300.png 185w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Which has also been confusing for some folks. The thinking is: cards are always excerpts. The stacking (and thus hiding of some text) says: click\/tap this to keep reading it.<\/p>\n<h3>Expanding Images and Pens<\/h3>\n<p>The main content area is exactly centered, which differs from the last few designs. It's also slightly narrower. I prefer the narrowness for text, but I was a little bummed that it made images and embedded Pens smaller. So I made images expandable!<\/p>\n<figure id=\"post-249750\" class=\"align-none media-249750\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/expando.gif\" alt=\"\" \/><figcaption>Which is pretty much <a href=\"https:\/\/codepen.io\/davatron5000\/pen\/ENOVVV\">Dave's thing<\/a>.<\/figcaption><\/figure>\n<p>Plus we made the Pens expand both ways:<\/p>\n<figure id=\"post-249752\" class=\"align-none media-249752\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/expando-pens.gif\" alt=\"\" \/><\/figure>\n<p>Oh, plus, code, too, if it needs it:<\/p>\n<figure id=\"post-249753\" class=\"align-none media-249753\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/expando-code.gif\" alt=\"\" \/><\/figure>\n<h3>Tagging<\/h3>\n<p>We've been tagging content for the last few years, but haven't meaningfully exposed it. This design is our first crack at it.<\/p>\n<figure id=\"post-249754\" class=\"align-none media-249754\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/tags.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/tags.png 658w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/tags-300x57.png 300w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<figure id=\"post-249757\" class=\"align-none media-249757\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/tags-grid.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/tags-grid.jpg 1200w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/tags-grid-300x101.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/tags-grid-768x257.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/tags-grid-1024x343.jpg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<h3>Commenting<\/h3>\n<p>Comments are sticking around, and we want to continue encouraging discussion via comments, but we also want to have clear expectations for commenting behavior. Here's the latest stab at that:<\/p>\n<figure id=\"post-249758\" class=\"align-none media-249758\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/commenting.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/commenting.png 1000w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/commenting-300x182.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/commenting-768x467.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<blockquote><p>Think of it like a letter to the editor.<\/p><\/blockquote>\n<p>In other words: more moderation. Which isn't just keeping out the bad, it's giving lots of super rad stars to the good!<\/p>\n<figure id=\"post-249759\" class=\"align-none media-249759\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/good-comment.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/good-comment.jpg 826w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/good-comment-300x122.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/good-comment-768x312.jpg 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<h3>Fluid Type<\/h3>\n<p>I just can't <a href=\"https:\/\/css-tricks.com\/fluid-type-stuff\/\">get enough<\/a>.<\/p>\n<h3>The Lodge Combined with Videos<\/h3>\n<p>The Lodge was always just video screencasts anyway, and since we no longer charge for it, we squished them together. All these series are still available in there.<\/p>\n<h3>Performance<\/h3>\n<p>As ever, there are improvements to be made. But...<\/p>\n<figure id=\"post-249761\" class=\"align-none media-249761\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/perf.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/perf.jpg 788w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/perf-248x300.jpg 248w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/perf-768x929.jpg 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>500ms for the DOM and 1.16s for full load on 3G ain't bad (cache hit, tho).<\/figcaption><\/figure>\n<p>I was able to do some performance optimizations on the front end like the removing of some libraries, removing of some images, lazy loading others...<\/p>\n<h3>Header<\/h3>\n<p>For the curious, the weird moving backgrounds are SVG that is pseudo-randomly generated points of a <code>&lt;polygon&gt;<\/code>. Here's the stripped down code for it:<\/p>\n<p data-height=\"345\" data-theme-id=\"1\" data-slug-hash=\"dNoMqx\" data-default-tab=\"result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"CSS-Tricks Header\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/dNoMqx\/\">CSS-Tricks Header<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3>New Areas<\/h3>\n<p>None of these are ready yet, but the main motivator for me to mess around with a redesign was to bring to live some new areas. Here's <a href=\"https:\/\/css-tricks.com\/guides\/layout\/\">a sneak peak<\/a> at just one page of one area.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Little redesign around here. As ever, it&#8217;s just a start. It will ebb and flow in the weeks, months, and years to come. There are bugs! There are little differences that might take a tiny bit of getting used to! You&#8217;re always welcome to contact us and report bugs or let us know what you [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[629],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249747"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249747"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249747\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249747"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249747"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249747"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249743,"date":"2017-01-06T04:27:45","date_gmt":"2017-01-06T11:27:45","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249743"},"modified":"2017-01-06T04:27:45","modified_gmt":"2017-01-06T11:27:45","slug":"introducing-payment-request-api","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/introducing-payment-request-api\/","title":{"rendered":"Introducing the Payment Request API"},"content":{"rendered":"<p>As I understand it:<\/p>\n<ul>\n<li>It's the early days for <a href=\"https:\/\/www.w3.org\/TR\/payment-request\/\">a standards-based<\/a> JavaScript API for payments on the web. As in, <code>var payment = new PaymentRequest(methodData, details, options);<\/code><\/li>\n<li>For users, it means potentially better UX. Payment methods are stored by the browser, and work with those browsers existing proprietary payment systems (e.g. Microsoft Wallet). That means users aren't filling out payment forms nearly as often, they are just selecting payment methods.<\/li>\n<li>For developers, long term, it means not having to create those payment forms and validating data and all that work. You get the UI and UX of a payment flow for free. Although for now, the best you can do is progressively enhance to this, so it's more work in the meantime.<\/li>\n<li>Microsoft <a href=\"https:\/\/developer.microsoft.com\/en-us\/microsoft-edge\/platform\/documentation\/dev-guide\/device\/payment-request-api\/\">has docs<\/a> for it, and <a href=\"https:\/\/developers.google.com\/web\/fundamentals\/discovery-and-monetization\/payment-request\/\">so does Google<\/a>.<\/li>\n<\/ul>\n","protected":false},"excerpt":{"rendered":"<p>As I understand it: It&#8217;s the early days for a standards-based JavaScript API for payments on the web. As in, var payment = new PaymentRequest(methodData, details, options); For users, it means potentially better UX. Payment methods are stored by the browser, and work with those browsers existing proprietary payment systems (e.g. Microsoft Wallet). That means [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[1019],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249743"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249743"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249743\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249743"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249743"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249743"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249722,"date":"2017-01-05T15:07:59","date_gmt":"2017-01-05T22:07:59","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249722"},"modified":"2017-01-05T15:07:59","modified_gmt":"2017-01-05T22:07:59","slug":"web-animation-workshops-spring","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/web-animation-workshops-spring\/","title":{"rendered":"Web Animation Workshops in Spring"},"content":{"rendered":"<p><a href=\"https:\/\/webanimationworkshops.com\/\">Web Animation Workshops<\/a> has started up again for Spring, we're headed for San Francisco, Chicago, and Paris this year, some dates still to be announced. Val Head and I team up to bring you two packed days full of content and exercises so that when you leave the class, you not only understand the techniques of how to animate in different tech stacks\/environments but why. Here's is some of the content we cover:<\/p>\n<p><!--more--><\/p>\n<h4>Essentials of CSS animation<\/h4>\n<p>We\u2019ll cover what CSS transforms, transitions, and keyframe animations can do and how to use them effectively in your work. We\u2019ll also cover how to decide which web animation option is the best solution for your projects.<\/p>\n<h4>Basics of TweenMax & TimelineMax<\/h4>\n<p>The basics of GreenSock\u2019s TweenMax, one of the most powerful and popular JavaScript animation frameworks, for more complex logic and animation tasks. We\u2019ll also cover reasons to consider using an animation library and how to choose one that will work best for your projects.<\/p>\n<h4>Principles of UI\/UX for animation<\/h4>\n<p>Best practices and principles to follow to ensure the animations you create are adding something positive to the user experience, not distracting from it.<\/p>\n<h4>Classic animation principles worth stealing<\/h4>\n<p>Classic animation principles and motion graphics techniques that will make your web animation work look more professional and polished.<\/p>\n<h4>SVG workflow and optimization<\/h4>\n<p>Tools and techniques for creating smart and performant SVGs to animate.<\/p>\n<h4>SVG animation<\/h4>\n<p>The basics of animating SVGs both with CSS and JavaScript. We\u2019ll cover what each option can do with SVG and how to decide which to use to get the job done.<\/p>\n<h4>Animating with React<\/h4>\n<p>Animating in React with GreenSock and React-Motion. We\u2019ll cover the differences of animating with React\u2019s virtual DOM, some gotchas, and how to debug performance issues.<\/p>\n<h4>The Web Animation API<\/h4>\n<p>A look at what\u2019s coming in this latest spec, an overview of how to use it, and what it means for the near future of web animation.<\/p>\n<h4>Web animation performance<\/h4>\n<p>Techniques and properties that will help you squeeze the best performance out of your animations, plus perceived performance considerations.<\/p>\n<p>If you're interested in attending, head over to the workshop page for more info! We're almost out of early bird tickets for SF, so scoop them up while you can.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Web Animation Workshops has started up again for Spring, we&#8217;re headed for San Francisco, Chicago, and Paris this year, some dates still to be announced. Val Head and I team up to bring you two packed days full of content and exercises so that when you leave the class, you not only understand the techniques [&hellip;]<\/p>\n","protected":false},"author":7699,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[612,557,1015,1014],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249722"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/7699"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249722"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249722\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249722"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249722"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249722"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249499,"date":"2017-01-05T07:31:07","date_gmt":"2017-01-05T14:31:07","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249499"},"modified":"2017-01-18T14:22:12","modified_gmt":"2017-01-18T21:22:12","slug":"using-the-speech-synthesis-api-to-create-articulate-js","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/using-the-speech-synthesis-api-to-create-articulate-js\/","title":{"rendered":"The Narrative Browser Using Articulate.js"},"content":{"rendered":"<p>Many sites with lots of written content employ specially crafted print style sheets. That way, a user can print out the relevant content without wasting paper on navigation, ads, or anything else not germane.<\/p>\n<p><a href=\"https:\/\/github.com\/acoti\/articulate.js\">Articulate.js<\/a>, a jQuery plugin, is what I consider the narrative equivalent. With as little as one line of code, it enables developers to create links that allow users to click, sit back, and listen to the browser read aloud the important content of a web page. In some ways, it can turn a thoughtful essay or article into a mini podcast. And because it uses built-in JavaScript functionality, no browser extensions or other system software is needed.<\/p>\n<p><!--more--><\/p>\n<p>I thought I would share how I went about creating Articulate.js with the hopes that it could provide the reader with ideas on how to apply this technology in different ways.<\/p>\n<h3>The Speech Synthesis Interface<\/h3>\n<p>Articulate.js uses the Speech Synthesis interface of the Web Speech API. It is currently supported in all the major browsers, including the latest versions of Edge, Safari, Chrome, Opera, Firefox, iOS Safari, and Chrome for Android.<\/p>\n<p>There are two <code>window<\/code> objects of the Speech Synthesis interface that are used to enable the browser to speak: <code>SpeechSynthesis<\/code> and <code>SpeechSynthesisUtterance<\/code>. The first step is to create an instance of the <code>SpeechSynthesisUtterance<\/code> object and designate the text you would like spoken. If desired, you can set additional properties such as the rate, pitch, volume, and voice.<\/p>\n<p>To begin speaking, this object is passed as a parameter to the <code>SpeechSynthesis.speak()<\/code> method. Other playback functionality, such as pausing, resuming, and cancelling, are all methods of the <code>SpeechSynthesis<\/code> object. A <a href=\"https:\/\/developer.microsoft.com\/en-us\/microsoft-edge\/testdrive\/demos\/speechsynthesis\/\">useful demo<\/a> from Microsoft lets you play around with these features.<\/p>\n<p>At the end of this article, there are many resources listed that walk you through the intricacies of this functionality and provide additional examples.<\/p>\n<h3>Getting Started<\/h3>\n<p>The lightweight Articulate.js plugin allows you to leverage the powerful selector options of jQuery to specify which parts of the website to speak. For example, depending on how the page is organized, a single line of code, like the following, can direct the browser to speak the entire contents of an article or blog post:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">$('article').articulate('speak');<\/code><\/pre>\n<p>Here's an example that targets only the primary headers and paragraphs:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">$('h1, h2, p').articulate('speak');<\/code><\/pre>\n<p>Internally, Articulate.js clones the matched set of elements and all their descendant elements and text nodes. It then parses this clone using a default set of rules, deciding what should be spoken and ignored, then adding the appropriate pauses to make everything sound more like a narrative.<\/p>\n<p>These are the basic methods along with a CodePen example:<\/p>\n<table>\n<thead>\n<tr>\n<th>Function<\/th>\n<th>Description<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr>\n<td><code class=\"language-javascript\">$(selector).articulate('speak');<\/code><\/td>\n<td>Speaks aloud the specified DOM element(s) and their descendants<\/td>\n<\/tr>\n<tr>\n<td><code>$().articulate('pause');<\/code><\/td>\n<td>Pauses the speaking<\/td>\n<\/tr>\n<tr>\n<td><code>$().articulate('resume');<\/code><\/td>\n<td>Resumes the speaking after it has been paused<\/td>\n<\/tr>\n<tr>\n<td><code>$().articulate('stop');<\/code><\/td>\n<td>Stops the speaking permanently<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p data-height=\"345\" data-theme-id=\"1\" data-slug-hash=\"zoybvQ\" data-default-tab=\"html,result\" data-user=\"adamcoti\" data-embed-version=\"2\" data-pen-title=\"Articulate: Basic Functions\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/adamcoti\/pen\/zoybvQ\/\">Articulate: Basic Functions<\/a> by Adam Coti (<a href=\"http:\/\/codepen.io\/adamcoti\">@adamcoti<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>You can only have one <code>SpeechSynthesisUtterance<\/code> instance active at a time, which is why a jQuery selector is not needed for pausing, resuming, or stopping. As mentioned before, these methods act upon the <code>SpeechSynthesis<\/code> object.<\/p>\n<p>Also, the browser will only stop speaking when there\u2019s no more text to be read or when a \u201cstop\u201d call is executed. If the speaking is paused, it must be resumed or stopped before anything else can be spoken.<\/p>\n<p>Adjusting the rate, pitch, and volume can be done. By using an input slider, adjustments can give the user some added control. While the system default rate is 1, after much testing, I bumped it up slightly to 1.1 as that seemed to provide a more natural speaking speed. That\u2019s subjective, of course, and can be overridden.<\/p>\n<table>\n<thead>\n<tr>\n<th>Function<\/th>\n<th>Description<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr>\n<td><code>$().articulate('rate',num);<\/code><\/td>\n<td>Sets the rate of the speaking voice<br \/>Default = 1.1<br \/>Range = [0.1 - 10]<\/td>\n<\/tr>\n<tr>\n<td><code>$().articulate('pitch',num);<\/code><\/td>\n<td>Sets the pitch of the speaking voice<br \/>Default = 1.0<br \/>Range = [0 - 2]<\/td>\n<\/tr>\n<tr>\n<td><code>$().articulate('volume',num);<\/code><\/td>\n<td>Sets the volume of the speaking voice<br \/>Default = 1.0<br \/>Range = [0 - 1]<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p data-height=\"345\" data-theme-id=\"1\" data-slug-hash=\"GNPPrY\" data-default-tab=\"html,result\" data-user=\"adamcoti\" data-embed-version=\"2\" data-pen-title=\"Articulate : Voice Parameters\" class=\"codepen\">See the Pen <a href=\"https:\/\/codepen.io\/adamcoti\/pen\/GNPPrY\/\">Articulate : Voice Parameters<\/a> by Adam Coti (<a href=\"http:\/\/codepen.io\/adamcoti\">@adamcoti<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>There are many more options available to the developer, but let\u2019s talk for a moment about what happens under the hood when Articulate.js is asked to speak something on the page.<\/p>\n<h3>The Articulate.js Algorithm<\/h3>\n<p>The Speech Synthesis interface that Articulate.js leverages will read aloud, in a most literal fashion, any string of text it's provided. Some symbols it will enunciate (e.g. it will say \"percent\" when it encounters \"%\"); others, it will ignore (e.g. the quote symbol is left unspoken). Its cadence is dictated primarily by commas, which elicit a small pause, and periods, whose pause is slightly longer.<\/p>\n<p>With that in mind, quite a bit of manipulation is needed to prepare a web page for speaking. Unfortunately, one simply can\u2019t concatenate all the selected text nodes in the DOM as that would result in a lot of run-on text (e.g. lists), include content that isn\u2019t appropriate for reading aloud in a coherent fashion (e.g. tables), and ignore items that should be described (e.g. images).<\/p>\n<p>Articulate.js handles this by applying, among others, the following rules to the DOM elements specified in the jQuery selector:<\/p>\n<ul>\n<li>Delete HTML tags that may contain text nodes, but shouldn't be spoken, such as <code>&lt;form&gt;<\/code> and <code>&lt;s&gt;<\/code>. A list of 21 tags are designated to be ignored as the default.<\/li>\n<li>Find instances of <code>&lt;h1&gt;<\/code> through <code>&lt;h6&gt;<\/code>, <code>&lt;li&gt;<\/code>, and <code>&lt;br&gt;<\/code> tags and append each with either a period or comma. This is to ensure that a pause occurs when spoken since these elements are often visually represented without punctuation.<\/li>\n<li>Insert descriptive text gathered from the <code>alt<\/code> attributes of images, <code>&lt;caption&gt;<\/code> tags from tables, and <code>&lt;figcaption&gt;<\/code> tags from figures.<\/li>\n<\/ul>\n<p>After this is completed, what\u2019s left is converted to a long text string that now requires further manipulation, including:<\/p>\n<ul>\n<li>Find <code>&lt;q&gt;<\/code> tags and pairs of smart quotes and insert the text \"quote\" at the start and \"unquote\" at the end to distinguish them when spoken.<\/li>\n<li>Add starting and ending text to designate lists and block quotes.<\/li>\n<li>Find em dashes and insert a comma in its place to elicit a short pause.<\/li>\n<li>Remove remaining HTML tags and comments.<\/li>\n<li>Remove remaining line breaks and carriage returns as well as lingering HTML special characters.<\/li>\n<\/ul>\n<p>At this point, the string of text is ready to be sent to the Speech Synthesis interface to be spoken by the browser. If you were to look at this string, you would see instances of multiple periods, commas, and spaces \u2014 that's OK \u2014 as it won't affect how it sounds. That is, one or more commas or periods grouped together won\u2019t create even longer pauses.<\/p>\n<h3>Customization<\/h3>\n<p>By using JavaScript and HTML data attributes, Articulate.js can be customized to optimize the user experience. As the following CodePens demonstrate, you can:<\/p>\n<ul>\n<li>Specify HTML tags to be spoken that would otherwise be ignored, and vice versa.<\/li>\n<li>Perform a search and replace within the text, which is helpful for abbreviations. For example, you can specify that all instances of \"i.e.\" to be spoken as \"that is\".<\/li>\n<li>Specify blocks of text to be ignored. For example, a sentence that reads \"click here for more information\" does not need to be spoken.<\/li>\n<li>Specify words to be spelled out.<\/li>\n<li>Specify copy in specially crafted comment tags to be spoken that is otherwise hidden on the screen.<\/li>\n<\/ul>\n<p data-height=\"345\" data-theme-id=\"1\" data-slug-hash=\"eBbXJx\" data-default-tab=\"html,result\" data-user=\"adamcoti\" data-embed-version=\"2\" data-pen-title=\"Articulate: Text Manipulation\" class=\"codepen\">See the Pen <a href=\"https:\/\/codepen.io\/adamcoti\/pen\/eBbXJx\/\">Articulate: Text Manipulation<\/a> by Adam Coti (<a href=\"http:\/\/codepen.io\/adamcoti\">@adamcoti<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p data-height=\"345\" data-theme-id=\"1\" data-slug-hash=\"bBzdqe\" data-default-tab=\"html,result\" data-user=\"adamcoti\" data-embed-version=\"2\" data-pen-title=\"Articulate: HTML Data Attributes\" class=\"codepen\">See the Pen <a href=\"https:\/\/codepen.io\/adamcoti\/pen\/bBzdqe\/\">Articulate: HTML Data Attributes<\/a> by Adam Coti (<a href=\"http:\/\/codepen.io\/adamcoti\">@adamcoti<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3>Browser Consistency<\/h3>\n<p>You will notice that the Speech Synthesis interface is subtly different across browsers and operating systems. For example, the default rate of speech will sound somewhat faster on an iPhone as opposed to its desktop implementations. Developers can provide input sliders or radio buttons for users to fine-tune their experience.<\/p>\n<p>In addition, depending on the operating system and device, browsers expose different voices to the Speech Synthesis interface. As seen in the demo from Microsoft mentioned earlier, these voices can be selected to override the default \u201cnative\u201d voice. But, for simplicity sake, Articulate.js only uses the default voice \u2014 later versions will allow that parameter to be modified as well.<\/p>\n<h3>Some Final Thoughts<\/h3>\n<p>The inspiration for Articulate.js came from the idea that with a simple click, I can enjoy having articles read to me when it\u2019s not convenient or desirable to be staring at a screen \u2014 particularly when using my phone. Maybe when lying in the park with my eyes closed or while I'm preoccupied with preparing dinner. The goal was to allow developers to make the appropriate customizations so that it sounds less like a screen reader and more like a friend is reading the web page to you.<\/p>\n<p>Articulate.js can be used as a voice option for anything on the web page, from enunciating a single word to conveying content not displayed on the screen. If you\u2019re interested, download the source code and experiment. And, most importantly, have fun with it!<\/p>\n<h3>Download and Documentation<\/h3>\n<p>The commented source code and minified versions of Articulate.js can be downloaded at its <a href=\"https:\/\/github.com\/acoti\/articulate.js\">Github<\/a> home. Full documentation can be found there as well.<\/p>\n<h3>Resources<\/h3>\n<ul>\n<li><a href=\"http:\/\/caniuse.com\/#feat=speech-synthesis\">Can I Use SpeechSynthesis Interface<\/a><\/li>\n<li><a href=\"https:\/\/dvcs.w3.org\/hg\/speech-api\/raw-file\/tip\/speechapi.html#tts-section\">W3C: The SpeechSynthesis Interface<\/a><\/li>\n<li><a href=\"https:\/\/developers.google.com\/web\/updates\/2014\/01\/Web-apps-that-talk-Introduction-to-the-Speech-Synthesis-API\">Web Apps That Talk - Introduction to the Speech Synthesis API<\/a><\/li>\n<li><a href=\"https:\/\/blogs.windows.com\/msedgedev\/2016\/06\/01\/introducing-speech-synthesis-api\/\">Introducing the Speech Synthesis API in Microsoft Edge<\/a><\/li>\n<li><a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Web_Speech_API\/Using_the_Web_Speech_API\">Mozilla Developer Network: Using the Web Speech API<\/a><\/li>\n<\/ul>\n","protected":false},"excerpt":{"rendered":"<p>Many sites with lots of written content employ specially crafted print style sheets. That way, a user can print out the relevant content without wasting paper on navigation, ads, or anything else not germane. Articulate.js, a jQuery plugin, is what I consider the narrative equivalent. With as little as one line of code, it enables [&hellip;]<\/p>\n","protected":false},"author":246389,"featured_media":249718,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1010,265,1009],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249499"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/246389"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249499"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249499\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/249718"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249499"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249499"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249499"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249698,"date":"2017-01-04T14:02:20","date_gmt":"2017-01-04T21:02:20","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249698"},"modified":"2017-01-04T14:02:20","modified_gmt":"2017-01-04T21:02:20","slug":"from-sass-to-postcss","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/from-sass-to-postcss\/","title":{"rendered":"From Sass to PostCSS"},"content":{"rendered":"<p>Tyler Gaw documents his process of moving off Sass and onto PostCSS, but keeping <em>most<\/em> of the code the same. That meant making sure he was using PostCSS plugins that would replicate most of Sass' functionality, like nesting and mixins and whatnot.<\/p>\n<p>Tyler is sold. I find it an interesting experiment, and it's cool to know it's basically possible, but I'm definitely not sold yet. <\/p>\n<p>Now instead of just having Sass as a dependency, which is an active healthy project, you have a whole bunch of plugins with different authors as dependencies. And for what? Assuming you use libsass, you don't get any speed. If you like some particular PostCSS plugin, using Sass doesn't prevent you from using that also. One thing I definitely wouldn't recommend is preprocessing those custom properties, as those are <a href=\"https:\/\/css-tricks.com\/difference-between-types-of-css-variables\/\">not interchangeable things<\/a>.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Tyler Gaw documents his process of moving off Sass and onto PostCSS, but keeping most of the code the same. That meant making sure he was using PostCSS plugins that would replicate most of Sass&#8217; functionality, like nesting and mixins and whatnot. Tyler is sold. I find it an interesting experiment, and it&#8217;s cool to [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[698,476],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249698"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249698"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249698\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249698"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249698"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249698"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249655,"date":"2017-01-04T11:24:04","date_gmt":"2017-01-04T18:24:04","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249655"},"modified":"2017-01-04T11:30:30","modified_gmt":"2017-01-04T18:30:30","slug":"automatic-image-optimization-hazel-imageoptim","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/automatic-image-optimization-hazel-imageoptim\/","title":{"rendered":"Automatic Image Optimization with Hazel and ImageOptim"},"content":{"rendered":"<p>I'm forever trying to make my local image workflow easier. I work with images as part of blog posts, images as part of sites I'm working on, images headed to social media... images everywhere. Almost always headed to the web. If we're taught one thing about images and the web, it's that they should be optimized. <\/p>\n<p>For me, that means dragging every single image onto <a href=\"https:\/\/imageoptim.com\">ImageOptim<\/a> before using it. Monotonous repetitive tasks are fertile ground for computerization, so let's computerize it.<\/p>\n<p><!--more--><\/p>\n<h3>The Desktop is my staging area<\/h3>\n<p>It's just how I work. Things I'm actively using go on the Desktop. I do whatever I'm doing with them, then move them away. I keep it pretty tidy. Images are one of the most common things that end up there. Perhaps it's <a href=\"https:\/\/css-tricks.com\/making-simple-image-resizingoptimizing-service-automator\/\">a screenshot that needs to get resized<\/a>, then optimized, then uploaded somewhere, then deleted. <\/p>\n<p>The Desktop is a convenient place, for me, for all that to happen. <\/p>\n<h3>Making any image on the Desktop <em>automatically<\/em> optimized<\/h3>\n<p>What if we didn't need to optimize images because any image that was on the Desktop was <em>automatically<\/em> optimized? That's what we're shooting for here. <\/p>\n<p>One way to approach this would be to set up a Grunt\/Gulp\/Webpack\/Whatever <code>watch<\/code> task to watch the Desktop. Then if an image file appears there, run an image optimization task. A lot of us probably already do this with the web projects we work on. This wouldn't be much different.<\/p>\n<p>Except... that we'd need to <code>gulp watch<\/code> (or whatever) from the command line every time we restarted. I bet there is some trickery to avoid that. Like putting the command into `~\/.bash_profile` or something. I didn't go down that road, though, because...<\/p>\n<h3>Enter Hazel<\/h3>\n<p>A number of recommendations from folks turned me onto <a href=\"https:\/\/www.noodlesoft.com\/\">Hazel<\/a>. It's basically a watch task for macOS, with a UI to set up all the stuff you want it to do. For example, you can watch your Downloads folder, and if the type of file is a Movie, you can automatically move it to the Movies folder. Cool.<\/p>\n<p>That makes what we want to do real easy. We watch the Desktop folder and if the kind of file is an Image, open it in ImageOptim. <\/p>\n<figure id=\"post-249661\" class=\"align-none media-249661\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/hazel.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/hazel.jpg 1200w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/hazel-300x235.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/hazel-768x601.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2017\/01\/hazel-1024x801.jpg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>See this image? The one right above? It was automatically optimized with Hazel and ImageOptim.<\/figcaption><\/figure>\n<h3>Simple, indeed<\/h3>\n<p>This is a pretty simple and obvious thing that I could have done years ago. That's why I'm blogging it, I suppose. It's a simple thing that has helped me a ton and might help you. Most importantly, I've <em>actually stuck with it<\/em>. Sometimes I try out some workflow optimization and it doesn't stick. This has.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>I&#8217;m forever trying to make my local image workflow easier. I work with images as part of blog posts, images as part of sites I&#8217;m working on, images headed to social media&#8230; images everywhere. Almost always headed to the web. If we&#8217;re taught one thing about images and the web, it&#8217;s that they should be [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":249666,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1007,1006],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249655"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249655"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249655\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/249666"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249655"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249655"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249655"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249663,"date":"2017-01-04T11:15:41","date_gmt":"2017-01-04T18:15:41","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249663"},"modified":"2017-01-04T11:15:41","modified_gmt":"2017-01-04T18:15:41","slug":"animation-design-systems","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/animation-design-systems\/","title":{"rendered":"Animation in Design Systems"},"content":{"rendered":"<p>Our own Sarah Drasner:<\/p>\n<blockquote><p>Unlike fonts, colors, and so on, we tend to add animation in as a last step, which leads to disorganized implementations that lack overall cohesion. If you asked a designer or developer if they would create a mockup or build a UI without knowing the fonts they were working with, they would dislike the idea. Not knowing the building blocks they\u2019re working with means that the design can fall apart or the development can break with something so fundamental left out at the start. Good animation works the same way.<\/p><\/blockquote>\n","protected":false},"excerpt":{"rendered":"<p>Our own Sarah Drasner: Unlike fonts, colors, and so on, we tend to add animation in as a last step, which leads to disorganized implementations that lack overall cohesion. If you asked a designer or developer if they would create a mockup or build a UI without knowing the fonts they were working with, they [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[612,1005],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249663"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249663"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249663\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249663"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249663"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249663"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249273,"date":"2017-01-03T12:46:47","date_gmt":"2017-01-03T19:46:47","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249273"},"modified":"2017-01-04T09:12:26","modified_gmt":"2017-01-04T16:12:26","slug":"2016-favorites","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/2016-favorites\/","title":{"rendered":"2016 Favorites"},"content":{"rendered":"<p>As the year closes, it's good to reflect on all of the things we as a community have built, contemplated, and contributed to. Here are some of the things we read or watched that we enjoyed and think were important in 2016.<\/p>\n<p><!--more--><\/p>\n<h3 id=\"sarah-picks-2016\">Sarah's Picks<\/h3>\n<h4>How Technology Hijacks People\u2019s Minds\u200a\u2014\u200afrom a Magician and Google\u2019s Design Ethicist<\/h4>\n<p><a href=\"https:\/\/medium.com\/swlh\/how-technology-hijacks-peoples-minds-from-a-magician-and-google-s-design-ethicist-56d62ef5edf3\">A really interesting read<\/a> that asks the question: Where does technology exploit our minds\u2019 weaknesses?<\/p>\n<h4>So You Want to Build A Generator<\/h4>\n<p>The creator of Tracery, an approachable story grammar for authoring Twitter bots and the like, <a href=\"http:\/\/galaxykate0.tumblr.com\/post\/139774965871\/so-you-want-to-build-a-generator\">talks frankly and hilariously<\/a> about creating generative code.<\/p>\n<h4>The Inner Workings of the Virtual DOM<\/h4>\n<p>Ever wondered how the Virtual DOM works? I sure have. <a href=\"https:\/\/medium.com\/@rajaraodv\/the-inner-workings-of-virtual-dom-666ee7ad47cf\">This well-researched post<\/a> has you covered.<\/p>\n<h4>Learning Functional Programming with JavaScript<\/h4>\n<p><a href=\"https:\/\/www.youtube.com\/watch?v=e-5obm1G_FY&t=500s\">A good starter watch<\/a> about functional programming, extremely well explained.<\/p>\n<h4>Why Net Neutrality Matters (And What You Can Do To Help)<\/h4>\n<p>Not really a technical article, but <a href=\"https:\/\/www.youtube.com\/watch?v=xjOxNiHUsZw&index=20&list=PLuKg-WhduhkksJoqkj9aJEnN7v0mx8yxC\">a funny and pretty important watch<\/a> if you build stuff for the webbernets.<\/p>\n<h4>Dumb ES6 Tricks<\/h4>\n<p>Some of these snippets are incredibly helpful, <a href=\"https:\/\/engineering.haus.com\/dumb-es6-tricks-53ecadd1b29f\">a good one to bookmark<\/a>.<\/p>\n<h4>Grid By Example<\/h4>\n<p>Rachel Andrew <a href=\"http:\/\/gridbyexample.com\/\">takes you through learning Grid<\/a> in installments, with great demos and examples.<\/p>\n<h4>On the Spectrum of Abstraction<\/h4>\n<p>Cheng-Lou, the creator of React-Motion, muses on one of the core principles of programming: <a href=\"https:\/\/www.youtube.com\/watch?v=mVVNJKv9esE\">degrees of abstraction<\/a>.<\/p>\n<h3 id=\"robin-picks-2016\">Robin's Picks<\/h3>\n<h4>We Need to Talk About Technical Debt<\/h4>\n<p>Harry Roberts describes the differences between <a href='https:\/\/24ways.org\/2016\/we-need-to-talk-about-technical-debt'>technical debt and bad code<\/a>. This post is helpful because sometimes it can be a struggle to prioritize which parts of the codebase requires our immediate attention.<\/p>\n<h4>Variable Fonts<\/h4>\n<p>Variable fonts are a relatively new technology which is effectively a new font format: it lets us use one web font and then stretch it into a bunch of different widths and sizes based on parameters within the font. So if you need a bold weight you don\u2019t need to add a new typeface, it all comes bundled together. Roel Nieskens wrote about <a href=\"http:\/\/typographica.org\/on-typography\/variable-fonts\/\">the future of web type<\/a> for Typographica and he details the who\/what\/why succinctly.<\/p>\n<p>This is a feature which is going to make a series of nifty improvements to typography, web performance and design in the very near future.<\/p>\n<h4>My Increasing Wariness of Dogmatism<\/h4>\n<p>Chris wrote about his <a href=\"https:\/\/css-tricks.com\/increasing-wariness-dogmatism\/\">increasing wariness of dogmatism<\/a>:<\/p>\n<blockquote><p>It's certainly wordier to avoid dogma when you're trying to make a point. But it's more honest. It's more clear. It's showing empathy for people out there doing things different. It makes it easier for others to empathize with you.<\/p><\/blockquote>\n<p>Sometimes a snarky, know-it-all tone just isn\u2019t helpful or constructive and in that post Chris perfectly describes the general culture that can be found in the tech industry at large.<\/p>\n<h4>GT America<\/h4>\n<p>The GT America type family is one of our favorite releases of the year but <a href=\"http:\/\/gt-america.com\">the website<\/a> that shows off all of the neat features and styles is a delightful piece of design.<\/p>\n<h4>Figma<\/h4>\n<p>This year <a href=\"http:\/\/figma.com\">Figma<\/a> started to roll out of public beta and although it\u2019s missing some crucial features it has a certain <em>hyperlinkability<\/em> \u2014 the way in which you can copy a simple URL and direct other folks to what you\u2019re working on \u2014 and that\u2019s far more important for working on large teams of engineers and designers.<\/p>\n<h3 id=\"chris-picks-2016\">Chris' Picks<\/h3>\n<h4>A Comprehensive Guide to Font Loading Strategies<\/h4>\n<p>I'm so so glad Zach <a href=\"https:\/\/www.zachleat.com\/web\/comprehensive-webfonts\/\">put this together<\/a> this year. Loading fonts in a performant and responsible way is (sadly, I think) quite tricky. It's nice to have a distilled guide to reference that clearly lays out the pros and cons, and most importantly, gives you working reduced test case version of each.<\/p>\n<h4>Front End Center<\/h4>\n<p>I think Glen Maddern has a real knack for teaching through video. I'm glad he's <a href=\"https:\/\/frontend.center\/\">launched a thing<\/a> that has both free and paid videos. Just like <a href=\"http:\/\/wesbos.com\/courses\/\">Wes Bos courses<\/a>. I like to see the small-guy entrepreneur do well with tech education.<\/p>\n<h4>Firewatch<\/h4>\n<p><a href=\"http:\/\/www.firewatchgame.com\/\">Gosh that was fun.<\/a> It got me into video games again for a quick minute.<\/p>\n<h4>Leveling Up with React<\/h4>\n<p>Brad Westfall's 3-part series (<a href=\"https:\/\/css-tricks.com\/learning-react-router\/\">starting here<\/a>) did a fantastic job of going beyond the \"Hello, World!\" stuff and getting right into practical, real-world site creation with React and Redux. It went a long way in my understanding.<\/p>\n<h4>I Left My System Fonts in San Francisco<\/h4>\n<p>System Fonts were like <em>a thing<\/em> this year. Craig Hockenberry perhaps <a href=\"http:\/\/furbo.org\/2015\/07\/09\/i-left-my-system-fonts-in-san-francisco\/\">kicked it off<\/a> in 2015, but this was the year it became a widely popular choice.<\/p>\n<h4>Why I believe GraphQL will come to replace REST<\/h4>\n<p>The list of the hottest web tech of year, as it seemed to me, was: React, Redux, Webpack, SVG, Vue, Babel, PostCSS, and <a href=\"https:\/\/dev.to\/reactiveconf\/why-i-believe-graphql-will-come-to-replace-rest\">GraphQL.<\/a> <a href=\"http:\/\/elm-lang.org\/\">Elm<\/a> is maybe a runner up.<\/p>\n<h4>Seth's Blog<\/h4>\n<p>I still love <a href=\"http:\/\/sethgodin.typepad.com\/\">reading Seth Godin's blog<\/a>. Dude writes every single day and it's usually short, sweet, and insightful. I say \"still\" because he's been blogging <em>since 2002<\/em>. <\/p>\n<h4>Fluid Type<\/h4>\n<p>I think my favorite CSS innovation this year was fluid type. This was another of those things that was kinda <a href=\"https:\/\/madebymike.com.au\/writing\/fluid-type-calc-examples\/\">kicked off<\/a> (by Mike Riethmuller) in 2015 but blew up a lot bigger in 2016. As in, Mike winning best of show at CSS Dev Conf explaining it, \"<a href=\"http:\/\/blog.typekit.com\/2016\/08\/17\/flexible-typography-with-css-locks\/\">CSS locks<\/a>\", etc.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>As the year closes, it&#8217;s good to reflect on all of the things we as a community have built, contemplated, and contributed to. Here are some of the things we read or watched that we enjoyed and think were important in 2016.<\/p>\n","protected":false},"author":7699,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249273"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/7699"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249273"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249273\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249273"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249273"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249273"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249609,"date":"2017-01-03T05:25:36","date_gmt":"2017-01-03T12:25:36","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249609"},"modified":"2017-01-03T05:25:36","modified_gmt":"2017-01-03T12:25:36","slug":"indie-microblogging-owning-short-form-writing","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/indie-microblogging-owning-short-form-writing\/","title":{"rendered":"Indie Microblogging: owning your short-form writing"},"content":{"rendered":"<p>Manton Reece has a Kickstarter for a new kind of social network and a book, both of which aim to encourage folks to write independently again:<\/p>\n<blockquote>\n<p>In the earlier days of the web, we always published to our own web site. If you weren\u2019t happy with your web host, or they went out of business, you could move your files and your domain name, and nothing would break.<\/p>\n<p>Today, most writing instead goes into a small number of centralized social networking sites, where you can\u2019t move your content, advertisements and fake news are everywhere, and if one of these sites fails, your content disappears from the internet. Too many sites have gone away and taken our posts and photos with them.<\/p>\n<\/blockquote>\n","protected":false},"excerpt":{"rendered":"<p>Manton Reece has a Kickstarter for a new kind of social network and a book, both of which aim to encourage folks to write independently again: In the earlier days of the web, we always published to our own web site. If you weren\u2019t happy with your web host, or they went out of business, [&hellip;]<\/p>\n","protected":false},"author":223806,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[1002,1003],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249609"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/223806"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249609"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249609\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249609"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249609"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249609"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249357,"date":"2017-01-02T08:43:25","date_gmt":"2017-01-02T15:43:25","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249357"},"modified":"2017-01-05T07:43:08","modified_gmt":"2017-01-05T14:43:08","slug":"thank-2016-edition","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/thank-2016-edition\/","title":{"rendered":"Thank You (2016 Edition)"},"content":{"rendered":"<p>Another year in the bag! As we do <a href=\"https:\/\/css-tricks.com\/tag\/thank-you\/\">every year<\/a>, I'd like to look back at the year by-the-numbers and see how we did. It's also an opportunity to say how grateful I am to you all. All things considered, the web design and development community is a pretty great one. Lots of sharing and caring. I consistently enjoy working on this site and being a part of the sub-community that happens here.<\/p>\n<p><!--more--><\/p>\n<figure id=\"post-249359\" class=\"align-none media-249359\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/thanks-2016.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/thanks-2016.jpg 1600w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/thanks-2016-300x200.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/thanks-2016-768x512.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/thanks-2016-1024x683.jpg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<h3>Statistics<\/h3>\n<p>There were <strong class=\"fancy-num\">77<\/strong> million pageviews this year, up from 73 last year, making it an all-time record breaking traffic year again. The other numbers that Google Analytics coughs up are Sessions (<strong class=\"fancy-num\">56<\/strong> million, up from 51 million) and Users (steady at <strong class=\"fancy-num\">21<\/strong> million). No significant peaks throughout the year. Steady as she goes.<\/p>\n<p>We published <strong class=\"fancy-num\">442<\/strong> posts and <strong class=\"fancy-num\">43<\/strong> pages (i.e. snippets\/videos\/almanac entries). I like that pace. We're publishing content that has a pretty good shelf-life <em>and<\/em> it feels like we get to cover industry news. That's up from publishing 378 posts in 2015 and 278 in 2014. <\/p>\n<p>We don't have a great way of figuring out what the most popular posts <em>of this year<\/em> were. If we put the year in the URL, that kind of filtering would be easy, but we don't. The top five most trafficked posts of the year (any publishing date) were <a href=\"https:\/\/css-tricks.com\/snippets\/css\/a-guide-to-flexbox\/\">the flexbox guide<\/a>, <a href=\"https:\/\/css-tricks.com\/perfect-full-page-background-image\/\">full page background images<\/a>, media queries reference, <a href=\"https:\/\/css-tricks.com\/centering-css-complete-guide\/\">the guide to centering<\/a>, and <a href=\"https:\/\/css-tricks.com\/using-svg\/\">using SVG<\/a>. None of which were published this year, but of course that's a bit slanted since posts published the year didn't have a full year to get that traffic. The flexbox guide is actually our #1 most visited page, beating out the homepage by a decent margin. <\/p>\n<p>Of people that use the search form we offer directly on the site (ranges from about <strong class=\"fancy-num\">700-1800<\/strong> searches a day), the two most popular search terms are \"flexbox\" and \"svg\".<\/p>\n<p>There is somewhat of a \"long tail\" effect. It's not an enormously fat tail, but it's there. If you take the total traffic to the 100 most visited pages, that only accounts for 33 million of the 78 million pageviews (<strong class=\"fancy-num\">43.47%<\/strong>).<\/p>\n<p>Our traffic, looked at geographically, is long-tail-esque as well. The United States is still the top country, but down from 24% to <strong class=\"fancy-num\">23%<\/strong>. India is up to <strong class=\"fancy-num\">12%<\/strong> from 11%. UK down to <strong class=\"fancy-num\">6%<\/strong> from 7%. If you look at the top 10 countries combined, it's only about <strong class=\"fancy-num\">half<\/strong> of the traffic.<\/p>\n<p>Google is good to us. Organic web search results in <strong class=\"fancy-num\">87.75%<\/strong> of our traffic. Google alone is <strong class=\"fancy-num\">86.40%<\/strong>, Bing at <strong class=\"fancy-num\">0.82%<\/strong>. DuckDuckGo is at <strong class=\"fancy-num\">0.5%<\/strong>, beating Yahoo at <strong class=\"fancy-num\">0.3%<\/strong>. The top five leading non-search referral traffic sources are StackOverflow, Twitter, Feedly, Facebook and Reddit. <\/p>\n<p>The mobile web trend continues to swerve around CSS-Tricks. Less than <strong class=\"fancy-num\">5%<\/strong> of traffic comes from non-desktop devices. As Google Analytics breaks it down: <strong class=\"fancy-num\">3.9%<\/strong> mobile and <strong class=\"fancy-num\">0.74%<\/strong> tablet.<\/p>\n<p>Forums activity is down with <strong class=\"fancy-num\">1,640<\/strong> new topics this year from 2,440 last year and 4,020 in 2014. <strong class=\"fancy-num\">4,861<\/strong> replies to those topics, which is <strong class=\"fancy-num\">a quarter<\/strong> of the 20,120 replies posted in 2014. <\/p>\n<p><strong class=\"fancy-num\">5,185<\/strong> comments on the blog a drop from the 5,864 last year, but not as drastic a drop as the forums. <\/p>\n<p>We received <strong class=\"fancy-num\">1,372<\/strong> messages through our contact form, down from 1,621 last year. 18,848 total!<\/p>\n<p>Overall, while web traffic is up, engagement that happens <em>directly on the site<\/em> is down. As we can see in social media numbers, engagement elsewhere is up. We even have <strong class=\"fancy-num\">32,174<\/strong> subscribers on YouTube, which we hardly ever link to. This is the first year we've tracked that number, so we'll see where that goes next year.<\/p>\n<p>Just a few weeks ago we crossed over <strong class=\"fancy-num\">300K<\/strong> followers on <a href=\"https:\/\/twitter.com\/real_css_tricks\">our Twitter account<\/a>. That's up <strong class=\"fancy-num\">50,000<\/strong> from last year, which is amazing, but actually significantly slowed growth as we gained 90,000 in 2015. <strong class=\"fancy-num\">68K<\/strong> likes on Facebook, up from 59K last year.<\/p>\n<p>Another milestone was the re-launch of our newsletter (<a href=\"https:\/\/css-tricks.com\/subscription-options\/\">subscription page<\/a>). For years we sent out a weekly, but it was auto-generated from the RSS feed. Now it is custom written and much more interesting. There is even content in there that <em>only<\/em> goes into the newsletter. We started it nearly from the ground up, starting at 13K subscribers in February and ending the year at <strong class=\"fancy-num\">21K<\/strong> subscribers.<\/p>\n<p>The Lodge is soon to be a thing of the past on CSS-Tricks. All those videos will remain, but we'll kind of roll them into the Video Screencasts area. I guess that's a hint enough: a redesign is coming! <\/p>\n<h3>Goal Review<\/h3>\n<blockquote><p>Develop new and strong reference material for the CSS-Tricks community.<\/p><\/blockquote>\n<p>I'll give us a B- on that. My thinking at the time was that we need to publish more content like our \"complete guides\", because those have so much value. One of those can be worth 100 or more other random blog posts. We did some of that, which I'm happy about. Perhaps not as much as I was envisioning, but my thinking on it has also changed a bit. Any given blog post is building toward a more comprehensive set of information on that subject. Perhaps that culminates in a \"complete guide\" at some point, or can be assembled into a valuable set of posts (see goals), or informs more posts on the subject. Our posts tend to have pretty good long-term value anyway, so keeping a steady publishing schedule of that kind of content is pretty great.<\/p>\n<blockquote><p>More focus on the developing \"the voice\" of CSS-Tricks.<\/p><\/blockquote>\n<p>I'll give us an A- on that. I'm very happy with how that turned out this year. I wrote it down as a goal, because we have more humans writing things for CSS-Tricks than ever before. This year had the most guest posts as we've ever had in a year and the highest number of staff writers. <\/p>\n<p>Left completely unchecked, I think the voice of the site would roam. I'd prefer that didn't happen. I'd prefer that everyday readers can expect a certain consistent spirit, even when the author changes. Through editing, I think we did pretty well there. It is even <a href=\"https:\/\/css-tricks.com\/guest-posting\/#article-header-id-2\">codified now<\/a>:<\/p>\n<blockquote><p>Friendly. Authoritative. Welcoming. We're all in this together. Flexible (non-dogmatic about ideas). Thankful.<\/p><\/blockquote>\n<h3>New Goals<\/h3>\n<ul>\n<li><strong>Double newsletter subscribers.<\/strong> Seems doable since newsletters are pretty popular right now and ours is hopefully actually interesting. It's a way you can keep up with the site and industry without much effort, which it seems like there are plenty of folks interested in doing that. That's only 21K more folks, and since we have passed 300K Twitter followers, we gotta be able to make that happen.<\/li>\n<li><strong>More pairing videos.<\/strong> This will be harder to pull off since I'm traveling quite a lot this year and it's hard to shoot video on the road. But I think it's worth it. Two people talking through code together is so much fun and hopefully more engaging to watch than a solo video.<\/li>\n<li><strong>Maintain a mostly-daily publishing schedule.<\/strong> We've done it the last few years, so I hope we can keep it up. Sometimes it feels scary when there is a drought of news or ideas don't seem to be flowing. But we have a pretty good idea board on Trello, plenty of staff, and a decent amount of guest-posting interest, I think we can do it.<\/li>\n<li><strong>Assemble content in more useful ways.<\/strong> This is my favorite goal. I think in the coming year we can leverage our archives of posts in better ways than we ever have.<\/li>\n<\/ul>\n<h3>Wrap Up<\/h3>\n<p>Happy new year! Thanks to all y'all for sticking around another year, making this place a community <em>and<\/em> a sustainable business.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Another year in the bag! As we do every year, I&#8217;d like to look back at the year by-the-numbers and see how we did. It&#8217;s also an opportunity to say how grateful I am to you all. All things considered, the web design and development community is a pretty great one. Lots of sharing and [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":249359,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[556],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249357"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249357"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249357\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/249359"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249357"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249357"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249357"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249439,"date":"2016-12-31T06:11:19","date_gmt":"2016-12-31T13:11:19","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249439"},"modified":"2016-12-31T06:11:19","modified_gmt":"2016-12-31T13:11:19","slug":"internet-killed-curly-quotes","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/internet-killed-curly-quotes\/","title":{"rendered":"Has the Internet Killed Curly Quotes?"},"content":{"rendered":"<p>Glenn Fleishman:<\/p>\n<blockquote><p>At an increasing number of publications, [curly quotes have] been ironed straight. This may stem from a lack of awareness on the part of website designers or from the difficulty in a content-management system (CMS) getting the curl direction correct every time. It may also be that curly quotes' time has come and gone.<\/p><\/blockquote>\n<p>I know it's highly uncool in this community to get quotes wrong and highly cool to remind people how to type them. I'm on the uncool side of the fence on this one. I go so far as to standardize on straight quotes on this site. I'm not worried about the encoding, but laziness is some part of it. It's a weird key command (\u2325 [) especially for coders who are so used to straight quotes being required. Not to mention a <em>different<\/em> key command for the closing version (e.g. \u2325 \u21e7 ]), and both are even harder on any non-macOS system). Straight quotes of both varieties have a dedicated key. <\/p>\n<p>You know what <em>is<\/em> a cool-these-days sentiment? The fact that language evolves, including written language. I'm not anti-curly-quotes, I just don't care. If you'd like to write in straight quotes, but publish in curly quotes because <a href=\"http:\/\/daringfireball.net\/linked\/2016\/12\/29\/short-and-curlies\">\"algorithmically, it\u2019s a solved problem\"<\/a>, be my guest. Perhaps written English, on the web, has evolved to \"whatever, either way\". Oooooo look at that period <em>outside<\/em> the straight quotes. I'm a loner, Dottie. A rebel. <\/p>\n","protected":false},"excerpt":{"rendered":"<p>Glenn Fleishman: At an increasing number of publications, [curly quotes have] been ironed straight. This may stem from a lack of awareness on the part of website designers or from the difficulty in a content-management system (CMS) getting the curl direction correct every time. It may also be that curly quotes&#8217; time has come and [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[998,587],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249439"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249439"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249439\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249439"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249439"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249439"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249403,"date":"2016-12-30T06:25:58","date_gmt":"2016-12-30T13:25:58","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249403"},"modified":"2017-01-05T07:39:37","modified_gmt":"2017-01-05T14:39:37","slug":"designing-show-scroll-bars","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/designing-show-scroll-bars\/","title":{"rendered":"Designing for &#8220;Show scroll bars&#8221;"},"content":{"rendered":"<p>In macOS, users have the ability to set when they want to see scrollbars in windows. This affects all windows in the operating system, including in web browsers. They have three choices:<\/p>\n<ul>\n<li>Automatically based on mouse or trackpad<\/li>\n<li>When scrolling<\/li>\n<li>Always<\/li>\n<\/ul>\n<p>Which means you are either in a state where you see them all the time, or a state where you only see them once scrolling has been started through some other means. <\/p>\n<p><!--more--><\/p>\n<figure id=\"post-249488\" class=\"align-none media-249488\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/general-settings.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/general-settings.jpg 668w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/general-settings-300x131.jpg 300w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>The <strong>Always<\/strong> option is pretty straightforward. If the window needs scrolling, the scroll bar will be there. If not, it won't be. If the scrollbar is there, it squishes the page inward to make room for it. Here's an example where a page goes from needing scrolling to not needing it with the <strong>Always<\/strong> setting on:<\/p>\n<figure id=\"post-249482\" class=\"align-none media-249482\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/push-in.gif\" alt=\"\" \/><figcaption>The scrollbar appears and pushes the page narrower to fit.<\/figcaption><\/figure>\n<p>This is different than the <strong>When scrolling<\/strong> option, in which the scrollbar <strong>overlaps<\/strong> the content. Here's an example of that:<\/p>\n<figure id=\"post-249483\" class=\"align-none media-249483\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/overlap.gif\" alt=\"\" \/><figcaption>A mousewheel scroll triggers the scroll bar to appear. Mousing over the bar expands the width.<\/figcaption><\/figure>\n<p>These screenshots are the reason I was thinking about this at all. We had a user write in at CodePen because they couldn't click that notifications icon. Before I added some extra space to prevent that overlapping, some coverage was possible:<\/p>\n<figure id=\"post-249484\" class=\"align-none media-249484\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/Screen-Shot-2016-09-09-at-3.36.00-PM.png\" alt=\"\" \/><\/figure>\n<p>Exacerbated by the fact that this user would zoom out, making the target even smaller, to the point it would be totally consumed:<\/p>\n<figure id=\"post-249485\" class=\"align-none media-249485\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/total-coverage.gif\" alt=\"\" \/><\/figure>\n<p>This is only really a consideration with clickable things hugging the right side of the page. If it's ever a problem for you, adding some padding over there is likely good enough. Or make the clickable area not confined to that narrow of a target. Here in the WordPress admin, some overlap is possible, but the clickable area is big enough that it doesn't matter:<\/p>\n<figure id=\"post-249486\" class=\"align-none media-249486\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/large-click-area.gif\" alt=\"\" \/><\/figure>\n","protected":false},"excerpt":{"rendered":"<p>In macOS, users have the ability to set when they want to see scrollbars in windows. This affects all windows in the operating system, including in web browsers. They have three choices: Automatically based on mouse or trackpad When scrolling Always Which means you are either in a state where you see them all the [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":249488,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[1011,1012],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249403"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249403"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249403\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/249488"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249403"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249403"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249403"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249401,"date":"2016-12-30T05:54:26","date_gmt":"2016-12-30T12:54:26","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249401"},"modified":"2017-02-26T10:24:26","modified_gmt":"2017-02-26T17:24:26","slug":"display-flow-root","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/display-flow-root\/","title":{"rendered":"display: flow-root;"},"content":{"rendered":"<p>News to me! There is <a href=\"https:\/\/drafts.csswg.org\/css-display-3\/#valdef-display-flow-root\">a spec for it<\/a> and Firefox says they intend to ship it. It's just like <code>display: block;<\/code> only:<\/p>\n<blockquote><p>It always establishes a new block formatting context for its contents.<\/p><\/blockquote>\n<pre rel=\"CSS\"><code class=\"language-css\">.group {\r\n  display: flow-root;\r\n}<\/code><\/pre>\n<p>Meaning: you don't have to use <a href=\"https:\/\/css-tricks.com\/snippets\/css\/clear-fix\/\">clearfix<\/a> hacks. There is a bit more to it though. Fiona Chan has <a href=\"https:\/\/www.youtube.com\/watch?v=8YtQwv1cUVs\">a mini-talk<\/a> all about block formatting context. I think it affects <code>z-index<\/code> and <code>transforms<\/code> in some cases too. Anybody?<\/p>\n<p>I suspect Nicole Sullivan will approve. She's been writing and talking about new formatting contexts forever. In 2010 she even <a href=\"http:\/\/www.stubbornella.org\/content\/2010\/12\/09\/the-hacktastic-zoom-fix\/\">wrote<\/a>: <\/p>\n<blockquote>\n<p>I wish we had a simple property value pair that would do the same thing in standards-based browsers.<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.lastUnit {\r\n  formatting-context: new; \/* please! *\/\r\n}<\/code><\/pre>\n<\/blockquote>\n<p><a href=\"https:\/\/meiert.com\/en\/blog\/20161114\/no-clearfix\/\">Just using overflow<\/a> isn't a real solution. It hides <code>box-shadow<\/code>, for one thing.<\/p>\n<h3>Also See<\/h3>\n<ul>\n<li>Rachel Andrew: <a href=\"https:\/\/rachelandrew.co.uk\/archives\/2017\/01\/24\/the-end-of-the-clearfix-hack\/\">The End of the Clearfix Hack?<\/a><\/li>\n<li>Thierry Koblentz: <a href=\"http:\/\/codepen.io\/thierry\/pen\/GrvWNM\">display: flow-root versus clearfix<\/a><\/li>\n<\/ul>\n","protected":false},"excerpt":{"rendered":"<p>News to me! There is a spec for it and Firefox says they intend to ship it. It&#8217;s just like display: block; only: It always establishes a new block formatting context for its contents. .group { display: flow-root; } Meaning: you don&#8217;t have to use clearfix hacks. There is a bit more to it though. [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[996,995,1000],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249401"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249401"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249401\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249401"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249401"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249401"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249348,"date":"2016-12-29T06:37:08","date_gmt":"2016-12-29T13:37:08","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249348"},"modified":"2016-12-29T06:37:08","modified_gmt":"2016-12-29T13:37:08","slug":"develop-locally-use-images-production","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/develop-locally-use-images-production\/","title":{"rendered":"Develop Locally, Use Images from Production"},"content":{"rendered":"<p>Working on your website locally means having the files that make your website tick right there on your computer. It's common those files live in a version control repository. You work on them, and push them up to the repo when you are ready. Other people work too, and you pull their changes back down. <\/p>\n<p>What might <em>not<\/em> be in that repo, are images files from the CMS. WordPress is a classic example of this. When you upload an image in WordPress, it does a whole song and dance. It gets uploaded to the `uploads` folder, multiple versions are created, even the database is updated and attachment meta data happens. What <em>doesn't<\/em> happen is that a version control commit happens with all those files.<\/p>\n<p><!--more--><\/p>\n<p>There are ways to make sure you have those files. You could write a script to pull them down. You could manually FTP it once in a while. In WordPress land, there are plugins that help, like <a href=\"https:\/\/deliciousbrains.com\/wp-migrate-db-pro\/\">WP DB Migrate Pro<\/a>, which not only does the database but can move images as well. <\/p>\n<p>But you might not even <em>want<\/em> to deal with images. Perhaps:<\/p>\n<ul>\n<li>You don't want the images in your repo. Maybe the repo is just a theme folder and it makes sense to leave it that way.<\/li>\n<li>You have like 10 GB worth of images and it's impractical and unnecessary to move them around.<\/li>\n<\/ul>\n<p>I think that's totally legit. A publication-style site probably doesn't need every single image they've ever uploaded as part of their main repo.<\/p>\n<p>OK, enough explanation. You get it.<\/p>\n<p>Sean Lange talked about this exact thing in his 2013 article <a href=\"https:\/\/www.lullabot.com\/articles\/using-remote-image-files-when-you-develop-locally\">Using Remote Image Files When You Develop Locally<\/a>. His solution was to rewrite local URL's at the web server level to point to the production files:<\/p>\n<blockquote><p>I found my answer in Apache URL rewrite rules. When the Apache program handles incoming web page requests, rewrite rules allow it to change URLs matching certain patterns -- for example, they can turn requests for the 'files' directory on your local machine into requests for remote URLs on the production server.<\/p><\/blockquote>\n<p>Here's his Apache rewrite rules:<\/p>\n<pre rel=\"HTAccess\"><code>RewriteEngine on\r\n# Force image styles that have local files that exist to be generated.\r\nRewriteCond %{REQUEST_URI} ^\/sites\/([^\\\/]*)\/files\/styles\/[^\\\/]*\/public\/((.*))$\r\nRewriteCond %{DOCUMENT_ROOT}\/sites\/%1\/files\/%2 -f\r\nRewriteRule ^(.*)$ $1 [QSA,L]\r\n# Otherwise, send anything else that's in the files directory to the production server.\r\nRewriteCond %{REQUEST_URI} ^\/sites\/[^\\\/]*\/files\/.*$\r\nRewriteCond %{REQUEST_URI} !^\/sites\/[^\\\/]*\/files\/css\/.*$\r\nRewriteCond %{REQUEST_URI} !^\/sites\/[^\\\/]*\/files\/js\/.*$\r\nRewriteCond %{REQUEST_FILENAME} !-f\r\nRewriteCond %{REQUEST_FILENAME} !-d\r\nRewriteRule ^(.*)$ http:\/\/www.example.com\/$1 [QSA,L]<\/code><\/pre>\n<p>He's working with Drupal through MAMP, but so long as you're using Apache locally it's all just a variation on the same idea. Match URL's that point to the assets you want to target, rewrite them to the live site.<\/p>\n<p>He was able to paste those rules into a little box in MAMP that handles it. I'm running WordPress locally through a little Docker setup, so I went for just editing my `.htaccess` file directly, and kinda simplified it for my needs:<\/p>\n<pre rel=\"HTAccess\"><code>RewriteCond %{REQUEST_URI} ^\/wp-content\/uploads\/[^\\\/]*\/.*$\r\nRewriteRule ^(.*)$ https:\/\/css-tricks.com\/$1 [QSA,L]<\/code><\/pre>\n<p>Works great for me! Here's a visual explanation:<\/p>\n<figure id=\"post-249416\" class=\"align-none media-249416\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/rewrite.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/rewrite.jpg 1567w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/rewrite-300x145.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/rewrite-768x370.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/rewrite-1024x493.jpg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n","protected":false},"excerpt":{"rendered":"<p>Working on your website locally means having the files that make your website tick right there on your computer. It&#8217;s common those files live in a version control repository. You work on them, and push them up to the repo when you are ready. Other people work too, and you pull their changes back down. [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[997,585,989,677,264],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249348"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249348"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249348\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249348"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249348"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249348"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249174,"date":"2016-12-28T07:31:24","date_gmt":"2016-12-28T14:31:24","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249174"},"modified":"2017-01-05T07:40:28","modified_gmt":"2017-01-05T14:40:28","slug":"review-new-computer-equipment","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/review-new-computer-equipment\/","title":{"rendered":"Review of My New Computer Equipment"},"content":{"rendered":"<p>I recently changed out just about all of my computer equipment. Nothing dramatic like <a href=\"http:\/\/daverupert.com\/2015\/04\/davegoeswindows\/\">#davegoeswindows<\/a>, but all new gear within my relative comfort-zone. It was the first time since late 2013, and now it's going on 2017, so I figured it was time. <\/p>\n<p>No surprise: I'm an Apple guy. I have been for a couple of decades now. I was pretty excited about the new MacBook Pro's and ordered one within a few days of them coming out. Coinciding with all that, I've also changed out my mouse, keyboard, and monitor. None of those accessories are Apple. Partly because they've stopped making them (monitors), or the ones they do make kind of suck (mice, keyboards).<\/p>\n<p>I figured I'd review my new setup since it's on my mind.<\/p>\n<p><!--more--><\/p>\n<h3>15-inch MacBook Pro<\/h3>\n<figure id=\"post-249389\" class=\"align-none media-249389\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/macbookpro-15-touchbar.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/macbookpro-15-touchbar.jpg 1400w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/macbookpro-15-touchbar-300x188.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/macbookpro-15-touchbar-768x481.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/macbookpro-15-touchbar-1024x641.jpg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Like I said, I hadn't upgraded in three years. I'd like to get another three years or more out of this one, so I went kinda all-out on the specs. <\/p>\n<ul>\n<li>Upgraded to 2.9GHz quad-core Intel Core i7 processor<\/li>\n<li>Upgraded to 2TB PCIe-based SSD<\/li>\n<li>Upgraded to Radeon Pro 460 with 4GB memory<\/li>\n<\/ul>\n<p>I wanted to <strong>feel something<\/strong>, dammit.<\/p>\n<p>I don't have a whole lot to say about it. It's fine. It doesn't feel all that different from my 2013 MacBook Pro. <\/p>\n<p>It doesn't feel all that much faster. It doesn't start up any quicker and has a weird quirk where the screen gets all distorted and then goes all black except for the start up progress bar. It doesn't seem to last on a charge any longer. Transferring data to it from a Time Capsule was rough, as it did about 90% of it over 12 hours before failing and being unable to continue. It's worst characteristic is that it freezes with more frequency than my last laptop.<\/p>\n<p>I think the Touch Bar is fun, but it doesn't affect my productivity or do anything mind-blowingly useful. I do enjoy Touch ID instead of having to type a password sometimes. I've had the Touch Bar freeze on me a few times, though, which hurt productivity, because as expected, it's a little annoying not having that escape key. Seems to me the Touch Bar could still be there even if there was a hardware escape key on the upper left. Or at least allows some way to restart the Touch Bar. Ascii shrug.<\/p>\n<h3>LG Electronics WQHD IPS Curved 34-Inch LED-Lit Monitor<\/h3>\n<figure id=\"post-249390\" class=\"align-none media-249390\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/medium01.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/medium01.jpg 940w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/medium01-300x198.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/medium01-768x507.jpg 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>My monitor was actually the first thing I replaced. My Cinema Display was exhibiting bad behavior. It would just go black randomly, and require lots of fidgeting with the connector to get it to come back, which became untenable.<\/p>\n<p>I went with one of those super wide 21:9 34\" LG monitors. Specifically: <a href=\"http:\/\/amzn.to\/2ih3DCI\">LG Electronics WQHD IPS Curved 34-Inch LED-Lit Monitor (34UC97-S)<\/a>. At the time I bought it, I just found one for sale and bought it, not realizing LG sold <em>19 different versions of it<\/em>. &#x1f633;. It works of course, but I still don't know if I bought the best one for me.  <\/p>\n<p>Thoughts:<\/p>\n<ul>\n<li>I got a curved one, which feels like a cheezy gimmick. I'd prefer a non-curved one, especially considering they are less expensive.<\/li>\n<li>It's far less vibrant and bright than the Cinema Display was, or the laptop screen. It feels a bit dingy.<\/li>\n<li>I don't like having hardware controls for adjusting the look of the screen. I can change a single setting, like the \"Color Temp\", and have it be <em>drastically<\/em> different. It makes me think there is no possible way I have all these settings exactly correct, especially in conjunction with the color profiles settable through System Preferences.<\/li>\n<li>It's a 1x display. I think I'm ready to leave those days behind.<\/li>\n<li>It has built-in speakers (not very good), which at least don't require any additional cables since it connects via HDMI.<\/li>\n<li>The new laptop, of course, doesn't have HDMI, so it actually connects via dongle. It's an obnoxious dongle too, the <a href=\"http:\/\/www.apple.com\/shop\/product\/MJ1K2AM\/A\/usb-c-digital-av-multiport-adapter\">\"Multiport Adapter\"<\/a>, which is the only one Apple sells that has HDMI on it. I figured that was the one to trust, but in a not-so-shocking twist, I gave a presentation through a projector the other day that was also HDMI, and the Apple dongle didn't work with it. They happened to have a cheap-looking third-party USB-C to HDMI dongle, and it worked great.<\/li>\n<li>It does not have a camera or microphone. So, because I need that for video conferencing, I had to get a <a href=\"http:\/\/amzn.to\/2i7b5jF\">Logitech HD Pro Webcam C920<\/a>. That's USB, so it has to go into my USB 3.0 hub. I was looking forward to this, thinking a highly-rated third-party add-on camera would be an upgrade. Sadly I don't think it's as nice of quality as the old built-in iSight.<\/li>\n<li>I get that \"banding\" effect fairly often. Apparently, these super wide monitors are essentially two monitors seamlessly aligned next to each other. Although seamlessly is the wrong word, as you can see the seam if you, for example, put a web browser right in the middle and scroll down. You'll see one side scrolling faster than the other. It doesn't happen all the time, and unplugging-and-plugging-back-in seems to solve it most of the time.<\/li>\n<li>The 21:9 size is pretty nice. I could see using one even a bit bigger. At first, I was leaving my laptop open as well, but I've stopped doing that. I think I prefer just looking straight at one monitor rather than kinda sideways at two. Plus, it might just be in my head, but I feel like I get better performance generally with the laptop closed. I do wish I could just plug in the monitor into a closed laptop and have it wake up, but I find I have to open the laptop to wake up, then close it again once the monitor has kicked on.<\/li>\n<li>The huge weird size of it does make screen sharing with other folks a little awkward. Fortunately, most screen sharing software allows you to just share one window.<\/li>\n<\/ul>\n<h3>Microsoft Surface Ergonomic Keyboard<\/h3>\n<p>I was almost more excited about the Microsoft Surface Ergonomic Keyboard (<a href=\"http:\/\/amzn.to\/2ibdUOC\">Amazon.com<\/a>, <a href=\"https:\/\/www.microsoftstore.com\/store\/msusa\/en_US\/pdp\/Surface-Ergonomic-Keyboard\/productID.5074014300\">Microsoft.com<\/a>) than I was about the laptop. It's an evolution of the <a href=\"http:\/\/amzn.to\/2iAPzod\">Microsoft Sculpt Ergonomic Keyboard<\/a> (which only had a detached number pad and was wireless-only), which was an evolution of the <a href=\"https:\/\/www.amazon.com\/Microsoft-Natural-Ergonomic-Keyboard-Business\/dp\/B004SUIM4E\/ref=sr_1_1?s=electronics&ie=UTF8&qid=1482868419&sr=1-1&keywords=Microsoft+Natural+Ergonomic+Keyboard+4000\">Microsoft Natural Ergonomic Keyboard 4000<\/a> (bulky, wired-only). <\/p>\n<p>I mean just look at this beauty:<\/p>\n<figure id=\"post-249364\" class=\"align-none media-249364\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/en-INTL-PDP0-Surface-Cosmos-3RA-00022-F2-desktop.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/en-INTL-PDP0-Surface-Cosmos-3RA-00022-F2-desktop.jpg 800w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/en-INTL-PDP0-Surface-Cosmos-3RA-00022-F2-desktop-300x150.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/en-INTL-PDP0-Surface-Cosmos-3RA-00022-F2-desktop-768x384.jpg 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>The handrest looks like it fabric in the photos. It's not really fabric. It's kind of a foamy rubber. It's still very nice, and probably good that it's not actually fabric.<\/figcaption><\/figure>\n<p>It even had an Apple-like hype video:<\/p>\n<p><iframe width=\"560\" height=\"315\" src=\"https:\/\/www.youtube.com\/embed\/LgEdRK9cSCU\" frameborder=\"0\" allowfullscreen><\/iframe><\/p>\n<p>It's straight up beautiful. The nicest looking keyboard I've ever owned. It's just as nice in real life. It's comfortable. They keys are low-profile but not too-low-profile, and nice springy. The shape and feel is really nice. <\/p>\n<p>Thoughts:<\/p>\n<ul>\n<li>I don't love that it is Bluetooth only. I have a theory that my body gives off Bluetooth obstructing rays. Bluetooth never works flawlessly for me, and this keyboard is no exception. Several times I've had to go through the whole pairing process again since the connection seemed entirely forgotten.<\/li>\n<li>When there is Bluetooth trouble, I also wonder about battery strength. It uses AAA batteries. It comes with \"alkaline\" batteries and claims up to 12 months of battery life. I had to replace them once, or at least I thought I had to because of connection trouble. I'm not entirely clear on what the best possible battery is for a device like this, so I bought the expensive lithium ones. They seem to be working, but maybe they are the cause of connection pains? There also seems to be no way to check the battery level.<\/li>\n<li>The most pronounced problem with they keyboard is that <strong>it falls asleep<\/strong>. If you leave it alone for even a few minutes, it loses active connection. You can't just start typing, as you'll lose whatever you type. You need to press a key, wait a few seconds, then start typing. It doesn't try to catch up with whatever you've started typing.<\/li>\n<li>I'm so damn torn. I'm trying to get over my dislike of Bluetooth because it sure is nice not having so many wires around. On the other hand, if they just sold a wired version of it, it would solve all these problems and be just about a perfect keyboard.<\/li>\n<li>Many reviews complain there is no backlighting. I don't care about that.<\/li>\n<\/ul>\n<p>I <em>miiiight<\/em> end up going back to the Microsoft Natural Ergonomic Keyboard 4000 just because it's wired and I get tired to smurfing around with wireless.<\/p>\n<h4>Key mapping<\/h4>\n<p>There aren't many third-party keyboards that are Mac-specific. They don't need to be because for the most part they work fine on Macs. But if want your keyboard to feel similar to the keyboard on the laptop itself, in regards to modifier key position, you'll need to remap them. Specifically, putting the command key next to the spacebar.<\/p>\n<p>Normally, you can do this right in System Settings:<\/p>\n<figure id=\"post-249366\" class=\"align-none media-249366\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/native-key-changing.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/native-key-changing.png 780w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/native-key-changing-300x267.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/native-key-changing-768x682.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>You can change the settings here normally, but that doesn't work on this keyboard.<\/figcaption><\/figure>\n<p>Like the caption says, this doesn't work with this keyboard. I hear this is just a \"Bluetooth keyboard\" thing, not specific to this keyboard. Still a bummer.<\/p>\n<p>Fortunately, <a href=\"https:\/\/github.com\/tekezo\/Karabiner-Elements\">Karabiner-Elements<\/a> handles the remapping just fine. <\/p>\n<figure id=\"post-249367\" class=\"align-none media-249367\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/karabiner.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/karabiner.png 914w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/karabiner-300x208.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/karabiner-768x533.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>I've heard serious warnings from friends about Karabiner (like: YOU WILL HAVE PROBLEMS WITH THIS), but so far so good for me. <\/p>\n<h3>Logitech MX Master Wireless Mouse<\/h3>\n<figure id=\"post-249397\" class=\"align-none media-249397\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/logitech-master-mx.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/logitech-master-mx.jpg 800w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/logitech-master-mx-300x258.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/logitech-master-mx-768x660.jpg 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>For a long time, I was a ball-mouse guy. I was totally in love with the <a href=\"http:\/\/amzn.to\/2i4mZuA\">Kensington Expert Trackball Mouse<\/a>. I forced myself to stop using it a few years ago. I was so attached to using it that anything else felt very awkward. It wasn't very practical to travel with, so if I opted not to bring it, I was in awkwardville until I got home. That was no good. For practicality, I switched to \"normal\" mice when at my desk, and went full-trackpad when traveling. The transition is complete, and now I'm all good with that.<\/p>\n<p>I've long chosen wired mice, because as I mentioned, I think my body gives off anti-Bluetooth rays. Some mice have little USB dongle things, which are better but are extremely easy to lose. <\/p>\n<p>My wired mouse, for years, was the <a href=\"http:\/\/amzn.to\/2i4AL03\">Logitech Corded Mouse (M500)<\/a>, which is a perfectly decent inexpensive mouse.<\/p>\n<p>I decided to go for the <a href=\"http:\/\/amzn.to\/2iAMIMb\">Logitech MX Master Wireless Mouse<\/a> though, because:<\/p>\n<ul>\n<li>My current wired mouse was acting up. It didn't seem to track or scroll very nicely anymore.<\/li>\n<li>The new keyboard is wireless, so I thought I'd take a crack at going full wireless.<\/li>\n<li>I figured I could go for a kind of \"premium\", well-reviewed mouse since I really wanted a mouse that would track and scroll smoothly.<\/li>\n<\/ul>\n<p>The verdict:<\/p>\n<ul>\n<li>It works either with Bluetooth or a dongle. I use the dongle because I trust it more, and it seems to be more reliable. I don't have the near the connectivity issues I do with the keyboard.<\/li>\n<li>I just leave the dongle in a USB 3.0 hub I'm still using. I wonder if I should get a better hub. This <a href=\"https:\/\/www.bourgedesign.com\/pre-order\">Arc Hub<\/a> looks nice.<\/li>\n<li>Sometimes it's super smooth, sometimes it all goes to crap. Tracking is choppy. Scrolling is choppy. It doesn't seem to be logical when it happens. I worry about the USB dongle: it's in a USB 3.0 Hub, which is connected via yet another dongle to the USB-C port. I wonder if that bottlenecks somehow.<\/li>\n<\/ul>\n<figure id=\"post-249373\" class=\"align-none media-249373\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/logitech-osx-configurations.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/logitech-osx-configurations.png 1034w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/logitech-osx-configurations-300x207.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/logitech-osx-configurations-768x530.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/logitech-osx-configurations-1024x707.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><figcaption>The software for configuring the mouse on macOS is pretty nice. I have mine customized to make good use of Spaces.<\/figcaption><\/figure>\n<p>It's tempting to go back to a corded mouse, but none are as well-reviewed as this one is and I already know the corded mouse I have isn't any better.<\/p>\n<h3>More Thoughts<\/h3>\n<ul>\n<li>I'm a little bummed that there isn't a single piece of computer equipment I'm currently using that I actually <em>really love<\/em>. Every single thing has problems. Fortunately, none of those problems are bad enough to hurt productivity too badly. Although as I say that, as I woke up this morning to publish this blog post, the laptop froze while plugging in the monitor. After restarting, the keyboard wouldn't connect until I jiggled the batteries, and mouse was choppy until I unplugged\/replugged the hub. \u2639\ufe0f. Update: froze everything again fiddling with some monitor settings.<\/li>\n<li>It's tempting to go back to a fully wired setup. I didn't mention this above, but I went for Bluetooth headphones as well, but I find myself using my wired ones more often because I'm afraid I'll be in the middle of a podcast or something and have them drop off because of my anti-Bluetooth rays (it happens). For the love of god, I just want smooth, fast accessories. I want them to work the instant I start using them and never fail. It's actually a little tempting to get rid of all the accessories and just use <em>only the laptop<\/em>.<\/li>\n<li>I wish Apple would make a monitor again. I really liked the Cinema Displays.<\/li>\n<li>It seems like Apple is really pushing the <a href=\"http:\/\/www.apple.com\/shop\/product\/HKN62LL\/A\/lg-ultrafine-5k-display\">LG UltraFine 5K Display<\/a>. It's about the same price as a Cinema Display was, at $974. It's USB-C, so not needing a dongle would be nice, plus it charges the laptop, so that frees up an additional port. Plus, it's a USB-C hub. Plus, it's got a built-in camera and mic. Most importantly, it looks like a huge and beautiful pixel-dense display. Crap I think I just talked myself into it. <a href=\"https:\/\/abookapart.com\/products\/practical-svg\">Buy my book<\/a>, lol.<\/li>\n<\/ul>\n","protected":false},"excerpt":{"rendered":"<p>I recently changed out just about all of my computer equipment. Nothing dramatic like #davegoeswindows, but all new gear within my relative comfort-zone. It was the first time since late 2013, and now it&#8217;s going on 2017, so I figured it was time. No surprise: I&#8217;m an Apple guy. I have been for a couple [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":249719,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[990,991,821,992],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249174"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249174"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249174\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/249719"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249174"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249174"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249174"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249381,"date":"2016-12-28T05:53:31","date_gmt":"2016-12-28T12:53:31","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249381"},"modified":"2016-12-28T05:53:31","modified_gmt":"2016-12-28T12:53:31","slug":"css-writing-modes","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/css-writing-modes\/","title":{"rendered":"CSS Writing Modes"},"content":{"rendered":"<p>We shared <a href=\"https:\/\/css-tricks.com\/css-writing-mode\/\">a little trick<\/a> not long ago about using the <a href=\"https:\/\/css-tricks.com\/almanac\/properties\/w\/writing-mode\/\">writing-mode<\/a> property to set a title vertically. While a useful trick, it's the tip of the iceberg on this property. Jen Simmons digs in and explains what's really going on. <\/p>\n<p>There is a certain way elements <em>flow<\/em> on websites. Without doing anything special, block elements push downward from top to bottom. Inline elements go from left to right. In writing-mode, that would be expressed by (the default) <code>horizontal-tb<\/code> (horizontal inline flow, \"top to bottom\" block flow). Different languages and cultures handle layout in other ways, so this property allows for control over that in a more comprehensive way than the <code>dir<\/code> attribute is capable of. For example, <code>vertical-rl<\/code> (vertical inline flow, \"right to left\" block flow).<\/p>\n","protected":false},"excerpt":{"rendered":"<p>We shared a little trick not long ago about using the writing-mode property to set a title vertically. While a useful trick, it&#8217;s the tip of the iceberg on this property. Jen Simmons digs in and explains what&#8217;s really going on. There is a certain way elements flow on websites. Without doing anything special, block [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[994,993],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249381"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249381"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249381\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249381"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249381"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249381"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":248841,"date":"2016-12-27T06:44:04","date_gmt":"2016-12-27T13:44:04","guid":{"rendered":"https:\/\/css-tricks.com\/?p=248841"},"modified":"2017-01-05T07:42:10","modified_gmt":"2017-01-05T14:42:10","slug":"reactive-audio-webvr","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/reactive-audio-webvr\/","title":{"rendered":"Reactive Audio WebVR"},"content":{"rendered":"<p>Virtual reality has become a thing again! All of the usual suspects are involved: HTC, Microsoft, Samsung, and Facebook, among others, are all peddling their respective devices. These predictable players shouldn\u2019t be having all the fun, though!<\/p>\n<p>You make websites. You know a bit of Javascript. You have a mobile device. You can have a slice of this virtual pie too! WebVR is here, and it\u2019s not that difficult to learn. If you already know the basics of <a href=\"https:\/\/threejs.org\/\">three.js<\/a>, you might be surprised at how simple it is to get it going. If you haven\u2019t ever used three.js, this will be a fun way to learn it.<\/p>\n<p><!--more--><\/p>\n<p>I\u2019ve been making websites for quite a while, but only in the last couple of years have I explored the use of front-end technologies for more than just websites. Having spent some time using tools such as canvas and three.js, my mind has been opened to the wonderful potential this side of the web can offer us as developers (and artists!).<\/p>\n<figure><video src=\"http:\/\/css-tricks.com\/videos\/ceremony.mp4\" controls><\/video><figcaption>Polyop - Ceremony. Music video created with three.js and WebVR controls<\/figcaption><\/figure>\n<p>I\u2019ve taken the path of making trippy visuals with Javascript and am now one-third of audio-visual techno act, Polyop, because of it. As part of a vinyl release, we\u2019ve created <a href=\"http:\/\/polyop.uk\/ceremony\/\">a 360 degree music video built with three.js<\/a> and webVR controls. I\u2019d thought I\u2019d share with you the basic concepts I picked up while developing it.<\/p>\n<h3>But I don\u2019t have those fancy goggles<\/h3>\n<p>There\u2019s no denying that not having the kit seems like a barrier to entry. However, you don\u2019t need any sort of extra hardware for most of this tutorial so you can still have fun moving your phone around exploring the 3D world you\u2019ll create.<\/p>\n<p>To play with the VR portion of this tutorial, you\u2019ll want some sort of VR Viewer. The cheapest way to do this is to buy a headset that turns your mobile phone into a VR headset, you simply slot it your phone in and away you go. These headsets range from a \u00a33 to \u00a350 so have a look around to see what best suits you and your budget. \u201cGoogle Cardboard\u201d is the term you\u2019ll hear about these types of devices.<\/p>\n<h3>What we\u2019ll be making<\/h3>\n<p><a href=\"http:\/\/funwithtriangles.net\/webvr-tutorial\/step3.html\">Here\u2019s a demo.<\/a> All the source code for the steps we\u2019ll be taking is available on GitHub too.<\/p>\n<p>If you\u2019re viewing on a mobile or tablet, you can look around by moving the device. If you\u2019re on a laptop, you have to click and drag. If you have a VR Viewer for your phone, there\u2019s an option to go into actual VR mode by clicking on the \u201cstart VR\u201d button.<\/p>\n<p>We\u2019ll tackle it in three parts:<\/p>\n<ol>\n<li><a href=\"#audio-vr-1-scene\">Make the three.js scene<\/a> (+ <a href=\"http:\/\/funwithtriangles.net\/webvr-tutorial\/step1.html\">demo<\/a>)<\/li>\n<li><a href=\"#audio-vr-2-virtual\">Add in VR Controls<\/a> (device motion) (+ <a href=\"http:\/\/funwithtriangles.net\/webvr-tutorial\/step2.html\">demo<\/a>)<\/li>\n<li><a href=\"#audio-vr-3-vr\">Apply the VR Effect<\/a> (stereoscopic picture) (+ <a href=\"http:\/\/funwithtriangles.net\/webvr-tutorial\/step3.html\">demo<\/a>)<\/li>\n<\/ol>\n<h3 id=\"audio-vr-1-scene\">Making the scene<\/h3>\n<p>Those who have some experience with three.js may want to skip this part and head straight for the VR stuff.<\/p>\n<p>Three.js has become the web dev\u2019s favorite library for creating 3D scenes. Don\u2019t let that extra dimension scare you; it\u2019s not so difficult to get going! Before we even think about VR, we\u2019re going to make a simple 3D world that has a bunch of cubes, slowly spinning.<\/p>\n<p>If you\u2019re new to three.js I recommend taking a look at <a href=\"https:\/\/threejs.org\/docs\/#Manual\/Introduction\/Creating_a_scene\">the \u201ccreating a scene\u201d tutorial<\/a> included in the documentation. It goes into a little more detail than I will, and you\u2019ll have a spinning cube up and running in no time. Otherwise feel free to jump straight in here, we\u2019ll still be going quite slow. <\/p>\n<h4>Setup<\/h4>\n<p>Firstly we need to set up a document with the three.js library included. You can install with Bower, npm, or keep it simple and get the file from <a href=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/three.js\/r82\/three.min.js\">a CDN<\/a>. <\/p>\n<p>Please note that the three.js API changes from time to time. This tutorial has been created with <a href=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/three.js\/r82\/three.min.js\">r82<\/a> and while it\u2019s always good to use the newest version of any library, for our purposes it may make sense to use the same version used in the examples.<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n\r\n  &lt;head&gt;\r\n    &lt;title&gt;WebVR Tutorial&lt;\/title&gt;\r\n    &lt;meta name=\"viewport\" content=\"width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0, shrink-to-fit=no\"&gt;\r\n    &lt;style&gt;\r\n      body {\r\n        margin: 0;\r\n      }\r\n    &lt;\/style&gt;\r\n  &lt;\/head&gt;\r\n\r\n  &lt;body&gt;\r\n    &lt;script src=\"lib\/three.js\"&gt;&lt;\/script&gt;\r\n    &lt;script&gt;\r\n      \/\/ All scripts will go here\r\n    &lt;\/script&gt;\r\n  &lt;\/body&gt;\r\n\r\n&lt;\/html&gt;<\/code><\/pre>\n<p>Now we need to set up the scene, the camera, and the renderer. The scene acts as a container for all objects to go inside. The camera is one of those objects and gives us a point of view from inside the scene. The renderer takes the view from the camera and paints it onto a canvas element.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">\/\/ Create the scene and camera\r\nvar scene = new THREE.Scene();\r\nvar camera = new THREE.PerspectiveCamera( 75, window.innerWidth \/ window.innerHeight, 1, 10000 );\r\n\r\n\/\/ Create the renderer\r\nvar renderer = new THREE.WebGLRenderer();\r\n\r\n\/\/ Set the size of the renderer to take up the entire window\r\nrenderer.setSize( window.innerWidth, window.innerHeight );\r\n\r\n\/\/ Append the renderer canvas element to the body\r\ndocument.body.appendChild( renderer.domElement );<\/code><\/pre>\n<p>We\u2019ll also need to tell the renderer to render the scene:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">\/\/ Render the scene\r\nrenderer.render( scene, camera );<\/code><\/pre>\n<p>For now on, you should make sure this rendering happens last in your code. Later we\u2019ll be firing it every frame inside of an <code>animate()<\/code> function.<\/p>\n<p>At this point, your scene should be rendering with a canvas element on the page, but all you\u2019ll see is black.<\/p>\n<h4>Let\u2019s add a cube to the scene<\/h4>\n<p>It comprises of a geometry and a material, held together in a mesh:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">\/\/ Create cube\r\nvar material = new THREE.MeshNormalMaterial();\r\nvar geometry = new THREE.BoxGeometry( 50, 50, 50 );\r\nvar mesh = new THREE.Mesh( geometry, material );\r\n\r\n\/\/ Add cube to scene\r\nscene.add(mesh);<\/code><\/pre>\n<p>Now you should see a cube being rendered, yay!<\/p>\n<p>Let\u2019s make lots of cubes by wrapping the code in a <code>for<\/code> loop:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var cubes = [];\r\n\r\nfor (var i = 0; i &lt; 100; i++) {\r\n\r\n  var material = new THREE.MeshNormalMaterial();\r\n  var geometry = new THREE.BoxGeometry( 50, 50, 50 );\r\n  var mesh = new THREE.Mesh( geometry, material );\r\n\r\n  \/\/ Give each cube a random position\r\n  mesh.position.x = (Math.random() * 1000) - 500;\r\n  mesh.position.y = (Math.random() * 1000) - 500;\r\n  mesh.position.z = (Math.random() * 1000) - 500;\r\n\r\n  scene.add(mesh);\r\n  \r\n  \/\/ Store each mesh in array\r\n  cubes.push(mesh);\r\n\r\n }<\/code><\/pre>\n<figure id=\"post-249225\" class=\"align-none media-249225\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/step1.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/step1.jpg 1583w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/step1-300x181.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/step1-768x464.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/step1-1024x619.jpg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>You\u2019ll notice that I\u2019ve also given each cube a random position by changing their position property. X,Y and Z refers to their positions along each axis. Our camera is at position <code>(0,0,0)<\/code>, in the center of the scene. By giving each cube a random position along each axis (between -500 and 500), the cubes will be surrounding the camera in all directions.<\/p>\n<p>I\u2019ve also stored each cube\u2019s mesh in an array, which will allow us to animate them. We need to create an <code>animate()<\/code> function that will fire every frame:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">function animate() {\r\n\r\n  requestAnimationFrame( animate );\r\n\r\n  \/\/ Every frame, rotate the cubes a little bit\r\n  for (var i = 0; i &lt; cubes.length; i++) {\r\n    cubes[i].rotation.x += 0.01;\r\n    cubes[i].rotation.y += 0.02;\r\n  }\r\n\r\n  \/\/ Render the scene\r\n  renderer.render( scene, camera );\r\n\r\n}<\/code><\/pre>\n<p>The <code>animate()<\/code> function iterates through the cubes array and updates the rotation property of each mesh. It will constantly loop every frame because we\u2019re calling it recursively using requestAnimationFrame. You\u2019ll also notice I\u2019ve moved <code>renderer.render()<\/code> inside this function, so that the scene is being rendered every frame too.<\/p>\n<p>Make sure you call <code>animate()<\/code> somewhere in the script to start the animation loop.<\/p>\n<p>That\u2019s our scene done! If you\u2019re struggling, have a look at <a href=\"https:\/\/github.com\/funwithtriangles\/webvr-tutorial\/blob\/master\/step1.html\">the source code for this step<\/a>, I\u2019ve tried my best to include descriptive comments. You\u2019ll notice I\u2019ve rearranged the code slightly from the snippets in this article, along with a better use of variable names.<\/p>\n<h3 id=\"audio-vr-2-virtual\">Time to get virtual<\/h3>\n<p>Before we get started, it\u2019s good to know what we\u2019re actually playing with! The WebVR website sums it up very well:<\/p>\n<blockquote><p>WebVR is an experimental JavaScript API that provides access to Virtual Reality devices, such as the <a href=\"https:\/\/www3.oculus.com\/en-us\/rift\/\">Oculus Rift<\/a>, <a href=\"https:\/\/www.vive.com\/us\/\">HTC Vive<\/a>, <a href=\"http:\/\/www.samsung.com\/global\/galaxy\/gear-vr\/\">Samsung Gear VR<\/a>, or <a href=\"https:\/\/vr.google.com\/cardboard\/\">Google Cardboard<\/a>, in your browser.<\/p><\/blockquote>\n<p>At the moment the API only works in special browser builds, which may be fun to play with, but are lacking an audience. Luckily for us, however, <a href=\"https:\/\/github.com\/googlevr\/webvr-polyfill\">the WebVR Polyfill<\/a> swoops in to save the day. It makes your VR creations available on mobile devices via Google Cardboard (or similar viewers), while also allowing users to view the same content without a VR viewer. You should know that the polyfill doesn\u2019t support any other VR devices, such as the Oculus Rift or HTC Vive.<\/p>\n<p>To use the polyfill, include <a href=\"https:\/\/raw.githubusercontent.com\/googlevr\/webvr-polyfill\/master\/build\/webvr-polyfill.js\">the script<\/a> in your page, before all other scripts. The next two parts to this tutorial won\u2019t work if you don\u2019t have it included.<\/p>\n<h4>Controls<\/h4>\n<p>A critical component to any virtual reality experience is capturing the motion of the user and using that information to update the orientation of the camera in the virtual scene. We can achieve this in three.js with the <code>VRControls<\/code> constructor. <code>VRControls<\/code> doesn\u2019t come built with the library but as an extra you can <a href=\"https:\/\/github.com\/mrdoob\/three.js\/blob\/master\/examples\/js\/controls\/VRControls.js\">find in the repository<\/a>. You should include it in a separate script tag after the three.js library.<\/p>\n<p>You\u2019ll be surprised at how simple it is to implement. Firstly, create the controls, passing in the camera:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var controls = new THREE.VRControls( camera );<\/code><\/pre>\n<p>This now means that the controls will be affecting the camera, which is essentially just an object in the scene like any other mesh. You could use these controls to rotate a cube rather than the camera if you wanted to.<\/p>\n<p>In your <code>animate()<\/code> function you\u2019ll also need to tell the controls to update every frame:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">controls.update();<\/code><\/pre>\n<p>And that\u2019s it! If you look at what you\u2019ve made using a mobile device, you should be able to \u201clook around\u201d the scene by moving the device. On a laptop without these capabilities, you\u2019ll have to click and drag with the mouse, this click and drag fallback is an extra bonus we get with the WebVR polyfill.<\/p>\n<figure id=\"post-249226\" class=\"align-none media-249226\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/step2.gif\" alt=\"\" \/><\/figure>\n<p>Take a look at <a href=\"https:\/\/github.com\/funwithtriangles\/webvr-tutorial\/blob\/master\/step2.html\">the source code for this step<\/a> if you\u2019re stuck.<\/p>\n<h3 id=\"audio-vr-3-vr\">VR Effect<\/h3>\n<p>At this point you may already be satisfied with what you\u2019ve created. Looking around using the motion of your device is super fun and opens up all sorts of possibilities for making something cool. When making <a href=\"http:\/\/polyop.uk\/ceremony\/\">the interactive video for Polyop<\/a>, I felt this behavior was immersive enough and chose not to introduce the stereoscopic feature.<\/p>\n<p>However I promised actual VR and so that\u2019s what you\u2019re hear for! The final piece of the puzzle is to get three.js to render two separate images, one for each eye. We\u2019ll do this using the VREffect constructor. Just like you did with VRControls, <a href=\"https:\/\/github.com\/mrdoob\/three.js\/blob\/master\/examples\/js\/effects\/VREffect.js\">include the script<\/a> and away we go. First we need to define the effect:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">effect = new THREE.VREffect(renderer);\r\neffect.setSize(window.innerWidth, window.innerHeight);<\/code><\/pre>\n<p>We define a new VREffect, passing in the renderer. From now on we don\u2019t need to deal with the renderer, it will be dealt with by VREffect. That\u2019s why we\u2019re now setting the size of the effect instead of the renderer. Importantly, we need to swap out the way we render in the animate function:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">effect.render( scene, camera );<\/code><\/pre>\n<p>We\u2019re now telling the effect to render, not the renderer. At the moment nothing will have changed. The VREffect simply takes in the renderer you give it and renders as normal when you tell it to. To get the stereoscopic effect we\u2019re looking for; we need to do a little more. <\/p>\n<p>Firstly, we need to search for any connected VR devices. Because we\u2019re using the WebVR Polyfill, all we get is one \u201cdevice\u201d connected, which will be Google Cardboard. Here\u2019s how we get it:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var vrDisplay;\r\nnavigator.getVRDisplays().then(function(displays) {\r\n    if (displays.length &gt; 0) {\r\n     vrDisplay = displays[0];\r\n   }  \r\n});<\/code><\/pre>\n<p><code>navigator.getVRDisplays<\/code> returns a promise function which will be invoked once it has finished looking for devices. In this instance, we take the first and only item in the displays array and define it globally as <code>vrDisplay<\/code> so we can use it elsewhere. If we weren\u2019t using the polyfill, there might be more than one device in the array, and you\u2019d probably want to add in some user functionality to choose between them. Luckily today we don\u2019t have to accommodate for little Johnny and his fifty different VR devices.<\/p>\n<p>Now we have our single device defined as <code>vrDisplay<\/code>, we need to fire it up! The method to do this is <code>requestPresent<\/code>, and we\u2019ll give it the canvas element we\u2019re rendering to. <\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">document.querySelector('#startVR').addEventListener('click', function() {\r\n  vrDisplay.requestPresent([{source: renderer.domElement}]);\r\n});<\/code><\/pre>\n<p>To avoid abuse of the webVR API, it is required that you wrap any calls of requestPresent in an event listener. This one fires on the click of a button element with an ID of \u201cstartVR\u201d.<\/p>\n<figure id=\"post-249227\" class=\"align-none media-249227\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/step3.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/step3.jpg 1920w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/step3-300x169.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/step3-768x432.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/step3-1024x576.jpg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>The last thing we need to do is make sure everything renders properly after a resize of the renderer. This happens not just when the screen size changed but when we switch in and out of VR mode.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">\/\/ Resize the renderer canvas\r\nfunction onResize() {\r\neffect.setSize(window.innerWidth, window.innerHeight);\r\n  camera.aspect = window.innerWidth \/ window.innerHeight;\r\n  camera.updateProjectionMatrix();\r\n}\r\n      \r\n\/\/ Resize the renderer canvas when going in or out of VR mode\r\nwindow.addEventListener('vrdisplaypresentchange', onResize);\r\n\r\n\/\/ Resize the renderer canvas if the browser window size changes\r\nwindow.addEventListener('resize', onResize);<\/code><\/pre>\n<p>The <code>onResize()<\/code> function resets the size of the effect (and therefore the renderer) while also updating some properties of the camera.<\/p>\n<p>Once again, if you\u2019re feeling a bit muddled, take a look at <a href=\"https:\/\/github.com\/funwithtriangles\/webvr-tutorial\/blob\/master\/step3.html\">the source code of this final step<\/a>.<\/p>\n<h3>Summing up<\/h3>\n<p>Congratulations! You\u2019ve officially entered cyberspace. What to do with your new powers?<\/p>\n<p>Why not build on the work we\u2019ve already done today? Perhaps try and transform the scene into something a little more aesthetically pleasing by using lighting and different geometries\/materials? Maybe you could even try making the objects bounce to music using the Audio API? To give you an idea, <a href=\"http:\/\/funwithtriangles.net\/webvr-tutorial\/jazzy.html\">here\u2019s one I made earlier<\/a>.<\/p>\n<figure id=\"post-249228\" class=\"align-none media-249228\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/jazzy.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/jazzy.jpg 1422w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/jazzy-300x158.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/jazzy-768x404.jpg 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/jazzy-1024x539.jpg 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n","protected":false},"excerpt":{"rendered":"<p>Virtual reality has become a thing again! All of the usual suspects are involved: HTC, Microsoft, Samsung, and Facebook, among others, are all peddling their respective devices. These predictable players shouldn\u2019t be having all the fun, though! You make websites. You know a bit of Javascript. You have a mobile device. You can have a [&hellip;]<\/p>\n","protected":false},"author":246863,"featured_media":249225,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[833,956,955,954],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/248841"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/246863"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=248841"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/248841\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/249225"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=248841"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=248841"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=248841"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249105,"date":"2016-12-26T06:52:42","date_gmt":"2016-12-26T13:52:42","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249105"},"modified":"2017-04-06T06:40:18","modified_gmt":"2017-04-06T13:40:18","slug":"guide-2017-conferences","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/guide-2017-conferences\/","title":{"rendered":"A Guide to 2017 Conferences"},"content":{"rendered":"<p>Back by popular demand! It's difficult to keep track of all of the great talks and conferences happening in our industry. Sometimes you may find out too late that an event is taking place, and it's a real shame when it's an something you might have attended. We've compiled this list so you can see what's happening, both in your hometown, and abroad. This list will be updated throughout the year.<\/p>\n<p>If you have a conference to add, we're happy to put it in! Please use the form at the bottom of the post.<\/p>\n<p><!--more--><\/p>\n<h2>January<\/h2>\n<h3>Front<\/h3>\n<p><strong>Date<\/strong>: January 5-6<br \/>\n<strong>Location<\/strong>: Park City, Utah<br \/>\n<strong>Link<\/strong>: <a href=\"https:\/\/www.frontutah.com\/\" target=\"_blank\">https:\/\/www.frontutah.com\/<\/a><\/p>\n<hr>\n<h3>CodeMash<\/h3>\n<p><strong>Date<\/strong>: January 10-13<br \/>\n<strong>Location<\/strong>: Sandusky, OH<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/codemash.org\">http:\/\/codemash.org<\/a><\/p>\n<hr>\n<h3>Agent Conference<\/h3>\n<p><strong>Date<\/strong>: January 20-21<br \/>\n<strong>Location<\/strong>: Dornbirn, Austria<br \/>\n<strong>Link<\/strong>: <a href=\"http:\/\/agent.sh\/\" target=\"_blank\">http:\/\/agent.sh\/<\/a><\/p>\n<hr>\n<h3>SoEmber Conf<\/h3>\n<p><strong>Date<\/strong>: January 27<br \/>\n<strong>Location<\/strong>: San Diego, CA<br \/>\n<strong>Theme<\/strong>: Ember.js<br \/>\n<strong>Link<\/strong>: <a href=\"http:\/\/soember.com\" target=\"_blank\">http:\/\/soember.com<\/a><\/p>\n<h2>February<\/h2>\n<h3>UXDEV Summit<\/h3>\n<p><strong>Date<\/strong>: Feb. 1-3<br \/>\n<strong>Location<\/strong>: Fort Lauderdale, FL<br \/>\n<strong>Link<\/strong>: <a href=\"http:\/\/www.uxdsummit.com\" target=\"_blank\">http:\/\/www.uxdsummit.com<\/a><\/p>\n<hr>\n<h3>Fosdem<\/h3>\n<p><strong>Date<\/strong>: February 4-5<br \/>\n<strong>Location<\/strong>: Brussels<br \/>\n<strong>Link<\/strong>: <a href=\"https:\/\/fosdem.org\/2017\/\" target=\"_blank\">https:\/\/fosdem.org\/2017\/<\/a><\/p>\n<hr>\n<h3>ngVikings<\/h3>\n<p><strong>Date<\/strong>: February 11-12<br \/>\n<strong>Location<\/strong>: Copenhagen<br \/>\n<strong>Theme<\/strong>: Angular<br \/>\n<strong>Link<\/strong>: <a href=\"https:\/\/ngvikings.org\" target=\"_blank\">https:\/\/ngvikings.org<\/a><\/p>\n<hr>\n<h3>Webstock<\/h3>\n<p><strong>Date<\/strong>: February 13-17<br \/>\n<strong>Location<\/strong>: Wellington, New Zealand<br \/>\n<strong>Link<\/strong>: <a href=\"http:\/\/www.webstock.org.nz\/17\/\" target=\"_blank\">http:\/\/www.webstock.org.nz\/17\/<\/a><\/p>\n<hr>\n<h3>SVG Summit<\/h3>\n<p><strong>Date<\/strong>: Feb. 15<br \/>\n<strong>Location<\/strong>: Online<br \/>\n<strong>Theme<\/strong>: SVG<br \/>\n<strong>Link<\/strong>: <a href=\"http:\/\/SVGSummit.com\/\" target=\"_blank\">http:\/\/SVGSummit.com\/<\/a><\/p>\n<hr>\n<h3>SustainableUX Conference<\/h3>\n<p><strong>Date<\/strong>: Feb. 16<br \/>\n<strong>Location<\/strong>: Online<br \/>\n<strong>Link<\/strong>: <a href=\"https:\/\/www.eventbrite.com\/e\/sustainableux-2017-tickets-27282085452\" target=\"_blank\">https:\/\/www.eventbrite.com\/e\/sustainableux-2017-tickets-27282085452<\/a><\/p>\n<hr>\n<h3>FrontFest<\/h3>\n<p><strong>Date<\/strong>: February 18<br \/>\n<strong>Location<\/strong>: Madrid<br \/>\n<strong>Link<\/strong>: <a href=\"http:\/\/frontfest.es\/\" target=\"_blank\">http:\/\/frontfest.es\/<\/a><\/p>\n<hr>\n<h3>The Rolling Scopes Conference<\/h3>\n<p><strong>Dates<\/strong>: February 18-19<br \/>\n<strong>Location<\/strong>: Minsk, Belarus<br \/>\n<strong>Link<\/strong>: <a href=\"https:\/\/2017.conf.rollingscopes.com\/\" target=\"_blank\">https:\/\/2017.conf.rollingscopes.com\/<\/a><\/p>\n<hr>\n<h3>Web Animation Workshops SF<\/h3>\n<p><strong>Date<\/strong>: Feb 20-21<br \/>\n<strong>Location<\/strong>: San Francisco<br \/>\n<strong>Link<\/strong>: <a href=\"https:\/\/webanimationworkshops.com\/\" target=\"_blank\">https:\/\/webanimationworkshops.com\/<\/a><\/p>\n<hr>\n<h3>DEVNEXUS<\/h3>\n<p><strong>Date<\/strong>: Feb 22-24<br \/>\n<strong>Location<\/strong>: Atlanta, GA<br \/>\n<strong>Link<\/strong>: <a href=\"http:\/\/www.devnexus.com\" target=\"_blank\">http:\/\/www.devnexus.com<\/a><\/p>\n<hr>\n<h3>ForwardJS<\/h3>\n<p><strong>Dates<\/strong>: Workshops Feb 25- March 5, Conference March 1<br \/>\n<strong>Location<\/strong>: San Francisco, CA<br \/>\n<strong>Link<\/strong>: <a href=\"http:\/\/forwardjs.com\/\" target=\"_blank\">ForwardJS.com<\/a><br \/>\n<strong>Theme<\/strong>: JavaScript<\/p>\n<h2>March<\/h2>\n<h3>AMP Conf<\/h3>\n<p><strong>Date<\/strong>: March 7-8<br \/>\n<strong>Location<\/strong>: New York<br \/>\n<strong>Theme<\/strong>: The house conference of the open source Accelerated Mobile Pages project.<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/ampproject.org\/amp-conf-2017\">https:\/\/ampproject.org\/amp-conf-2017<\/a><\/p>\n<hr>\n<h3>jDays<\/h3>\n<p><strong>Date<\/strong>: Mar 7-8<br \/>\n<strong>Location<\/strong>: jDays<br \/>\n<strong>Link<\/strong>: <a href=\"http:\/\/www.jdays.se\/\" target=\"_blank\">http:\/\/www.jdays.se\/<\/a><\/p>\n<hr>\n<h3>React Conf<\/h3>\n<p><strong>Date<\/strong>: March 13-14<br \/>\n<strong>Location<\/strong>: Santa Clara<br \/>\n<strong>Theme<\/strong>: React<br \/>\n<strong>Link<\/strong>: Coming Soon<\/p>\n<hr>\n<h3>JS Remote Conf<\/h3>\n<p><strong>Date<\/strong>: March 15-16<br \/>\n<strong>Location<\/strong>: Online<br \/>\n<strong>Theme<\/strong>: JavaScript<br \/>\n<strong>Link<\/strong>: <a href=\"https:\/\/devchat.tv\/conferences\/js-remote-conf-2017\" target=\"_blank\">https:\/\/devchat.tv\/conferences\/js-remote-conf-2017<\/a><\/p>\n<hr>\n<h3>NG-NL<\/h3>\n<p><strong>Date<\/strong>: Mar 16<br \/>\n<strong>Location<\/strong>: Amsterdam<br \/>\n<strong>Theme<\/strong>: Angular<br \/>\n<strong>Link<\/strong>: <a href=\"http:\/\/ng-nl.org\/\" target=\"_blank\">http:\/\/ng-nl.org\/<\/a><\/p>\n<hr>\n<h3>jazzcon.tech<\/h3>\n<p><strong>Date<\/strong>: March 22-24<br \/>\n<strong>Location<\/strong>: New Orleans, LA<br \/>\n<strong>Theme<\/strong>: MUSIC.  FOOD.  CODE.<br \/>\n<strong>Link<\/strong>: <a href=\"http:\/\/jazzcon.tech\/\" target=\"_blank\">http:\/\/jazzcon.tech\/<\/a><\/p>\n<hr>\n<h3>Codemotion Rome<\/h3>\n<p><strong>Date<\/strong>: Mar 24-25<br \/>\n<strong>Location<\/strong>: Rome<br \/>\n<strong>Link<\/strong>: <a href=\"http:\/\/rome2017.codemotionworld.com\/\" target=\"_blank\">http:\/\/rome2017.codemotionworld.com\/<\/a><\/p>\n<hr>\n<h3>MobCon Europe<\/h3>\n<p><strong>Date<\/strong>: March 25-26<br \/>\n<strong>Location<\/strong>: Sofia<br \/>\n<strong>Link<\/strong>: <a href=\"http:\/\/mobcon.com\/mobcon-europe\/\" target=\"_blank\">http:\/\/mobcon.com\/mobcon-europe\/<\/a><\/p>\n<hr>\n<h3>React London<\/h3>\n<p><strong>Date<\/strong>: March 28<br \/>\n<strong>Location<\/strong>: London, UK<br \/>\n<strong>Link<\/strong>: <a href=\"https:\/\/react.london\/\" target=\"_blank\">https:\/\/react.london\/<\/a><br \/>\n<strong>Theme<\/strong>: ReactJS<\/p>\n<hr>\n<h3>JavaScript Summit<\/h3>\n<p><strong>Date<\/strong>: TBA<br \/>\n<strong>Location<\/strong>: Online<br \/>\n<strong>Theme<\/strong>: JavaScript<\/p>\n<hr>\n<h3>Design it; Build it<\/h3>\n<p><strong>Date<\/strong>: March 30-31<br \/>\n<strong>Location<\/strong>: Edinburgh, Scotland<br \/>\n<strong>Theme<\/strong>: Design &amp; Front-End Dev<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/www.dibiconference.com\">http:\/\/www.dibiconference.com<\/a><\/p>\n<hr>\n<h3>EmberConf<\/h3>\n<p><strong>Date<\/strong>: March 28-29<br \/>\n<strong>Location<\/strong>: Portland, Oregon<br \/>\n<strong>Theme<\/strong>: Ember.js and Front-End Development<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/emberconf.com\">http:\/\/emberconf.com<\/a><\/p>\n<hr>\n<h3>Render Conf<\/h3>\n<p><strong>Date<\/strong>: March 30-31<br \/>\n<strong>Location<\/strong>: Oxford, UK<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/2017.render-conf.com\/\">http:\/\/2017.render-conf.com\/<\/a><\/p>\n<h2>April<\/h2>\n<h3>AlterConf<\/h3>\n<p><strong>Date<\/strong>: April 1<br \/>\n<strong>Location<\/strong>: London<br \/>\n<strong>Theme<\/strong>: Diversity in Tech and Gaming<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/www.alterconf.com\/conferences\/london-england\">https:\/\/www.alterconf.com\/conferences\/london-england<\/a><\/p>\n<hr>\n<h3>CodeFest<\/h3>\n<p><strong>Date<\/strong>: April 1<br \/>\n<strong>Location<\/strong>: Novosibirsk, Russia<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/2017.codefest.ru\/speakers\/en\/\">http:\/\/2017.codefest.ru\/speakers\/en\/<\/a><\/p>\n<hr>\n<h3>An Event Apart<\/h3>\n<p><strong>Date<\/strong>: April 3-5<br \/>\n<strong>Location<\/strong>: Seattle<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/aneventapart.com\/event\/seattle-2017\">https:\/\/aneventapart.com\/event\/seattle-2017<\/a><\/p>\n<hr>\n<h3>SmashingConf<\/h3>\n<p><strong>Date<\/strong>: April 4-5<br \/>\n<strong>Location<\/strong>: San Francisco<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/smashingconf.com\/\">http:\/\/smashingconf.com\/<\/a><\/p>\n<hr>\n<h3>UnitedDevConf<\/h3>\n<p><strong>Date<\/strong>: Apr 6<br \/>\n<strong>Location<\/strong>: Minsk, Belarus<br \/>\n<strong>Link<\/strong>: <a href=\"http:\/\/unitedconf.com\/\" target=\"_blank\">http:\/\/unitedconf.com\/<\/a><\/p>\n<hr>\n<h3>ng-conf 2017<\/h3>\n<p><strong>Date<\/strong>: April 5-7<br \/>\n<strong>Location<\/strong>: Salt Lake City, Utah<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/www.ng-conf.org\/\">https:\/\/www.ng-conf.org\/<\/a><\/p>\n<hr>\n<h3>Bulgaria Web Summit<\/h3>\n<p><strong>Date<\/strong>: April 7-8<br \/>\n<strong>Location<\/strong>: Sofia, Bulgaria<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/bulgariawebsummit.com\/\">https:\/\/bulgariawebsummit.com\/<\/a><\/p>\n<hr>\n<h3>Front End Design Conference<\/h3>\n<p><strong>Date<\/strong>: April 19-21<br \/>\n<strong>Location<\/strong>: St. Petersburg, Florida<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/frontenddesignconference.com\/\">frontenddesignconference.com\/<\/a><\/p>\n<hr>\n<h3>React Amsterdam<\/h3>\n<p><strong>Date<\/strong>: April 21<br \/>\n<strong>Location<\/strong>: Amsterdam, NL<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/react-amsterdam.com\/\">http:\/\/react-amsterdam.com\/<\/a><\/p>\n<hr>\n<h3>CodeLand<\/h3>\n<p><strong>Date<\/strong>: April 21-22<br \/>\n<strong>Location<\/strong>: New York, NY<br \/>\n<strong>Theme<\/strong>: A tech conference designed for new coders.<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/events.google.com\/io\/\">https:\/\/events.google.com\/io\/<\/a><\/p>\n<hr>\n<h3>KharkivCSS #2<\/h3>\n<p><strong>Date<\/strong>: April 22<br \/>\n<strong>Location<\/strong>: Kharkiv, Ukraine<br \/>\n<strong>Theme<\/strong>: CSS<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/kharkivcss.org\/\">http:\/\/kharkivcss.org\/<\/a><\/p>\n<hr>\n<h3>WebCamp Ljubljana<\/h3>\n<p><strong>Date<\/strong>: April 22<br \/>\n<strong>Location<\/strong>: Ljubljana, Slovenia<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/2017.webcamp.si\/\">http:\/\/2017.webcamp.si\/<\/a><\/p>\n<hr>\n<h3>FITC Toronto<\/h3>\n<p><strong>Date<\/strong>: April 23-25<br \/>\n<strong>Location<\/strong>: Toronto, Canada<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/fitc.ca\/event\/to17\/\">http:\/\/fitc.ca\/event\/to17\/<\/a><\/p>\n<hr>\n<h3>Open Vis Conf<\/h3>\n<p><strong>Date<\/strong>: April 24-25<br \/>\n<strong>Location<\/strong>: Boston, MA<br \/>\n<strong>Theme<\/strong>: Data Visualization<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/openvisconf.com\/\">https:\/\/openvisconf.com\/<\/a><\/p>\n<hr>\n<h3>Generate<\/h3>\n<p><strong>Date<\/strong>: April 27-28<br \/>\n<strong>Location<\/strong>: New York, NY<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/www.generateconf.com\/new-york-2017\/\">https:\/\/www.generateconf.com\/new-york-2017\/<\/a><\/p>\n<h2>May<\/h2>\n<h3>CSV Conf<\/h3>\n<p><strong>Date<\/strong>: May 2-3<br \/>\n<strong>Location<\/strong>: Portland<br \/>\n<strong>Theme<\/strong>: CSV Conf is a non-profit community conference run by people who love data and sharing knowledge. CSV Conference is a conference about data sharing and data tools.<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/csvconf.com\">http:\/\/csvconf.com<\/a><\/p>\n<hr>\n<h3>CSS Conf EU<\/h3>\n<p><strong>Date<\/strong>: May 5<br \/>\n<strong>Location<\/strong>: Berlin, Germany<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/2017.cssconf.eu\/\">http:\/\/2017.cssconf.eu\/<\/a><\/p>\n<hr>\n<h3>JSDayES<\/h3>\n<p><strong>Date<\/strong>: May 6-7<br \/>\n<strong>Location<\/strong>: Madrid<br \/>\n<strong>Theme<\/strong>: Javascript<br \/>\n<strong>Link<\/strong>: <a href=\"jsday.es\" target=\"_blank\">jsday.es\/<\/a><\/p>\n<hr>\n<h3>JS Conf EU<\/h3>\n<p><strong>Date<\/strong>: May 6-7<br \/>\n<strong>Location<\/strong>: Berlin, Germany<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/2017.jsconf.eu\/\">http:\/\/2017.jsconf.eu\/<\/a><\/p>\n<hr>\n<h3>OSCON<\/h3>\n<p><strong>Date<\/strong>: May 8\u20139- Training &amp; Tutorials, May 10\u201311- Conference<br \/>\n<strong>Location<\/strong>: Austin, TX<br \/>\n<strong>Theme<\/strong>: Open Source<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/conferences.oreilly.com\/oscon\/oscon-tx\">http:\/\/conferences.oreilly.com\/oscon\/oscon-tx<\/a><\/p>\n<hr>\n<h3>Pixel Up!<\/h3>\n<p><strong>Date<\/strong>: May 8-10<br \/>\n<strong>Location<\/strong>: Cape Town, South Africa<br \/>\n<strong>Link<\/strong>: <a href=\"http:\/\/pixelup.co.za\" target=\"_blank\">http:\/\/pixelup.co.za<\/a><\/p>\n<hr>\n<h3>Front<\/h3>\n<p><strong>Date<\/strong>: May 9-10<br \/>\n<strong>Location<\/strong>: Salt Lake City, Utah<br \/>\n<strong>Link<\/strong>: <a href=\"https:\/\/www.frontutah.com\/\" target=\"_blank\">https:\/\/www.frontutah.com\/<\/a><\/p>\n<hr>\n<h3>jsDay<\/h3>\n<p><strong>Date<\/strong>: May 10-11<br \/>\n<strong>Location<\/strong>: Verona, Italy<br \/>\n<strong>Link<\/strong>: <a href=\"http:\/\/2017.jsday.it\/\" target=\"_blank\">http:\/\/2017.jsday.it\/<\/a><\/p>\n<hr>\n<h3>An Event Apart<\/h3>\n<p><strong>Date<\/strong>: May 15-17<br \/>\n<strong>Location<\/strong>: Boston<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/aneventapart.com\/event\/boston-2017\">https:\/\/aneventapart.com\/event\/boston-2017<\/a><\/p>\n<hr>\n<h3>Google I\/O<\/h3>\n<p><strong>Date<\/strong>: May 17-19<br \/>\n<strong>Location<\/strong>: Mountain View, CA<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/events.google.com\/io\/\">https:\/\/events.google.com\/io\/<\/a><\/p>\n<hr>\n<h3>Syntax<\/h3>\n<p><strong>Date<\/strong>: May 18-19<br \/>\n<strong>Location<\/strong>: North Charleston<br \/>\n<strong>Link<\/strong>: <a href=\"https:\/\/2017.syntaxcon.com\/\" target=\"_blank\">https:\/\/2017.syntaxcon.com\/<\/a><\/p>\n<hr>\n<h3>React Europe<\/h3>\n<p><strong>Date<\/strong>: May 18-19<br \/>\n<strong>Location<\/strong>: Paris, France<br \/>\n<strong>Theme<\/strong>: React<br \/>\n<strong>Link<\/strong>: <a href=\"https:\/\/www.react-europe.org\/\" target=\"_blank\">https:\/\/www.react-europe.org\/<\/a><\/p>\n<hr>\n<h3>Beyond Tellerrand<\/h3>\n<p><strong>Date<\/strong>: May 15-17<br \/>\n<strong>Location<\/strong>: Dusseldorf, Germany<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/beyondtellerrand.com\/\">http:\/\/beyondtellerrand.com\/<\/a><\/p>\n<hr>\n<h3>DEVit Conference<\/h3>\n<p><strong>Date<\/strong>: May 20-21<br \/>\n<strong>Location<\/strong>: Thessaloniki, Greece<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"hhttp:\/\/devitconf.org\/\">http:\/\/devitconf.org\/<\/a><\/p>\n<hr>\n<h3>User Experience Lisbon<\/h3>\n<p><strong>Date<\/strong>: May 23-26<br \/>\n<strong>Location<\/strong>: Lisbon, Portugal<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/www.ux-lx.com\/\">https:\/\/www.ux-lx.com\/<\/a><\/p>\n<hr>\n<h3>Front-Trends<\/h3>\n<p><strong>Date<\/strong>: May 24-26<br \/>\n<strong>Location<\/strong>: Warsaw, Poland<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/2017.front-trends.com\/\">https:\/\/2017.front-trends.com\/<\/a><\/p>\n<hr>\n<h3>UX London<\/h3>\n<p><strong>Date<\/strong>: May 24-26<br \/>\n<strong>Location<\/strong>: London, England<br \/>\n<strong>Theme<\/strong>: UX<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/2017.uxlondon.com\/\">http:\/\/2017.uxlondon.com\/<\/a><\/p>\n<hr>\n<h3>Frontend United<\/h3>\n<p><strong>Date<\/strong>: May 26-27<br \/>\n<strong>Location<\/strong>: Athens, Greece<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/frontendunited.org\/\">http:\/\/frontendunited.org\/<\/a><\/p>\n<hr>\n<h3>Respond<\/h3>\n<p><strong>Date<\/strong>: May 4-5<br \/>\n<strong>Location<\/strong>: Sydney<br \/>\n<strong>Date<\/strong>: May 8-9<br \/>\n<strong>Location<\/strong>: Melbourne<br \/>\n<strong>Date<\/strong>: May 12<br \/>\n<strong>Location<\/strong>: Brisbane<br \/>\n<strong>Theme<\/strong>: Responsive Web Development<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/www.webdirections.org\/respond16\/\">http:\/\/www.webdirections.org\/respond16\/<\/a><\/p>\n<h2>June<\/h2>\n<h3>Web Rebels<\/h3>\n<p><strong>Date<\/strong>: June 1-2<br \/>\n<strong>Location<\/strong>: Oslo, Norway<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/www.webrebels.org\/\">https:\/\/www.webrebels.org\/<\/a><\/p>\n<hr>\n<h3>RevolutionConf<\/h3>\n<p><strong>Date<\/strong>: June 1-2<br \/>\n<strong>Location<\/strong>: Virginia Beach, VA<br \/>\n<strong>Link<\/strong>: <a href=\"www.revolutionconf.com\" target=\"_blank\">www.revolutionconf.com<\/a><\/p>\n<hr>\n<h3>Webconf.asia<\/h3>\n<p><strong>Date<\/strong>: June 3<br \/>\n<strong>Location<\/strong>: Hong Kong<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/webconf.asia\">http:\/\/webconf.asia<\/a><\/p>\n<hr>\n<h3>HolyJS<\/h3>\n<p><strong>Date<\/strong>: June 3-4<br \/>\n<strong>Location<\/strong>: Saint-Petersburg, Russia<br \/>\n<strong>Link<\/strong>: <a href=\"https:\/\/holyjs-piter.ru\/\" target=\"_blank\">https:\/\/holyjs-piter.ru\/<\/a><\/p>\n<hr>\n<h3>Kerning<\/h3>\n<p><strong>Date<\/strong>: June 7-9<br \/>\n<strong>Location<\/strong>: Faenza, Italy<br \/>\n<strong>Theme<\/strong>: Web Typography and Design<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/2017.kerning.it\">http:\/\/2017.kerning.it<\/a><\/p>\n<hr>\n<h3>UX Scotland<\/h3>\n<p><strong>Date<\/strong>: June 7-9<br \/>\n<strong>Location<\/strong>: Edinburgh, UK<br \/>\n<strong>Theme<\/strong>: User Experience and Design<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/uxscotland.net\/2017\/\">uxscotland.net\/2017\/<\/a><\/p>\n<hr>\n<h3>JS Heroes<\/h3>\n<p><strong>Date<\/strong>: June 8-9<br \/>\n<strong>Location<\/strong>: Cluj-Napoca, Romania<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/jsheroes.io\/\">http:\/\/jsheroes.io\/<\/a><\/p>\n<hr>\n<h3>Generate<\/h3>\n<p><strong>Date<\/strong>: June 9<br \/>\n<strong>Location<\/strong>: San Francisco<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/www.generateconf.com\/\">https:\/\/www.generateconf.com\/<\/a><\/p>\n<hr>\n<h3>Reactjs Day<\/h3>\n<p><strong>Date<\/strong>: June 10<br \/>\n<strong>Location<\/strong>: Verona, Italy<br \/>\n<strong>Link<\/strong>: <a href=\"www.reactjsday.it\" target=\"_blank\">www.reactjsday.it<\/a><\/p>\n<hr>\n<h3>SmashingConf<\/h3>\n<p><strong>Date<\/strong>: June 13-14<br \/>\n<strong>Location<\/strong>: New York<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/lanyrd.com\/2017\/smashingconf-new-york\/\">http:\/\/lanyrd.com\/2017\/smashingconf-new-york\/<\/a><\/p>\n<hr>\n<h3>ConvergeSE<\/h3>\n<p><strong>Date<\/strong>: June 14-16<br \/>\n<strong>Location<\/strong>: Columbia SC<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/convergese.com\/\">http:\/\/convergese.com\/<\/a><\/p>\n<hr>\n<h3>DinosaurJS<\/h3>\n<p><strong>Date<\/strong>: June 15<br \/>\n<strong>Location<\/strong>: Denver, CO<br \/>\n<strong>Theme<\/strong>: JavaScript (and Dinosaurs)<br \/>\n<strong>Link<\/strong>: <a href=\"http:\/\/dinosaurjs.org\" target=\"_blank\">http:\/\/dinosaurjs.org<\/a><\/p>\n<hr>\n<h3>Contao Konferenz<\/h3>\n<p><strong>Date<\/strong>: June 15-16<br \/>\n<strong>Theme<\/strong>: All about the open source cms contao<br \/>\n<strong>Location<\/strong>: Potsdam (near Berlin)<br \/>\n<strong>Link<\/strong>: <a href=\"https:\/\/www.contao-konferenz.de\/\" target=\"_blank\">https:\/\/www.contao-konferenz.de\/<\/a><\/p>\n<hr>\n<h3>pitercss<\/h3>\n<p><strong>Date<\/strong>: June 16<br \/>\n<strong>Theme<\/strong>: CSS, Graphics, Typography<br \/>\n<strong>Link<\/strong>: <a href=\"https:\/\/pitercss.com\/\" target=\"_blank\">https:\/\/pitercss.com\/<\/a><\/p>\n<hr>\n<h3>O'Reilly Fluent<\/h3>\n<p><strong>Date<\/strong>: June 19\u201320, 2017 for training, June 20\u201322, 2017 for tutorials and conference<br \/>\n<strong>Location<\/strong>: San Jose, CA<br \/>\n<strong>Link<\/strong>: <a href=\"http:\/\/conferences.oreilly.com\/fluent\/fl-ca\">http:\/\/conferences.oreilly.com\/fluent\/fl-ca<\/a><\/p>\n<hr>\n<h3>Vue Conf<\/h3>\n<p><strong>Date<\/strong>: June 21-23<br \/>\n<strong>Location<\/strong>: Wroc\u0142aw, Poland<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/conf.vuejs.org\/\">https:\/\/conf.vuejs.org\/<\/a><\/p>\n<hr>\n<h3>Pixel Pioneers Bristol<\/h3>\n<p><strong>Date<\/strong>: June 22<br \/>\n<strong>Location<\/strong>: Bristol<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/pixelpioneers.co\/\">https:\/\/pixelpioneers.co\/<\/a><\/p>\n<h2>July<\/h2>\n<h3>Frontinsampa<\/h3>\n<p><strong>Date<\/strong>: July 1<br \/>\n<strong>Location<\/strong>: S\u00e3o Paulo, Brazil<br \/>\n<strong>Link<\/strong>: <a href=\"www.frontinsampa.com.br\" target=\"_blank\">www.frontinsampa.com.br<\/a><\/p>\n<hr>\n<h3>An Event Apart<\/h3>\n<p><strong>Date<\/strong>: July 10-12<br \/>\n<strong>Location<\/strong>: Washington DC<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/aneventapart.com\/event\/washington-dc-2017\">https:\/\/aneventapart.com\/event\/washington-dc-2017<\/a><\/p>\n<hr>\n<h3>AngularCamp<\/h3>\n<p><strong>Date<\/strong>: July<br \/>\n<strong>Theme<\/strong>: AngularCamp is focused on the community and education. Anything related Web technologies, Angular, Ionic Framework...<br \/>\n<strong>Location<\/strong>: Barcelona<br \/>\n<strong>Link<\/strong>: <a href=\"https:\/\/angularcamp.org\" target=\"_blank\">https:\/\/angularcamp.org<\/a><\/p>\n<hr>\n<h3>FullStack<\/h3>\n<p><strong>Date<\/strong>: July 12-14<br \/>\n<strong>Location<\/strong>: London<br \/>\n<strong>Link<\/strong>: <a href=\"https:\/\/skillsmatter.com\/conferences\/8264-fullstack-2017-the-conference-on-javascript-node-and-internet-of-things\" target=\"_blank\">https:\/\/skillsmatter.com\/conferences\/8264-fullstack-2017-the-conference-on-javascript-node-and-internet-of-things<\/a><\/p>\n<hr>\n<h3>Design &amp; Content Conference<\/h3>\n<p><strong>Date<\/strong>: July 17-19<br \/>\n<strong>Location<\/strong>: Vancouver, Canada<br \/>\n<strong>Theme<\/strong>: Design and Content<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/www.designcontentconf.com\/\">http:\/\/www.designcontentconf.com\/<\/a><\/p>\n<hr>\n<h3>Code<\/h3>\n<p><strong>Date<\/strong>: July 26-27<br \/>\n<strong>Location<\/strong>: Melbourne<br \/>\n<strong>Date<\/strong>: July 31- August 1<br \/>\n<strong>Location<\/strong>: Sydney<br \/>\n<strong>Date<\/strong>: August 4<br \/>\n<strong>Location<\/strong>: Brisbane<br \/>\n<strong>Link<\/strong>: <a href=\"https:\/\/www.webdirections.org\/code\/\" target=\"_blank\">https:\/\/www.webdirections.org\/code\/<\/a><\/p>\n<h2>August<\/h2>\n<h3>DjangoCon US<\/h3>\n<p><strong>Date<\/strong>: August 13<br \/>\n<strong>Location<\/strong>: Spokane, WA<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/2017.djangocon.us\">https:\/\/2017.djangocon.us<\/a><\/p>\n<hr>\n<h3>Web Animations Workshops Denver<\/h3>\n<p><strong>Date<\/strong>: August 18<br \/>\n<strong>Location<\/strong>: Denver, CO<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/webanimationworkshops.com\/\">https:\/\/webanimationworkshops.com\/<\/a><\/p>\n<hr>\n<h3>MidwestJS<\/h3>\n<p><strong>Date<\/strong>: August 16-18<br \/>\n<strong>Location<\/strong>: Minneapolis<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/www.midwestjs.com\/\">http:\/\/www.midwestjs.com\/<\/a><\/p>\n<hr>\n<h3>React Rally<\/h3>\n<p><strong>Date<\/strong>: August 24-25<br \/>\n<strong>Location<\/strong>: Salt Lake City, Utah<br \/>\n<strong>Theme<\/strong>: React<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/www.reactrally.com\/\">http:\/\/www.reactrally.com\/<\/a><\/p>\n<hr>\n<h3>BrazilJS<\/h3>\n<p><strong>Date<\/strong>: August 25-26<br \/>\n<strong>Location<\/strong>: Brazil<br \/>\n<strong>Link<\/strong>: <a href=\"https:\/\/braziljs.org\/conf\/2017\/\" target=\"_blank\">https:\/\/braziljs.org\/conf\/2017\/<\/a><\/p>\n<hr>\n<h3>An Event Apart<\/h3>\n<p><strong>Date<\/strong>: August 28-30<br \/>\n<strong>Location<\/strong>: Chicago<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/aneventapart.com\/event\/chicago-2017\">https:\/\/aneventapart.com\/event\/chicago-2017<\/a><\/p>\n<hr>\n<h3>Frontend Conference Zurich<\/h3>\n<p><strong>Date<\/strong>: 31 August \u2013 1 September<br \/>\n<strong>Location<\/strong>: Zurich, Switzerland<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/frontendconf.ch\/\">https:\/\/frontendconf.ch\/<\/a><\/p>\n<h2>September<\/h2>\n<h3>Web Animations Workshops Paris<\/h3>\n<p><strong>Date<\/strong>: Sept 4-5<br \/>\n<strong>Location<\/strong>: Paris, France<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/webanimationworkshops.com\/\">https:\/\/webanimationworkshops.com\/<\/a><\/p>\n<hr>\n<h3>NordicJS<\/h3>\n<p><strong>Date<\/strong>: September 7-8<br \/>\n<strong>Location<\/strong>: Stockholm, Sweden<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/nordicjs.com\">http:\/\/nordicjs.com<\/a><\/p>\n<hr>\n<h3>Refresh<\/h3>\n<p><strong>Date<\/strong>: September 8<br \/>\n<strong>Location<\/strong>: Tallinn, Estonia<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/refresh.rocks\/\">http:\/\/refresh.rocks\/<\/a><\/p>\n<hr>\n<h3>At the Frontend<\/h3>\n<p><strong>Date<\/strong>: September 12-13<br \/>\n<strong>Location<\/strong>: Copenhagen, DK<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/atthefrontend.dk\/\">http:\/\/atthefrontend.dk\/<\/a><\/p>\n<hr>\n<h3>FrontTalks<\/h3>\n<p><strong>Date<\/strong>: Sept 16-17<br \/>\n<strong>Location<\/strong>: Ekaterinburg, Russia<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/fronttalks.ru\/\">http:\/\/fronttalks.ru\/<\/a><\/p>\n<hr>\n<h3>Generate<\/h3>\n<p><strong>Date<\/strong>: Sept 20-22<br \/>\n<strong>Location<\/strong>: London<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/www.generateconf.com\/\">https:\/\/www.generateconf.com\/<\/a><\/p>\n<hr>\n<h3>CONNECT.TECH<\/h3>\n<p><strong>Date<\/strong>: Sep 20-22<br \/>\n<strong>Location<\/strong>: Atlanta<br \/>\n<strong>Link<\/strong>: <a href=\"www.connect.tech\" target=\"_blank\">www.connect.tech<\/a><\/p>\n<hr>\n<h3>The Web Unleashed<\/h3>\n<p><strong>Date<\/strong>: September 25-26<br \/>\n<strong>Location<\/strong>: Toronto<br \/>\n<strong>Link<\/strong>: <a href=\"Fitc.ca\" target=\"_blank\">Fitc.ca<\/a><\/p>\n<hr>\n<h3>Design Matters<\/h3>\n<p><strong>Date<\/strong>: September 27-28<br \/>\n<strong>Location<\/strong>: Copenhagen, DK<br \/>\n<strong>Theme<\/strong>: Digital Design<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/designmatters.io\/\">https:\/\/designmatters.io\/<\/a><\/p>\n<h2>October<\/h2>\n<h3>Polymer Summit<\/h3>\n<p><strong>Date<\/strong>: September or October<br \/>\n<strong>Location<\/strong>: London<br \/>\n<strong>Link<\/strong>: <a href=\"https:\/\/www.polymer-project.org\/summit\" target=\"_blank\">https:\/\/www.polymer-project.org\/summit<\/a><\/p>\n<hr>\n<h3>HighEdWeb<\/h3>\n<p><strong>Date<\/strong>: Oct 8-11<br \/>\n<strong>Location<\/strong>: Hartford, CT<br \/>\n<strong>Link<\/strong>: <a href=\"https:\/\/2017.highedweb.org\/\" target=\"_blank\">https:\/\/2017.highedweb.org\/<\/a><\/p>\n<hr>\n<h3>CSS Dev Conf<\/h3>\n<p><strong>Date<\/strong>: October 9-11<br \/>\n<strong>Location<\/strong>: New Orleans<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/2017.cssdevconf.com\/\">http:\/\/2017.cssdevconf.com\/<\/a><\/p>\n<hr>\n<h3>Mirror Conf<\/h3>\n<p><strong>Date<\/strong>: October 10\u201413<br \/>\n<strong>Location<\/strong>: Braga, Portugal<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/www.mirrorconf.com\/\">http:\/\/www.mirrorconf.com\/<\/a><\/p>\n<hr>\n<h3>Midwest UX<\/h3>\n<p><strong>Date<\/strong>: October 12-14<br \/>\n<strong>Location<\/strong>: Cincinnati, OH<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/2017.midwestuxconference.com\/\">http:\/\/2017.midwestuxconference.com\/<\/a><\/p>\n<hr>\n<h3>Web Animations Workshops Pittsburgh<\/h3>\n<p><strong>Date<\/strong>: October 13<br \/>\n<strong>Location<\/strong>: Pittsburgh, PA<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/webanimationworkshops.com\/\">https:\/\/webanimationworkshops.com\/<\/a><\/p>\n<hr>\n<h3>Empire JS<\/h3>\n<p><strong>Date<\/strong>: October 22<br \/>\n<strong>Location<\/strong>: New York, NY<br \/>\n<strong>Theme<\/strong>: JavaScript<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"http:\/\/2017.empirejs.org\/\">http:\/\/2017.empirejs.org\/<\/a><\/p>\n<hr>\n<h3>#fstoco - Full Stack Toronto Conference 2017<\/h3>\n<p><strong>Date<\/strong>: Oct 23-24<br \/>\n<strong>Theme<\/strong>: Diversity and Inclusion has always been our focus, and this year we will be focusing on ready for production technology with a sprinkle of inspirational new content.<br \/>\n<strong>Location<\/strong>: Toronto<br \/>\n<strong>Link<\/strong>: <a href=\"http:\/\/2017.fsto.co\" target=\"_blank\">http:\/\/2017.fsto.co<\/a><\/p>\n<hr>\n<h3>Revolve Conference<\/h3>\n<p><strong>Date<\/strong>: October 25-27<br \/>\n<strong>Location<\/strong>: Charleston, SC<br \/>\n<strong>Link<\/strong>: <a href=\"https:\/\/2017.revolveconference.com\/\" target=\"_blank\">https:\/\/2017.revolveconference.com\/<\/a><\/p>\n<hr>\n<h3>An Event Apart<\/h3>\n<p><strong>Date<\/strong>: October 30- November 1<br \/>\n<strong>Location<\/strong>: San Francisco<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/aneventapart.com\/event\/san-francisco-2017\">https:\/\/aneventapart.com\/event\/san-francisco-2017<\/a><\/p>\n<h2>November<\/h2>\n<h3>js.talks<\/h3>\n<p><strong>Date<\/strong>: November<br \/>\n<strong>Location<\/strong>: Bulgaria<br \/>\n<strong>Link<\/strong>: <a href=\"http:\/\/jstalks.net\" target=\"_blank\">http:\/\/jstalks.net<\/a><\/p>\n<hr>\n<h3>JSTalks Bulgaria<\/h3>\n<p><strong>Date<\/strong>: Nov 18<br \/>\n<strong>Location<\/strong>: Sofia<br \/>\n<strong>Theme<\/strong>: A community event, dedicated to JavaScript and all related technologies and frameworks<br \/>\n<strong>Link<\/strong>: <a href=\"http:\/\/www.jstalks.net\/\" target=\"_blank\">http:\/\/www.jstalks.net\/<\/a><\/p>\n<hr>\n<h3>Pixel Pioneers Belfast<\/h3>\n<p><strong>Date<\/strong>: November 16<br \/>\n<strong>Location<\/strong>: Belfast<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/pixelpioneers.co\/\">https:\/\/pixelpioneers.co\/<\/a><\/p>\n<hr>\n<h3>Clarity<\/h3>\n<p><strong>Date<\/strong>: November 28<br \/>\n<strong>Location<\/strong>: San Francisco<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/www.clarityconf.com\/\">https:\/\/www.clarityconf.com\/<\/a><\/p>\n<h2>December<\/h2>\n<h3>WordCamp US 2017<\/h3>\n<p><strong>Date<\/strong>: Dec 1-3<br \/>\n<strong>Theme<\/strong>: WordPress<br \/>\n<strong>Location<\/strong>: Nashville, TN<br \/>\n<strong>Link<\/strong>: <a href=\"https:\/\/2017.us.wordcamp.org\/\" target=\"_blank\">https:\/\/2017.us.wordcamp.org\/<\/a><\/p>\n<hr>\n<h3>The Rich Web Experience<\/h3>\n<p><strong>Date<\/strong>: Dec 5-8<br \/>\n<strong>Location<\/strong>: Clear Water, Florida<br \/>\n<strong>Link<\/strong>: <a href=\"https:\/\/therichwebexperience.com\/\" target=\"_blank\">https:\/\/therichwebexperience.com\/<\/a><\/p>\n<hr>\n<h3>NG-BE<\/h3>\n<p><strong>Date<\/strong>: Dec 7-8<br \/>\n<strong>Location<\/strong>: Belgium<br \/>\n<strong>Theme<\/strong>: Angular<br \/>\n<strong>Link<\/strong>: <a href=\"https:\/\/ng-be.org\/\" target=\"_blank\">https:\/\/ng-be.org\/<\/a><\/p>\n<hr>\n<h3>An Event Apart<\/h3>\n<p><strong>Date<\/strong>: December 11-13<br \/>\n<strong>Location<\/strong>: Denver<br \/>\n<strong>Link<\/strong>: <a target=\"_blank\" href=\"https:\/\/aneventapart.com\/event\/denver-2017\">https:\/\/aneventapart.com\/event\/denver-2017<\/a><\/p>\n<h2>TBA Conferences<\/h2>\n<p>There are a lot of conferences that will be around this year that don't yet have dates or an updated site. Here is a list of some of them to watch out for, we'll be updating them as details come in. If you are the organizer of one of these conferences, please fill out the form below to provide us with details. <\/p>\n<ul>\n<li>Clarity Conf<\/li>\n<li>RWD Summit<\/li>\n<li>CSS Conf AU<\/li>\n<li>Space City JS<\/li>\n<li>JSConf Uruguay<\/li>\n<li>Industry Conf<\/li>\n<li>HTML5DevConf<\/li>\n<li>CSSConf Budapest<\/li>\n<li>JSConf Budapest<\/li>\n<li>Valio Con<\/li>\n<li>Port80<\/li>\n<li>CSSconf Nordic<\/li>\n<li>CSS Day + HTML Special<\/li>\n<li>JS Conf Iceland<\/li>\n<li>Nebraska JavaScript Conference<\/li>\n<li>Reasons to be Creative<\/li>\n<li>Nightly Build<\/li>\n<li>Full Stack Fest<\/li>\n<li>ReactNext 2016<\/li>\n<li>From the Front<\/li>\n<li>NCDevCon<\/li>\n<li>FrontTalks<\/li>\n<li>CSS Conf<\/li>\n<li>LibertyJS<\/li>\n<li>View Source Berlin<\/li>\n<li>Front Porch<\/li>\n<li>Empire Node<\/li>\n<li>Mixin Conf<\/li>\n<li>Progressive Web App Dev Summit<\/li>\n<li>SassConf<\/li>\n<li>View Source Seattle<\/li>\n<li>Graphical Web<\/li>\n<li>ELA Conf<\/li>\n<li>Nodevember<\/li>\n<li>CSS Conf Asia<\/li>\n<li>JS Conf Asia<\/li>\n<li>JS Kongress Munich<\/li>\n<li>CSS Conf AU<\/li>\n<li>JS Conf AU<\/li>\n<li>Ampersand<\/li>\n<li>dotCSS<\/li>\n<li>dotJS<\/li>\n<li>CSSDay.io<\/li>\n<li>WebCamp Zagreb<\/li>\n<\/ul>\n<h2>Add a Conference<\/h2>\n<p>If you don't see your conference listed here or have more details to add, <a href=\"https:\/\/goo.gl\/forms\/817vxN6cvNgabfcs2\">please fill out this form<\/a>. Please understand that we might gather responses before updating it, so you may need to wait a little bit before your changes are reflected in the post.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Back by popular demand! It&#8217;s difficult to keep track of all of the great talks and conferences happening in our industry. Sometimes you may find out too late that an event is taking place, and it&#8217;s a real shame when it&#8217;s an something you might have attended. We&#8217;ve compiled this list so you can see [&hellip;]<\/p>\n","protected":false},"author":7699,"featured_media":249720,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[19,4,18,20],"tags":[988,975],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249105"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/7699"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249105"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249105\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/249720"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249105"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249105"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249105"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249289,"date":"2016-12-24T07:58:38","date_gmt":"2016-12-24T14:58:38","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249289"},"modified":"2016-12-24T07:58:38","modified_gmt":"2016-12-24T14:58:38","slug":"learning-lego-step-forward-modular-web-design","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/learning-lego-step-forward-modular-web-design\/","title":{"rendered":"Learning from Lego: A Step Forward in Modular Web Design"},"content":{"rendered":"<p>Samantha Zhang: <\/p>\n<blockquote><p>When web components are modular like Lego bricks down to the elements level, they become more versatile and easier to maintain. We believe it\u2019s the next step to take in modular web design.<\/p><\/blockquote>\n<p>It's a clever system: put a half-gutter around all elements and a half-gutter around the containers. That way no matter what touches what, full gutters are naturally there.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Samantha Zhang: When web components are modular like Lego bricks down to the elements level, they become more versatile and easier to maintain. We believe it\u2019s the next step to take in modular web design. It&#8217;s a clever system: put a half-gutter around all elements and a half-gutter around the containers. That way no matter [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[987,586,986,845],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249289"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249289"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249289\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249289"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249289"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249289"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249285,"date":"2016-12-24T07:58:25","date_gmt":"2016-12-24T14:58:25","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249285"},"modified":"2016-12-24T07:58:25","modified_gmt":"2016-12-24T14:58:25","slug":"optimal-image-format-browser","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/optimal-image-format-browser\/","title":{"rendered":"The &#8220;Optimal Image Format&#8221; for Each Browser"},"content":{"rendered":"<p>Perhaps you've heard about the <a href=\"https:\/\/css-tricks.com\/using-webp-images\/\">WebP<\/a> image format? And how it's a pretty good performance win, for the browsers that support it? Well that's only for Blink-based browsers, at the moment. Estelle Weyl's article <a href=\"http:\/\/calendar.perfplanet.com\/2016\/image-optimization\/\">Image Optimization<\/a> explains the best image format for each browser:<\/p>\n<table>\n<tbody>\n<tr>\n<th>\nBrowser\n<\/th>\n<th>\nOptimal image format\n<\/th>\n<\/tr>\n<tr>\n<td>\nChrome\n<\/td>\n<td>\nWebP\n<\/td>\n<\/tr>\n<tr>\n<td>\nIE 9+ \/ Edge\n<\/td>\n<td>\nJPEG-XR\n<\/td>\n<\/tr>\n<tr>\n<td>\nOpera\n<\/td>\n<td>\nWebP\n<\/td>\n<\/tr>\n<tr>\n<td>\nSafari\n<\/td>\n<td>\nJPEG-2000\n<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>And you can serve these formats through the <code>&lt;picture&gt;&lt;source type=\"\"&gt;<\/code> syntax.<\/p>\n<p>Couple that complexity with the complexity of responsive images, and it really seems like outsourcing image delivery to a dedicated service seems like the way to go. At least above a certain scale.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Perhaps you&#8217;ve heard about the WebP image format? And how it&#8217;s a pretty good performance win, for the browsers that support it? Well that&#8217;s only for Blink-based browsers, at the moment. Estelle Weyl&#8217;s article Image Optimization explains the best image format for each browser: Browser Optimal image format Chrome WebP IE 9+ \/ Edge JPEG-XR [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[592,521],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249285"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249285"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249285\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249285"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249285"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249285"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249249,"date":"2016-12-23T09:13:15","date_gmt":"2016-12-23T16:13:15","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249249"},"modified":"2017-01-01T13:44:20","modified_gmt":"2017-01-01T20:44:20","slug":"presentation-attributes-vs-inline-styles","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/presentation-attributes-vs-inline-styles\/","title":{"rendered":"Presentation Attributes vs Inline Styles"},"content":{"rendered":"<p>This is a distinction worth knowing about. They look pretty similar. They can do some of the same things. But, one is very easy to override and the other is not.<\/p>\n<p><!--more--><\/p>\n<p><strong>Inline styles<\/strong> are likely a bit more familiar:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;div style=\"width: 300px; height: 300px;\"&gt;\r\n  Inline styles on an HTML element.\r\n&lt;\/div&gt;<\/code><\/pre>\n<p>SVG can do that too:<\/p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;svg style=\"width: 300px;\"&gt;\r\n Inline styles on an SVG element.\r\n&lt;\/svg&gt;<\/code><\/pre>\n<p>But SVG has this concept of <strong>presentational attributes<\/strong> as well, meaning we could do this:<\/p>\n<pre rel=\"SVG\"><code class=\"language-markup\">&lt;svg width=\"300px\" height=\"300px\"&gt;\r\n  Presentational attributes on an SVG element.\r\n&lt;\/svg&gt;<\/code><\/pre>\n<p>The difference?<\/p>\n<h3>Presentational attributes are very easy to override in CSS<\/h3>\n<p>Any CSS at all will do.<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">\/* These styles will override the presentational attributes *\/\r\nsvg {\r\n  width: 250px;\r\n  height: 250px;\r\n}<\/code><\/pre>\n<h3>Inline styles can only be override by !important styles in CSS<\/h3>\n<p>The only way to override an inline style is by using !important rules:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">svg {\r\n  width: 250px !important;\r\n  height: 250px !important;\r\n}<\/code><\/pre>\n<h3>A crude diagram to drive the point home<\/h3>\n<figure id=\"post-249259\" class=\"align-none media-249259\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/overrides.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/overrides.png 929w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/overrides-300x198.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/overrides-768x506.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>This does actually come up, I find, in day-to-day development. For example, Illustrator asks how you want to style exported SVG:<\/p>\n<figure id=\"post-249260\" class=\"align-none media-249260\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/illustartor-export.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/illustartor-export.png 400w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/illustartor-export-300x251.png 300w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>It also <a href=\"https:\/\/twitter.com\/chriscoyier\/status\/799294264446287872\">makes good sense<\/a> to <em>add<\/em> presentational attributes, especially sizing ones, to SVG to avoid <a href=\"https:\/\/sarasoueidan.com\/blog\/svg-style-inheritance-and-FOUSVG\/\">FOUSVG<\/a>. <\/p>\n","protected":false},"excerpt":{"rendered":"<p>This is a distinction worth knowing about. They look pretty similar. They can do some of the same things. But, one is very easy to override and the other is not.<\/p>\n","protected":false},"author":3,"featured_media":249259,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[469],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249249"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249249"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249249\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media\/249259"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249249"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249249"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249249"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249256,"date":"2016-12-23T08:08:33","date_gmt":"2016-12-23T15:08:33","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249256"},"modified":"2016-12-23T08:08:33","modified_gmt":"2016-12-23T15:08:33","slug":"comes-next-future","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/comes-next-future\/","title":{"rendered":"What Comes Next Is the Future"},"content":{"rendered":"<p>Matt Griffin's documentary about the web, now available to watch free on Vimeo.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Matt Griffin&#8217;s documentary about the web, now available to watch free on Vimeo.<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[985,672],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249256"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249256"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249256\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249256"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249256"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249256"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249254,"date":"2016-12-23T07:31:20","date_gmt":"2016-12-23T14:31:20","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249254"},"modified":"2016-12-23T07:31:57","modified_gmt":"2016-12-23T14:31:57","slug":"the-stone-has-been-unstuck","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/the-stone-has-been-unstuck\/","title":{"rendered":"&#8220;the stone has been unstuck&#8221;"},"content":{"rendered":"<p>Matt Mullenweg, on the release of a new homepage for WordPress.org, which hasn't seen a redesign in a long time:<\/p>\n<blockquote><p>What\u2019s on the page today actually isn\u2019t that important, even though it\u2019s better in many ways, the key is that it\u2019s changing again, the stone has been unstuck and can now keep rolling.<\/p><\/blockquote>\n<p>I like that sentiment. With a redesign, sometimes it's not so much about the new pixels themselves, but the fact that a workflow is now in place for the work to continue.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Matt Mullenweg, on the release of a new homepage for WordPress.org, which hasn&#8217;t seen a redesign in a long time: What\u2019s on the page today actually isn\u2019t that important, even though it\u2019s better in many ways, the key is that it\u2019s changing again, the stone has been unstuck and can now keep rolling. I like [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[984,264],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249254"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249254"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249254\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249254"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249254"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249254"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249250,"date":"2016-12-23T07:10:37","date_gmt":"2016-12-23T14:10:37","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249250"},"modified":"2016-12-23T07:10:37","modified_gmt":"2016-12-23T14:10:37","slug":"front-end-performance-checklist-2017","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/front-end-performance-checklist-2017\/","title":{"rendered":"Front-End Performance Checklist 2017"},"content":{"rendered":"<p>Vitaly Friedman's list includes a \"Quick Wins\" section with the web performance things that can't be ignored. If you aren't setting caching headers on assets, optimizing images, and gzipping, you're leaving some huge and easy performance gains on the table. After you've covered those, then you can dig into Brotli, OSCP, tree-shaking, and whatnot.<\/p>\n<p>Speaking of which, I should really look into Brotli, OSCP, tree-shaking and whatnot.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Vitaly Friedman&#8217;s list includes a &#8220;Quick Wins&#8221; section with the web performance things that can&#8217;t be ignored. If you aren&#8217;t setting caching headers on assets, optimizing images, and gzipping, you&#8217;re leaving some huge and easy performance gains on the table. After you&#8217;ve covered those, then you can dig into Brotli, OSCP, tree-shaking, and whatnot. Speaking [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[592],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249250"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249250"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249250\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249250"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249250"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249250"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249232,"date":"2016-12-22T17:36:15","date_gmt":"2016-12-23T00:36:15","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249232"},"modified":"2016-12-22T17:36:15","modified_gmt":"2016-12-23T00:36:15","slug":"exporting-images-multiple-resolutions-simultaneously","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/exporting-images-multiple-resolutions-simultaneously\/","title":{"rendered":"Exporting Images in Multiple Resolutions Simultaneously"},"content":{"rendered":"<p>No surprise to any of y'all: screens come in a whole lot of different sizes and pixel densities these days. The technology behind dealing with that is catching up. For example, <a href=\"https:\/\/css-tricks.com\/tag\/responsive-images\/\">responsive images<\/a>. So, we need software to help us generate those many versions of images we need. <\/p>\n<p>Thankfully, all the most popular design software is starting to accommodate that need. Adobe Photoshop, Adobe Illustrator, Sketch, and Affinity Design all have pretty solid workflows for doing just that. I cover all those in this post over on the Media Temple blog.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>No surprise to any of y&#8217;all: screens come in a whole lot of different sizes and pixel densities these days. The technology behind dealing with that is catching up. For example, responsive images. So, we need software to help us generate those many versions of images we need. Thankfully, all the most popular design software [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[596,521,983],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249232"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249232"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249232\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249232"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249232"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249232"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249219,"date":"2016-12-22T14:29:16","date_gmt":"2016-12-22T21:29:16","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249219"},"modified":"2016-12-22T14:29:56","modified_gmt":"2016-12-22T21:29:56","slug":"zooming","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/zooming\/","title":{"rendered":"Zooming"},"content":{"rendered":"<p>Check out this <a href=\"https:\/\/github.com\/kingdido999\/zooming\">nice image-zooming library<\/a> by Desmond Ding. It's fairly little, has no dependencies, and has all the modern stuff to make it easy to integrate into modern sites (you know, available on npm, and modulized). I tossed a demo up on CodePen for playing convenience:<\/p>\n<p data-height=\"680\" data-theme-id=\"1\" data-slug-hash=\"rWbZPV\" data-default-tab=\"result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Zooming\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/chriscoyier\/pen\/rWbZPV\/\">Zooming<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p><!--more--><\/p>\n<p>When I said \"fairly little\" there, the minified version is still 7K. Check out Dave Rupert's take where it's all done with some transitions and <a href=\"https:\/\/css-tricks.com\/viewport-sized-typography\/\">viewport units<\/a>. That's just a few bytes of code!<\/p>\n<p data-height=\"632\" data-theme-id=\"1\" data-slug-hash=\"ENOVVV\" data-default-tab=\"result\" data-user=\"davatron5000\" data-embed-version=\"2\" data-pen-title=\"Experiment: Using Picture Element and VW+VH units as a Lightbox\" class=\"codepen\">See the Pen <a href=\"https:\/\/codepen.io\/davatron5000\/pen\/ENOVVV\/\">Experiment: Using Picture Element and VW+VH units as a Lightbox<\/a> by Dave Rupert (<a href=\"http:\/\/codepen.io\/davatron5000\">@davatron5000<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>Ahhhhh <a href=\"https:\/\/css-tricks.com\/power-changing-classes\/\">the power of changing classes<\/a>. <\/p>\n","protected":false},"excerpt":{"rendered":"<p>Check out this nice image-zooming library by Desmond Ding. It&#8217;s fairly little, has no dependencies, and has all the modern stuff to make it easy to integrate into modern sites (you know, available on npm, and modulized). I tossed a demo up on CodePen for playing convenience: See the Pen Zooming by Chris Coyier (@chriscoyier) [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[431,981,982],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249219"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249219"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249219\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249219"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249219"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249219"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249172,"date":"2016-12-22T07:35:35","date_gmt":"2016-12-22T14:35:35","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249172"},"modified":"2016-12-22T07:35:35","modified_gmt":"2016-12-22T14:35:35","slug":"cars-broken-windshield-wipers","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/cars-broken-windshield-wipers\/","title":{"rendered":"Cars with Broken Windshield Wipers"},"content":{"rendered":"<p>I was stopped at an intersection the other day. It was raining. The road on the other side sloped upwards, so I could see the stopped cars on the other side of the road kind of stadium-seating style. I could see all their windshield wipers going all at the same time, all out-of-sync with each other. Plus a few of them had seemingly kinda broken ones that flapped at awkward times and angles. <\/p>\n<p>What does that have to do with web design and development? Nothing really, other than that I took the scene as inspiration to create something, and it ended up being an interesting hodgepodge of \"tricks\".<\/p>\n<p><!--more--><\/p>\n<p data-height=\"535\" data-theme-id=\"1\" data-slug-hash=\"woxRBW\" data-default-tab=\"result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Cars with Weird Windshield Wipers\" class=\"codepen\">See the Pen <a href=\"https:\/\/codepen.io\/chriscoyier\/pen\/woxRBW\/\">Cars with Weird Windshield Wipers<\/a> by Chris Coyier  (<a href=\"http:\/\/codepen.io\/chriscoyier\">@chriscoyier<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3>It's SVG<\/h3>\n<p>When you need a little shape like a car, <a href=\"https:\/\/thenounproject.com\/search\/?q=car\">nothing beats The Noun Project<\/a>. <\/p>\n<figure id=\"post-249211\" class=\"align-none media-249211\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/noun-proj.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/noun-proj.png 1054w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/noun-proj-300x216.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/noun-proj-768x553.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/noun-proj-1024x737.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>I actually used the little Mac app they have and dragged the car I liked onto Adobe Illustrator. Then drew two little lines on the windshield for the wipers. Literal, straight, <code>&lt;line&gt;<\/code>s. <\/p>\n<h3>Repeating the SVG<\/h3>\n<p>I planned on showing a whole grid of cars. I could have just popped the SVG into the HTML 20 times. But that isn't very efficient in that it lacks control. I figured programmatically looping was the way to go. Pug (the HTML preprocessor) offers simple loops, so I went for that. At first, I did:<\/p>\n<pre rel=\"Pug\"><code>- svg = '&lt;svg viewBox=\"0 0 59 45.9\" class=\"car\"&gt; ... &lt;\/svg&gt;'\r\n\r\nwhile cars &lt; 20\r\n  - cars++\r\n  != svg<\/code><\/pre>\n<p>Figuring I could target \"rows\" of cars by using <code>:nth-child<\/code> selectors. For example, if I wanted to select just the 10th-15th cars, I could do like <code>.car:nth-child(n+11):nth-child(-n+15)<\/code>. In the end, it was easier to target a whole \"row\" of cars grouped together, so they could scale all together. So:<\/p>\n<pre rel=\"Pug\"><code>- cols = 0\r\n- rows = 0\r\n- svg = '&lt;svg viewBox=\"0 0 59 45.9\" class=\"car\"&gt; ... &lt;\/svg&gt;'\r\n\r\nwhile rows &lt; 4\r\n  - rows++\r\n  div.car-row\r\n    - cols = 0\r\n    while cols &lt; 5\r\n      - cols++\r\n        != svg<\/code><\/pre>\n<h3>Sizing<\/h3>\n<p>Each car has a particular aspect ratio. Notice the viewBox of the SVG. I figured it would be best to size them according to that aspect ratio. I set the aspect ratio in pixels, as variables, then I could use a multiplier to scale them. For example, here I'm doubling their \"size\":<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">:root {\r\n  --carWidth: 59px;\r\n  --carHeight: 46px;\r\n}\r\n.car {\r\n  width: calc(var(--carWidth) * 2);\r\n  height: calc(var(--carHeight) * 2);\r\n}<\/code><\/pre>\n<p>Before I decided to break up the \"rows\" of cars with divs, I was able to force the floated cars into rows by limiting the width of the body with a multiple of the width of a car.<\/p>\n<h3>Animating the Wipers<\/h3>\n<p>The animation of the wiper is clearly a rotation transform. Normally I'd worry about that in SVG, as transforms on SVG elements are <a href=\"https:\/\/css-tricks.com\/svg-animation-on-css-transforms\/\">notoriously inconsistent across browsers<\/a>. That's why I reached for GSAP, which normalizes that. <\/p>\n<p>My first thought was to set up a timeline. Timelines in GSAP have a <code>yoyo<\/code> parameter that make good sense for the back-and-forth style motion of a windshield wiper. We'll use rotation, anchored at the bottom right, where the wipers pivot.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var wipers = document.querySelectorAll(\".wiper\");\r\n\r\nvar tl = new TimelineMax({\r\n  repeat: -1,\r\n  yoyo: true\r\n});\r\ntl.to(wipers, 0.6, {\r\n  rotation: 90, \r\n  transformOrigin: \"bottom right\",\r\n  ease: Expo.easeOut,\r\n});<\/code><\/pre>\n<h3>Randomizing<\/h3>\n<p>A helper function to spit out pseudo random numbers:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">function getRandomInt(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}<\/code><\/pre>\n<p>Now we can add randomization like delays and how far the rotation actually goes:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var tl = new TimelineMax({\r\n  repeat: -1,\r\n  yoyo: true,\r\n  delay: getRandomInt(1, 4)\r\n});\r\ntl.to(wipers, 0.6, {\r\n  rotation: function() {\r\n    return getRandomInt(80, 140);\r\n  }, \r\n  transformOrigin: \"bottom right\",\r\n  ease: Expo.easeOut,\r\n});<\/code><\/pre>\n<p>This works pretty well, it's just that each wiper then has a <em>set<\/em> timeline that it follows, it doesn't randomize each iteration. We can get a little closer by looping over each wiper and applying a unique timeline to each:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">wipers.forEach(function(el, i) {\r\n  \r\n  var tl = new TimelineMax({\r\n    repeat: -1,\r\n    yoyo: true,\r\n    delay: getRandomInt(1, 4)\r\n  });\r\n  tl.to(el, 0.6, {\r\n    rotation: function() {\r\n      return getRandomInt(80, 140);\r\n    }, \r\n    transformOrigin: \"bottom right\",\r\n    ease: Expo.easeOut,\r\n  });\r\n  \r\n});<\/code><\/pre>\n<h3>Callback randomization<\/h3>\n<p>To make each iteration randomly rotate, I think it might be easier to not actually use a timeline, but just call a single animation method over and over as a callback. That way each time we call it, it can be randomized. So rather than <code>TimelineMax()<\/code>, we'll use <code>TweenLite<\/code> and abstract it into our own function.<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">function doWiperAnimation(el) {\r\n  TweenLite.to(el, 0.5, {\r\n    delay: getRandomInt(0.1, 0.3),\r\n    rotation: function() {\r\n      return getRandomInt(0, 140);\r\n    }, \r\n    transformOrigin: \"bottom right\",\r\n    ease: Power0.easeNone,\r\n    onComplete: function() {\r\n      doWiperAnimation(el);\r\n    }\r\n  });\r\n}<\/code><\/pre>\n<p>Note how the <code>onComplete<\/code> callback calls itself. Animation loop! We just need to kick it off once:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">wipers.forEach(function(el, i) {\r\n  doWiperAnimation(el);\r\n});<\/code><\/pre>\n<p>There are no limits to how weird you wanna get with what you randomize. Here's how you might even randomize which easing you pick:<\/p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var easings = [\r\n  \"SlowMo.ease.config(0.7, 0.7, false)\",\r\n  \"Power0.easeNone\",\r\n  \"Power2.easeOut\"\r\n];\r\n\r\n...\r\n\r\nease: easings[Math.floor(Math.random()*easings.length)]<\/code><\/pre>\n","protected":false},"excerpt":{"rendered":"<p>I was stopped at an intersection the other day. It was raining. The road on the other side sloped upwards, so I could see the stopped cars on the other side of the road kind of stadium-seating style. I could see all their windshield wipers going all at the same time, all out-of-sync with each [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[612,506,469],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249172"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249172"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249172\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249172"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249172"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249172"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249023,"date":"2016-12-21T07:20:36","date_gmt":"2016-12-21T14:20:36","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249023"},"modified":"2016-12-21T07:20:36","modified_gmt":"2016-12-21T14:20:36","slug":"chrome-bias-finding-things-like-firefox","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/chrome-bias-finding-things-like-firefox\/","title":{"rendered":"Chrome Bias (and Finding Things To Like in Firefox)"},"content":{"rendered":"<p>Chrome has been my default browser for many years now, but I\u2019ve been thinking that my familiarity with just one browser has become a problem. If I tend to design for a single browser, then I\u2019ll start to make assumptions that those features are available for everyone. Then I\u2019m likely to miss important differences between browsers which could introduce bugs into the codebase or influence the amount of time I spend designing a feature.<\/p>\n<p>I\u2019ve started to call this problem \u201cChrome Bias\u201d, and over the past week, I decided I would do something about it by switching to Firefox. This way I could figure out what\u2019s new in one of the most popular web browsers out there. But! While I was running this little experiment of mine, I found three Firefox features that you might not know about if you suffer from extreme <em>Chrome Bias<\/em> like I do.<\/p>\n<p><!--more--><\/p>\n<p>I think these Firefox developer tool features are pretty nifty:<\/p>\n<h3>Theming the Developer Tools<\/h3>\n<p>I didn\u2019t know that you can set the theme of the Developer Tools in Firefox. That is particularly helpful for me when I want to work on something at night and can configure the theme to dark:<\/p>\n<figure id=\"post-249024\" class=\"align-none media-249024\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/ff-theme.gif\" alt=\"\" \/><\/figure>\n<h3>Fonts tab<\/h3>\n<p>Firefox\u2019s font tab might not be new but it certainly is to me. On the far right you can select the tab and see the type info for whichever element you\u2019ve selected: <\/p>\n<figure id=\"post-249025\" class=\"align-none media-249025\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/ff-fonts-tab.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/ff-fonts-tab.png 1984w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/ff-fonts-tab-300x222.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/ff-fonts-tab-768x567.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/ff-fonts-tab-1024x757.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>It\u2019s pretty neat that it tells you not only how to use that @font-face rule, but also the location from which the font is being requested as well. My favorite button here though must be the \u201cSee all the fonts used in the page\u201d button which sits in the bottom-right hand corner. Once you\u2019ve clicked that you can see every font-family that\u2019s been declared in the stylesheet that\u2019s served to the page:<\/p>\n<figure id=\"post-249026\" class=\"align-none media-249026\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/ff-fonts-1.gif\" alt=\"\" \/><\/figure>\n<p>I can see that being super helpful in larger codebases where you might accidentally have lots of fonts being declared inconsistently.<\/p>\n<h3>Performance tab<\/h3>\n<p>After you\u2019ve hit the 'Performance' tab and refreshed the page, you\u2019ll see a waterfall of every resource that\u2019s been requested. But did you know that you can see this data in the form of a graph, too? Here\u2019s how that works:<\/p>\n<figure id=\"post-249027\" class=\"align-none media-249027\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/ff-perf-chart.gif\" alt=\"\" \/><\/figure>\n<p>This is a great tool to identify bigger problems in performance\u2014perhaps you have a massive stylesheet being requested by the browser, and from here you\u2019ll be able to see the scale of the problem faster.<\/p>\n<h3>Wrapping up<\/h3>\n<p>Here\u2019s the thing: the more we experience how other browsers work, the more we learn about how different users experience our websites. Understanding how developer tools differ was useful in this instance, but learning about how unfamiliar browsers look and feel is enlightening as well.<\/p>\n<p>For the next step in my experiment, I want to try out more mobile browsers because I imagine the differences between them are even larger than those between desktop browser apps.<\/p>\n<p>What tricks have you learned from your non-regular browser lately?<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Chrome has been my default browser for many years now, but I\u2019ve been thinking that my familiarity with just one browser has become a problem. If I tend to design for a single browser, then I\u2019ll start to make assumptions that those features are available for everyone. Then I\u2019m likely to miss important differences between [&hellip;]<\/p>\n","protected":false},"author":223806,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249023"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/223806"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249023"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249023\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249023"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249023"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249023"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":248938,"date":"2016-12-20T06:13:43","date_gmt":"2016-12-20T13:13:43","guid":{"rendered":"https:\/\/css-tricks.com\/?p=248938"},"modified":"2016-12-21T16:17:19","modified_gmt":"2016-12-21T23:17:19","slug":"methods-overriding-styles-wordpress","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/methods-overriding-styles-wordpress\/","title":{"rendered":"Methods for Overriding Styles in WordPress"},"content":{"rendered":"<p>Let's say you manage a WordPress site. You chose, purchase, and install a pre-made theme. Say you added a few items you came across in the <a href=\"https:\/\/wordpress.org\/plugins\/\">WordPress plugin directory<\/a> to add some advanced features to the site. This is the awesomeness that is the WordPress ecosystem. It's relatively easy for anyone with light technical chops to get a website off the ground and wrangle together something powerful without having to build everything from scratch. It just works great and your website looks wonderful.<\/p>\n<p>Until it doesn't.<\/p>\n<p><!--more--><\/p>\n<p>I do a little work for a WordPress plugin. The number one thing that gets reported to the support team is, without a doubt, are situations where the plugin conflicts with either the installed theme or another installed plugin. The person reporting the problem has the plugin installed, but what it is doing looks nothing like the screenshots advertised by the plugin.<\/p>\n<p>This can be extremely irritating for the person managing the site. If this plugin is downloaded from the WordPress directory, then it ought to work right out of the box, right?<\/p>\n<p>You could argue this is an unrealistic expectation when you consider that most themes and plugins are developed by different people. It's understandable that mashing code from multiple authors into the same site will lead to at least some conflicts now and then, despite everyone's best intentions to deliver good work.<\/p>\n<h3>This post is going to look into the specific area of <em>style conflicts<\/em> and ways to overcome them.<\/h3>\n<p>I'll start off by saying that it's a tough position being a WordPress theme or plugin developer. On one hand, any stylesheets a plugin includes need to be opinionated enough so that they do what they need to do and look great. On the other hand, they need to respect the work of the active theme and other plugin developers so that the styles play nicely together. It's a balance that even a trained tightrope walker can appreciate.<\/p>\n<p>We're not going to talk about the different methods WordPress plugin developers have to make theme and plugin styles more compatible or theme-able. Instead, we're going to look at the different ways we can override conflicting CSS in WordPress that allow you to take control of the styling for any component of a WordPress site, regardless of whether it originates from the theme or a plugin.<\/p>\n<h3>Override Styles in the Active Theme<\/h3>\n<p>All WordPress sites employ a theme. CSS-Tricks runs on WordPress and it has its own custom theme, which contains all the template and style files needed to generate this post. Well, assuming you're reading this on the site and not from a <a href=\"https:\/\/css-tricks.com\/subscription-options\/\">syndicated feed<\/a>.<\/p>\n<p>The point being that all themes require at least two files, one of which is the magical `style.css`. This file is required because it contains information about the theme that WordPress would be unable to recognize the theme without.<\/p>\n<figure id=\"post-249153\" class=\"align-none media-249153\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/stylesheet.jpg\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/stylesheet.jpg 1000w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/stylesheet-300x197.jpg 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/stylesheet-768x505.jpg 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>Those of you who know a thing or two about WordPress might want to stop me here because <code>style.css<\/code> does not have to contain CSS and you would be right. It does not have to and we could simply add our own stylesheet to the header of the theme instead and use <code>style.css<\/code> as a shell for the theme to be recognized. That's legit. However, the file was indeed intended to be the primary location of a theme's files, regardless of how we choose to develop our sites.<\/p>\n<p>If your theme uses the file to contain the theme styles, you can modify it directly to change any of the styling properties of your site. It can also be used to add and override styles that might come packaged in plugins or other third-party sources.<\/p>\n<h3>Override Styles in a Child Theme<\/h3>\n<p>The active theme method is only great if you are the developer of the theme. Many folks, however, roll with themes made by other developers. I'm sure you've seen the many theme marketplaces out there that sell premium WordPress themes that you purchase, download, and install into WordPress. That's what we're talking about.<\/p>\n<p>If you're using one of these themes, then best practice is to manage your customizations in a <a href=\"https:\/\/codex.wordpress.org\/Child_Themes\">child theme<\/a>. This is really a fancy way of describing the process of creating a new folder in your WordPress `wp-content\/themes` directory that is the same name as your parent theme, only with `-child` appended to it.<\/p>\n<figure id=\"post-249154\" class=\"align-none media-249154\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/child-theme-docs.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/child-theme-docs.png 806w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/child-theme-docs-300x229.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/child-theme-docs-768x586.png 768w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>For example, if our parent theme directory is called `css-tricks` then our child theme directory would be called `css-tricks-child`. This directory requires `style.css` just like the parent directory and it will be loaded on the site after the parent theme's `style.css` file so that any styles contained in the child theme version will override the parent.<\/p>\n<p>Don't you wish that's how your teenage years worked?<\/p>\n<p>Now you can make as many changes as needed and you will not lose those changes when installing future updates that the theme developer releases.<\/p>\n<h3>Register and Enqueue Your Own Stylesheet<\/h3>\n<p>This is one of my favorite ways to go about overriding styles in WordPress. The idea is that you create your own stylesheet and load it into the site theme after all of the other stylesheets so that yours overrides the others.<\/p>\n<p>There are two well-documented WordPress functions, one called <a href=\"https:\/\/codex.wordpress.org\/Function_Reference\/wp_register_style\">wp_register_style()<\/a> and the other <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/wp_enqueue_style\/\"><code>wp_enqueue_style()<\/code><\/a> that allows us to do this and it can be added either to parent or child theme <code>functions.php<\/code> file in order tell WordPress to look for it and load it in the site header.<\/p>\n<p>This is a basic example of how the function can be used to call a stylesheet by the file name (aka handle) and file path:<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">function my-custom-styles() {\r\n  \/\/ Register my custom stylesheet\r\n  wp_register_style( 'custom-styles', get_template_directory_uri().'\/lib\/styles\/custom-styles.css' ) );\r\n  \/\/ Load my custom stylesheet\r\n  wp_enqueue_style( 'custom-styles' );\r\n}\r\nadd_action( 'wp_enqueue_scripts', 'my_custom_styles' );<\/code><\/pre>\n<p>We could get a little more fancy by telling WordPress to load it only on a specific page:<\/p>\n<pre rel=\"PHP\"><code class=\"language-javascript\">\/\/ Load my custom stylesheet\r\nfunction my_custom_styles() {\r\n  \/\/ Register my custom stylesheet\r\n  wp_register_style( 'custom-styles', get_template_directory_uri().'\/lib\/styles\/custom-styles.css' ) );\r\n  \/\/ Check that the current page is the homepage\r\n  if ( is_home ) {\r\n    \/\/ Then grab the custom stylesheet\r\n    wp_enqueue_style( 'custom-styles' );\r\n  }\r\n}\r\nadd_action( 'wp_enqueue_scripts', 'my_custom_styles' );<\/code><\/pre>\n<p>Note that adding an extra request to all pages is a performance consideration, but you can <a href=\"https:\/\/css-tricks.com\/taking-control-cssjs-wordpress-plugins-load\/\">certainly wrangle control of that<\/a> as well.<\/p>\n<h3>Art Direction<\/h3>\n<p>Art direction seemed to be all the rage in something like 2009, though <a href=\"https:\/\/css-tricks.com\/updated-art-direction-data\/\">recent data<\/a> suggests a slight rebound. The idea being that adding styles to the head on a one-off basis would allow you to create compelling layouts on a post-to-post basis. Styles injected into a <code>&lt;style&gt;<\/code> block in the head, as long as they come <em>after<\/em> the regular stylesheets of the site which are probably <code>&lt;link&gt;<\/code> elements, will have the opportunity to override existing styles nicely.<\/p>\n<p>Art direction can be used as an effective means for overriding conflicting styles as well and is particularly effective when those conflicts only exist in very specific places without having to create and load a full stylesheet to clean things up.<\/p>\n<figure id=\"post-249155\" class=\"align-none media-249155\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/art-direction-plugin.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/art-direction-plugin.png 573w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/art-direction-plugin-300x287.png 300w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>There are <a href=\"https:\/\/wordpress.org\/plugins\/search.php?q=art+direction\">plenty of WordPress plugins<\/a> that enable art direction. It's actually not too incredibly difficult to <a href=\"http:\/\/geoffgraham.me\/wordpress-art-director\/\">build this on your own<\/a>.<\/p>\n<h3>Using a Plugin<\/h3>\n<p>Hey, if a plugin got you into this mess of conflicting styles, then maybe there is one to get you out of it, right? Of course, there is.<\/p>\n<p>I am sure there are others out in the wild, but the one I am most familiar with is <a href=\"https:\/\/wordpress.org\/plugins\/simple-custom-css\/\">Simple Custom CSS<\/a>. The idea is pretty straightforward: a new screen is added that allows you to write CSS. The CSS entered and saved gets added to the document head which, like the art direction method we discussed, gives you the opportunity to override other styles on that particular page.<\/p>\n<h3>WordPress Customizer<\/h3>\n<p>WordPress 4.7 introduced a new feature in the WordPress Customizer that adds a CSS editor:<\/p>\n<figure id=\"post-249185\" class=\"align-none media-249185\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/wp-css-customizer.gif\" alt=\"\" \/><figcaption>Editing CSS in the WordPess Customizer<\/figcaption><\/figure>\n<p>This is essentially WordPress adding native support for the the Simple Custom CSS plugin mentioned earlier. In other words, styles are added to the head upon being saved.<\/p>\n<h3>WordPress Editor<\/h3>\n<p>Oh yeah, remember that? You can actually edit a site's <code>style.css<\/code> file directly in WordPress by navigating to the buried tavern that is the <b>Appearance > Editor<\/b> screen.<\/p>\n<figure id=\"post-249156\" class=\"align-none media-249156\"><img src=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/appearence-editor.png\" alt=\"\" srcset=\"https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/appearence-editor.png 1054w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/appearence-editor-300x213.png 300w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/appearence-editor-768x546.png 768w, https:\/\/css-tricks.com\/wp-content\/uploads\/2016\/12\/appearence-editor-1024x729.png 1024w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) \/ 3 )\n       (min-width: 1251px) calc( (100vw - 530px) \/ 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" \/><\/figure>\n<p>I'll preface this by saying I find this to be a scary place to hang out. It provides you with access to edit the code of any theme file, including PHP templates. The changes are not version controlled, so it's hard to know what has changed in case you screw something up, and if your version control system is in charge of deployment, and changes there might override changes made here.<\/p>\n<p>Still, it is possible to override styles here and to do so without needing to open up a text editor, saving your changes, then uploading them to a server (via whatever you do for deployment).<\/p>\n<h3>Wrapping Up<\/h3>\n<p>Look at that: seven methods for overriding styles in WordPress. The next time you run into a situation where something does not look right after installing a theme or plugin to your WordPress installation, you now have the power to take control of the mess and clean things up like a boss.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Let&#8217;s say you manage a WordPress site. You chose, purchase, and install a pre-made theme. Say you added a few items you came across in the WordPress plugin directory to add some advanced features to the site. This is the awesomeness that is the WordPress ecosystem. It&#8217;s relatively easy for anyone with light technical chops [&hellip;]<\/p>\n","protected":false},"author":2508,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[971,264,970],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/248938"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/2508"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=248938"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/248938\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=248938"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=248938"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=248938"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249138,"date":"2016-12-19T12:53:00","date_gmt":"2016-12-19T19:53:00","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249138"},"modified":"2016-12-19T14:19:58","modified_gmt":"2016-12-19T21:19:58","slug":"overview-client-side-storage","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/overview-client-side-storage\/","title":{"rendered":"An Overview of Client-Side Storage"},"content":{"rendered":"<p>Ire Aderinokun:<\/p>\n<blockquote><p>There are currently four active methods for storing data on the client side.<\/p><\/blockquote>\n<ol>\n<li>Cookies (old school, still useful because they are sent with server requests)<\/li>\n<li>Local Storage (<em>very<\/em> easy to use)<\/li>\n<li>Session Storage (exactly the same, only clears when the tab is closed)<\/li>\n<li>IndexedDB (quite complex, quite powerful)<\/li>\n<\/ol>\n","protected":false},"excerpt":{"rendered":"<p>Ire Aderinokun: There are currently four active methods for storing data on the client side. Cookies (old school, still useful because they are sent with server requests) Local Storage (very easy to use) Session Storage (exactly the same, only clears when the tab is closed) IndexedDB (quite complex, quite powerful)<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[972,759,973,974],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249138"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249138"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249138\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249138"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249138"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249138"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":248960,"date":"2016-12-19T06:52:33","date_gmt":"2016-12-19T13:52:33","guid":{"rendered":"https:\/\/css-tricks.com\/?p=248960"},"modified":"2016-12-19T06:52:33","modified_gmt":"2016-12-19T13:52:33","slug":"scaling-responsive-animations","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/scaling-responsive-animations\/","title":{"rendered":"Scaling Responsive Animations"},"content":{"rendered":"<p>Scaling our websites and applications so that they look great on every screen can be difficult. A big portion of that difficulty can be trying to get specific components, particularly ones that have pieces that have to stay a certain size (like animations), to look good regardless of the screen size. In this post, we'll cover how to help keep our responsive animations sized the way we want them.<\/p>\n<p><!--more--><\/p>\n<p>Before we get into specific techniques, there are a couple basic guidelines we want to keep in mind:<\/p>\n<h3>Guidelines for scaling responsive animations<\/h3>\n<h4>1. Size the animations based on a container<\/h4>\n<p>Whether we're using responsive or adaptive scaling (see below), we should try to size animations based on the container's sizing. In responsive scaling this is simple enough, but in adaptive scaling we have to look to <a href=\"https:\/\/www.smashingmagazine.com\/2016\/07\/how-i-ended-up-with-element-queries-and-how-you-can-use-them-today\/\">element (container) queries<\/a>. The only exception is if we know that in every circumstance the element is going to be positioned and sized relative to the viewport. Even so, it might be wise to size each piece based on a container in case we change our minds later.<\/p>\n<p>There have been times where I've finished polishing an animation exactly the way I want only to realize that it only works for that particular screen size. Those times have included making mistakes like <a href=\"http:\/\/codepen.io\/Zeaklous\/pen\/LbXabR\">using absolute units<\/a> (like <code>px<\/code>), <a href=\"http:\/\/codepen.io\/Zeaklous\/pen\/xRQBgZ\">only viewing it in one screen size<\/a>, <a href=\"http:\/\/codepen.io\/Zeaklous\/pen\/WoYmRa\">using responsive units but failing to check extreme dimensions<\/a>, and a couple other occasions where I had to go back and completely refactor my approach. Sizing animations relative to the parent elements helps prevent that from happening, as does the following point:<\/p>\n<h4>2. Know the environments in which it will be used<\/h4>\n<p>Will the animation be a module that is repeated across multiple parts of your application? Is it only going to be used for a page loader initially? Does it need to scale at all? Keeping this in mind can help determine the method in which an animation should be scaled and keep you from wasting effort.<\/p>\n<hr>\n<p>Now, let's look at the three most important ways that we can scale animations: scaling with responsive units, proportional scaling, and adaptive scaling.<\/p>\n<h3>Scaling with responsive units<\/h3>\n<h4>Size pieces based on the parent<\/h4>\n<p>When we use responsive units like <code>%<\/code> or <code>em<\/code>, our animations automatically resize themselves based on the parent because their values change as their parent's do. <\/p>\n<ul>\n<li>In the case of percentages, the child's width value is set by the parent's value for the property, multiplied by the percent value set on the child.<\/li>\n<li>In the case of <code>em<\/code>s, it looks at the parent's <code>font-size<\/code> which determines the child's size values, multiplied by the number of <code>em<\/code>s.<\/li>\n<\/ul>\n<p>This allows us to make sure that each piece of our responsive animation retains the behavior we want with respect to each other.<\/p>\n<h4>Sizing containers based on the viewport<\/h4>\n<p>From there, if we size our containers relative to the viewport, our responsive pieces will then end up resizing themselves based on the viewport as well.<\/p>\n<p>We could use percents to size our containers based on the viewport, but that often requires setting something like <code>html, body { height: 100%; }<\/code> and making sure that the parent is sized with respect to the body, which may not always be the case with nesting. Adding this new rule can also affect other style changes.<\/p>\n<p>Alternatively, we can use <em>viewport units<\/em>, which sizes the container based on the viewport regardless of how deeply it is nested. One thing to keep in mind is that <a href=\"http:\/\/caniuse.com\/#feat=viewport-units\">support for viewport units<\/a> is not perfect, though it's definitely in a state where it can be used for most projects.<\/p>\n<p>I tend to use solely responsive units as a scalar for animations when it's a really simple animation, such as <a href=\"http:\/\/codepen.io\/Zeaklous\/pen\/zntsb\">this illusion<\/a>. Most the time it requires a pairing of responsive units with an approach from below to keep the animation proportional.<\/p>\n<h3>Proportional scaling<\/h3>\n<p>There are three main ways we can keep our responsive animation proportional while scaling it.<\/p>\n<h4>1. Size based on the width<\/h4>\n<p>To keep an element sized based on the width of the container, we can use the following approach:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.container {\r\n  height: 0;\r\n  padding-top: 100%;\r\n}<\/code><\/pre>\n<p data-height=\"400\" data-theme-id=\"0\" data-slug-hash=\"FeInH\" data-default-tab=\"css,result\" data-user=\"Zeaklous\" data-embed-version=\"2\" data-pen-title=\"Infinite Mountains CSS\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/Zeaklous\/pen\/FeInH\/\">Infinite Mountains CSS<\/a> by Zach Saucier (<a href=\"http:\/\/codepen.io\/Zeaklous\">@Zeaklous<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>However, if you're sizing your container based on the viewport, a more straightforward approach would be to use <code>vw<\/code> <a href=\"http:\/\/codepen.io\/Zeaklous\/pen\/dOqJVB?editors=1100\">like so<\/a>, though it doesn't reach as far back regarding <a href=\"http:\/\/caniuse.com\/viewport-units\">support<\/a>.<\/p>\n<h4>2. Size based on the height<\/h4>\n<p>We can also size our container using the height by using <code>vh<\/code> as seen in <a href=\"http:\/\/codepen.io\/Zeaklous\/pen\/XNPVRY?editors=1100\">this demo<\/a>, but it is the least-used technique that I've seen. The only time I can recall doing something like this myself is when I used responsive units to create <a href=\"http:\/\/codepen.io\/Zeaklous\/pen\/AvJtC\">this loader<\/a>, but even then I didn't use a container or viewport units.<\/p>\n<h4>3. Size based on the larger dimension<\/h4>\n<p>Sizing based on the larger dimension is by far the most common way I size my responsive animations, especially <a href=\"http:\/\/codepen.io\/collection\/twhae\/\">my visualizations<\/a>, because I almost always want all of my responsive animations to be seen entirely. This method ensures that that happens.<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.container {\r\n  max-width: 100vh;\r\n  max-height: 100%;\r\n  margin: 0 auto;\r\n  overflow: hidden;\r\n}\r\n.container::before {\r\n  content: \"\";\r\n  display: block;\r\n  margin-top: 100%;\r\n}<\/code><\/pre>\n<p data-height=\"400\" data-theme-id=\"0\" data-slug-hash=\"rsitf\" data-default-tab=\"css,result\" data-user=\"Zeaklous\" data-embed-version=\"2\" data-pen-title=\"Swirling dots\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/Zeaklous\/pen\/rsitf\/\">Swirling dots<\/a> by Zach Saucier (<a href=\"http:\/\/codepen.io\/Zeaklous\">@Zeaklous<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<p>This technique doesn't make use of the <code>vmax<\/code> unit, so any browser that <a href=\"http:\/\/caniuse.com\/#feat=viewport-units\">supports viewport units<\/a> (back to IE9) can use it. However, it does make use of a pseudo element (unless you want to use a real element) which should be kept in mind.<\/p>\n<p>If you are scaling the container on the viewport itself and can use viewport units, it's very simple to size based on the larger dimension. All you need is:<\/p>\n<pre rel=\"CSS\"><code class=\"language-css\">.container {\r\n  width: 100vmin;\r\n  height: 100vmin;\r\n}<\/code><\/pre>\n<figure><img src=\"http:\/\/d.pr\/i\/QD64\/2gIc2F9i+\"><figcaption><a href=\"http:\/\/codepen.io\/Zeaklous\/pen\/NbLNEo?editors=1100\">Here's a demo<\/a> for that.<\/figcaption><\/figure>\n<p>This approach can be done <em>only<\/em> when the animation is sized with respect to the viewport, not some smaller container.<\/p>\n<h3>Adaptive scaling<\/h3>\n<p>Adaptive scaling is switching between variations at specific breakpoints. See <a href=\"https:\/\/twitter.com\/geoffreygraham\">Geoff Graham<\/a>'s CSS-Tricks <a href=\"https:\/\/css-tricks.com\/the-difference-between-responsive-and-adaptive-design\/\">article on the distinction<\/a> between responsive and adaptive scaling.<\/p>\n<p>At times we may want at least part of our responsive animations to change how they're sized at a particular screen size. This is most commonly done when text or thin lines are used, though sometimes it's also applicable when there are a lot of intricacies that would look busy when made smaller. Logos are probably <a href=\"https:\/\/www.google.com\/search?q=responsive++adaptive+logo&source=lnms&tbm=isch&sa=X&ved=0ahUKEwiGjpSct-XQAhWCOyYKHXXECgMQ_AUICCgB&biw=1920&bih=950\">the most commonly adapted elements<\/a> because they need to be precise.<\/p>\n<p>There's no one way to make something adaptive, but I approach it <a href=\"https:\/\/zachsaucier.com\/blog\/blog\/2014\/08\/11\/responsive-design-primer\/\">in the same way<\/a> I do responsive design: by scaling my animation until something starts to look ugly, then add a breakpoint to fix what looks ugly.<\/p>\n<p>Sometimes it's appropriate to mix responsive pieces with adaptive ones, such as in the Pen below. The top part is responsive but the text is adaptive to prevent text scaling from becoming ugly during in-between font sizes.<\/p>\n<p data-height=\"400\" data-theme-id=\"0\" data-slug-hash=\"xawps\" data-default-tab=\"css,result\" data-user=\"Zeaklous\" data-embed-version=\"2\" data-pen-title=\"Breakout\" class=\"codepen\">See the Pen <a href=\"http:\/\/codepen.io\/Zeaklous\/pen\/xawps\/\">Breakout<\/a> by Zach Saucier (<a href=\"http:\/\/codepen.io\/Zeaklous\">@Zeaklous<\/a>) on <a href=\"http:\/\/codepen.io\">CodePen<\/a>.<\/p>\n<h3>A note on SVG<\/h3>\n<p>SVG can make use of any of the approaches outlined above. Most commonly, I treat SVG like a modular animation and make sure my SVG is sized by the SVG element itself, mostly treating it as a container based on the larger dimension, as covered above. This way it makes use of the vector nature of SVGs, allowing it to scale to be as large as it needs to be.<\/p>\n<p>For more information on how to scale SVG specifically, check out <a href=\"https:\/\/twitter.com\/ameliasbrain\">Amelia Bellay-Royds<\/a>' post on <a href=\"https:\/\/css-tricks.com\/scale-svg\/\">scaling SVG components<\/a> here on CSS-Tricks or <a href=\"https:\/\/twitter.com\/SaraSoueidan\">Sara Soueidan<\/a>'s Codrops post on <a href=\"http:\/\/tympanus.net\/codrops\/2014\/08\/19\/making-svgs-responsive-with-css\/\">making SVG responsive<\/a>.<\/p>\n<h3>Make it look great in all contexts<\/h3>\n<p>With a bit of planning, animations can work just as well at small sizes as they do at large sizes. Don\u2019t use pixel units, and make sure every width, height, and distance value are defined based on one or two variables based on the container\/viewport dimensions or by font size.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Scaling our websites and applications so that they look great on every screen can be difficult. A big portion of that difficulty can be trying to get specific components, particularly ones that have pieces that have to stay a certain size (like animations), to look good regardless of the screen size. In this post, we&#8217;ll [&hellip;]<\/p>\n","protected":false},"author":246753,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[4],"tags":[612,643],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/248960"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/246753"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=248960"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/248960\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=248960"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=248960"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=248960"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249098,"date":"2016-12-17T19:12:33","date_gmt":"2016-12-18T02:12:33","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249098"},"modified":"2016-12-17T19:12:33","modified_gmt":"2016-12-18T02:12:33","slug":"20-years-css","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/20-years-css\/","title":{"rendered":"20 Years of CSS"},"content":{"rendered":"<p>Bert Bos, noting <em>today<\/em> as quite a notable day:<\/p>\n<blockquote><p>On December 17, 1996, W3C published <a href=\"https:\/\/www.w3.org\/TR\/REC-CSS1-961217\">the first standard for CSS<\/a>.<\/p><\/blockquote>\n<p>Very interesting to see what historic points made the cut for the timeline. The Zen Garden, acid tests, preprocessors... good times!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Bert Bos, noting today as quite a notable day: On December 17, 1996, W3C published the first standard for CSS. Very interesting to see what historic points made the cut for the timeline. The Zen Garden, acid tests, preprocessors&#8230; good times!<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[787,654],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249098"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249098"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249098\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249098"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249098"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249098"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":249080,"date":"2016-12-16T06:53:34","date_gmt":"2016-12-16T13:53:34","guid":{"rendered":"https:\/\/css-tricks.com\/?p=249080"},"modified":"2016-12-16T06:53:34","modified_gmt":"2016-12-16T13:53:34","slug":"alternatives-placeholder-text","status":"publish","type":"post","link":"https:\/\/css-tricks.com\/alternatives-placeholder-text\/","title":{"rendered":"Alternatives to Placeholder Text"},"content":{"rendered":"<p>Andrew Coyle on when to use <code>&lt;input placeholder&gt;<\/code>:<\/p>\n<ul>\n<li>Don't use them as a label<\/li>\n<li>Don't use them as a secondary label<\/li>\n<li>Don't use them as example input<\/li>\n<li>Don't use them as helper text<\/li>\n<\/ul>\n<p>Which amounts to pretty much: \"Don't use them\". Notice there are no examples of good use cases, and even the examples in the \"Do\" graphics just say \"Placeholder Text\", which isn't exactly demonstrative of usefulness. <\/p>\n<p>I wonder if placeholder text will fall completely out of favor.<\/p>\n<p>It reminds me of <a href=\"https:\/\/css-tricks.com\/float-labels-css\/\">float labels<\/a>. Float labels were a fun little fling, but they aren't actually useful. The reason you'd reach for them is when you're so space-limited that you can't show a regular label <em>beside<\/em> the input. But you can't actually ever remove the label, just move it. So if the label is still there and readable, why not just leave it there the whole time?<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Andrew Coyle on when to use &lt;input placeholder&gt;: Don&#8217;t use them as a label Don&#8217;t use them as a secondary label Don&#8217;t use them as example input Don&#8217;t use them as helper text Which amounts to pretty much: &#8220;Don&#8217;t use them&#8221;. Notice there are no examples of good use cases, and even the examples in [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[17],"tags":[595,966],"_links":{"self":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249080"}],"collection":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/comments?post=249080"}],"version-history":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/posts\/249080\/revisions"}],"wp:attachment":[{"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/media?parent=249080"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/categories?post=249080"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/css-tricks.com\/wp-json\/wp\/v2\/tags?post=249080"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}]